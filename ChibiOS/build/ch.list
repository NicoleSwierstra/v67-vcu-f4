
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	080069d1 	.word	0x080069d1
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08002061 	.word	0x08002061
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	08001e31 	.word	0x08001e31
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4826      	ldr	r0, [pc, #152]	; (800027c <_crt0_entry+0x9c>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4825      	ldr	r0, [pc, #148]	; (8000280 <_crt0_entry+0xa0>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4825      	ldr	r0, [pc, #148]	; (8000284 <_crt0_entry+0xa4>)
                ldr     r1, =SCB_VTOR
 80001f0:	4925      	ldr	r1, [pc, #148]	; (8000288 <_crt0_entry+0xa8>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]
                movt    r1, #SCB_FPDSCR >> 16
                str     r0, [r1]
#endif

                /* CONTROL register initialization as configured.*/
                movs    r0, #CRT0_CONTROL_INIT
 80001f4:	2002      	movs	r0, #2
                msr     CONTROL, r0
 80001f6:	f380 8814 	msr	CONTROL, r0
                isb
 80001fa:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 80001fe:	f001 fdc7 	bl	8001d90 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000202:	f001 ffe5 	bl	80021d0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000206:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800020a:	4920      	ldr	r1, [pc, #128]	; (800028c <_crt0_entry+0xac>)
                ldr     r2, =__main_stack_end__
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <_crt0_entry+0x9c>)
.Lmsloop:
                cmp     r1, r2
 800020e:	4291      	cmp	r1, r2
                itt     lo
 8000210:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000212:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lmsloop
 8000216:	e7fa      	bcc.n	800020e <_crt0_entry+0x2e>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000218:	491d      	ldr	r1, [pc, #116]	; (8000290 <_crt0_entry+0xb0>)
                ldr     r2, =__process_stack_end__
 800021a:	4a19      	ldr	r2, [pc, #100]	; (8000280 <_crt0_entry+0xa0>)
.Lpsloop:
                cmp     r1, r2
 800021c:	4291      	cmp	r1, r2
                itt     lo
 800021e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000220:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lpsloop
 8000224:	e7fa      	bcc.n	800021c <_crt0_entry+0x3c>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 8000226:	491b      	ldr	r1, [pc, #108]	; (8000294 <_crt0_entry+0xb4>)
                ldr     r2, =__data_base__
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <_crt0_entry+0xb8>)
                ldr     r3, =__data_end__
 800022a:	4b1c      	ldr	r3, [pc, #112]	; (800029c <_crt0_entry+0xbc>)
.Ldloop:
                cmp     r2, r3
 800022c:	429a      	cmp	r2, r3
                ittt    lo
 800022e:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000230:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000234:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     .Ldloop
 8000238:	e7f8      	bcc.n	800022c <_crt0_entry+0x4c>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 800023a:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 800023c:	4918      	ldr	r1, [pc, #96]	; (80002a0 <_crt0_entry+0xc0>)
                ldr     r2, =__bss_end__
 800023e:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <_crt0_entry+0xc4>)
.Lbloop:
                cmp     r1, r2
 8000240:	4291      	cmp	r1, r2
                itt     lo
 8000242:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000244:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lbloop
 8000248:	e7fa      	bcc.n	8000240 <_crt0_entry+0x60>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 800024a:	f001 fdb9 	bl	8001dc0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800024e:	f001 fda7 	bl	8001da0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000252:	4c15      	ldr	r4, [pc, #84]	; (80002a8 <_crt0_entry+0xc8>)
                ldr     r5, =__init_array_end__
 8000254:	4d15      	ldr	r5, [pc, #84]	; (80002ac <_crt0_entry+0xcc>)
.Linitloop:
                cmp     r4, r5
 8000256:	42ac      	cmp	r4, r5
                bge     .Lendinitloop
 8000258:	da03      	bge.n	8000262 <_crt0_entry+0x82>
                ldr     r1, [r4], #4
 800025a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800025e:	4788      	blx	r1
                b       .Linitloop
 8000260:	e7f9      	b.n	8000256 <_crt0_entry+0x76>
.Lendinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000262:	f00b f8f5 	bl	800b450 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 8000266:	4c12      	ldr	r4, [pc, #72]	; (80002b0 <_crt0_entry+0xd0>)
                ldr     r5, =__fini_array_end__
 8000268:	4d12      	ldr	r5, [pc, #72]	; (80002b4 <_crt0_entry+0xd4>)
.Lfiniloop:
                cmp     r4, r5
 800026a:	42ac      	cmp	r4, r5
                bge     .Lendfiniloop
 800026c:	da03      	bge.n	8000276 <_crt0_entry+0x96>
                ldr     r1, [r4], #4
 800026e:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000272:	4788      	blx	r1
                b       .Lfiniloop
 8000274:	e7f9      	b.n	800026a <_crt0_entry+0x8a>
.Lendfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000276:	f001 bd9b 	b.w	8001db0 <__default_exit>
 800027a:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 800027c:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000280:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000284:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000288:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	0800e118 	.word	0x0800e118
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	200008dc 	.word	0x200008dc
                ldr     r1, =__bss_base__
 80002a0:	200008e0 	.word	0x200008e0
                ldr     r2, =__bss_end__
 80002a4:	20002100 	.word	0x20002100
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f005 fc68 	bl	8005bb0 <chThdExit>
1:              b       1b
 80002e0:	e7fe      	b.n	80002e0 <__port_thread_start+0x10>

080002e2 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 80002e2:	f002 f98d 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>

080002e6 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
1:              b       1b
 80002e8:	e7fe      	b.n	80002e8 <__port_exit_from_isr+0x2>
	...

080002ec <memcmp>:
 80002ec:	2a03      	cmp	r2, #3
 80002ee:	b510      	push	{r4, lr}
 80002f0:	d917      	bls.n	8000322 <memcmp+0x36>
 80002f2:	ea40 0c01 	orr.w	ip, r0, r1
 80002f6:	f01c 0f03 	tst.w	ip, #3
 80002fa:	4604      	mov	r4, r0
 80002fc:	460b      	mov	r3, r1
 80002fe:	d123      	bne.n	8000348 <memcmp+0x5c>
 8000300:	4619      	mov	r1, r3
 8000302:	4620      	mov	r0, r4
 8000304:	f8d1 e000 	ldr.w	lr, [r1]
 8000308:	f8d0 c000 	ldr.w	ip, [r0]
 800030c:	45f4      	cmp	ip, lr
 800030e:	f104 0404 	add.w	r4, r4, #4
 8000312:	f103 0304 	add.w	r3, r3, #4
 8000316:	d117      	bne.n	8000348 <memcmp+0x5c>
 8000318:	3a04      	subs	r2, #4
 800031a:	2a03      	cmp	r2, #3
 800031c:	4620      	mov	r0, r4
 800031e:	4619      	mov	r1, r3
 8000320:	d8ee      	bhi.n	8000300 <memcmp+0x14>
 8000322:	1e54      	subs	r4, r2, #1
 8000324:	b1a2      	cbz	r2, 8000350 <memcmp+0x64>
 8000326:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800032a:	3901      	subs	r1, #1
 800032c:	e001      	b.n	8000332 <memcmp+0x46>
 800032e:	18c3      	adds	r3, r0, r3
 8000330:	d00c      	beq.n	800034c <memcmp+0x60>
 8000332:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8000336:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800033a:	4596      	cmp	lr, r2
 800033c:	eba4 030c 	sub.w	r3, r4, ip
 8000340:	d0f5      	beq.n	800032e <memcmp+0x42>
 8000342:	ebae 0002 	sub.w	r0, lr, r2
 8000346:	bd10      	pop	{r4, pc}
 8000348:	1e54      	subs	r4, r2, #1
 800034a:	e7ec      	b.n	8000326 <memcmp+0x3a>
 800034c:	4618      	mov	r0, r3
 800034e:	bd10      	pop	{r4, pc}
 8000350:	4610      	mov	r0, r2
 8000352:	bd10      	pop	{r4, pc}

08000354 <memcpy>:
 8000354:	4684      	mov	ip, r0
 8000356:	ea41 0300 	orr.w	r3, r1, r0
 800035a:	f013 0303 	ands.w	r3, r3, #3
 800035e:	d16d      	bne.n	800043c <memcpy+0xe8>
 8000360:	3a40      	subs	r2, #64	; 0x40
 8000362:	d341      	bcc.n	80003e8 <memcpy+0x94>
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d8:	f840 3b04 	str.w	r3, [r0], #4
 80003dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e0:	f840 3b04 	str.w	r3, [r0], #4
 80003e4:	3a40      	subs	r2, #64	; 0x40
 80003e6:	d2bd      	bcs.n	8000364 <memcpy+0x10>
 80003e8:	3230      	adds	r2, #48	; 0x30
 80003ea:	d311      	bcc.n	8000410 <memcpy+0xbc>
 80003ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f0:	f840 3b04 	str.w	r3, [r0], #4
 80003f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f8:	f840 3b04 	str.w	r3, [r0], #4
 80003fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000400:	f840 3b04 	str.w	r3, [r0], #4
 8000404:	f851 3b04 	ldr.w	r3, [r1], #4
 8000408:	f840 3b04 	str.w	r3, [r0], #4
 800040c:	3a10      	subs	r2, #16
 800040e:	d2ed      	bcs.n	80003ec <memcpy+0x98>
 8000410:	320c      	adds	r2, #12
 8000412:	d305      	bcc.n	8000420 <memcpy+0xcc>
 8000414:	f851 3b04 	ldr.w	r3, [r1], #4
 8000418:	f840 3b04 	str.w	r3, [r0], #4
 800041c:	3a04      	subs	r2, #4
 800041e:	d2f9      	bcs.n	8000414 <memcpy+0xc0>
 8000420:	3204      	adds	r2, #4
 8000422:	d008      	beq.n	8000436 <memcpy+0xe2>
 8000424:	07d2      	lsls	r2, r2, #31
 8000426:	bf1c      	itt	ne
 8000428:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800042c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000430:	d301      	bcc.n	8000436 <memcpy+0xe2>
 8000432:	880b      	ldrh	r3, [r1, #0]
 8000434:	8003      	strh	r3, [r0, #0]
 8000436:	4660      	mov	r0, ip
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	2a08      	cmp	r2, #8
 800043e:	d313      	bcc.n	8000468 <memcpy+0x114>
 8000440:	078b      	lsls	r3, r1, #30
 8000442:	d08d      	beq.n	8000360 <memcpy+0xc>
 8000444:	f010 0303 	ands.w	r3, r0, #3
 8000448:	d08a      	beq.n	8000360 <memcpy+0xc>
 800044a:	f1c3 0304 	rsb	r3, r3, #4
 800044e:	1ad2      	subs	r2, r2, r3
 8000450:	07db      	lsls	r3, r3, #31
 8000452:	bf1c      	itt	ne
 8000454:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000458:	f800 3b01 	strbne.w	r3, [r0], #1
 800045c:	d380      	bcc.n	8000360 <memcpy+0xc>
 800045e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000462:	f820 3b02 	strh.w	r3, [r0], #2
 8000466:	e77b      	b.n	8000360 <memcpy+0xc>
 8000468:	3a04      	subs	r2, #4
 800046a:	d3d9      	bcc.n	8000420 <memcpy+0xcc>
 800046c:	3a01      	subs	r2, #1
 800046e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000472:	f800 3b01 	strb.w	r3, [r0], #1
 8000476:	d2f9      	bcs.n	800046c <memcpy+0x118>
 8000478:	780b      	ldrb	r3, [r1, #0]
 800047a:	7003      	strb	r3, [r0, #0]
 800047c:	784b      	ldrb	r3, [r1, #1]
 800047e:	7043      	strb	r3, [r0, #1]
 8000480:	788b      	ldrb	r3, [r1, #2]
 8000482:	7083      	strb	r3, [r0, #2]
 8000484:	4660      	mov	r0, ip
 8000486:	4770      	bx	lr

08000488 <memset>:
 8000488:	0783      	lsls	r3, r0, #30
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	d048      	beq.n	8000520 <memset+0x98>
 800048e:	1e54      	subs	r4, r2, #1
 8000490:	2a00      	cmp	r2, #0
 8000492:	d03f      	beq.n	8000514 <memset+0x8c>
 8000494:	b2ca      	uxtb	r2, r1
 8000496:	4603      	mov	r3, r0
 8000498:	e001      	b.n	800049e <memset+0x16>
 800049a:	3c01      	subs	r4, #1
 800049c:	d33a      	bcc.n	8000514 <memset+0x8c>
 800049e:	f803 2b01 	strb.w	r2, [r3], #1
 80004a2:	079d      	lsls	r5, r3, #30
 80004a4:	d1f9      	bne.n	800049a <memset+0x12>
 80004a6:	2c03      	cmp	r4, #3
 80004a8:	d92d      	bls.n	8000506 <memset+0x7e>
 80004aa:	b2cd      	uxtb	r5, r1
 80004ac:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80004b0:	2c0f      	cmp	r4, #15
 80004b2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80004b6:	d936      	bls.n	8000526 <memset+0x9e>
 80004b8:	f1a4 0210 	sub.w	r2, r4, #16
 80004bc:	f022 0c0f 	bic.w	ip, r2, #15
 80004c0:	f103 0e20 	add.w	lr, r3, #32
 80004c4:	44e6      	add	lr, ip
 80004c6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80004ca:	f103 0210 	add.w	r2, r3, #16
 80004ce:	e942 5504 	strd	r5, r5, [r2, #-16]
 80004d2:	e942 5502 	strd	r5, r5, [r2, #-8]
 80004d6:	3210      	adds	r2, #16
 80004d8:	4572      	cmp	r2, lr
 80004da:	d1f8      	bne.n	80004ce <memset+0x46>
 80004dc:	f10c 0201 	add.w	r2, ip, #1
 80004e0:	f014 0f0c 	tst.w	r4, #12
 80004e4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80004e8:	f004 0c0f 	and.w	ip, r4, #15
 80004ec:	d013      	beq.n	8000516 <memset+0x8e>
 80004ee:	f1ac 0304 	sub.w	r3, ip, #4
 80004f2:	f023 0303 	bic.w	r3, r3, #3
 80004f6:	3304      	adds	r3, #4
 80004f8:	4413      	add	r3, r2
 80004fa:	f842 5b04 	str.w	r5, [r2], #4
 80004fe:	4293      	cmp	r3, r2
 8000500:	d1fb      	bne.n	80004fa <memset+0x72>
 8000502:	f00c 0403 	and.w	r4, ip, #3
 8000506:	b12c      	cbz	r4, 8000514 <memset+0x8c>
 8000508:	b2ca      	uxtb	r2, r1
 800050a:	441c      	add	r4, r3
 800050c:	f803 2b01 	strb.w	r2, [r3], #1
 8000510:	429c      	cmp	r4, r3
 8000512:	d1fb      	bne.n	800050c <memset+0x84>
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	4664      	mov	r4, ip
 8000518:	4613      	mov	r3, r2
 800051a:	2c00      	cmp	r4, #0
 800051c:	d1f4      	bne.n	8000508 <memset+0x80>
 800051e:	e7f9      	b.n	8000514 <memset+0x8c>
 8000520:	4603      	mov	r3, r0
 8000522:	4614      	mov	r4, r2
 8000524:	e7bf      	b.n	80004a6 <memset+0x1e>
 8000526:	461a      	mov	r2, r3
 8000528:	46a4      	mov	ip, r4
 800052a:	e7e0      	b.n	80004ee <memset+0x66>
	...
 8000540:	eba2 0003 	sub.w	r0, r2, r3
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <strcmp>:
 8000548:	7802      	ldrb	r2, [r0, #0]
 800054a:	780b      	ldrb	r3, [r1, #0]
 800054c:	2a01      	cmp	r2, #1
 800054e:	bf28      	it	cs
 8000550:	429a      	cmpcs	r2, r3
 8000552:	d1f5      	bne.n	8000540 <memset+0xb8>
 8000554:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000558:	ea40 0401 	orr.w	r4, r0, r1
 800055c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000560:	f06f 0c00 	mvn.w	ip, #0
 8000564:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000568:	b312      	cbz	r2, 80005b0 <strcmp+0x68>
 800056a:	ea80 0401 	eor.w	r4, r0, r1
 800056e:	f014 0f07 	tst.w	r4, #7
 8000572:	d16a      	bne.n	800064a <strcmp+0x102>
 8000574:	f000 0407 	and.w	r4, r0, #7
 8000578:	f020 0007 	bic.w	r0, r0, #7
 800057c:	f004 0503 	and.w	r5, r4, #3
 8000580:	f021 0107 	bic.w	r1, r1, #7
 8000584:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000588:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800058c:	f014 0f04 	tst.w	r4, #4
 8000590:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000594:	fa0c f405 	lsl.w	r4, ip, r5
 8000598:	ea62 0204 	orn	r2, r2, r4
 800059c:	ea66 0604 	orn	r6, r6, r4
 80005a0:	d00a      	beq.n	80005b8 <strcmp+0x70>
 80005a2:	ea63 0304 	orn	r3, r3, r4
 80005a6:	4662      	mov	r2, ip
 80005a8:	ea67 0704 	orn	r7, r7, r4
 80005ac:	4666      	mov	r6, ip
 80005ae:	e003      	b.n	80005b8 <strcmp+0x70>
 80005b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80005b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80005b8:	fa82 f54c 	uadd8	r5, r2, ip
 80005bc:	ea82 0406 	eor.w	r4, r2, r6
 80005c0:	faa4 f48c 	sel	r4, r4, ip
 80005c4:	bb6c      	cbnz	r4, 8000622 <strcmp+0xda>
 80005c6:	fa83 f54c 	uadd8	r5, r3, ip
 80005ca:	ea83 0507 	eor.w	r5, r3, r7
 80005ce:	faa5 f58c 	sel	r5, r5, ip
 80005d2:	b995      	cbnz	r5, 80005fa <strcmp+0xb2>
 80005d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80005d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80005dc:	fa82 f54c 	uadd8	r5, r2, ip
 80005e0:	ea82 0406 	eor.w	r4, r2, r6
 80005e4:	faa4 f48c 	sel	r4, r4, ip
 80005e8:	fa83 f54c 	uadd8	r5, r3, ip
 80005ec:	ea83 0507 	eor.w	r5, r3, r7
 80005f0:	faa5 f58c 	sel	r5, r5, ip
 80005f4:	4325      	orrs	r5, r4
 80005f6:	d0db      	beq.n	80005b0 <strcmp+0x68>
 80005f8:	b99c      	cbnz	r4, 8000622 <strcmp+0xda>
 80005fa:	ba2d      	rev	r5, r5
 80005fc:	fab5 f485 	clz	r4, r5
 8000600:	f024 0407 	bic.w	r4, r4, #7
 8000604:	fa27 f104 	lsr.w	r1, r7, r4
 8000608:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800060c:	fa23 f304 	lsr.w	r3, r3, r4
 8000610:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000614:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000618:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800061c:	eba0 0001 	sub.w	r0, r0, r1
 8000620:	4770      	bx	lr
 8000622:	ba24      	rev	r4, r4
 8000624:	fab4 f484 	clz	r4, r4
 8000628:	f024 0407 	bic.w	r4, r4, #7
 800062c:	fa26 f104 	lsr.w	r1, r6, r4
 8000630:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000634:	fa22 f204 	lsr.w	r2, r2, r4
 8000638:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800063c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000640:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000644:	eba0 0001 	sub.w	r0, r0, r1
 8000648:	4770      	bx	lr
 800064a:	f014 0f03 	tst.w	r4, #3
 800064e:	d13c      	bne.n	80006ca <strcmp+0x182>
 8000650:	f010 0403 	ands.w	r4, r0, #3
 8000654:	d128      	bne.n	80006a8 <strcmp+0x160>
 8000656:	f850 2b08 	ldr.w	r2, [r0], #8
 800065a:	f851 3b08 	ldr.w	r3, [r1], #8
 800065e:	fa82 f54c 	uadd8	r5, r2, ip
 8000662:	ea82 0503 	eor.w	r5, r2, r3
 8000666:	faa5 f58c 	sel	r5, r5, ip
 800066a:	b95d      	cbnz	r5, 8000684 <strcmp+0x13c>
 800066c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000674:	fa82 f54c 	uadd8	r5, r2, ip
 8000678:	ea82 0503 	eor.w	r5, r2, r3
 800067c:	faa5 f58c 	sel	r5, r5, ip
 8000680:	2d00      	cmp	r5, #0
 8000682:	d0e8      	beq.n	8000656 <strcmp+0x10e>
 8000684:	ba2d      	rev	r5, r5
 8000686:	fab5 f485 	clz	r4, r5
 800068a:	f024 0407 	bic.w	r4, r4, #7
 800068e:	fa23 f104 	lsr.w	r1, r3, r4
 8000692:	fa22 f204 	lsr.w	r2, r2, r4
 8000696:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800069a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800069e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006a2:	eba0 0001 	sub.w	r0, r0, r1
 80006a6:	4770      	bx	lr
 80006a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80006ac:	f020 0003 	bic.w	r0, r0, #3
 80006b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80006b4:	f021 0103 	bic.w	r1, r1, #3
 80006b8:	f851 3b08 	ldr.w	r3, [r1], #8
 80006bc:	fa0c f404 	lsl.w	r4, ip, r4
 80006c0:	ea62 0204 	orn	r2, r2, r4
 80006c4:	ea63 0304 	orn	r3, r3, r4
 80006c8:	e7c9      	b.n	800065e <strcmp+0x116>
 80006ca:	f010 0403 	ands.w	r4, r0, #3
 80006ce:	d01a      	beq.n	8000706 <strcmp+0x1be>
 80006d0:	eba1 0104 	sub.w	r1, r1, r4
 80006d4:	f020 0003 	bic.w	r0, r0, #3
 80006d8:	07e4      	lsls	r4, r4, #31
 80006da:	f850 2b04 	ldr.w	r2, [r0], #4
 80006de:	d006      	beq.n	80006ee <strcmp+0x1a6>
 80006e0:	d20f      	bcs.n	8000702 <strcmp+0x1ba>
 80006e2:	788b      	ldrb	r3, [r1, #2]
 80006e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80006e8:	1ae4      	subs	r4, r4, r3
 80006ea:	d106      	bne.n	80006fa <strcmp+0x1b2>
 80006ec:	b12b      	cbz	r3, 80006fa <strcmp+0x1b2>
 80006ee:	78cb      	ldrb	r3, [r1, #3]
 80006f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80006f4:	1ae4      	subs	r4, r4, r3
 80006f6:	d100      	bne.n	80006fa <strcmp+0x1b2>
 80006f8:	b91b      	cbnz	r3, 8000702 <strcmp+0x1ba>
 80006fa:	4620      	mov	r0, r4
 80006fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000700:	4770      	bx	lr
 8000702:	f101 0104 	add.w	r1, r1, #4
 8000706:	f850 2b04 	ldr.w	r2, [r0], #4
 800070a:	07cc      	lsls	r4, r1, #31
 800070c:	f021 0103 	bic.w	r1, r1, #3
 8000710:	f851 3b04 	ldr.w	r3, [r1], #4
 8000714:	d848      	bhi.n	80007a8 <strcmp+0x260>
 8000716:	d224      	bcs.n	8000762 <strcmp+0x21a>
 8000718:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800071c:	fa82 f54c 	uadd8	r5, r2, ip
 8000720:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000724:	faa5 f58c 	sel	r5, r5, ip
 8000728:	d10a      	bne.n	8000740 <strcmp+0x1f8>
 800072a:	b965      	cbnz	r5, 8000746 <strcmp+0x1fe>
 800072c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000730:	ea84 0402 	eor.w	r4, r4, r2
 8000734:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000738:	d10e      	bne.n	8000758 <strcmp+0x210>
 800073a:	f850 2b04 	ldr.w	r2, [r0], #4
 800073e:	e7eb      	b.n	8000718 <strcmp+0x1d0>
 8000740:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000744:	e055      	b.n	80007f2 <strcmp+0x2aa>
 8000746:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800074a:	d14d      	bne.n	80007e8 <strcmp+0x2a0>
 800074c:	7808      	ldrb	r0, [r1, #0]
 800074e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000752:	f1c0 0000 	rsb	r0, r0, #0
 8000756:	4770      	bx	lr
 8000758:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800075c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000760:	e047      	b.n	80007f2 <strcmp+0x2aa>
 8000762:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000766:	fa82 f54c 	uadd8	r5, r2, ip
 800076a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800076e:	faa5 f58c 	sel	r5, r5, ip
 8000772:	d10a      	bne.n	800078a <strcmp+0x242>
 8000774:	b965      	cbnz	r5, 8000790 <strcmp+0x248>
 8000776:	f851 3b04 	ldr.w	r3, [r1], #4
 800077a:	ea84 0402 	eor.w	r4, r4, r2
 800077e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000782:	d10c      	bne.n	800079e <strcmp+0x256>
 8000784:	f850 2b04 	ldr.w	r2, [r0], #4
 8000788:	e7eb      	b.n	8000762 <strcmp+0x21a>
 800078a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800078e:	e030      	b.n	80007f2 <strcmp+0x2aa>
 8000790:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000794:	d128      	bne.n	80007e8 <strcmp+0x2a0>
 8000796:	880b      	ldrh	r3, [r1, #0]
 8000798:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800079c:	e029      	b.n	80007f2 <strcmp+0x2aa>
 800079e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80007a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80007a6:	e024      	b.n	80007f2 <strcmp+0x2aa>
 80007a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80007ac:	fa82 f54c 	uadd8	r5, r2, ip
 80007b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80007b4:	faa5 f58c 	sel	r5, r5, ip
 80007b8:	d10a      	bne.n	80007d0 <strcmp+0x288>
 80007ba:	b965      	cbnz	r5, 80007d6 <strcmp+0x28e>
 80007bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80007c0:	ea84 0402 	eor.w	r4, r4, r2
 80007c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80007c8:	d109      	bne.n	80007de <strcmp+0x296>
 80007ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80007ce:	e7eb      	b.n	80007a8 <strcmp+0x260>
 80007d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80007d4:	e00d      	b.n	80007f2 <strcmp+0x2aa>
 80007d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80007da:	d105      	bne.n	80007e8 <strcmp+0x2a0>
 80007dc:	680b      	ldr	r3, [r1, #0]
 80007de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80007e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007e6:	e004      	b.n	80007f2 <strcmp+0x2aa>
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80007f0:	4770      	bx	lr
 80007f2:	ba12      	rev	r2, r2
 80007f4:	ba1b      	rev	r3, r3
 80007f6:	fa82 f44c 	uadd8	r4, r2, ip
 80007fa:	ea82 0403 	eor.w	r4, r2, r3
 80007fe:	faa4 f58c 	sel	r5, r4, ip
 8000802:	fab5 f485 	clz	r4, r5
 8000806:	fa02 f204 	lsl.w	r2, r2, r4
 800080a:	fa03 f304 	lsl.w	r3, r3, r4
 800080e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000812:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000816:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800081a:	4770      	bx	lr

0800081c <strncmp>:
 800081c:	b3a2      	cbz	r2, 8000888 <strncmp+0x6c>
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	ea40 0401 	orr.w	r4, r0, r1
 8000824:	07a4      	lsls	r4, r4, #30
 8000826:	4684      	mov	ip, r0
 8000828:	460b      	mov	r3, r1
 800082a:	d02a      	beq.n	8000882 <strncmp+0x66>
 800082c:	f89c 0000 	ldrb.w	r0, [ip]
 8000830:	780c      	ldrb	r4, [r1, #0]
 8000832:	4284      	cmp	r4, r0
 8000834:	d12f      	bne.n	8000896 <strncmp+0x7a>
 8000836:	2a01      	cmp	r2, #1
 8000838:	d00d      	beq.n	8000856 <strncmp+0x3a>
 800083a:	46e6      	mov	lr, ip
 800083c:	b160      	cbz	r0, 8000858 <strncmp+0x3c>
 800083e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8000842:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000846:	ea6f 030e 	mvn.w	r3, lr
 800084a:	42a0      	cmp	r0, r4
 800084c:	4413      	add	r3, r2
 800084e:	d122      	bne.n	8000896 <strncmp+0x7a>
 8000850:	eb1c 0303 	adds.w	r3, ip, r3
 8000854:	d1f2      	bne.n	800083c <strncmp+0x20>
 8000856:	2000      	movs	r0, #0
 8000858:	bd30      	pop	{r4, r5, pc}
 800085a:	6804      	ldr	r4, [r0, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	f853 5b04 	ldr.w	r5, [r3], #4
 8000862:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
 8000866:	42ac      	cmp	r4, r5
 8000868:	4684      	mov	ip, r0
 800086a:	ea2e 0e04 	bic.w	lr, lr, r4
 800086e:	f100 0004 	add.w	r0, r0, #4
 8000872:	d10b      	bne.n	800088c <strncmp+0x70>
 8000874:	3a04      	subs	r2, #4
 8000876:	4684      	mov	ip, r0
 8000878:	4619      	mov	r1, r3
 800087a:	d0ec      	beq.n	8000856 <strncmp+0x3a>
 800087c:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
 8000880:	d1e9      	bne.n	8000856 <strncmp+0x3a>
 8000882:	2a03      	cmp	r2, #3
 8000884:	d8e9      	bhi.n	800085a <strncmp+0x3e>
 8000886:	e7d1      	b.n	800082c <strncmp+0x10>
 8000888:	4610      	mov	r0, r2
 800088a:	4770      	bx	lr
 800088c:	f89c 0000 	ldrb.w	r0, [ip]
 8000890:	780c      	ldrb	r4, [r1, #0]
 8000892:	42a0      	cmp	r0, r4
 8000894:	d0d1      	beq.n	800083a <strncmp+0x1e>
 8000896:	1b00      	subs	r0, r0, r4
 8000898:	bd30      	pop	{r4, r5, pc}
 800089a:	bf00      	nop
 800089c:	0000      	movs	r0, r0
	...

080008a0 <_ctl.lto_priv.0>:
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
#endif
  }
  return HAL_RET_SUCCESS;
 80008a0:	2901      	cmp	r1, #1
}
 80008a2:	bf14      	ite	ne
 80008a4:	f06f 0013 	mvnne.w	r0, #19
 80008a8:	2000      	moveq	r0, #0
 80008aa:	4770      	bx	lr
 80008ac:	0000      	movs	r0, r0
	...

080008b0 <notify2.lto_priv.0>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80008b0:	4a02      	ldr	r2, [pc, #8]	; (80008bc <notify2.lto_priv.0+0xc>)
 80008b2:	68d3      	ldr	r3, [r2, #12]
 80008b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008b8:	60d3      	str	r3, [r2, #12]
}
 80008ba:	4770      	bx	lr
 80008bc:	40004400 	.word	0x40004400

080008c0 <__idle_thread.lto_priv.0>:
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 80008c0:	e7fe      	b.n	80008c0 <__idle_thread.lto_priv.0>
 80008c2:	bf00      	nop
	...

080008d0 <thd_poolfree.lto_priv.0>:
#endif /* CH_CFG_USE_HEAP == TRUE */

#if (CH_CFG_USE_MEMPOOLS == TRUE) || defined(__DOXYGEN__)
static void thd_poolfree(thread_t *tp) {

  chPoolFree((memory_pool_t *)tp->object, (void *)tp->wabase);
 80008d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80008d2:	6942      	ldr	r2, [r0, #20]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80008d4:	2130      	movs	r1, #48	; 0x30
 80008d6:	f381 8811 	msr	BASEPRI, r1
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	6011      	str	r1, [r2, #0]
 80008de:	2100      	movs	r1, #0
  mp->next = php;
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	f381 8811 	msr	BASEPRI, r1
}
 80008e6:	4770      	bx	lr
	...

080008f0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80008f0:	b410      	push	{r4}
 80008f2:	2330      	movs	r3, #48	; 0x30
 80008f4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <chCoreAllocFromTop+0x38>)
 80008fa:	685c      	ldr	r4, [r3, #4]
 80008fc:	4249      	negs	r1, r1
 80008fe:	1a20      	subs	r0, r4, r0
 8000900:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000902:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 8000904:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000906:	428a      	cmp	r2, r1
 8000908:	d307      	bcc.n	800091a <chCoreAllocFromTop+0x2a>
 800090a:	4294      	cmp	r4, r2
 800090c:	d305      	bcc.n	800091a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	2300      	movs	r3, #0
 8000912:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000916:	bc10      	pop	{r4}
 8000918:	4770      	bx	lr
    return NULL;
 800091a:	2000      	movs	r0, #0
 800091c:	2300      	movs	r3, #0
 800091e:	f383 8811 	msr	BASEPRI, r3
}
 8000922:	bc10      	pop	{r4}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000aa0 	.word	0x20000aa0
 800092c:	00000000 	.word	0x00000000

08000930 <__ch_delegate_fn0>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8000930:	6803      	ldr	r3, [r0, #0]
 8000932:	1d1a      	adds	r2, r3, #4
 8000934:	6002      	str	r2, [r0, #0]
  return fn0();
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4718      	bx	r3
 800093a:	bf00      	nop
 800093c:	0000      	movs	r0, r0
	...

08000940 <__ch_delegate_fn1>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000940:	6801      	ldr	r1, [r0, #0]
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000942:	4603      	mov	r3, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000944:	460a      	mov	r2, r1
 8000946:	1d08      	adds	r0, r1, #4
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000948:	b410      	push	{r4}
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 800094a:	6018      	str	r0, [r3, #0]
 800094c:	f852 4b08 	ldr.w	r4, [r2], #8
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  return fn1(p1);
 8000950:	6848      	ldr	r0, [r1, #4]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000952:	601a      	str	r2, [r3, #0]
  return fn1(p1);
 8000954:	4623      	mov	r3, r4
}
 8000956:	bc10      	pop	{r4}
  return fn1(p1);
 8000958:	4718      	bx	r3
 800095a:	bf00      	nop
 800095c:	0000      	movs	r0, r0
	...

08000960 <__ch_delegate_fn2>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000960:	6802      	ldr	r2, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000962:	b430      	push	{r4, r5}
 8000964:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000966:	1d11      	adds	r1, r2, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000968:	6850      	ldr	r0, [r2, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 800096a:	6019      	str	r1, [r3, #0]
 800096c:	6814      	ldr	r4, [r2, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
  return fn2(p1, p2);
 800096e:	6891      	ldr	r1, [r2, #8]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000970:	f102 050c 	add.w	r5, r2, #12
 8000974:	601d      	str	r5, [r3, #0]
  return fn2(p1, p2);
 8000976:	4623      	mov	r3, r4
}
 8000978:	bc30      	pop	{r4, r5}
  return fn2(p1, p2);
 800097a:	4718      	bx	r3
 800097c:	0000      	movs	r0, r0
	...

08000980 <__ch_delegate_fn3>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000980:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 8000982:	b430      	push	{r4, r5}
 8000984:	4602      	mov	r2, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000986:	1d1c      	adds	r4, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000988:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 800098c:	6014      	str	r4, [r2, #0]
 800098e:	681c      	ldr	r4, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 8000990:	f103 0510 	add.w	r5, r3, #16
 8000994:	6015      	str	r5, [r2, #0]
  return fn3(p1, p2, p3);
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	4623      	mov	r3, r4
}
 800099a:	bc30      	pop	{r4, r5}
  return fn3(p1, p2, p3);
 800099c:	4718      	bx	r3
 800099e:	bf00      	nop

080009a0 <__ch_delegate_fn4>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80009a0:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn4(va_list *argsp) {
 80009a2:	b430      	push	{r4, r5}
 80009a4:	4684      	mov	ip, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80009a6:	1d1c      	adds	r4, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80009a8:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80009ac:	68da      	ldr	r2, [r3, #12]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80009ae:	f8cc 4000 	str.w	r4, [ip]
 80009b2:	681c      	ldr	r4, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 80009b4:	f103 0514 	add.w	r5, r3, #20
 80009b8:	f8cc 5000 	str.w	r5, [ip]
  return fn4(p1, p2, p3, p4);
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	46a4      	mov	ip, r4
}
 80009c0:	bc30      	pop	{r4, r5}
  return fn4(p1, p2, p3, p4);
 80009c2:	4760      	bx	ip
	...

080009d0 <chCoreAllocAlignedI.lto_priv.0>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <chCoreAllocAlignedI.lto_priv.0+0x1c>)
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	4249      	negs	r1, r1
 80009d6:	1a10      	subs	r0, r2, r0
 80009d8:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009da:	6819      	ldr	r1, [r3, #0]
 80009dc:	4288      	cmp	r0, r1
 80009de:	d303      	bcc.n	80009e8 <chCoreAllocAlignedI.lto_priv.0+0x18>
 80009e0:	4282      	cmp	r2, r0
 80009e2:	d301      	bcc.n	80009e8 <chCoreAllocAlignedI.lto_priv.0+0x18>
  ch_memcore.topmem = prev;
 80009e4:	6058      	str	r0, [r3, #4]
  return p;
 80009e6:	4770      	bx	lr
    return NULL;
 80009e8:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80009ea:	4770      	bx	lr
 80009ec:	20000aa0 	.word	0x20000aa0

080009f0 <test_stream_putchar.lto_priv.0>:
/*===========================================================================*/

#if (TEST_CFG_CHIBIOS_SUPPORT == TRUE) || defined(__DOXYGEN__)
static int test_stream_putchar(int c) {

  streamPut(chtest.stream, (uint8_t)c);
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <test_stream_putchar.lto_priv.0+0x14>)
static int test_stream_putchar(int c) {
 80009f2:	b510      	push	{r4, lr}
 80009f4:	4604      	mov	r4, r0
  streamPut(chtest.stream, (uint8_t)c);
 80009f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80009f8:	6803      	ldr	r3, [r0, #0]
 80009fa:	b2e1      	uxtb	r1, r4
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	4798      	blx	r3

  return c;
}
 8000a00:	4620      	mov	r0, r4
 8000a02:	bd10      	pop	{r4, pc}
 8000a04:	20000ab4 	.word	0x20000ab4
	...

08000a10 <__test_assert_sequence>:
    return __test_fail(msg);
  }
  return false;
}

bool __test_assert_sequence(char *expected, const char *msg) {
 8000a10:	b470      	push	{r4, r5, r6}
  char *cp = chtest.tokens_buffer;

  while (cp < chtest.tokp) {
 8000a12:	4d0d      	ldr	r5, [pc, #52]	; (8000a48 <__test_assert_sequence+0x38>)
  char *cp = chtest.tokens_buffer;
 8000a14:	f105 0610 	add.w	r6, r5, #16
  while (cp < chtest.tokp) {
 8000a18:	68ec      	ldr	r4, [r5, #12]
  char *cp = chtest.tokens_buffer;
 8000a1a:	4633      	mov	r3, r6
  while (cp < chtest.tokp) {
 8000a1c:	e005      	b.n	8000a2a <__test_assert_sequence+0x1a>
    if (*cp++ != *expected++)
 8000a1e:	f813 cb01 	ldrb.w	ip, [r3], #1
 8000a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a26:	4594      	cmp	ip, r2
 8000a28:	d106      	bne.n	8000a38 <__test_assert_sequence+0x28>
  while (cp < chtest.tokp) {
 8000a2a:	429c      	cmp	r4, r3
 8000a2c:	d8f7      	bhi.n	8000a1e <__test_assert_sequence+0xe>
     return __test_fail(msg);
  }

  if (*expected) {
 8000a2e:	7800      	ldrb	r0, [r0, #0]
 8000a30:	b910      	cbnz	r0, 8000a38 <__test_assert_sequence+0x28>
  chtest.tokp = chtest.tokens_buffer;
 8000a32:	60ee      	str	r6, [r5, #12]
  }

  test_clear_tokens();

  return false;
}
 8000a34:	bc70      	pop	{r4, r5, r6}
 8000a36:	4770      	bx	lr
  chtest.global_fail     = true;
 8000a38:	f240 1301 	movw	r3, #257	; 0x101
 8000a3c:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 8000a3e:	60a9      	str	r1, [r5, #8]
     return __test_fail(msg);
 8000a40:	2001      	movs	r0, #1
}
 8000a42:	bc70      	pop	{r4, r5, r6}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000ab4 	.word	0x20000ab4
 8000a4c:	00000000 	.word	0x00000000

08000a50 <rt_test_002_001_execute.lto_priv.0>:
 * - [2.1.3] Testing Registry List integrity.
 * - [2.1.4] Testing Port-defined integrity.
 * .
 */

static void rt_test_002_001_execute(void) {
 8000a50:	b410      	push	{r4}
  bool result;

  /* [2.1.1] Testing Ready List integrity.*/
  test_set_step(1);
 8000a52:	4c42      	ldr	r4, [pc, #264]	; (8000b5c <rt_test_002_001_execute.lto_priv.0+0x10c>)
 8000a54:	2301      	movs	r3, #1
 8000a56:	6023      	str	r3, [r4, #0]
 8000a58:	2330      	movs	r3, #48	; 0x30
 8000a5a:	f383 8811 	msr	BASEPRI, r3
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    ch_priority_queue_t *pqp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    pqp = oip->rlist.pqueue.next;
 8000a5e:	4940      	ldr	r1, [pc, #256]	; (8000b60 <rt_test_002_001_execute.lto_priv.0+0x110>)
 8000a60:	680a      	ldr	r2, [r1, #0]
    while (pqp != &oip->rlist.pqueue) {
 8000a62:	428a      	cmp	r2, r1
 8000a64:	d063      	beq.n	8000b2e <rt_test_002_001_execute.lto_priv.0+0xde>
    n = (cnt_t)0;
 8000a66:	2300      	movs	r3, #0
      n++;
      pqp = pqp->next;
 8000a68:	6812      	ldr	r2, [r2, #0]
    while (pqp != &oip->rlist.pqueue) {
 8000a6a:	428a      	cmp	r2, r1
      n++;
 8000a6c:	f103 0301 	add.w	r3, r3, #1
    while (pqp != &oip->rlist.pqueue) {
 8000a70:	d1fa      	bne.n	8000a68 <rt_test_002_001_execute.lto_priv.0+0x18>
    }

    /* Scanning the ready list backward.*/
    pqp = oip->rlist.pqueue.prev;
 8000a72:	684a      	ldr	r2, [r1, #4]
    while (pqp != &oip->rlist.pqueue) {
 8000a74:	428a      	cmp	r2, r1
 8000a76:	d046      	beq.n	8000b06 <rt_test_002_001_execute.lto_priv.0+0xb6>
      n--;
      pqp = pqp->prev;
 8000a78:	6852      	ldr	r2, [r2, #4]
    while (pqp != &oip->rlist.pqueue) {
 8000a7a:	428a      	cmp	r2, r1
      n--;
 8000a7c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    while (pqp != &oip->rlist.pqueue) {
 8000a80:	d1fa      	bne.n	8000a78 <rt_test_002_001_execute.lto_priv.0+0x28>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d13f      	bne.n	8000b06 <rt_test_002_001_execute.lto_priv.0+0xb6>
 8000a86:	2300      	movs	r3, #0
 8000a88:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
  }
  test_end_step(1);

  /* [2.1.2] Testing Virtual Timers List integrity.*/
  test_set_step(2);
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	6022      	str	r2, [r4, #0]
 8000a90:	2230      	movs	r2, #48	; 0x30
 8000a92:	f382 8811 	msr	BASEPRI, r2
    ch_delta_list_t *dlp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    dlp = oip->vtlist.dlist.next;
    while (dlp != &oip->vtlist.dlist) {
 8000a96:	4833      	ldr	r0, [pc, #204]	; (8000b64 <rt_test_002_001_execute.lto_priv.0+0x114>)
    dlp = oip->vtlist.dlist.next;
 8000a98:	690a      	ldr	r2, [r1, #16]
    while (dlp != &oip->vtlist.dlist) {
 8000a9a:	4282      	cmp	r2, r0
 8000a9c:	d04d      	beq.n	8000b3a <rt_test_002_001_execute.lto_priv.0+0xea>
      n++;
      dlp = dlp->next;
 8000a9e:	6812      	ldr	r2, [r2, #0]
    while (dlp != &oip->vtlist.dlist) {
 8000aa0:	4282      	cmp	r2, r0
      n++;
 8000aa2:	f103 0301 	add.w	r3, r3, #1
    while (dlp != &oip->vtlist.dlist) {
 8000aa6:	d1fa      	bne.n	8000a9e <rt_test_002_001_execute.lto_priv.0+0x4e>
    }

    /* Scanning the timers list backward.*/
    dlp = oip->vtlist.dlist.prev;
 8000aa8:	694a      	ldr	r2, [r1, #20]
    while (dlp != &oip->vtlist.dlist) {
 8000aaa:	4282      	cmp	r2, r0
 8000aac:	d035      	beq.n	8000b1a <rt_test_002_001_execute.lto_priv.0+0xca>
      n--;
      dlp = dlp->prev;
 8000aae:	6852      	ldr	r2, [r2, #4]
    while (dlp != &oip->vtlist.dlist) {
 8000ab0:	4282      	cmp	r2, r0
      n--;
 8000ab2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    while (dlp != &oip->vtlist.dlist) {
 8000ab6:	d1fa      	bne.n	8000aae <rt_test_002_001_execute.lto_priv.0+0x5e>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000ab8:	bb7b      	cbnz	r3, 8000b1a <rt_test_002_001_execute.lto_priv.0+0xca>
 8000aba:	2300      	movs	r3, #0
 8000abc:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "virtual timers list check failed");
  }
  test_end_step(2);

  /* [2.1.3] Testing Registry List integrity.*/
  test_set_step(3);
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	6022      	str	r2, [r4, #0]
 8000ac4:	2230      	movs	r2, #48	; 0x30
 8000ac6:	f382 8811 	msr	BASEPRI, r2
    rqp = REG_HEADER(oip);

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    qp = rqp->next;
    while (qp != rqp) {
 8000aca:	4827      	ldr	r0, [pc, #156]	; (8000b68 <rt_test_002_001_execute.lto_priv.0+0x118>)
    qp = rqp->next;
 8000acc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    while (qp != rqp) {
 8000ace:	4282      	cmp	r2, r0
 8000ad0:	d040      	beq.n	8000b54 <rt_test_002_001_execute.lto_priv.0+0x104>
      n++;
      qp = qp->next;
 8000ad2:	6812      	ldr	r2, [r2, #0]
    while (qp != rqp) {
 8000ad4:	4282      	cmp	r2, r0
      n++;
 8000ad6:	f103 0301 	add.w	r3, r3, #1
    while (qp != rqp) {
 8000ada:	d1fa      	bne.n	8000ad2 <rt_test_002_001_execute.lto_priv.0+0x82>
    }

    /* Scanning the ready list backward.*/
    qp = rqp->prev;
 8000adc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    while (qp != rqp) {
 8000ade:	4282      	cmp	r2, r0
 8000ae0:	d02f      	beq.n	8000b42 <rt_test_002_001_execute.lto_priv.0+0xf2>
      n--;
      qp = qp->prev;
 8000ae2:	6852      	ldr	r2, [r2, #4]
    while (qp != rqp) {
 8000ae4:	4282      	cmp	r2, r0
      n--;
 8000ae6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    while (qp != rqp) {
 8000aea:	d1fa      	bne.n	8000ae2 <rt_test_002_001_execute.lto_priv.0+0x92>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000aec:	bb4b      	cbnz	r3, 8000b42 <rt_test_002_001_execute.lto_priv.0+0xf2>
 8000aee:	2300      	movs	r3, #0
 8000af0:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "registry list check failed");
  }
  test_end_step(3);

  /* [2.1.4] Testing Port-defined integrity.*/
  test_set_step(4);
 8000af4:	2204      	movs	r2, #4
 8000af6:	6022      	str	r2, [r4, #0]
 8000af8:	2230      	movs	r2, #48	; 0x30
 8000afa:	f382 8811 	msr	BASEPRI, r2
 8000afe:	f383 8811 	msr	BASEPRI, r3
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
    chSysUnlock();
    test_assert(result == false, "port layer check failed");
  }
  test_end_step(4);
}
 8000b02:	bc10      	pop	{r4}
 8000b04:	4770      	bx	lr
 8000b06:	2300      	movs	r3, #0
 8000b08:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <rt_test_002_001_execute.lto_priv.0+0x11c>)
 8000b0e:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8000b10:	f240 1201 	movw	r2, #257	; 0x101
 8000b14:	80a2      	strh	r2, [r4, #4]
 8000b16:	bc10      	pop	{r4}
 8000b18:	4770      	bx	lr
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <rt_test_002_001_execute.lto_priv.0+0x120>)
 8000b22:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8000b24:	f240 1201 	movw	r2, #257	; 0x101
 8000b28:	80a2      	strh	r2, [r4, #4]
 8000b2a:	bc10      	pop	{r4}
 8000b2c:	4770      	bx	lr
    pqp = oip->rlist.pqueue.prev;
 8000b2e:	684a      	ldr	r2, [r1, #4]
    while (pqp != &oip->rlist.pqueue) {
 8000b30:	428a      	cmp	r2, r1
    n = (cnt_t)0;
 8000b32:	bf18      	it	ne
 8000b34:	2300      	movne	r3, #0
    while (pqp != &oip->rlist.pqueue) {
 8000b36:	d19f      	bne.n	8000a78 <rt_test_002_001_execute.lto_priv.0+0x28>
 8000b38:	e7a5      	b.n	8000a86 <rt_test_002_001_execute.lto_priv.0+0x36>
    dlp = oip->vtlist.dlist.prev;
 8000b3a:	694a      	ldr	r2, [r1, #20]
    while (dlp != &oip->vtlist.dlist) {
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	d1b6      	bne.n	8000aae <rt_test_002_001_execute.lto_priv.0+0x5e>
 8000b40:	e7bb      	b.n	8000aba <rt_test_002_001_execute.lto_priv.0+0x6a>
 8000b42:	2300      	movs	r3, #0
 8000b44:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <rt_test_002_001_execute.lto_priv.0+0x124>)
 8000b4a:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8000b4c:	f240 1201 	movw	r2, #257	; 0x101
 8000b50:	80a2      	strh	r2, [r4, #4]
  return true;
 8000b52:	e7e0      	b.n	8000b16 <rt_test_002_001_execute.lto_priv.0+0xc6>
    qp = rqp->prev;
 8000b54:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    while (qp != rqp) {
 8000b56:	4282      	cmp	r2, r0
 8000b58:	d1c3      	bne.n	8000ae2 <rt_test_002_001_execute.lto_priv.0+0x92>
 8000b5a:	e7c8      	b.n	8000aee <rt_test_002_001_execute.lto_priv.0+0x9e>
 8000b5c:	20000ab4 	.word	0x20000ab4
 8000b60:	200009b8 	.word	0x200009b8
 8000b64:	200009c8 	.word	0x200009c8
 8000b68:	200009e8 	.word	0x200009e8
 8000b6c:	0800b954 	.word	0x0800b954
 8000b70:	0800b96c 	.word	0x0800b96c
 8000b74:	0800b990 	.word	0x0800b990
	...

08000b80 <rt_test_002_003_execute.lto_priv.0>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <rt_test_002_003_execute.lto_priv.0+0x20>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	2330      	movs	r3, #48	; 0x30
 8000b88:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000b8c:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8e:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000b90:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000b94:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000b96:	2300      	movs	r3, #0
 8000b98:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000b9c:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 8000b9e:	4770      	bx	lr
 8000ba0:	20000ab4 	.word	0x20000ab4
	...

08000bb0 <rt_test_003_001_execute.lto_priv.0>:

static void rt_test_003_001_execute(void) {

  /* [3.1.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <rt_test_003_001_execute.lto_priv.0+0x14>)
 8000bb2:	2101      	movs	r1, #1
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000bb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb8:	6019      	str	r1, [r3, #0]
 8000bba:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000bbc:	6a53      	ldr	r3, [r2, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d0fc      	beq.n	8000bbc <rt_test_003_001_execute.lto_priv.0+0xc>
        _sim_check_for_interrupts();
#endif
    }
  }
  test_end_step(1);
}
 8000bc2:	4770      	bx	lr
 8000bc4:	20000ab4 	.word	0x20000ab4
	...

08000bd0 <rt_test_003_002_execute.lto_priv.0>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 8000bd0:	4b01      	ldr	r3, [pc, #4]	; (8000bd8 <rt_test_003_002_execute.lto_priv.0+0x8>)
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000ab4 	.word	0x20000ab4
 8000bdc:	00000000 	.word	0x00000000

08000be0 <thread>:
 *
 * @api
 */
void test_emit_token(char token) {

  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <thread+0x18>)
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	f103 0120 	add.w	r1, r3, #32
 8000be8:	428a      	cmp	r2, r1
 8000bea:	d203      	bcs.n	8000bf4 <thread+0x14>
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000bec:	7801      	ldrb	r1, [r0, #0]
    *chtest.tokp++ = token;
 8000bee:	1c50      	adds	r0, r2, #1
 8000bf0:	60d8      	str	r0, [r3, #12]
 8000bf2:	7011      	strb	r1, [r2, #0]
}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000ab4 	.word	0x20000ab4
 8000bfc:	00000000 	.word	0x00000000

08000c00 <rt_test_006_001_setup.lto_priv.0>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_006_001_setup(void) {
  tr1 = NULL;
 8000c00:	4b01      	ldr	r3, [pc, #4]	; (8000c08 <rt_test_006_001_setup.lto_priv.0+0x8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
}
 8000c06:	4770      	bx	lr
 8000c08:	20001758 	.word	0x20001758
 8000c0c:	00000000 	.word	0x00000000

08000c10 <rt_test_007_001_setup.lto_priv.0>:
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8000c10:	4b02      	ldr	r3, [pc, #8]	; (8000c1c <rt_test_007_001_setup.lto_priv.0+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  ch_queue_init(&sp->queue);
  sp->cnt = n;
 8000c12:	2201      	movs	r2, #1
  qp->prev = qp;
 8000c14:	e9c3 3300 	strd	r3, r3, [r3]
 8000c18:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_007_001_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 8000c1a:	4770      	bx	lr
 8000c1c:	20000d0c 	.word	0x20000d0c

08000c20 <rt_test_007_005_setup.lto_priv.0>:
  qp->next = qp;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <rt_test_007_005_setup.lto_priv.0+0xc>)
 8000c22:	2200      	movs	r2, #0
  qp->prev = qp;
 8000c24:	e9c3 3300 	strd	r3, r3, [r3]
 8000c28:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_007_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000d0c 	.word	0x20000d0c

08000c30 <rt_test_007_002_setup.lto_priv.0>:
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <rt_test_007_002_setup.lto_priv.0+0xc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	e9c3 3300 	strd	r3, r3, [r3]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	4770      	bx	lr
 8000c3c:	20000d0c 	.word	0x20000d0c

08000c40 <rt_test_007_003_setup.lto_priv.0>:
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <rt_test_007_003_setup.lto_priv.0+0xc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	e9c3 3300 	strd	r3, r3, [r3]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	4770      	bx	lr
 8000c4c:	20000d0c 	.word	0x20000d0c

08000c50 <rt_test_007_004_setup.lto_priv.0>:
 8000c50:	4b02      	ldr	r3, [pc, #8]	; (8000c5c <rt_test_007_004_setup.lto_priv.0+0xc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	e9c3 3300 	strd	r3, r3, [r3]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	4770      	bx	lr
 8000c5c:	20000d0c 	.word	0x20000d0c

08000c60 <rt_test_008_005_setup.lto_priv.0>:
  qp->next = qp;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <rt_test_008_005_setup.lto_priv.0+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8000c62:	2200      	movs	r2, #0
  qp->prev = qp;
 8000c64:	e9c3 3300 	strd	r3, r3, [r3]
 8000c68:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_008_005_setup(void) {
  chMtxObjectInit(&m1);
}
 8000c6a:	4770      	bx	lr
 8000c6c:	2000082c 	.word	0x2000082c

08000c70 <rt_test_008_001_setup.lto_priv.0>:
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <rt_test_008_001_setup.lto_priv.0+0xc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	e9c3 3300 	strd	r3, r3, [r3]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	4770      	bx	lr
 8000c7c:	2000082c 	.word	0x2000082c

08000c80 <rt_test_008_004_setup.lto_priv.0>:
  qp->next = qp;
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <rt_test_008_004_setup.lto_priv.0+0x14>)
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <rt_test_008_004_setup.lto_priv.0+0x18>)
 8000c84:	2100      	movs	r1, #0
  qp->prev = qp;
 8000c86:	e9c2 2200 	strd	r2, r2, [r2]
 8000c8a:	e9c3 3300 	strd	r3, r3, [r3]
 8000c8e:	6091      	str	r1, [r2, #8]
 8000c90:	6099      	str	r1, [r3, #8]
}
 8000c92:	4770      	bx	lr
 8000c94:	2000082c 	.word	0x2000082c
 8000c98:	2000083c 	.word	0x2000083c
 8000c9c:	00000000 	.word	0x00000000

08000ca0 <rt_test_008_008_setup.lto_priv.0>:
  qp->next = qp;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <rt_test_008_008_setup.lto_priv.0+0x14>)
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <rt_test_008_008_setup.lto_priv.0+0x18>)
 8000ca4:	2100      	movs	r1, #0
  qp->prev = qp;
 8000ca6:	e9c2 2200 	strd	r2, r2, [r2]
 8000caa:	e9c3 3300 	strd	r3, r3, [r3]
 8000cae:	6099      	str	r1, [r3, #8]
 */

static void rt_test_008_008_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2000082c 	.word	0x2000082c
 8000cb8:	20000800 	.word	0x20000800
 8000cbc:	00000000 	.word	0x00000000

08000cc0 <rt_test_008_007_setup.lto_priv.0>:
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <rt_test_008_007_setup.lto_priv.0+0x14>)
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <rt_test_008_007_setup.lto_priv.0+0x18>)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e9c2 2200 	strd	r2, r2, [r2]
 8000cca:	e9c3 3300 	strd	r3, r3, [r3]
 8000cce:	6099      	str	r1, [r3, #8]
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2000082c 	.word	0x2000082c
 8000cd8:	20000800 	.word	0x20000800
 8000cdc:	00000000 	.word	0x00000000

08000ce0 <rt_test_008_009_setup.lto_priv.0>:
  qp->next = qp;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <rt_test_008_009_setup.lto_priv.0+0x1c>)
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <rt_test_008_009_setup.lto_priv.0+0x20>)
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <rt_test_008_009_setup.lto_priv.0+0x24>)
 8000ce6:	2000      	movs	r0, #0
  qp->prev = qp;
 8000ce8:	e9c1 1100 	strd	r1, r1, [r1]
 8000cec:	e9c2 2200 	strd	r2, r2, [r2]
 8000cf0:	e9c3 3300 	strd	r3, r3, [r3]
 8000cf4:	6090      	str	r0, [r2, #8]
 8000cf6:	6098      	str	r0, [r3, #8]

static void rt_test_008_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000082c 	.word	0x2000082c
 8000d00:	2000083c 	.word	0x2000083c
 8000d04:	20000800 	.word	0x20000800
	...

08000d10 <h1>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <h1+0x18>)
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	f103 0120 	add.w	r1, r3, #32
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	d203      	bcs.n	8000d24 <h1+0x14>
    *chtest.tokp++ = token;
 8000d1c:	1c50      	adds	r0, r2, #1
 8000d1e:	2141      	movs	r1, #65	; 0x41
 8000d20:	60d8      	str	r0, [r3, #12]
 8000d22:	7011      	strb	r1, [r2, #0]
 ****************************************************************************/

static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000ab4 	.word	0x20000ab4
 8000d2c:	00000000 	.word	0x00000000

08000d30 <h2>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <h2+0x18>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	f103 0120 	add.w	r1, r3, #32
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	d203      	bcs.n	8000d44 <h2+0x14>
    *chtest.tokp++ = token;
 8000d3c:	1c50      	adds	r0, r2, #1
 8000d3e:	2142      	movs	r1, #66	; 0x42
 8000d40:	60d8      	str	r0, [r3, #12]
 8000d42:	7011      	strb	r1, [r2, #0]
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000ab4 	.word	0x20000ab4
 8000d4c:	00000000 	.word	0x00000000

08000d50 <h3>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <h3+0x18>)
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	f103 0120 	add.w	r1, r3, #32
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	d203      	bcs.n	8000d64 <h3+0x14>
    *chtest.tokp++ = token;
 8000d5c:	1c50      	adds	r0, r2, #1
 8000d5e:	2143      	movs	r1, #67	; 0x43
 8000d60:	60d8      	str	r0, [r3, #12]
 8000d62:	7011      	strb	r1, [r2, #0]
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000ab4 	.word	0x20000ab4
 8000d6c:	00000000 	.word	0x00000000

08000d70 <rt_test_010_001_execute.lto_priv.0>:
 * - [10.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void rt_test_010_001_execute(void) {
 8000d70:	b4f0      	push	{r4, r5, r6, r7}
 */
void chEvtObjectInit(event_source_t *esp) {

  chDbgCheck(esp != NULL);

  esp->next = (event_listener_t *)esp;
 8000d72:	4a39      	ldr	r2, [pc, #228]	; (8000e58 <rt_test_010_001_execute.lto_priv.0+0xe8>)
  }
  test_end_step(1);

  /* [10.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 8000d74:	4c39      	ldr	r4, [pc, #228]	; (8000e5c <rt_test_010_001_execute.lto_priv.0+0xec>)
 8000d76:	6012      	str	r2, [r2, #0]
 8000d78:	2702      	movs	r7, #2
static void rt_test_010_001_execute(void) {
 8000d7a:	b08a      	sub	sp, #40	; 0x28
  test_set_step(2);
 8000d7c:	6027      	str	r7, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d7e:	2030      	movs	r0, #48	; 0x30
 8000d80:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 8000d84:	4d36      	ldr	r5, [pc, #216]	; (8000e60 <rt_test_010_001_execute.lto_priv.0+0xf0>)
  thread_t *currtp = chThdGetSelfX();

  chDbgCheckClassI();
  chDbgCheck((esp != NULL) && (elp != NULL));

  elp->next     = esp->next;
 8000d86:	6813      	ldr	r3, [r2, #0]
 8000d88:	9305      	str	r3, [sp, #20]
 8000d8a:	68eb      	ldr	r3, [r5, #12]
  esp->next     = elp;
  elp->listener = currtp;
 8000d8c:	9306      	str	r3, [sp, #24]
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 8000d8e:	2601      	movs	r6, #1
 8000d90:	2300      	movs	r3, #0
 8000d92:	e9cd 6307 	strd	r6, r3, [sp, #28]
  esp->next     = elp;
 8000d96:	a905      	add	r1, sp, #20
  elp->wflags   = wflags;
 8000d98:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  esp->next     = elp;
 8000d9c:	6011      	str	r1, [r2, #0]
  elp->wflags   = wflags;
 8000d9e:	9609      	str	r6, [sp, #36]	; 0x24
 8000da0:	f383 8811 	msr	BASEPRI, r3
 8000da4:	f380 8811 	msr	BASEPRI, r0
 8000da8:	68ed      	ldr	r5, [r5, #12]
  elp->listener = currtp;
 8000daa:	9501      	str	r5, [sp, #4]
  elp->next     = esp->next;
 8000dac:	6815      	ldr	r5, [r2, #0]
 8000dae:	9500      	str	r5, [sp, #0]
  esp->next     = elp;
 8000db0:	466d      	mov	r5, sp
  elp->events   = events;
 8000db2:	9702      	str	r7, [sp, #8]
  elp->wflags   = wflags;
 8000db4:	9604      	str	r6, [sp, #16]
  elp->flags    = (eventflags_t)0;
 8000db6:	9303      	str	r3, [sp, #12]
  esp->next     = elp;
 8000db8:	6015      	str	r5, [r2, #0]
 8000dba:	f383 8811 	msr	BASEPRI, r3
 8000dbe:	f380 8811 	msr	BASEPRI, r0
  if (!condition) {
 8000dc2:	6816      	ldr	r6, [r2, #0]
 8000dc4:	4296      	cmp	r6, r2
 8000dc6:	d037      	beq.n	8000e38 <rt_test_010_001_execute.lto_priv.0+0xc8>
 8000dc8:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(2);

  /* [10.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 8000dcc:	2303      	movs	r3, #3
 8000dce:	6023      	str	r3, [r4, #0]
 8000dd0:	f380 8811 	msr	BASEPRI, r0
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8000dd4:	4613      	mov	r3, r2
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
}
 8000dd6:	e001      	b.n	8000ddc <rt_test_010_001_execute.lto_priv.0+0x6c>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->next == elp) {
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d037      	beq.n	8000e4c <rt_test_010_001_execute.lto_priv.0+0xdc>
  while (p->next != (event_listener_t *)esp) {
 8000ddc:	4618      	mov	r0, r3
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d1f9      	bne.n	8000dd8 <rt_test_010_001_execute.lto_priv.0+0x68>
 8000de4:	2300      	movs	r3, #0
 8000de6:	f383 8811 	msr	BASEPRI, r3
 8000dea:	2130      	movs	r1, #48	; 0x30
 8000dec:	f381 8811 	msr	BASEPRI, r1
 8000df0:	6810      	ldr	r0, [r2, #0]
 8000df2:	4290      	cmp	r0, r2
 8000df4:	d020      	beq.n	8000e38 <rt_test_010_001_execute.lto_priv.0+0xc8>
 8000df6:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(3);

  /* [10.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	f381 8811 	msr	BASEPRI, r1
  p = (event_listener_t *)esp;
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <rt_test_010_001_execute.lto_priv.0+0xe8>)
 8000e04:	e001      	b.n	8000e0a <rt_test_010_001_execute.lto_priv.0+0x9a>
    if (p->next == elp) {
 8000e06:	42ab      	cmp	r3, r5
 8000e08:	d023      	beq.n	8000e52 <rt_test_010_001_execute.lto_priv.0+0xe2>
  while (p->next != (event_listener_t *)esp) {
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d1f9      	bne.n	8000e06 <rt_test_010_001_execute.lto_priv.0+0x96>
 8000e12:	2300      	movs	r3, #0
 8000e14:	f383 8811 	msr	BASEPRI, r3
 8000e18:	2130      	movs	r1, #48	; 0x30
 8000e1a:	f381 8811 	msr	BASEPRI, r1
 8000e1e:	6811      	ldr	r1, [r2, #0]
 8000e20:	4291      	cmp	r1, r2
  chtest.failure_message = msg;
 8000e22:	bf1f      	itttt	ne
 8000e24:	4a0f      	ldrne	r2, [pc, #60]	; (8000e64 <rt_test_010_001_execute.lto_priv.0+0xf4>)
 8000e26:	60a2      	strne	r2, [r4, #8]
  chtest.global_fail     = true;
 8000e28:	f240 1101 	movwne	r1, #257	; 0x101
 8000e2c:	80a1      	strhne	r1, [r4, #4]
 8000e2e:	f383 8811 	msr	BASEPRI, r3
  {
    chEvtUnregister(&es1, &el2);
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  }
  test_end_step(4);
}
 8000e32:	b00a      	add	sp, #40	; 0x28
 8000e34:	bcf0      	pop	{r4, r5, r6, r7}
 8000e36:	4770      	bx	lr
  chtest.failure_message = msg;
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <rt_test_010_001_execute.lto_priv.0+0xf8>)
 8000e3a:	60a2      	str	r2, [r4, #8]
  chtest.global_fail     = true;
 8000e3c:	f240 1101 	movw	r1, #257	; 0x101
 8000e40:	80a1      	strh	r1, [r4, #4]
 8000e42:	f383 8811 	msr	BASEPRI, r3
 8000e46:	b00a      	add	sp, #40	; 0x28
 8000e48:	bcf0      	pop	{r4, r5, r6, r7}
 8000e4a:	4770      	bx	lr
      p->next = elp->next;
 8000e4c:	9b05      	ldr	r3, [sp, #20]
 8000e4e:	6003      	str	r3, [r0, #0]
      break;
 8000e50:	e7c8      	b.n	8000de4 <rt_test_010_001_execute.lto_priv.0+0x74>
      p->next = elp->next;
 8000e52:	9b00      	ldr	r3, [sp, #0]
 8000e54:	600b      	str	r3, [r1, #0]
      break;
 8000e56:	e7dc      	b.n	8000e12 <rt_test_010_001_execute.lto_priv.0+0xa2>
 8000e58:	20000808 	.word	0x20000808
 8000e5c:	20000ab4 	.word	0x20000ab4
 8000e60:	200009b8 	.word	0x200009b8
 8000e64:	0800b9b8 	.word	0x0800b9b8
 8000e68:	0800b9ac 	.word	0x0800b9ac
 8000e6c:	00000000 	.word	0x00000000

08000e70 <rt_test_010_002_setup.lto_priv.0>:
 8000e70:	2330      	movs	r3, #48	; 0x30
 8000e72:	f383 8811 	msr	BASEPRI, r3
 8000e76:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <rt_test_010_002_setup.lto_priv.0+0x14>)
 8000e78:	68d2      	ldr	r2, [r2, #12]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	f383 8811 	msr	BASEPRI, r3
 8000e82:	4770      	bx	lr
 8000e84:	200009b8 	.word	0x200009b8
	...

08000e90 <rt_test_010_002_execute.lto_priv.0>:

static void rt_test_010_002_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void rt_test_010_002_execute(void) {
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [10.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <rt_test_010_002_execute.lto_priv.0+0x40>)
 8000e94:	4e0f      	ldr	r6, [pc, #60]	; (8000ed4 <rt_test_010_002_execute.lto_priv.0+0x44>)
 8000e96:	2701      	movs	r7, #1
 8000e98:	601f      	str	r7, [r3, #0]
 8000e9a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8000e9c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000e9e:	fa25 f304 	lsr.w	r3, r5, r4
 8000ea2:	f013 0f01 	tst.w	r3, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8000ea6:	fa07 f204 	lsl.w	r2, r7, r4
      handlers[eid](eid);
 8000eaa:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8000eac:	d00d      	beq.n	8000eca <rt_test_010_002_execute.lto_priv.0+0x3a>
      handlers[eid](eid);
 8000eae:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8000eb2:	ea25 0502 	bic.w	r5, r5, r2
      handlers[eid](eid);
 8000eb6:	3401      	adds	r4, #1
 8000eb8:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d1ef      	bne.n	8000e9e <rt_test_010_002_execute.lto_priv.0+0xe>
  {
    chEvtDispatch(evhndl, 7);
    test_assert_sequence("ABC", "invalid sequence");
  }
  test_end_step(1);
}
 8000ebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8000ec2:	4905      	ldr	r1, [pc, #20]	; (8000ed8 <rt_test_010_002_execute.lto_priv.0+0x48>)
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <rt_test_010_002_execute.lto_priv.0+0x4c>)
 8000ec6:	f7ff bda3 	b.w	8000a10 <__test_assert_sequence>
    }
    eid++;
 8000eca:	3401      	adds	r4, #1
 8000ecc:	e7e7      	b.n	8000e9e <rt_test_010_002_execute.lto_priv.0+0xe>
 8000ece:	bf00      	nop
 8000ed0:	20000ab4 	.word	0x20000ab4
 8000ed4:	0800cc70 	.word	0x0800cc70
 8000ed8:	0800b9c8 	.word	0x0800b9c8
 8000edc:	0800b9dc 	.word	0x0800b9dc

08000ee0 <rt_test_010_003_setup.lto_priv.0>:
 8000ee0:	2330      	movs	r3, #48	; 0x30
 8000ee2:	f383 8811 	msr	BASEPRI, r3
 8000ee6:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <rt_test_010_003_setup.lto_priv.0+0x14>)
 8000ee8:	68d2      	ldr	r2, [r2, #12]
 8000eea:	2300      	movs	r3, #0
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	f383 8811 	msr	BASEPRI, r3
 8000ef2:	4770      	bx	lr
 8000ef4:	200009b8 	.word	0x200009b8
	...

08000f00 <rt_test_010_004_setup.lto_priv.0>:
 8000f00:	2330      	movs	r3, #48	; 0x30
 8000f02:	f383 8811 	msr	BASEPRI, r3
 8000f06:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <rt_test_010_004_setup.lto_priv.0+0x14>)
 8000f08:	68d2      	ldr	r2, [r2, #12]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	f383 8811 	msr	BASEPRI, r3
 8000f12:	4770      	bx	lr
 8000f14:	200009b8 	.word	0x200009b8
	...

08000f20 <rt_test_010_005_setup.lto_priv.0>:
 8000f20:	2330      	movs	r3, #48	; 0x30
 8000f22:	f383 8811 	msr	BASEPRI, r3
 8000f26:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <rt_test_010_005_setup.lto_priv.0+0x14>)
 8000f28:	68d2      	ldr	r2, [r2, #12]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	f383 8811 	msr	BASEPRI, r3
 8000f32:	4770      	bx	lr
 8000f34:	200009b8 	.word	0x200009b8
	...

08000f40 <rt_test_010_006_setup.lto_priv.0>:
 8000f40:	2330      	movs	r3, #48	; 0x30
 8000f42:	f383 8811 	msr	BASEPRI, r3
 8000f46:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <rt_test_010_006_setup.lto_priv.0+0x14>)
  currtp->epending &= ~events;
 8000f48:	68d2      	ldr	r2, [r2, #12]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	f383 8811 	msr	BASEPRI, r3
 * .
 */

static void rt_test_010_006_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}
 8000f52:	4770      	bx	lr
 8000f54:	200009b8 	.word	0x200009b8
	...

08000f60 <rt_test_010_007_setup.lto_priv.0>:
 8000f60:	2330      	movs	r3, #48	; 0x30
 8000f62:	f383 8811 	msr	BASEPRI, r3
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <rt_test_010_007_setup.lto_priv.0+0x1c>)
 8000f68:	68d2      	ldr	r2, [r2, #12]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	f383 8811 	msr	BASEPRI, r3
  esp->next = (event_listener_t *)esp;
 8000f72:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <rt_test_010_007_setup.lto_priv.0+0x20>)
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <rt_test_010_007_setup.lto_priv.0+0x24>)
 8000f76:	6012      	str	r2, [r2, #0]
 8000f78:	601b      	str	r3, [r3, #0]

static void rt_test_010_007_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 8000f7a:	4770      	bx	lr
 8000f7c:	200009b8 	.word	0x200009b8
 8000f80:	20000808 	.word	0x20000808
 8000f84:	2000080c 	.word	0x2000080c
	...

08000f90 <dyn_thread1.lto_priv.0>:
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <dyn_thread1.lto_priv.0+0x18>)
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	f103 0120 	add.w	r1, r3, #32
 8000f98:	428a      	cmp	r2, r1
 8000f9a:	d203      	bcs.n	8000fa4 <dyn_thread1.lto_priv.0+0x14>
 8000f9c:	7801      	ldrb	r1, [r0, #0]
 8000f9e:	1c50      	adds	r0, r2, #1
 8000fa0:	60d8      	str	r0, [r3, #12]
 8000fa2:	7011      	strb	r1, [r2, #0]
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000ab4 	.word	0x20000ab4
 8000fac:	00000000 	.word	0x00000000

08000fb0 <rt_test_011_001_setup.lto_priv.0>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <rt_test_011_001_setup.lto_priv.0+0x34>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <rt_test_011_001_setup.lto_priv.0+0x38>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000fb4:	1dd9      	adds	r1, r3, #7
 8000fb6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8000fba:	1acb      	subs	r3, r1, r3
  H_FREE_NEXT(&heapp->header) = hp;
  H_FREE_PAGES(&heapp->header) = 0;
  H_FREE_NEXT(hp) = NULL;
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000fbc:	f5c3 6315 	rsb	r3, r3, #2384	; 0x950
 8000fc0:	3308      	adds	r3, #8
  heapp->provider = NULL;
 8000fc2:	2000      	movs	r0, #0
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000fc4:	08db      	lsrs	r3, r3, #3
  H_FREE_PAGES(&heapp->header) = 0;
 8000fc6:	e9c2 1003 	strd	r1, r0, [r2, #12]
  heapp->provider = NULL;
 8000fca:	6010      	str	r0, [r2, #0]
  H_FREE_NEXT(hp) = NULL;
 8000fcc:	6008      	str	r0, [r1, #0]
 8000fce:	61d0      	str	r0, [r2, #28]
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000fd0:	604b      	str	r3, [r1, #4]
  heapp->area.base = (uint8_t *)(void *)hp;
  heapp->area.size = H_FREE_FULLSIZE(hp);
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	6093      	str	r3, [r2, #8]
  qp->next = qp;
 8000fd8:	f102 0314 	add.w	r3, r2, #20
  qp->prev = qp;
 8000fdc:	e9c2 3305 	strd	r3, r3, [r2, #20]
  heapp->area.base = (uint8_t *)(void *)hp;
 8000fe0:	6051      	str	r1, [r2, #4]
 * .
 */

static void rt_test_011_001_setup(void) {
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 8000fe2:	4770      	bx	lr
 8000fe4:	20000d40 	.word	0x20000d40
 8000fe8:	20000b44 	.word	0x20000b44
 8000fec:	00000000 	.word	0x00000000

08000ff0 <rt_test_011_002_setup.lto_priv.0>:
  mp->next = NULL;
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <rt_test_011_002_setup.lto_priv.0+0x14>)
 8000ff2:	2200      	movs	r2, #0
  mp->object_size = size;
 8000ff4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  mp->align = align;
 8000ff8:	2104      	movs	r1, #4
  mp->object_size = size;
 8000ffa:	e9c3 2000 	strd	r2, r0, [r3]
  mp->provider = provider;
 8000ffe:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void rt_test_011_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8001002:	4770      	bx	lr
 8001004:	20000bdc 	.word	0x20000bdc
	...

08001010 <tmo>:

static void tmo(virtual_timer_t *vtp, void *param) {

  (void)vtp;
  (void)param;
}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
	...

08001020 <rt_test_012_007_setup.lto_priv.0>:
  qp->next = qp;
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <rt_test_012_007_setup.lto_priv.0+0xc>)
 8001022:	2200      	movs	r2, #0
  qp->prev = qp;
 8001024:	e9c3 3300 	strd	r3, r3, [r3]
 8001028:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_007_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 800102a:	4770      	bx	lr
 800102c:	20000d18 	.word	0x20000d18

08001030 <rt_test_012_010_setup.lto_priv.0>:
  qp->next = qp;
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <rt_test_012_010_setup.lto_priv.0+0xc>)
 8001032:	2201      	movs	r2, #1
  qp->prev = qp;
 8001034:	e9c3 3300 	strd	r3, r3, [r3]
 8001038:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 800103a:	4770      	bx	lr
 800103c:	20000d18 	.word	0x20000d18

08001040 <rt_test_012_011_setup.lto_priv.0>:
  qp->next = qp;
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <rt_test_012_011_setup.lto_priv.0+0xc>)
 8001042:	2200      	movs	r2, #0
  qp->prev = qp;
 8001044:	e9c3 3300 	strd	r3, r3, [r3]
 8001048:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 800104a:	4770      	bx	lr
 800104c:	20000bfc 	.word	0x20000bfc

08001050 <oslib_test_002_003_setup.lto_priv.0>:
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 8001050:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <oslib_test_002_003_setup.lto_priv.0+0x2c>)
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <oslib_test_002_003_setup.lto_priv.0+0x30>)
  mbp->top    = &buf[n];
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->cnt    = (size_t)0;
 8001056:	2400      	movs	r4, #0
  mbp->top    = &buf[n];
 8001058:	f102 0510 	add.w	r5, r2, #16
  qp->next = qp;
 800105c:	f103 0018 	add.w	r0, r3, #24
 8001060:	f103 0120 	add.w	r1, r3, #32
  mbp->buffer = buf;
 8001064:	e9c3 2500 	strd	r2, r5, [r3]
  mbp->cnt    = (size_t)0;
 8001068:	611c      	str	r4, [r3, #16]
  mbp->reset  = false;
 800106a:	751c      	strb	r4, [r3, #20]
  mbp->wrptr  = buf;
 800106c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8001070:	bc30      	pop	{r4, r5}
  qp->prev = qp;
 8001072:	e9c3 0006 	strd	r0, r0, [r3, #24]
 8001076:	e9c3 1108 	strd	r1, r1, [r3, #32]
 800107a:	4770      	bx	lr
 800107c:	2000084c 	.word	0x2000084c
 8001080:	20000bcc 	.word	0x20000bcc
	...

08001090 <oslib_test_002_001_setup.lto_priv.0>:
 8001090:	b430      	push	{r4, r5}
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <oslib_test_002_001_setup.lto_priv.0+0x2c>)
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <oslib_test_002_001_setup.lto_priv.0+0x30>)
 8001096:	2400      	movs	r4, #0
 8001098:	f102 0510 	add.w	r5, r2, #16
 800109c:	f103 0018 	add.w	r0, r3, #24
 80010a0:	f103 0120 	add.w	r1, r3, #32
 80010a4:	e9c3 2500 	strd	r2, r5, [r3]
 80010a8:	611c      	str	r4, [r3, #16]
 80010aa:	751c      	strb	r4, [r3, #20]
 80010ac:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80010b0:	bc30      	pop	{r4, r5}
 80010b2:	e9c3 0006 	strd	r0, r0, [r3, #24]
 80010b6:	e9c3 1108 	strd	r1, r1, [r3, #32]
 80010ba:	4770      	bx	lr
 80010bc:	2000084c 	.word	0x2000084c
 80010c0:	20000bcc 	.word	0x20000bcc
	...

080010d0 <oslib_test_002_002_setup.lto_priv.0>:
 80010d0:	b430      	push	{r4, r5}
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <oslib_test_002_002_setup.lto_priv.0+0x2c>)
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <oslib_test_002_002_setup.lto_priv.0+0x30>)
 80010d6:	2400      	movs	r4, #0
 80010d8:	f102 0510 	add.w	r5, r2, #16
 80010dc:	f103 0018 	add.w	r0, r3, #24
 80010e0:	f103 0120 	add.w	r1, r3, #32
 80010e4:	e9c3 2500 	strd	r2, r5, [r3]
 80010e8:	611c      	str	r4, [r3, #16]
 80010ea:	751c      	strb	r4, [r3, #20]
 80010ec:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80010f0:	bc30      	pop	{r4, r5}
 80010f2:	e9c3 0006 	strd	r0, r0, [r3, #24]
 80010f6:	e9c3 1108 	strd	r1, r1, [r3, #32]
 80010fa:	4770      	bx	lr
 80010fc:	2000084c 	.word	0x2000084c
 8001100:	20000bcc 	.word	0x20000bcc
	...

08001110 <oslib_test_003_001_setup.lto_priv.0>:
 * - [3.1.13] Write wrapping buffer boundary.
 * - [3.1.14] Read wrapping buffer boundary.
 * .
 */

static void oslib_test_003_001_setup(void) {
 8001110:	b430      	push	{r4, r5}
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 8001112:	490f      	ldr	r1, [pc, #60]	; (8001150 <oslib_test_003_001_setup.lto_priv.0+0x40>)
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <oslib_test_003_001_setup.lto_priv.0+0x44>)
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
 8001116:	f101 0510 	add.w	r5, r1, #16
  pp->cnt    = (size_t)0;
 800111a:	2200      	movs	r2, #0
  pp->buffer = buf;
 800111c:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 8001120:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8001124:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8001128:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800112c:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 8001130:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 8001134:	e9c3 2206 	strd	r2, r2, [r3, #24]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE);
}
 8001138:	bc30      	pop	{r4, r5}
 800113a:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 800113e:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->cnt    = (size_t)0;
 8001142:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8001144:	751a      	strb	r2, [r3, #20]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
 800114a:	649a      	str	r2, [r3, #72]	; 0x48
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000960 	.word	0x20000960
 8001154:	20000884 	.word	0x20000884
	...

08001160 <oslib_test_003_002_setup.lto_priv.0>:
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 8001160:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8001162:	490f      	ldr	r1, [pc, #60]	; (80011a0 <oslib_test_003_002_setup.lto_priv.0+0x40>)
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <oslib_test_003_002_setup.lto_priv.0+0x44>)
  pp->top    = &buf[n];
 8001166:	f101 0508 	add.w	r5, r1, #8
  pp->cnt    = (size_t)0;
 800116a:	2200      	movs	r2, #0
  pp->buffer = buf;
 800116c:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 8001170:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8001174:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8001178:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800117c:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 8001180:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->rtr    = NULL;
 8001184:	e9c3 2206 	strd	r2, r2, [r3, #24]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 8001188:	bc30      	pop	{r4, r5}
 800118a:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 800118e:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->cnt    = (size_t)0;
 8001192:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8001194:	751a      	strb	r2, [r3, #20]
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
 800119a:	649a      	str	r2, [r3, #72]	; 0x48
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000960 	.word	0x20000960
 80011a4:	20000884 	.word	0x20000884
	...

080011b0 <dis_func0>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <dis_func0+0x1c>)
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	f103 0120 	add.w	r1, r3, #32
 80011b8:	428a      	cmp	r2, r1
 80011ba:	d203      	bcs.n	80011c4 <dis_func0+0x14>
    *chtest.tokp++ = token;
 80011bc:	1c50      	adds	r0, r2, #1
 80011be:	2130      	movs	r1, #48	; 0x30
 80011c0:	60d8      	str	r0, [r3, #12]
 80011c2:	7011      	strb	r1, [r2, #0]
static int dis_func0(void) {

  test_emit_token('0');

  return (msg_t)0x55AA;
}
 80011c4:	f245 50aa 	movw	r0, #21930	; 0x55aa
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000ab4 	.word	0x20000ab4

080011d0 <dis_func1>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <dis_func1+0x14>)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	f103 0120 	add.w	r1, r3, #32
 80011d8:	428a      	cmp	r2, r1
 80011da:	d202      	bcs.n	80011e2 <dis_func1+0x12>
    *chtest.tokp++ = token;
 80011dc:	1c51      	adds	r1, r2, #1
 80011de:	60d9      	str	r1, [r3, #12]

static msg_t dis_func1(msg_t a) {

  test_emit_token((char)a);
 80011e0:	7010      	strb	r0, [r2, #0]

  return (msg_t)a;
}
 80011e2:	4770      	bx	lr
 80011e4:	20000ab4 	.word	0x20000ab4
	...

080011f0 <dis_func2>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <dis_func2+0x28>)
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	f103 0c20 	add.w	ip, r3, #32
 80011f8:	4562      	cmp	r2, ip
 80011fa:	d20c      	bcs.n	8001216 <dis_func2+0x26>

static msg_t dis_func2(msg_t a, msg_t b) {
 80011fc:	b410      	push	{r4}
    *chtest.tokp++ = token;
 80011fe:	1c54      	adds	r4, r2, #1
 8001200:	60dc      	str	r4, [r3, #12]

  test_emit_token((char)a);
 8001202:	7010      	strb	r0, [r2, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	4562      	cmp	r2, ip
  test_emit_token((char)b);
 8001208:	b2c9      	uxtb	r1, r1
 800120a:	d202      	bcs.n	8001212 <dis_func2+0x22>
    *chtest.tokp++ = token;
 800120c:	1c54      	adds	r4, r2, #1
 800120e:	60dc      	str	r4, [r3, #12]
 8001210:	7011      	strb	r1, [r2, #0]

  return (msg_t)a;
}
 8001212:	bc10      	pop	{r4}
 8001214:	4770      	bx	lr
 8001216:	4770      	bx	lr
 8001218:	20000ab4 	.word	0x20000ab4
 800121c:	00000000 	.word	0x00000000

08001220 <dis_func3>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <dis_func3+0x34>)

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8001222:	b430      	push	{r4, r5}
 8001224:	68dc      	ldr	r4, [r3, #12]
 8001226:	f103 0c20 	add.w	ip, r3, #32
 800122a:	4564      	cmp	r4, ip
 800122c:	d210      	bcs.n	8001250 <dis_func3+0x30>
    *chtest.tokp++ = token;
 800122e:	1c65      	adds	r5, r4, #1
 8001230:	60dd      	str	r5, [r3, #12]

  test_emit_token((char)a);
 8001232:	7020      	strb	r0, [r4, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001234:	68dc      	ldr	r4, [r3, #12]
 8001236:	4564      	cmp	r4, ip
  test_emit_token((char)b);
 8001238:	b2c9      	uxtb	r1, r1
 800123a:	d209      	bcs.n	8001250 <dis_func3+0x30>
    *chtest.tokp++ = token;
 800123c:	1c65      	adds	r5, r4, #1
 800123e:	60dd      	str	r5, [r3, #12]
 8001240:	7021      	strb	r1, [r4, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001242:	68d9      	ldr	r1, [r3, #12]
 8001244:	4561      	cmp	r1, ip
  test_emit_token((char)c);
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	d202      	bcs.n	8001250 <dis_func3+0x30>
    *chtest.tokp++ = token;
 800124a:	1c4c      	adds	r4, r1, #1
 800124c:	60dc      	str	r4, [r3, #12]
 800124e:	700a      	strb	r2, [r1, #0]

  return (msg_t)a;
}
 8001250:	bc30      	pop	{r4, r5}
 8001252:	4770      	bx	lr
 8001254:	20000ab4 	.word	0x20000ab4
	...

08001260 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8001260:	b470      	push	{r4, r5, r6}
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001262:	4c10      	ldr	r4, [pc, #64]	; (80012a4 <dis_func4+0x44>)
 8001264:	68e5      	ldr	r5, [r4, #12]
 8001266:	f104 0c20 	add.w	ip, r4, #32
 800126a:	4565      	cmp	r5, ip
 800126c:	d217      	bcs.n	800129e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 800126e:	1c6e      	adds	r6, r5, #1
 8001270:	60e6      	str	r6, [r4, #12]

  test_emit_token((char)a);
 8001272:	7028      	strb	r0, [r5, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001274:	68e5      	ldr	r5, [r4, #12]
 8001276:	4565      	cmp	r5, ip
  test_emit_token((char)b);
 8001278:	b2c9      	uxtb	r1, r1
 800127a:	d210      	bcs.n	800129e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 800127c:	1c6e      	adds	r6, r5, #1
 800127e:	60e6      	str	r6, [r4, #12]
 8001280:	7029      	strb	r1, [r5, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001282:	68e1      	ldr	r1, [r4, #12]
 8001284:	4561      	cmp	r1, ip
  test_emit_token((char)c);
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	d209      	bcs.n	800129e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 800128a:	1c4d      	adds	r5, r1, #1
 800128c:	60e5      	str	r5, [r4, #12]
 800128e:	700a      	strb	r2, [r1, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001290:	68e2      	ldr	r2, [r4, #12]
 8001292:	4562      	cmp	r2, ip
  test_emit_token((char)d);
 8001294:	b2db      	uxtb	r3, r3
 8001296:	d202      	bcs.n	800129e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8001298:	1c51      	adds	r1, r2, #1
 800129a:	60e1      	str	r1, [r4, #12]
 800129c:	7013      	strb	r3, [r2, #0]

  return (msg_t)a;
}
 800129e:	bc70      	pop	{r4, r5, r6}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000ab4 	.word	0x20000ab4
	...

080012b0 <dis_func_end>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <dis_func_end+0x20>)
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	f103 0120 	add.w	r1, r3, #32
 80012b8:	428a      	cmp	r2, r1
 80012ba:	d203      	bcs.n	80012c4 <dis_func_end+0x14>
    *chtest.tokp++ = token;
 80012bc:	1c50      	adds	r0, r2, #1
 80012be:	215a      	movs	r1, #90	; 0x5a
 80012c0:	60d8      	str	r0, [r3, #12]
 80012c2:	7011      	strb	r1, [r2, #0]

static int dis_func_end(void) {

  test_emit_token('Z');
  exit_flag = true;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <dis_func_end+0x24>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]

  return (msg_t)0xAA55;
}
 80012ca:	f64a 2055 	movw	r0, #43605	; 0xaa55
 80012ce:	4770      	bx	lr
 80012d0:	20000ab4 	.word	0x20000ab4
 80012d4:	20000b00 	.word	0x20000b00
	...

080012e0 <obj_write>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <obj_write+0x1c>)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	f103 0020 	add.w	r0, r3, #32
 80012e8:	4282      	cmp	r2, r0
 80012ea:	d204      	bcs.n	80012f6 <obj_write+0x16>
                      oc_object_t *objp,
                      bool async) {
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 80012ec:	6949      	ldr	r1, [r1, #20]
    *chtest.tokp++ = token;
 80012ee:	1c50      	adds	r0, r2, #1
 80012f0:	3141      	adds	r1, #65	; 0x41
 80012f2:	60d8      	str	r0, [r3, #12]
 80012f4:	7011      	strb	r1, [r2, #0]

  return false;
}
 80012f6:	2000      	movs	r0, #0
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000ab4 	.word	0x20000ab4

08001300 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
 8001300:	2000      	movs	r0, #0
 8001302:	4770      	bx	lr
	...

08001310 <oslib_test_007_001_setup.lto_priv.0>:
  mp->next = NULL;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <oslib_test_007_001_setup.lto_priv.0+0x10>)
  mp->object_size = size;
 8001312:	2200      	movs	r2, #0
 8001314:	2104      	movs	r1, #4
 8001316:	e9c3 2100 	strd	r2, r1, [r3]
  mp->provider = provider;
 800131a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void oslib_test_007_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}
 800131e:	4770      	bx	lr
 8001320:	20000874 	.word	0x20000874
	...

08001330 <oslib_test_007_001_execute.lto_priv.0>:

static void oslib_test_007_001_execute(void) {
 8001330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned i;

  /* [7.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 8001334:	4f5d      	ldr	r7, [pc, #372]	; (80014ac <oslib_test_007_001_execute.lto_priv.0+0x17c>)
 8001336:	4b5e      	ldr	r3, [pc, #376]	; (80014b0 <oslib_test_007_001_execute.lto_priv.0+0x180>)
 8001338:	4c5e      	ldr	r4, [pc, #376]	; (80014b4 <oslib_test_007_001_execute.lto_priv.0+0x184>)
 800133a:	2201      	movs	r2, #1
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	2530      	movs	r5, #48	; 0x30
 8001340:	2204      	movs	r2, #4
 8001342:	2000      	movs	r0, #0
 8001344:	f385 8811 	msr	BASEPRI, r5
  php->next = mp->next;
 8001348:	6821      	ldr	r1, [r4, #0]
 800134a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 800134c:	6023      	str	r3, [r4, #0]
 800134e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001352:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8001354:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8001356:	440b      	add	r3, r1
  while (n != 0U) {
 8001358:	d1f4      	bne.n	8001344 <oslib_test_007_001_execute.lto_priv.0+0x14>
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
  }
  test_end_step(1);

  /* [7.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 800135a:	2302      	movs	r3, #2
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	2604      	movs	r6, #4
 8001360:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001364:	4615      	mov	r5, r2
 8001366:	f388 8811 	msr	BASEPRI, r8
  objp = mp->next;
 800136a:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 800136c:	2800      	cmp	r0, #0
 800136e:	d070      	beq.n	8001452 <oslib_test_007_001_execute.lto_priv.0+0x122>
    mp->next = mp->next->next;
 8001370:	6803      	ldr	r3, [r0, #0]
 8001372:	6023      	str	r3, [r4, #0]
 8001374:	f385 8811 	msr	BASEPRI, r5
  if (!condition) {
 8001378:	2800      	cmp	r0, #0
 800137a:	d063      	beq.n	8001444 <oslib_test_007_001_execute.lto_priv.0+0x114>
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800137c:	3e01      	subs	r6, #1
 800137e:	d1f2      	bne.n	8001366 <oslib_test_007_001_execute.lto_priv.0+0x36>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }
  test_end_step(2);

  /* [7.1.3] Now must be empty.*/
  test_set_step(3);
 8001380:	2303      	movs	r3, #3
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	2330      	movs	r3, #48	; 0x30
 8001386:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800138a:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 800138c:	2800      	cmp	r0, #0
 800138e:	d072      	beq.n	8001476 <oslib_test_007_001_execute.lto_priv.0+0x146>
    mp->next = mp->next->next;
 8001390:	6803      	ldr	r3, [r0, #0]
 8001392:	6023      	str	r3, [r4, #0]
 8001394:	2300      	movs	r3, #0
 8001396:	f383 8811 	msr	BASEPRI, r3
 800139a:	2800      	cmp	r0, #0
 800139c:	d164      	bne.n	8001468 <oslib_test_007_001_execute.lto_priv.0+0x138>
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  }
  test_end_step(3);

  /* [7.1.4] Adding the objects to the pool using chPoolFree().*/
  test_set_step(4);
 800139e:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <oslib_test_007_001_execute.lto_priv.0+0x180>)
 80013a0:	2204      	movs	r2, #4
 80013a2:	603a      	str	r2, [r7, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80013a4:	f103 0610 	add.w	r6, r3, #16
 80013a8:	2530      	movs	r5, #48	; 0x30
 80013aa:	2000      	movs	r0, #0
      chPoolFree(&mp1, &objects[i]);
 80013ac:	461a      	mov	r2, r3
 80013ae:	f385 8811 	msr	BASEPRI, r5
  php->next = mp->next;
 80013b2:	6821      	ldr	r1, [r4, #0]
 80013b4:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 80013b8:	6022      	str	r2, [r4, #0]
 80013ba:	f380 8811 	msr	BASEPRI, r0
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80013be:	429e      	cmp	r6, r3
 80013c0:	d1f4      	bne.n	80013ac <oslib_test_007_001_execute.lto_priv.0+0x7c>
  }
  test_end_step(4);

  /* [7.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 80013c2:	2305      	movs	r3, #5
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	2504      	movs	r5, #4
 80013c8:	2630      	movs	r6, #48	; 0x30
 80013ca:	f04f 0800 	mov.w	r8, #0
 80013ce:	f386 8811 	msr	BASEPRI, r6
  objp = mp->next;
 80013d2:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d031      	beq.n	800143c <oslib_test_007_001_execute.lto_priv.0+0x10c>
    mp->next = mp->next->next;
 80013d8:	6803      	ldr	r3, [r0, #0]
 80013da:	6023      	str	r3, [r4, #0]
 80013dc:	f388 8811 	msr	BASEPRI, r8
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d02f      	beq.n	8001444 <oslib_test_007_001_execute.lto_priv.0+0x114>
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80013e4:	3d01      	subs	r5, #1
 80013e6:	d1f2      	bne.n	80013ce <oslib_test_007_001_execute.lto_priv.0+0x9e>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }
  test_end_step(5);

  /* [7.1.6] Now must be empty again.*/
  test_set_step(6);
 80013e8:	2306      	movs	r3, #6
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	2330      	movs	r3, #48	; 0x30
 80013ee:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 80013f2:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d044      	beq.n	8001482 <oslib_test_007_001_execute.lto_priv.0+0x152>
    mp->next = mp->next->next;
 80013f8:	6803      	ldr	r3, [r0, #0]
 80013fa:	6023      	str	r3, [r4, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	f383 8811 	msr	BASEPRI, r3
 8001402:	2800      	cmp	r0, #0
 8001404:	d130      	bne.n	8001468 <oslib_test_007_001_execute.lto_priv.0+0x138>
  mp->provider = provider;
 8001406:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <oslib_test_007_001_execute.lto_priv.0+0x188>)
  }
  test_end_step(6);

  /* [7.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
 8001408:	2107      	movs	r1, #7
  mp->object_size = size;
 800140a:	2304      	movs	r3, #4
 800140c:	6039      	str	r1, [r7, #0]
  mp->next = NULL;
 800140e:	2100      	movs	r1, #0
  mp->object_size = size;
 8001410:	e9c4 1300 	strd	r1, r3, [r4]
  mp->provider = provider;
 8001414:	e9c4 3202 	strd	r3, r2, [r4, #8]
 8001418:	2330      	movs	r3, #48	; 0x30
 800141a:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800141e:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8001420:	2800      	cmp	r0, #0
 8001422:	d034      	beq.n	800148e <oslib_test_007_001_execute.lto_priv.0+0x15e>
    mp->next = mp->next->next;
 8001424:	6803      	ldr	r3, [r0, #0]
 8001426:	6023      	str	r3, [r4, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	f383 8811 	msr	BASEPRI, r3
 800142e:	b170      	cbz	r0, 800144e <oslib_test_007_001_execute.lto_priv.0+0x11e>
  chtest.failure_message = msg;
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <oslib_test_007_001_execute.lto_priv.0+0x18c>)
 8001432:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8001434:	f240 1201 	movw	r2, #257	; 0x101
 8001438:	80ba      	strh	r2, [r7, #4]
    return __test_fail(msg);
 800143a:	e008      	b.n	800144e <oslib_test_007_001_execute.lto_priv.0+0x11e>
  else if (mp->provider != NULL) {
 800143c:	68e3      	ldr	r3, [r4, #12]
 800143e:	b97b      	cbnz	r3, 8001460 <oslib_test_007_001_execute.lto_priv.0+0x130>
 8001440:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <oslib_test_007_001_execute.lto_priv.0+0x190>)
 8001446:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8001448:	f240 1201 	movw	r2, #257	; 0x101
 800144c:	80ba      	strh	r2, [r7, #4]
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  }
  test_end_step(7);
}
 800144e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001452:	68e3      	ldr	r3, [r4, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f3      	beq.n	8001440 <oslib_test_007_001_execute.lto_priv.0+0x110>
    objp = mp->provider(mp->object_size, mp->align);
 8001458:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800145c:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800145e:	e789      	b.n	8001374 <oslib_test_007_001_execute.lto_priv.0+0x44>
    objp = mp->provider(mp->object_size, mp->align);
 8001460:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8001464:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8001466:	e7b9      	b.n	80013dc <oslib_test_007_001_execute.lto_priv.0+0xac>
  chtest.failure_message = msg;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <oslib_test_007_001_execute.lto_priv.0+0x194>)
 800146a:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800146c:	f240 1201 	movw	r2, #257	; 0x101
 8001470:	80ba      	strh	r2, [r7, #4]
 8001472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8001476:	68e3      	ldr	r3, [r4, #12]
 8001478:	b17b      	cbz	r3, 800149a <oslib_test_007_001_execute.lto_priv.0+0x16a>
    objp = mp->provider(mp->object_size, mp->align);
 800147a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800147e:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8001480:	e788      	b.n	8001394 <oslib_test_007_001_execute.lto_priv.0+0x64>
  else if (mp->provider != NULL) {
 8001482:	68e3      	ldr	r3, [r4, #12]
 8001484:	b163      	cbz	r3, 80014a0 <oslib_test_007_001_execute.lto_priv.0+0x170>
    objp = mp->provider(mp->object_size, mp->align);
 8001486:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800148a:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800148c:	e7b6      	b.n	80013fc <oslib_test_007_001_execute.lto_priv.0+0xcc>
  else if (mp->provider != NULL) {
 800148e:	68e3      	ldr	r3, [r4, #12]
 8001490:	b14b      	cbz	r3, 80014a6 <oslib_test_007_001_execute.lto_priv.0+0x176>
    objp = mp->provider(mp->object_size, mp->align);
 8001492:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8001496:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8001498:	e7c6      	b.n	8001428 <oslib_test_007_001_execute.lto_priv.0+0xf8>
 800149a:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 800149e:	e77e      	b.n	800139e <oslib_test_007_001_execute.lto_priv.0+0x6e>
 80014a0:	f385 8811 	msr	BASEPRI, r5
 80014a4:	e7af      	b.n	8001406 <oslib_test_007_001_execute.lto_priv.0+0xd6>
 80014a6:	f383 8811 	msr	BASEPRI, r3
 80014aa:	e7d0      	b.n	800144e <oslib_test_007_001_execute.lto_priv.0+0x11e>
 80014ac:	20000ab4 	.word	0x20000ab4
 80014b0:	20000cfc 	.word	0x20000cfc
 80014b4:	20000874 	.word	0x20000874
 80014b8:	08001301 	.word	0x08001301
 80014bc:	0800b9fc 	.word	0x0800b9fc
 80014c0:	0800b9e0 	.word	0x0800b9e0
 80014c4:	0800b9ec 	.word	0x0800b9ec
	...

080014d0 <oslib_test_007_003_setup.lto_priv.0>:
  mp->next = NULL;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <oslib_test_007_003_setup.lto_priv.0+0x18>)
  mp->object_size = size;
 80014d2:	2200      	movs	r2, #0
 80014d4:	2104      	movs	r1, #4
 80014d6:	e9c3 2103 	strd	r2, r1, [r3, #12]
  mp->provider = provider;
 80014da:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80014de:	e9c3 3300 	strd	r3, r3, [r3]
 80014e2:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000810 	.word	0x20000810
 80014ec:	00000000 	.word	0x00000000

080014f0 <oslib_test_007_002_setup.lto_priv.0>:
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <oslib_test_007_002_setup.lto_priv.0+0x18>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	2104      	movs	r1, #4
 80014f6:	e9c3 2103 	strd	r2, r1, [r3, #12]
 80014fa:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80014fe:	e9c3 3300 	strd	r3, r3, [r3]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000810 	.word	0x20000810
 800150c:	00000000 	.word	0x00000000

08001510 <oslib_test_008_001_setup.lto_priv.0>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <oslib_test_008_001_setup.lto_priv.0+0x34>)
  heapp->provider = NULL;
 8001512:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <oslib_test_008_001_setup.lto_priv.0+0x38>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001514:	1dd9      	adds	r1, r3, #7
 8001516:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800151a:	1acb      	subs	r3, r1, r3
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800151c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
  heapp->provider = NULL;
 8001520:	2000      	movs	r0, #0
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8001522:	08db      	lsrs	r3, r3, #3
  H_FREE_PAGES(&heapp->header) = 0;
 8001524:	e9c2 1003 	strd	r1, r0, [r2, #12]
  heapp->provider = NULL;
 8001528:	6010      	str	r0, [r2, #0]
  H_FREE_NEXT(hp) = NULL;
 800152a:	6008      	str	r0, [r1, #0]
 800152c:	61d0      	str	r0, [r2, #28]
  H_FREE_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800152e:	604b      	str	r3, [r1, #4]
  heapp->area.size = H_FREE_FULLSIZE(hp);
 8001530:	3301      	adds	r3, #1
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	6093      	str	r3, [r2, #8]
  qp->next = qp;
 8001536:	f102 0314 	add.w	r3, r2, #20
  qp->prev = qp;
 800153a:	e9c2 3305 	strd	r3, r3, [r2, #20]
  heapp->area.base = (uint8_t *)(void *)hp;
 800153e:	6051      	str	r1, [r2, #4]
 * .
 */

static void oslib_test_008_001_setup(void) {
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200016c4 	.word	0x200016c4
 8001548:	200016a0 	.word	0x200016a0
 800154c:	00000000 	.word	0x00000000

08001550 <__sch_wakeup.lto_priv.0>:
 8001550:	2330      	movs	r3, #48	; 0x30
 8001552:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8001556:	7f0b      	ldrb	r3, [r1, #28]
 8001558:	2b0c      	cmp	r3, #12
 800155a:	d810      	bhi.n	800157e <__sch_wakeup.lto_priv.0+0x2e>
 800155c:	e8df f003 	tbb	[pc, r3]
 8001560:	250f0f29 	.word	0x250f0f29
 8001564:	0b0f070b 	.word	0x0b0f070b
 8001568:	0f0f0f0f 	.word	0x0f0f0f0f
 800156c:	0b          	.byte	0x0b
 800156d:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800156e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8001570:	6893      	ldr	r3, [r2, #8]
 8001572:	3301      	adds	r3, #1
 8001574:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8001576:	e9d1 3200 	ldrd	r3, r2, [r1]
 800157a:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800157c:	605a      	str	r2, [r3, #4]
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 800157e:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8001580:	2200      	movs	r2, #0
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8001582:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001586:	690b      	ldr	r3, [r1, #16]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 8001588:	6888      	ldr	r0, [r1, #8]
  tp->u.rdymsg = MSG_TIMEOUT;
 800158a:	634c      	str	r4, [r1, #52]	; 0x34
  tp->state = CH_STATE_READY;
 800158c:	770a      	strb	r2, [r1, #28]
    pqp = pqp->next;
 800158e:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	4282      	cmp	r2, r0
 8001594:	d2fb      	bcs.n	800158e <__sch_wakeup.lto_priv.0+0x3e>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	2000      	movs	r0, #0
 800159a:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 800159e:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80015a0:	6059      	str	r1, [r3, #4]
 80015a2:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 80015a6:	bc10      	pop	{r4}
 80015a8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80015aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    break;
 80015b0:	e7e5      	b.n	800157e <__sch_wakeup.lto_priv.0+0x2e>
 80015b2:	2300      	movs	r3, #0
 80015b4:	f383 8811 	msr	BASEPRI, r3
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	0000      	movs	r0, r0
	...

080015c0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 80015c0:	6883      	ldr	r3, [r0, #8]
 80015c2:	3301      	adds	r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	6083      	str	r3, [r0, #8]
 80015c8:	dd00      	ble.n	80015cc <chSemSignalI+0xc>
 80015ca:	4770      	bx	lr
  ch_queue_t *p = qp->next;
 80015cc:	6803      	ldr	r3, [r0, #0]
void chSemSignalI(semaphore_t *sp) {
 80015ce:	b410      	push	{r4}
  qp->next       = p->next;
 80015d0:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	6004      	str	r4, [r0, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = threadref(ch_queue_fifo_remove(&sp->queue));
    tp->u.rdymsg = MSG_OK;
 80015d6:	2100      	movs	r1, #0
  qp->next->prev = qp;
 80015d8:	6060      	str	r0, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80015da:	6898      	ldr	r0, [r3, #8]
 80015dc:	6359      	str	r1, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 80015de:	7719      	strb	r1, [r3, #28]
    pqp = pqp->next;
 80015e0:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80015e2:	6891      	ldr	r1, [r2, #8]
 80015e4:	4281      	cmp	r1, r0
 80015e6:	d2fb      	bcs.n	80015e0 <chSemSignalI+0x20>
  p->prev       = pqp->prev;
 80015e8:	6851      	ldr	r1, [r2, #4]
    (void) chSchReadyI(tp);
  }
}
 80015ea:	bc10      	pop	{r4}
 80015ec:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80015f0:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80015f2:	6053      	str	r3, [r2, #4]
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
	...

08001600 <chMtxUnlockS>:
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <chMtxUnlockS+0x60>)
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001602:	6802      	ldr	r2, [r0, #0]
void chMtxUnlockS(mutex_t *mp) {
 8001604:	b410      	push	{r4}
 8001606:	68dc      	ldr	r4, [r3, #12]
    currtp->mtxlist = mp->next;
 8001608:	68c3      	ldr	r3, [r0, #12]
 800160a:	64a3      	str	r3, [r4, #72]	; 0x48
    if (chMtxQueueNotEmptyS(mp)) {
 800160c:	4282      	cmp	r2, r0
 800160e:	d023      	beq.n	8001658 <chMtxUnlockS+0x58>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8001610:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 8001612:	b14b      	cbz	r3, 8001628 <chMtxUnlockS+0x28>
  return (bool)(qp->next != qp);
 8001614:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001616:	4293      	cmp	r3, r2
 8001618:	d003      	beq.n	8001622 <chMtxUnlockS+0x22>
 800161a:	6892      	ldr	r2, [r2, #8]
 800161c:	4291      	cmp	r1, r2
 800161e:	bf38      	it	cc
 8001620:	4611      	movcc	r1, r2
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
          newprio = threadref(lmp->queue.next)->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 8001622:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f5      	bne.n	8001614 <chMtxUnlockS+0x14>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8001628:	60a1      	str	r1, [r4, #8]
  ch_queue_t *p = qp->next;
 800162a:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800162c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
  qp->next       = p->next;
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	6002      	str	r2, [r0, #0]
 8001632:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8001634:	6050      	str	r0, [r2, #4]
 8001636:	e9c0 3402 	strd	r3, r4, [r0, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800163a:	691a      	ldr	r2, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 800163c:	689c      	ldr	r4, [r3, #8]
      tp->mtxlist = mp;
 800163e:	6498      	str	r0, [r3, #72]	; 0x48
  tp->state = CH_STATE_READY;
 8001640:	7719      	strb	r1, [r3, #28]
    pqp = pqp->next;
 8001642:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001644:	6891      	ldr	r1, [r2, #8]
 8001646:	42a1      	cmp	r1, r4
 8001648:	d2fb      	bcs.n	8001642 <chMtxUnlockS+0x42>
  p->prev       = pqp->prev;
 800164a:	6851      	ldr	r1, [r2, #4]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 800164c:	bc10      	pop	{r4}
 800164e:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8001652:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8001654:	6053      	str	r3, [r2, #4]
 8001656:	4770      	bx	lr
      mp->owner = NULL;
 8001658:	2300      	movs	r3, #0
}
 800165a:	bc10      	pop	{r4}
      mp->owner = NULL;
 800165c:	6093      	str	r3, [r2, #8]
}
 800165e:	4770      	bx	lr
 8001660:	200009b8 	.word	0x200009b8
	...

08001670 <chEvtBroadcastFlagsI>:
  elp = esp->next;
 8001670:	6803      	ldr	r3, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8001672:	4298      	cmp	r0, r3
 8001674:	d033      	beq.n	80016de <chEvtBroadcastFlagsI+0x6e>
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001676:	b4f0      	push	{r4, r5, r6, r7}
    tp->u.rdymsg = MSG_OK;
 8001678:	2600      	movs	r6, #0
 800167a:	e005      	b.n	8001688 <chEvtBroadcastFlagsI+0x18>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800167c:	f1bc 0f0b 	cmp.w	ip, #11
 8001680:	d028      	beq.n	80016d4 <chEvtBroadcastFlagsI+0x64>
    elp = elp->next;
 8001682:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8001684:	4298      	cmp	r0, r3
 8001686:	d023      	beq.n	80016d0 <chEvtBroadcastFlagsI+0x60>
    elp->flags |= flags;
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	430a      	orrs	r2, r1
 800168c:	60da      	str	r2, [r3, #12]
    if ((flags == (eventflags_t)0) ||
 800168e:	b111      	cbz	r1, 8001696 <chEvtBroadcastFlagsI+0x26>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001690:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8001692:	4211      	tst	r1, r2
 8001694:	d0f5      	beq.n	8001682 <chEvtBroadcastFlagsI+0x12>
  tp->epending |= events;
 8001696:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 800169a:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (((tp->state == CH_STATE_WTOREVT) &&
 800169c:	f892 c01c 	ldrb.w	ip, [r2, #28]
  tp->epending |= events;
 80016a0:	432c      	orrs	r4, r5
  if (((tp->state == CH_STATE_WTOREVT) &&
 80016a2:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 80016a6:	6454      	str	r4, [r2, #68]	; 0x44
  if (((tp->state == CH_STATE_WTOREVT) &&
 80016a8:	d1e8      	bne.n	800167c <chEvtBroadcastFlagsI+0xc>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80016aa:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80016ac:	422c      	tst	r4, r5
 80016ae:	d0e8      	beq.n	8001682 <chEvtBroadcastFlagsI+0x12>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80016b0:	6914      	ldr	r4, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 80016b2:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 80016b4:	6356      	str	r6, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 80016b6:	7716      	strb	r6, [r2, #28]
    pqp = pqp->next;
 80016b8:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80016ba:	68a5      	ldr	r5, [r4, #8]
 80016bc:	42bd      	cmp	r5, r7
 80016be:	d2fb      	bcs.n	80016b8 <chEvtBroadcastFlagsI+0x48>
    elp = elp->next;
 80016c0:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 80016c2:	6865      	ldr	r5, [r4, #4]
  while (elp != (event_listener_t *)esp) {
 80016c4:	4298      	cmp	r0, r3
 80016c6:	e9c2 4500 	strd	r4, r5, [r2]
  p->prev->next = p;
 80016ca:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 80016cc:	6062      	str	r2, [r4, #4]
 80016ce:	d1db      	bne.n	8001688 <chEvtBroadcastFlagsI+0x18>
}
 80016d0:	bcf0      	pop	{r4, r5, r6, r7}
 80016d2:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80016d4:	6b55      	ldr	r5, [r2, #52]	; 0x34
      ((tp->state == CH_STATE_WTANDEVT) &&
 80016d6:	ea35 0404 	bics.w	r4, r5, r4
 80016da:	d1d2      	bne.n	8001682 <chEvtBroadcastFlagsI+0x12>
 80016dc:	e7e8      	b.n	80016b0 <chEvtBroadcastFlagsI+0x40>
 80016de:	4770      	bx	lr

080016e0 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 80016e0:	b538      	push	{r3, r4, r5, lr}
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <chThdWait+0x74>)
 80016e4:	4604      	mov	r4, r0
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	2130      	movs	r1, #48	; 0x30
 80016ea:	f381 8811 	msr	BASEPRI, r1
  chDbgAssert(tp != currtp, "waiting self");
#if CH_CFG_USE_REGISTRY == TRUE
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
#endif

  if (likely(tp->state != CH_STATE_FINAL)) {
 80016ee:	7f01      	ldrb	r1, [r0, #28]
 80016f0:	290f      	cmp	r1, #15
 80016f2:	d00e      	beq.n	8001712 <chThdWait+0x32>
  p->next = lp->next;
 80016f4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 80016f6:	68d9      	ldr	r1, [r3, #12]
 80016f8:	6010      	str	r0, [r2, #0]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 80016fa:	2009      	movs	r0, #9
  lp->next = p;
 80016fc:	63a2      	str	r2, [r4, #56]	; 0x38
 80016fe:	7708      	strb	r0, [r1, #28]
  ch_priority_queue_t *p = pqp->next;
 8001700:	6818      	ldr	r0, [r3, #0]
  pqp->next       = p->next;
 8001702:	6802      	ldr	r2, [r0, #0]
 8001704:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8001706:	6053      	str	r3, [r2, #4]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 8001708:	2201      	movs	r2, #1
 800170a:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800170c:	60d8      	str	r0, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 800170e:	f7fe fdd7 	bl	80002c0 <__port_switch>
    ch_list_link(&tp->waiting, &currtp->hdr.list);
    chSchGoSleepS(CH_STATE_WTEXIT);
  }
  msg = tp->u.exitcode;
 8001712:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001714:	2200      	movs	r2, #0
 8001716:	f382 8811 	msr	BASEPRI, r2
 800171a:	2330      	movs	r3, #48	; 0x30
 800171c:	f383 8811 	msr	BASEPRI, r3
  tp->refs--;
 8001720:	7fa3      	ldrb	r3, [r4, #30]
 8001722:	3b01      	subs	r3, #1
 8001724:	77a3      	strb	r3, [r4, #30]
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8001726:	69e3      	ldr	r3, [r4, #28]
 8001728:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d003      	beq.n	8001738 <chThdWait+0x58>
 8001730:	f382 8811 	msr	BASEPRI, r2
  /* Releasing a reference to the thread.*/
  chThdRelease(tp);
#endif

  return msg;
}
 8001734:	4628      	mov	r0, r5
 8001736:	bd38      	pop	{r3, r4, r5, pc}
  p->prev->next = p->next;
 8001738:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 800173c:	600b      	str	r3, [r1, #0]
  p->next->prev = p->prev;
 800173e:	6059      	str	r1, [r3, #4]
 8001740:	f382 8811 	msr	BASEPRI, r2
    if (tp->dispose != NULL) {
 8001744:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f4      	beq.n	8001734 <chThdWait+0x54>
      tp->dispose(tp);
 800174a:	4620      	mov	r0, r4
 800174c:	4798      	blx	r3
}
 800174e:	4628      	mov	r0, r5
 8001750:	bd38      	pop	{r3, r4, r5, pc}
 8001752:	bf00      	nop
 8001754:	200009b8 	.word	0x200009b8
	...

08001760 <rt_test_007_005_teardown.lto_priv.0>:
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	4c07      	ldr	r4, [pc, #28]	; (8001780 <rt_test_007_005_teardown.lto_priv.0+0x20>)
 8001764:	2600      	movs	r6, #0
 8001766:	f104 0514 	add.w	r5, r4, #20
 800176a:	f854 0b04 	ldr.w	r0, [r4], #4
 800176e:	b118      	cbz	r0, 8001778 <rt_test_007_005_teardown.lto_priv.0+0x18>
 8001770:	f7ff ffb6 	bl	80016e0 <chThdWait>
 8001774:	f844 6c04 	str.w	r6, [r4, #-4]
 8001778:	42ac      	cmp	r4, r5
 800177a:	d1f6      	bne.n	800176a <rt_test_007_005_teardown.lto_priv.0+0xa>
 800177c:	bd70      	pop	{r4, r5, r6, pc}
 800177e:	bf00      	nop
 8001780:	20001744 	.word	0x20001744
	...

08001790 <rt_test_007_006_teardown.lto_priv.0>:
 * - [7.6.6] Signaling the binary semaphore again, the internal state
 *   must not change from "not taken".
 * .
 */

static void rt_test_007_006_teardown(void) {
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	4c07      	ldr	r4, [pc, #28]	; (80017b0 <rt_test_007_006_teardown.lto_priv.0+0x20>)
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8001794:	2600      	movs	r6, #0
 8001796:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800179a:	f854 0b04 	ldr.w	r0, [r4], #4
 800179e:	b118      	cbz	r0, 80017a8 <rt_test_007_006_teardown.lto_priv.0+0x18>
      chThdWait(threads[i]);
 80017a0:	f7ff ff9e 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 80017a4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80017a8:	42ac      	cmp	r4, r5
 80017aa:	d1f6      	bne.n	800179a <rt_test_007_006_teardown.lto_priv.0+0xa>
  test_wait_threads();
}
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
 80017ae:	bf00      	nop
 80017b0:	20001744 	.word	0x20001744
	...

080017c0 <rt_test_008_004_teardown.lto_priv.0>:
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	4c07      	ldr	r4, [pc, #28]	; (80017e0 <rt_test_008_004_teardown.lto_priv.0+0x20>)
 80017c4:	2600      	movs	r6, #0
 80017c6:	f104 0514 	add.w	r5, r4, #20
 80017ca:	f854 0b04 	ldr.w	r0, [r4], #4
 80017ce:	b118      	cbz	r0, 80017d8 <rt_test_008_004_teardown.lto_priv.0+0x18>
 80017d0:	f7ff ff86 	bl	80016e0 <chThdWait>
 80017d4:	f844 6c04 	str.w	r6, [r4, #-4]
 80017d8:	42ac      	cmp	r4, r5
 80017da:	d1f6      	bne.n	80017ca <rt_test_008_004_teardown.lto_priv.0+0xa>
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	bf00      	nop
 80017e0:	20001744 	.word	0x20001744
	...

080017f0 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 80017f0:	b510      	push	{r4, lr}
 80017f2:	2330      	movs	r3, #48	; 0x30
 80017f4:	f383 8811 	msr	BASEPRI, r3
 *
 * @sclass
 */
void chSchDoYieldS(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <chThdYield+0x48>)
 80017fa:	68d9      	ldr	r1, [r3, #12]

  chDbgCheckClassS();

  /* If this function has been called then it is likely there are threads
     at same priority level.*/
  if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	688a      	ldr	r2, [r1, #8]
 8001800:	6884      	ldr	r4, [r0, #8]
 8001802:	4294      	cmp	r4, r2
 8001804:	d313      	bcc.n	800182e <chThdYield+0x3e>
  pqp->next       = p->next;
 8001806:	6804      	ldr	r4, [r0, #0]
 8001808:	601c      	str	r4, [r3, #0]
  pqp->next->prev = pqp;
 800180a:	6063      	str	r3, [r4, #4]
  ntp->state = CH_STATE_CURRENT;
 800180c:	2401      	movs	r4, #1
 800180e:	7704      	strb	r4, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8001810:	60d8      	str	r0, [r3, #12]
  tp->state = CH_STATE_READY;
 8001812:	2400      	movs	r4, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001814:	690b      	ldr	r3, [r1, #16]
  tp->state = CH_STATE_READY;
 8001816:	770c      	strb	r4, [r1, #28]
    pqp = pqp->next;
 8001818:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800181a:	689c      	ldr	r4, [r3, #8]
 800181c:	42a2      	cmp	r2, r4
 800181e:	d9fb      	bls.n	8001818 <chThdYield+0x28>
  p->prev       = pqp->prev;
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8001826:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8001828:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 800182a:	f7fe fd49 	bl	80002c0 <__port_switch>
 800182e:	2300      	movs	r3, #0
 8001830:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chSchDoYieldS();
  chSysUnlock();
}
 8001834:	bd10      	pop	{r4, pc}
 8001836:	bf00      	nop
 8001838:	200009b8 	.word	0x200009b8
 800183c:	00000000 	.word	0x00000000

08001840 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8001840:	b538      	push	{r3, r4, r5, lr}
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <chMsgSend+0x60>)
 8001844:	2230      	movs	r2, #48	; 0x30
 8001846:	68dc      	ldr	r4, [r3, #12]
 8001848:	f382 8811 	msr	BASEPRI, r2
  p->prev       = qp->prev;
 800184c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800184e:	6062      	str	r2, [r4, #4]

  chDbgCheck(tp != NULL);

  chSysLock();
  currtp->u.sentmsg = msg;
  __ch_msg_insert(&tp->msgqueue, currtp);
 8001850:	f100 053c 	add.w	r5, r0, #60	; 0x3c
  p->next       = qp;
 8001854:	6025      	str	r5, [r4, #0]
  currtp->u.sentmsg = msg;
 8001856:	6361      	str	r1, [r4, #52]	; 0x34
  p->prev->next = p;
 8001858:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800185a:	7f02      	ldrb	r2, [r0, #28]
  qp->prev      = p;
 800185c:	6404      	str	r4, [r0, #64]	; 0x40
 800185e:	2a0e      	cmp	r2, #14
 8001860:	d010      	beq.n	8001884 <chMsgSend+0x44>
  thread_t *otp = __instance_get_currthread(oip);
 8001862:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8001864:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8001866:	220c      	movs	r2, #12
 8001868:	770a      	strb	r2, [r1, #28]
  pqp->next       = p->next;
 800186a:	6802      	ldr	r2, [r0, #0]
 800186c:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 800186e:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8001870:	2201      	movs	r2, #1
 8001872:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8001874:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8001876:	f7fe fd23 	bl	80002c0 <__port_switch>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
  msg = currtp->u.rdymsg;
 800187a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800187c:	2300      	movs	r3, #0
 800187e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8001882:	bd38      	pop	{r3, r4, r5, pc}
  tp->state = CH_STATE_READY;
 8001884:	2100      	movs	r1, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001886:	6902      	ldr	r2, [r0, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8001888:	6885      	ldr	r5, [r0, #8]
  tp->state = CH_STATE_READY;
 800188a:	7701      	strb	r1, [r0, #28]
    pqp = pqp->next;
 800188c:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800188e:	6891      	ldr	r1, [r2, #8]
 8001890:	42a9      	cmp	r1, r5
 8001892:	d2fb      	bcs.n	800188c <chMsgSend+0x4c>
  p->prev       = pqp->prev;
 8001894:	6851      	ldr	r1, [r2, #4]
 8001896:	e9c0 2100 	strd	r2, r1, [r0]
  p->prev->next = p;
 800189a:	6008      	str	r0, [r1, #0]
  pqp->prev     = p;
 800189c:	6050      	str	r0, [r2, #4]
  return __sch_ready_behind(tp);
 800189e:	e7e0      	b.n	8001862 <chMsgSend+0x22>
 80018a0:	200009b8 	.word	0x200009b8
	...

080018b0 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 80018b0:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 80018b2:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 80018b4:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 80018b6:	f7ff ffc3 	bl	8001840 <chMsgSend>
  chMsgSend(p, 'B');
 80018ba:	2142      	movs	r1, #66	; 0x42
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff ffbf 	bl	8001840 <chMsgSend>
  chMsgSend(p, 'C');
 80018c2:	2143      	movs	r1, #67	; 0x43
 80018c4:	4620      	mov	r0, r4
 80018c6:	f7ff ffbb 	bl	8001840 <chMsgSend>
  chMsgSend(p, 'D');
 80018ca:	4620      	mov	r0, r4
 80018cc:	2144      	movs	r1, #68	; 0x44
}
 80018ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 80018d2:	f7ff bfb5 	b.w	8001840 <chMsgSend>
 80018d6:	bf00      	nop
	...

080018e0 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 80018e0:	b510      	push	{r4, lr}
 80018e2:	2330      	movs	r3, #48	; 0x30
 80018e4:	4604      	mov	r4, r0
 80018e6:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <thread1.lto_priv.1+0x60>)
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	6093      	str	r3, [r2, #8]
 80018f4:	db0d      	blt.n	8001912 <thread1.lto_priv.1+0x32>
 80018f6:	2300      	movs	r3, #0
 80018f8:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <thread1.lto_priv.1+0x64>)
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	f103 0120 	add.w	r1, r3, #32
 8001904:	428a      	cmp	r2, r1
 8001906:	d203      	bcs.n	8001910 <thread1.lto_priv.1+0x30>
  test_emit_token(*(char *)p);
 8001908:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 800190a:	1c50      	adds	r0, r2, #1
 800190c:	60d8      	str	r0, [r3, #12]
 800190e:	7011      	strb	r1, [r2, #0]
}
 8001910:	bd10      	pop	{r4, pc}
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <thread1.lto_priv.1+0x68>)
  p->prev       = qp->prev;
 8001914:	6850      	ldr	r0, [r2, #4]
 8001916:	68d9      	ldr	r1, [r3, #12]
  otp->state = newstate;
 8001918:	f04f 0c05 	mov.w	ip, #5
 800191c:	e9c1 2000 	strd	r2, r0, [r1]
    currtp->u.wtsemp = sp;
 8001920:	634a      	str	r2, [r1, #52]	; 0x34
  p->prev->next = p;
 8001922:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	f881 c01c 	strb.w	ip, [r1, #28]
  qp->prev      = p;
 800192a:	6051      	str	r1, [r2, #4]
  pqp->next       = p->next;
 800192c:	6802      	ldr	r2, [r0, #0]
 800192e:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8001930:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8001932:	2201      	movs	r2, #1
 8001934:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8001936:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8001938:	f7fe fcc2 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 800193c:	e7db      	b.n	80018f6 <thread1.lto_priv.1+0x16>
 800193e:	bf00      	nop
 8001940:	20000d0c 	.word	0x20000d0c
 8001944:	20000ab4 	.word	0x20000ab4
 8001948:	200009b8 	.word	0x200009b8
 800194c:	00000000 	.word	0x00000000

08001950 <bmk_thread3>:
static THD_FUNCTION(bmk_thread3, p) {
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	2330      	movs	r3, #48	; 0x30
 8001954:	f383 8811 	msr	BASEPRI, r3
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <bmk_thread3+0x7c>)
 800195a:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 800195c:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  currtp->u.exitcode = msg;
 800195e:	6348      	str	r0, [r1, #52]	; 0x34
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8001960:	f101 0c38 	add.w	ip, r1, #56	; 0x38
 8001964:	4594      	cmp	ip, r2
  tp->state = CH_STATE_READY;
 8001966:	bf18      	it	ne
 8001968:	f04f 0e00 	movne.w	lr, #0
 800196c:	d111      	bne.n	8001992 <bmk_thread3+0x42>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 800196e:	7f8a      	ldrb	r2, [r1, #30]
 8001970:	b31a      	cbz	r2, 80019ba <bmk_thread3+0x6a>
  ch_priority_queue_t *p = pqp->next;
 8001972:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8001974:	220f      	movs	r2, #15
 8001976:	770a      	strb	r2, [r1, #28]
  pqp->next       = p->next;
 8001978:	6802      	ldr	r2, [r0, #0]
 800197a:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 800197c:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8001980:	6053      	str	r3, [r2, #4]
 8001982:	f880 c01c 	strb.w	ip, [r0, #28]
}
 8001986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 800198a:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800198c:	f7fe bc98 	b.w	80002c0 <__port_switch>
 8001990:	4622      	mov	r2, r4
  lp->next = p->next;
 8001992:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001994:	6910      	ldr	r0, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8001996:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 8001998:	638c      	str	r4, [r1, #56]	; 0x38
  tp->state = CH_STATE_READY;
 800199a:	f882 e01c 	strb.w	lr, [r2, #28]
    pqp = pqp->next;
 800199e:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80019a0:	6885      	ldr	r5, [r0, #8]
 80019a2:	42b5      	cmp	r5, r6
 80019a4:	d2fb      	bcs.n	800199e <bmk_thread3+0x4e>
  p->prev       = pqp->prev;
 80019a6:	6845      	ldr	r5, [r0, #4]
  p->next       = pqp;
 80019a8:	6010      	str	r0, [r2, #0]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80019aa:	4564      	cmp	r4, ip
  p->prev       = pqp->prev;
 80019ac:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 80019ae:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 80019b0:	6042      	str	r2, [r0, #4]
 80019b2:	d1ed      	bne.n	8001990 <bmk_thread3+0x40>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 80019b4:	7f8a      	ldrb	r2, [r1, #30]
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d1db      	bne.n	8001972 <bmk_thread3+0x22>
    if (currtp->dispose == NULL) {
 80019ba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80019bc:	2a00      	cmp	r2, #0
 80019be:	d1d8      	bne.n	8001972 <bmk_thread3+0x22>
  p->prev->next = p->next;
 80019c0:	e9d1 2009 	ldrd	r2, r0, [r1, #36]	; 0x24
 80019c4:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 80019c6:	6050      	str	r0, [r2, #4]
  return p;
 80019c8:	e7d3      	b.n	8001972 <bmk_thread3+0x22>
 80019ca:	bf00      	nop
 80019cc:	200009b8 	.word	0x200009b8

080019d0 <bmk_thread4>:
static THD_FUNCTION(bmk_thread4, p) {
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	4c0c      	ldr	r4, [pc, #48]	; (8001a04 <bmk_thread4+0x34>)
 80019d4:	2330      	movs	r3, #48	; 0x30
 80019d6:	68e7      	ldr	r7, [r4, #12]
 80019d8:	f383 8811 	msr	BASEPRI, r3
  otp->state = newstate;
 80019dc:	2603      	movs	r6, #3
  ntp->state = CH_STATE_CURRENT;
 80019de:	2501      	movs	r5, #1
  thread_t *otp = __instance_get_currthread(oip);
 80019e0:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80019e2:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80019e4:	770e      	strb	r6, [r1, #28]
  pqp->next       = p->next;
 80019e6:	6803      	ldr	r3, [r0, #0]
 80019e8:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 80019ea:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80019ec:	7705      	strb	r5, [r0, #28]
  __instance_set_currthread(oip, ntp);
 80019ee:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80019f0:	f7fe fc66 	bl	80002c0 <__port_switch>
  } while (msg == MSG_OK);
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f2      	beq.n	80019e0 <bmk_thread4+0x10>
 80019fa:	2300      	movs	r3, #0
 80019fc:	f383 8811 	msr	BASEPRI, r3
}
 8001a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200009b8 	.word	0x200009b8
	...

08001a10 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 8001a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a14:	4f16      	ldr	r7, [pc, #88]	; (8001a70 <bmk_thread7+0x60>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->flags & CH_FLAGS_TERMINATE) != (tmode_t)0);
 8001a16:	68fb      	ldr	r3, [r7, #12]
  while (!chThdShouldTerminateX())
 8001a18:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db25      	blt.n	8001a6c <bmk_thread7+0x5c>
 8001a20:	4c14      	ldr	r4, [pc, #80]	; (8001a74 <bmk_thread7+0x64>)
 8001a22:	f04f 0830 	mov.w	r8, #48	; 0x30
  otp->state = newstate;
 8001a26:	2605      	movs	r6, #5
  ntp->state = CH_STATE_CURRENT;
 8001a28:	2501      	movs	r5, #1
 8001a2a:	e007      	b.n	8001a3c <bmk_thread7+0x2c>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db17      	blt.n	8001a6c <bmk_thread7+0x5c>
 8001a3c:	f388 8811 	msr	BASEPRI, r8
  if (--sp->cnt < (cnt_t)0) {
 8001a40:	68a3      	ldr	r3, [r4, #8]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	60a3      	str	r3, [r4, #8]
 8001a48:	daf0      	bge.n	8001a2c <bmk_thread7+0x1c>
  return __sch_get_currthread();
 8001a4a:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8001a4c:	6863      	ldr	r3, [r4, #4]
  ch_priority_queue_t *p = pqp->next;
 8001a4e:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8001a50:	634c      	str	r4, [r1, #52]	; 0x34
  p->prev       = qp->prev;
 8001a52:	e9c1 4300 	strd	r4, r3, [r1]
  p->prev->next = p;
 8001a56:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8001a58:	770e      	strb	r6, [r1, #28]
  pqp->next       = p->next;
 8001a5a:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8001a5c:	6061      	str	r1, [r4, #4]
  pqp->next->prev = pqp;
 8001a5e:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8001a60:	7705      	strb	r5, [r0, #28]
  pqp->next       = p->next;
 8001a62:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8001a64:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8001a66:	f7fe fc2b 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8001a6a:	e7df      	b.n	8001a2c <bmk_thread7+0x1c>
}
 8001a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a70:	200009b8 	.word	0x200009b8
 8001a74:	20000d18 	.word	0x20000d18
	...

08001a80 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8001a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a84:	4c19      	ldr	r4, [pc, #100]	; (8001aec <bmk_thread8+0x6c>)
 8001a86:	4605      	mov	r5, r0
 8001a88:	2730      	movs	r7, #48	; 0x30
  ntp->state = CH_STATE_CURRENT;
 8001a8a:	f04f 0801 	mov.w	r8, #1
  tp->state = CH_STATE_READY;
 8001a8e:	2600      	movs	r6, #0
 8001a90:	f387 8811 	msr	BASEPRI, r7
  thread_t *tp = __instance_get_currthread(oip);
 8001a94:	68e1      	ldr	r1, [r4, #12]
  if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 8001a96:	6820      	ldr	r0, [r4, #0]
 8001a98:	688a      	ldr	r2, [r1, #8]
 8001a9a:	6883      	ldr	r3, [r0, #8]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d313      	bcc.n	8001ac8 <bmk_thread8+0x48>
 8001aa0:	6803      	ldr	r3, [r0, #0]
 8001aa2:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8001aa4:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8001aa6:	f880 801c 	strb.w	r8, [r0, #28]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001aaa:	690b      	ldr	r3, [r1, #16]
  __instance_set_currthread(oip, ntp);
 8001aac:	60e0      	str	r0, [r4, #12]
  tp->state = CH_STATE_READY;
 8001aae:	770e      	strb	r6, [r1, #28]
    pqp = pqp->next;
 8001ab0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001ab2:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8001ab6:	4562      	cmp	r2, ip
 8001ab8:	d9fa      	bls.n	8001ab0 <bmk_thread8+0x30>
  p->prev       = pqp->prev;
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8001ac0:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8001ac2:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8001ac4:	f7fe fbfc 	bl	80002c0 <__port_switch>
 8001ac8:	f386 8811 	msr	BASEPRI, r6
    chThdYield();
 8001acc:	f7ff fe90 	bl	80017f0 <chThdYield>
    chThdYield();
 8001ad0:	f7ff fe8e 	bl	80017f0 <chThdYield>
    chThdYield();
 8001ad4:	f7ff fe8c 	bl	80017f0 <chThdYield>
    (*(uint32_t *)p) += 4;
 8001ad8:	682b      	ldr	r3, [r5, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAGS_TERMINATE) != (tmode_t)0);
 8001ada:	68e2      	ldr	r2, [r4, #12]
 8001adc:	3304      	adds	r3, #4
 8001ade:	602b      	str	r3, [r5, #0]
  } while(!chThdShouldTerminateX());
 8001ae0:	f992 301d 	ldrsb.w	r3, [r2, #29]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	dad3      	bge.n	8001a90 <bmk_thread8+0x10>
}
 8001ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aec:	200009b8 	.word	0x200009b8

08001af0 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8001af0:	b40e      	push	{r1, r2, r3}
 8001af2:	b510      	push	{r4, lr}
 8001af4:	b085      	sub	sp, #20
 8001af6:	ab07      	add	r3, sp, #28

  va_start(args, veneer);

  /* Preparing the call message.*/
  cm.veneer = veneer;
  cm.argsp  = &args;
 8001af8:	aa01      	add	r2, sp, #4
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8001afa:	f853 4b04 	ldr.w	r4, [r3], #4
  cm.argsp  = &args;
 8001afe:	9203      	str	r2, [sp, #12]
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 8001b00:	a902      	add	r1, sp, #8
  cm.veneer = veneer;
 8001b02:	e9cd 3401 	strd	r3, r4, [sp, #4]
  msg = chMsgSend(tp, (msg_t)&cm);
 8001b06:	f7ff fe9b 	bl	8001840 <chMsgSend>

  va_end(args);

  return msg;
}
 8001b0a:	b005      	add	sp, #20
 8001b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b10:	b003      	add	sp, #12
 8001b12:	4770      	bx	lr
	...

08001b20 <rt_test_007_001_teardown.lto_priv.0>:
  chSemResetWithMessage(sp, n, MSG_RESET);
 8001b20:	4801      	ldr	r0, [pc, #4]	; (8001b28 <rt_test_007_001_teardown.lto_priv.0+0x8>)
 8001b22:	2100      	movs	r1, #0
 8001b24:	f009 b8ec 	b.w	800ad00 <chSemResetWithMessage.constprop.0>
 8001b28:	20000d0c 	.word	0x20000d0c
 8001b2c:	00000000 	.word	0x00000000

08001b30 <rt_test_011_002_execute.lto_priv.0>:

static void rt_test_011_002_execute(void) {
 8001b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b34:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <rt_test_011_002_execute.lto_priv.0+0x14c>)
  unsigned i;
  tprio_t prio;

  /* [11.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8001b36:	4f52      	ldr	r7, [pc, #328]	; (8001c80 <rt_test_011_002_execute.lto_priv.0+0x150>)
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <rt_test_011_002_execute.lto_priv.0+0x154>)
 8001b3a:	4d53      	ldr	r5, [pc, #332]	; (8001c88 <rt_test_011_002_execute.lto_priv.0+0x158>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	6039      	str	r1, [r7, #0]
  {
    for (i = 0; i < 4; i++)
 8001b40:	f103 060c 	add.w	r6, r3, #12
 8001b44:	2430      	movs	r4, #48	; 0x30
 8001b46:	2000      	movs	r0, #0
 8001b48:	f384 8811 	msr	BASEPRI, r4
  php->next = mp->next;
 8001b4c:	6829      	ldr	r1, [r5, #0]
 8001b4e:	6011      	str	r1, [r2, #0]
  mp->next = php;
 8001b50:	602a      	str	r2, [r5, #0]
 8001b52:	f380 8811 	msr	BASEPRI, r0
 8001b56:	429e      	cmp	r6, r3
 8001b58:	d002      	beq.n	8001b60 <rt_test_011_002_execute.lto_priv.0+0x30>
      chPoolFree(&mp1, wa[i]);
 8001b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b5e:	e7f3      	b.n	8001b48 <rt_test_011_002_execute.lto_priv.0+0x18>
  return __sch_get_currthread();
 8001b60:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <rt_test_011_002_execute.lto_priv.0+0x15c>)
  test_end_step(2);

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8001b62:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <rt_test_011_002_execute.lto_priv.0+0x160>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8001b64:	68d9      	ldr	r1, [r3, #12]
 8001b66:	484b      	ldr	r0, [pc, #300]	; (8001c94 <rt_test_011_002_execute.lto_priv.0+0x164>)
 8001b68:	688e      	ldr	r6, [r1, #8]
 8001b6a:	4c4b      	ldr	r4, [pc, #300]	; (8001c98 <rt_test_011_002_execute.lto_priv.0+0x168>)
  test_set_step(3);
 8001b6c:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8001b6e:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 8001b70:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8001b72:	f009 f81d 	bl	800abb0 <chThdCreateFromMemoryPool.constprop.0>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8001b76:	1eb1      	subs	r1, r6, #2
 8001b78:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <rt_test_011_002_execute.lto_priv.0+0x16c>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8001b7a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8001b7c:	4848      	ldr	r0, [pc, #288]	; (8001ca0 <rt_test_011_002_execute.lto_priv.0+0x170>)
 8001b7e:	f009 f817 	bl	800abb0 <chThdCreateFromMemoryPool.constprop.0>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8001b82:	1ef1      	subs	r1, r6, #3
 8001b84:	4a47      	ldr	r2, [pc, #284]	; (8001ca4 <rt_test_011_002_execute.lto_priv.0+0x174>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8001b86:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8001b88:	4847      	ldr	r0, [pc, #284]	; (8001ca8 <rt_test_011_002_execute.lto_priv.0+0x178>)
 8001b8a:	f009 f811 	bl	800abb0 <chThdCreateFromMemoryPool.constprop.0>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8001b8e:	1f31      	subs	r1, r6, #4
 8001b90:	4a46      	ldr	r2, [pc, #280]	; (8001cac <rt_test_011_002_execute.lto_priv.0+0x17c>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8001b92:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8001b94:	4846      	ldr	r0, [pc, #280]	; (8001cb0 <rt_test_011_002_execute.lto_priv.0+0x180>)
 8001b96:	f009 f80b 	bl	800abb0 <chThdCreateFromMemoryPool.constprop.0>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8001b9a:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8001b9c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8001b9e:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <rt_test_011_002_execute.lto_priv.0+0x184>)
 8001ba0:	4845      	ldr	r0, [pc, #276]	; (8001cb8 <rt_test_011_002_execute.lto_priv.0+0x188>)
 8001ba2:	f009 f805 	bl	800abb0 <chThdCreateFromMemoryPool.constprop.0>
 8001ba6:	4606      	mov	r6, r0
 8001ba8:	6120      	str	r0, [r4, #16]
  test_end_step(3);

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 8001baa:	6820      	ldr	r0, [r4, #0]
  test_set_step(4);
 8001bac:	2304      	movs	r3, #4
 8001bae:	603b      	str	r3, [r7, #0]
    test_assert((threads[0] != NULL) &&
 8001bb0:	b1a0      	cbz	r0, 8001bdc <rt_test_011_002_execute.lto_priv.0+0xac>
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	b193      	cbz	r3, 8001bdc <rt_test_011_002_execute.lto_priv.0+0xac>
 8001bb6:	68a3      	ldr	r3, [r4, #8]
 8001bb8:	b183      	cbz	r3, 8001bdc <rt_test_011_002_execute.lto_priv.0+0xac>
 8001bba:	68e3      	ldr	r3, [r4, #12]
 8001bbc:	b173      	cbz	r3, 8001bdc <rt_test_011_002_execute.lto_priv.0+0xac>
  if (!condition) {
 8001bbe:	2e00      	cmp	r6, #0
 8001bc0:	d145      	bne.n	8001c4e <rt_test_011_002_execute.lto_priv.0+0x11e>
  }
  test_end_step(4);

  /* [11.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	f104 0810 	add.w	r8, r4, #16
    if (threads[i] != NULL) {
 8001bca:	b110      	cbz	r0, 8001bd2 <rt_test_011_002_execute.lto_priv.0+0xa2>
      chThdWait(threads[i]);
 8001bcc:	f7ff fd88 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8001bd0:	6026      	str	r6, [r4, #0]
  for (i = 0; i < MAX_THREADS; i++)
 8001bd2:	4544      	cmp	r4, r8
 8001bd4:	d009      	beq.n	8001bea <rt_test_011_002_execute.lto_priv.0+0xba>
    if (threads[i] != NULL) {
 8001bd6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8001bda:	e7f6      	b.n	8001bca <rt_test_011_002_execute.lto_priv.0+0x9a>
  chtest.failure_message = msg;
 8001bdc:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <rt_test_011_002_execute.lto_priv.0+0x18c>)
 8001bde:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8001be0:	f240 1201 	movw	r2, #257	; 0x101
 8001be4:	80ba      	strh	r2, [r7, #4]
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8001be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert_sequence("ABCD", "invalid sequence");
 8001bea:	4935      	ldr	r1, [pc, #212]	; (8001cc0 <rt_test_011_002_execute.lto_priv.0+0x190>)
 8001bec:	4835      	ldr	r0, [pc, #212]	; (8001cc4 <rt_test_011_002_execute.lto_priv.0+0x194>)
 8001bee:	f7fe ff0f 	bl	8000a10 <__test_assert_sequence>
 8001bf2:	4606      	mov	r6, r0
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d1f6      	bne.n	8001be6 <rt_test_011_002_execute.lto_priv.0+0xb6>
  test_set_step(6);
 8001bf8:	2306      	movs	r3, #6
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	2404      	movs	r4, #4
 8001bfe:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001c02:	f388 8811 	msr	BASEPRI, r8
  objp = mp->next;
 8001c06:	6828      	ldr	r0, [r5, #0]
  if (objp != NULL) {
 8001c08:	b340      	cbz	r0, 8001c5c <rt_test_011_002_execute.lto_priv.0+0x12c>
    mp->next = mp->next->next;
 8001c0a:	6803      	ldr	r3, [r0, #0]
 8001c0c:	602b      	str	r3, [r5, #0]
 8001c0e:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8001c12:	b1a8      	cbz	r0, 8001c40 <rt_test_011_002_execute.lto_priv.0+0x110>
    for (i = 0; i < 4; i++)
 8001c14:	3c01      	subs	r4, #1
 8001c16:	d1f4      	bne.n	8001c02 <rt_test_011_002_execute.lto_priv.0+0xd2>
 8001c18:	2330      	movs	r3, #48	; 0x30
 8001c1a:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8001c1e:	6828      	ldr	r0, [r5, #0]
  if (objp != NULL) {
 8001c20:	b318      	cbz	r0, 8001c6a <rt_test_011_002_execute.lto_priv.0+0x13a>
    mp->next = mp->next->next;
 8001c22:	6803      	ldr	r3, [r0, #0]
 8001c24:	602b      	str	r3, [r5, #0]
 8001c26:	2300      	movs	r3, #0
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d0da      	beq.n	8001be6 <rt_test_011_002_execute.lto_priv.0+0xb6>
  chtest.failure_message = msg;
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <rt_test_011_002_execute.lto_priv.0+0x198>)
 8001c32:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8001c34:	f240 1201 	movw	r2, #257	; 0x101
 8001c38:	80ba      	strh	r2, [r7, #4]
    return __test_fail(msg);
 8001c3a:	e7d4      	b.n	8001be6 <rt_test_011_002_execute.lto_priv.0+0xb6>
 8001c3c:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <rt_test_011_002_execute.lto_priv.0+0x19c>)
 8001c42:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8001c44:	f240 1201 	movw	r2, #257	; 0x101
 8001c48:	80ba      	strh	r2, [r7, #4]
}
 8001c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.failure_message = msg;
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <rt_test_011_002_execute.lto_priv.0+0x1a0>)
 8001c50:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8001c52:	f240 1201 	movw	r2, #257	; 0x101
 8001c56:	80ba      	strh	r2, [r7, #4]
 8001c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8001c5c:	68eb      	ldr	r3, [r5, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0ec      	beq.n	8001c3c <rt_test_011_002_execute.lto_priv.0+0x10c>
    objp = mp->provider(mp->object_size, mp->align);
 8001c62:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8001c66:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8001c68:	e7d1      	b.n	8001c0e <rt_test_011_002_execute.lto_priv.0+0xde>
  else if (mp->provider != NULL) {
 8001c6a:	68eb      	ldr	r3, [r5, #12]
 8001c6c:	b11b      	cbz	r3, 8001c76 <rt_test_011_002_execute.lto_priv.0+0x146>
    objp = mp->provider(mp->object_size, mp->align);
 8001c6e:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8001c72:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8001c74:	e7d7      	b.n	8001c26 <rt_test_011_002_execute.lto_priv.0+0xf6>
 8001c76:	f384 8811 	msr	BASEPRI, r4
  if (!condition) {
 8001c7a:	e7b4      	b.n	8001be6 <rt_test_011_002_execute.lto_priv.0+0xb6>
 8001c7c:	0800cd14 	.word	0x0800cd14
 8001c80:	20000ab4 	.word	0x20000ab4
 8001c84:	20000d40 	.word	0x20000d40
 8001c88:	20000bdc 	.word	0x20000bdc
 8001c8c:	200009b8 	.word	0x200009b8
 8001c90:	0800ba18 	.word	0x0800ba18
 8001c94:	0800ba1c 	.word	0x0800ba1c
 8001c98:	20001744 	.word	0x20001744
 8001c9c:	0800ba24 	.word	0x0800ba24
 8001ca0:	0800ba28 	.word	0x0800ba28
 8001ca4:	0800ba30 	.word	0x0800ba30
 8001ca8:	0800ba34 	.word	0x0800ba34
 8001cac:	0800ba3c 	.word	0x0800ba3c
 8001cb0:	0800ba40 	.word	0x0800ba40
 8001cb4:	0800bcb0 	.word	0x0800bcb0
 8001cb8:	0800ba48 	.word	0x0800ba48
 8001cbc:	0800ba98 	.word	0x0800ba98
 8001cc0:	0800b9c8 	.word	0x0800b9c8
 8001cc4:	0800ba6c 	.word	0x0800ba6c
 8001cc8:	0800ba84 	.word	0x0800ba84
 8001ccc:	0800ba74 	.word	0x0800ba74
 8001cd0:	0800ba50 	.word	0x0800ba50
	...

08001ce0 <oslib_test_002_003_teardown.lto_priv.0>:

static void oslib_test_002_003_teardown(void) {
  chMBReset(&mb1);
 8001ce0:	f008 bf0e 	b.w	800ab00 <chMBReset.constprop.0>
	...

08001cf0 <oslib_test_002_001_teardown.lto_priv.0>:
 8001cf0:	f008 bf06 	b.w	800ab00 <chMBReset.constprop.0>
	...

08001d00 <oslib_test_002_002_teardown.lto_priv.0>:
 8001d00:	f008 befe 	b.w	800ab00 <chMBReset.constprop.0>
	...

08001d10 <oslib_test_003_002_execute.lto_priv.0>:

static void oslib_test_003_002_execute(void) {
 8001d10:	b530      	push	{r4, r5, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8001d12:	4c1b      	ldr	r4, [pc, #108]	; (8001d80 <oslib_test_003_002_execute.lto_priv.0+0x70>)

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 8001d14:	4d1b      	ldr	r5, [pc, #108]	; (8001d84 <oslib_test_003_002_execute.lto_priv.0+0x74>)
 8001d16:	7d23      	ldrb	r3, [r4, #20]
 8001d18:	2201      	movs	r2, #1
static void oslib_test_003_002_execute(void) {
 8001d1a:	b085      	sub	sp, #20
  test_set_step(1);
 8001d1c:	602a      	str	r2, [r5, #0]
 8001d1e:	b153      	cbz	r3, 8001d36 <oslib_test_003_002_execute.lto_priv.0+0x26>
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
    test_assert(n == 0, "wrong size");
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8001d20:	6822      	ldr	r2, [r4, #0]
 8001d22:	68e3      	ldr	r3, [r4, #12]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <oslib_test_003_002_execute.lto_priv.0+0x40>
  chtest.failure_message = msg;
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <oslib_test_003_002_execute.lto_priv.0+0x78>)
 8001d2a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8001d2c:	f240 1201 	movw	r2, #257	; 0x101
 8001d30:	80aa      	strh	r2, [r5, #4]
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 8001d32:	b005      	add	sp, #20
 8001d34:	bd30      	pop	{r4, r5, pc}
 8001d36:	2110      	movs	r1, #16
 8001d38:	4668      	mov	r0, sp
 8001d3a:	f009 f981 	bl	800b040 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition) {
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d0ee      	beq.n	8001d20 <oslib_test_003_002_execute.lto_priv.0+0x10>
  chtest.failure_message = msg;
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <oslib_test_003_002_execute.lto_priv.0+0x7c>)
 8001d44:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8001d46:	f240 1201 	movw	r2, #257	; 0x101
 8001d4a:	80aa      	strh	r2, [r5, #4]
 8001d4c:	b005      	add	sp, #20
 8001d4e:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8001d50:	68a2      	ldr	r2, [r4, #8]
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d1e8      	bne.n	8001d28 <oslib_test_003_002_execute.lto_priv.0+0x18>
 8001d56:	6923      	ldr	r3, [r4, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e5      	bne.n	8001d28 <oslib_test_003_002_execute.lto_priv.0+0x18>
  test_set_step(2);
 8001d5c:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8001d5e:	2010      	movs	r0, #16
  test_set_step(2);
 8001d60:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8001d62:	f009 f8e5 	bl	800af30 <chPipeWriteTimeout.constprop.0>
  if (!condition) {
 8001d66:	2808      	cmp	r0, #8
 8001d68:	d1eb      	bne.n	8001d42 <oslib_test_003_002_execute.lto_priv.0+0x32>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8001d6a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d1da      	bne.n	8001d28 <oslib_test_003_002_execute.lto_priv.0+0x18>
 8001d72:	6822      	ldr	r2, [r4, #0]
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d1d7      	bne.n	8001d28 <oslib_test_003_002_execute.lto_priv.0+0x18>
 8001d78:	6923      	ldr	r3, [r4, #16]
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d1d4      	bne.n	8001d28 <oslib_test_003_002_execute.lto_priv.0+0x18>
 8001d7e:	e7d8      	b.n	8001d32 <oslib_test_003_002_execute.lto_priv.0+0x22>
 8001d80:	20000884 	.word	0x20000884
 8001d84:	20000ab4 	.word	0x20000ab4
 8001d88:	0800babc 	.word	0x0800babc
 8001d8c:	0800bab0 	.word	0x0800bab0

08001d90 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
	...

08001da0 <__late_init>:
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
	...

08001db0 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8001db0:	e7fe      	b.n	8001db0 <__default_exit>
 8001db2:	bf00      	nop
	...

08001dc0 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc2:	4d15      	ldr	r5, [pc, #84]	; (8001e18 <__init_ram_areas+0x58>)
 8001dc4:	4f15      	ldr	r7, [pc, #84]	; (8001e1c <__init_ram_areas+0x5c>)
 8001dc6:	4916      	ldr	r1, [pc, #88]	; (8001e20 <__init_ram_areas+0x60>)
 8001dc8:	4816      	ldr	r0, [pc, #88]	; (8001e24 <__init_ram_areas+0x64>)
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <__init_ram_areas+0x68>)
 8001dcc:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001dd0:	4281      	cmp	r1, r0
 8001dd2:	d90d      	bls.n	8001df0 <__init_ram_areas+0x30>
 8001dd4:	3a04      	subs	r2, #4
 8001dd6:	4603      	mov	r3, r0
      *p = *tp;
 8001dd8:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8001ddc:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8001de0:	4299      	cmp	r1, r3
 8001de2:	d8f9      	bhi.n	8001dd8 <__init_ram_areas+0x18>
      p++;
 8001de4:	1e4b      	subs	r3, r1, #1
 8001de6:	1a1b      	subs	r3, r3, r0
 8001de8:	f023 0303 	bic.w	r3, r3, #3
 8001dec:	3304      	adds	r3, #4
 8001dee:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001df0:	4287      	cmp	r7, r0
 8001df2:	d907      	bls.n	8001e04 <__init_ram_areas+0x44>
      *p = 0;
 8001df4:	1e7a      	subs	r2, r7, #1
 8001df6:	1a12      	subs	r2, r2, r0
 8001df8:	f022 0203 	bic.w	r2, r2, #3
 8001dfc:	3204      	adds	r2, #4
 8001dfe:	2100      	movs	r1, #0
 8001e00:	f7fe fb42 	bl	8000488 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8001e04:	42a5      	cmp	r5, r4
 8001e06:	d005      	beq.n	8001e14 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 8001e08:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 8001e0c:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 8001e10:	3510      	adds	r5, #16
 8001e12:	e7dd      	b.n	8001dd0 <__init_ram_areas+0x10>
     for self-modifying code.*/
  SCB_CleanDCache();
  SCB_InvalidateICache();
#endif
#endif
}
 8001e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	0800cc90 	.word	0x0800cc90
 8001e1c:	20002100 	.word	0x20002100
 8001e20:	20002100 	.word	0x20002100
 8001e24:	20002100 	.word	0x20002100
 8001e28:	0800e1f4 	.word	0x0800e1f4
 8001e2c:	00000000 	.word	0x00000000

08001e30 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8001e34:	4d80      	ldr	r5, [pc, #512]	; (8002038 <VectorD8+0x208>)
 8001e36:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1;
  uint16_t sr = u->SR;
 8001e38:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001e3a:	05d8      	lsls	r0, r3, #23
  uint16_t sr = u->SR;
 8001e3c:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8001e3e:	f100 8094 	bmi.w	8001f6a <VectorD8+0x13a>
 8001e42:	2330      	movs	r3, #48	; 0x30
 8001e44:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001e48:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001e4c:	d059      	beq.n	8001f02 <VectorD8+0xd2>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001e4e:	487b      	ldr	r0, [pc, #492]	; (800203c <VectorD8+0x20c>)

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001e50:	f04f 0800 	mov.w	r8, #0
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 8001e54:	f100 0708 	add.w	r7, r0, #8
 8001e58:	e008      	b.n	8001e6c <VectorD8+0x3c>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8001e5a:	06a4      	lsls	r4, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001e5c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001e60:	d41e      	bmi.n	8001ea0 <VectorD8+0x70>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8001e62:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001e64:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8001e68:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001e6a:	d04a      	beq.n	8001f02 <VectorD8+0xd2>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001e6c:	0722      	lsls	r2, r4, #28
 8001e6e:	d0f4      	beq.n	8001e5a <VectorD8+0x2a>
    sts |= SD_OVERRUN_ERROR;
 8001e70:	f014 0f08 	tst.w	r4, #8
 8001e74:	bf0c      	ite	eq
 8001e76:	2100      	moveq	r1, #0
 8001e78:	f44f 7180 	movne.w	r1, #256	; 0x100
  if (sr & USART_SR_PE)
 8001e7c:	07e3      	lsls	r3, r4, #31
    sts |= SD_PARITY_ERROR;
 8001e7e:	bf48      	it	mi
 8001e80:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001e84:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001e86:	bf48      	it	mi
 8001e88:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8001e8c:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8001e8e:	bf48      	it	mi
 8001e90:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
 8001e94:	f7ff fbec 	bl	8001670 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001e98:	06a4      	lsls	r4, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001e9a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001e9e:	d5e0      	bpl.n	8001e62 <VectorD8+0x32>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8001ea0:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8001ea2:	f895 407c 	ldrb.w	r4, [r5, #124]	; 0x7c
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d045      	beq.n	8001f36 <VectorD8+0x106>
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8001eaa:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d048      	beq.n	8001f44 <VectorD8+0x114>
    iqp->q_counter++;
 8001eb2:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8001eb4:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8001eb6:	3201      	adds	r2, #1
 8001eb8:	ea04 0409 	and.w	r4, r4, r9
    *iqp->q_wrptr++ = b;
 8001ebc:	6229      	str	r1, [r5, #32]
    iqp->q_counter++;
 8001ebe:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8001ec0:	701c      	strb	r4, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001ec2:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d301      	bcc.n	8001ece <VectorD8+0x9e>
      iqp->q_wrptr = iqp->q_buffer;
 8001eca:	69ab      	ldr	r3, [r5, #24]
 8001ecc:	622b      	str	r3, [r5, #32]
  return (bool)(qp->next != qp);
 8001ece:	68eb      	ldr	r3, [r5, #12]
 8001ed0:	42bb      	cmp	r3, r7
 8001ed2:	d0c6      	beq.n	8001e62 <VectorD8+0x32>
  qp->next       = p->next;
 8001ed4:	6819      	ldr	r1, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001ed6:	689c      	ldr	r4, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001ed8:	691a      	ldr	r2, [r3, #16]
  qp->next       = p->next;
 8001eda:	60e9      	str	r1, [r5, #12]
  qp->next->prev = qp;
 8001edc:	604f      	str	r7, [r1, #4]
 8001ede:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8001ee2:	f883 801c 	strb.w	r8, [r3, #28]
    pqp = pqp->next;
 8001ee6:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001ee8:	6891      	ldr	r1, [r2, #8]
 8001eea:	42a1      	cmp	r1, r4
 8001eec:	d2fb      	bcs.n	8001ee6 <VectorD8+0xb6>
  p->prev       = pqp->prev;
 8001eee:	6851      	ldr	r1, [r2, #4]
 8001ef0:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8001ef4:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8001ef6:	6053      	str	r3, [r2, #4]
    sr = u->SR;
 8001ef8:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001efa:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8001efe:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001f00:	d1b4      	bne.n	8001e6c <VectorD8+0x3c>
 8001f02:	2300      	movs	r3, #0
 8001f04:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Caching CR1.*/
  cr1 = u->CR1;
 8001f08:	68f3      	ldr	r3, [r6, #12]

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001f0a:	0618      	lsls	r0, r3, #24
  cr1 = u->CR1;
 8001f0c:	b29f      	uxth	r7, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001f0e:	d501      	bpl.n	8001f14 <VectorD8+0xe4>
 8001f10:	0621      	lsls	r1, r4, #24
 8001f12:	d44d      	bmi.n	8001fb0 <VectorD8+0x180>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8001f14:	067a      	lsls	r2, r7, #25
 8001f16:	d501      	bpl.n	8001f1c <VectorD8+0xec>
 8001f18:	0663      	lsls	r3, r4, #25
 8001f1a:	d41b      	bmi.n	8001f54 <VectorD8+0x124>
    }
    osalSysUnlockFromISR();
  }

  /* Writing CR1 once.*/
  u->CR1 = cr1;
 8001f1c:	60f7      	str	r7, [r6, #12]
 8001f1e:	2330      	movs	r3, #48	; 0x30
 8001f20:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <VectorD8+0x210>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001f2c:	d12c      	bne.n	8001f88 <VectorD8+0x158>
 8001f2e:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8001f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f36:	2104      	movs	r1, #4
 8001f38:	f7ff fb9a 	bl	8001670 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8001f3c:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d1b6      	bne.n	8001eb2 <VectorD8+0x82>
 8001f44:	696a      	ldr	r2, [r5, #20]
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d0b3      	beq.n	8001eb2 <VectorD8+0x82>
 8001f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4e:	f7ff fb8f 	bl	8001670 <chEvtBroadcastFlagsI>
}
 8001f52:	e786      	b.n	8001e62 <VectorD8+0x32>
 8001f54:	2330      	movs	r3, #48	; 0x30
 8001f56:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001f5a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d053      	beq.n	800200a <VectorD8+0x1da>
 8001f62:	2300      	movs	r3, #0
 8001f64:	f383 8811 	msr	BASEPRI, r3
}
 8001f68:	e7d8      	b.n	8001f1c <VectorD8+0xec>
 8001f6a:	2330      	movs	r3, #48	; 0x30
 8001f6c:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	1d28      	adds	r0, r5, #4
 8001f76:	f7ff fb7b 	bl	8001670 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8001f7a:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8001f7e:	6033      	str	r3, [r6, #0]
 8001f80:	2300      	movs	r3, #0
 8001f82:	f383 8811 	msr	BASEPRI, r3
}
 8001f86:	e75c      	b.n	8001e42 <VectorD8+0x12>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001f88:	f3ef 8309 	mrs	r3, PSP


    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    psp = __get_PSP();
    psp -= sizeof (struct port_extctx);
 8001f8c:	3b20      	subs	r3, #32

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8001f8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f92:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001f94:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <VectorD8+0x214>)
 8001f9a:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001f9c:	68d2      	ldr	r2, [r2, #12]
    /* Writing back the modified S-PSP value.*/
    __set_PSP(psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001f9e:	6889      	ldr	r1, [r1, #8]
 8001fa0:	6892      	ldr	r2, [r2, #8]
 8001fa2:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001fa4:	bf8c      	ite	hi
 8001fa6:	4a28      	ldrhi	r2, [pc, #160]	; (8002048 <VectorD8+0x218>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8001fa8:	4a28      	ldrls	r2, [pc, #160]	; (800204c <VectorD8+0x21c>)
 8001faa:	619a      	str	r2, [r3, #24]
 8001fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001fb0:	2330      	movs	r3, #48	; 0x30
 8001fb2:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8001fb6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d030      	beq.n	8002020 <VectorD8+0x1f0>
    uint8_t b;

    oqp->q_counter++;
 8001fbe:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001fc0:	3201      	adds	r2, #1
 8001fc2:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	64aa      	str	r2, [r5, #72]	; 0x48
 8001fc8:	7819      	ldrb	r1, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8001fca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d301      	bcc.n	8001fd4 <VectorD8+0x1a4>
      oqp->q_rdptr = oqp->q_buffer;
 8001fd0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001fd2:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(qp->next != qp);
 8001fd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <VectorD8+0x220>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d011      	beq.n	8002000 <VectorD8+0x1d0>
  qp->next       = p->next;
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	6328      	str	r0, [r5, #48]	; 0x30
  qp->next->prev = qp;
 8001fe0:	6042      	str	r2, [r0, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8001fe6:	771a      	strb	r2, [r3, #28]
  } while (unlikely(pqp->prio >= p->prio));
 8001fe8:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001fea:	691a      	ldr	r2, [r3, #16]
    pqp = pqp->next;
 8001fec:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001fee:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8001ff2:	4584      	cmp	ip, r0
 8001ff4:	d2fa      	bcs.n	8001fec <VectorD8+0x1bc>
  p->prev       = pqp->prev;
 8001ff6:	6850      	ldr	r0, [r2, #4]
  p->next       = pqp;
 8001ff8:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8001ffa:	6058      	str	r0, [r3, #4]
  p->prev->next = p;
 8001ffc:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8001ffe:	6053      	str	r3, [r2, #4]
      u->DR = b;
 8002000:	6071      	str	r1, [r6, #4]
 8002002:	2300      	movs	r3, #0
 8002004:	f383 8811 	msr	BASEPRI, r3
 8002008:	e784      	b.n	8001f14 <VectorD8+0xe4>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800200a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0a8      	beq.n	8001f62 <VectorD8+0x132>
  chEvtBroadcastFlagsI(esp, flags);
 8002010:	480a      	ldr	r0, [pc, #40]	; (800203c <VectorD8+0x20c>)
 8002012:	2110      	movs	r1, #16
      cr1 &= ~USART_CR1_TCIE;
 8002014:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8002018:	f7ff fb2a 	bl	8001670 <chEvtBroadcastFlagsI>
 800201c:	b2bf      	uxth	r7, r7
 800201e:	e7a0      	b.n	8001f62 <VectorD8+0x132>
  if (!oqIsEmptyI(oqp)) {
 8002020:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002022:	2a00      	cmp	r2, #0
 8002024:	d0cb      	beq.n	8001fbe <VectorD8+0x18e>
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <VectorD8+0x20c>)
 8002028:	2108      	movs	r1, #8
      cr1 &= ~USART_CR1_TXEIE;
 800202a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800202e:	f7ff fb1f 	bl	8001670 <chEvtBroadcastFlagsI>
 8002032:	b2bf      	uxth	r7, r7
 8002034:	e7e5      	b.n	8002002 <VectorD8+0x1d2>
 8002036:	bf00      	nop
 8002038:	200008e0 	.word	0x200008e0
 800203c:	200008e4 	.word	0x200008e4
 8002040:	e000ed00 	.word	0xe000ed00
 8002044:	200009b8 	.word	0x200009b8
 8002048:	080002e3 	.word	0x080002e3
 800204c:	080002e6 	.word	0x080002e6
 8002050:	20000910 	.word	0x20000910
	...

08002060 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8002060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8002064:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8002068:	6933      	ldr	r3, [r6, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800206a:	68f2      	ldr	r2, [r6, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8002070:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002072:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8002074:	6132      	str	r2, [r6, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8002076:	d40b      	bmi.n	8002090 <VectorB0+0x30>
 8002078:	2330      	movs	r3, #48	; 0x30
 800207a:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800207e:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <VectorB0+0x15c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002086:	d15f      	bne.n	8002148 <VectorB0+0xe8>
 8002088:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 800208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002090:	2330      	movs	r3, #48	; 0x30
 8002092:	f383 8811 	msr	BASEPRI, r3
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
 8002096:	4d4a      	ldr	r5, [pc, #296]	; (80021c0 <VectorB0+0x160>)
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 8002098:	f04f 0900 	mov.w	r9, #0
 800209c:	f105 0710 	add.w	r7, r5, #16
 80020a0:	f04f 0830 	mov.w	r8, #48	; 0x30
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 80020a4:	692c      	ldr	r4, [r5, #16]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80020a6:	69eb      	ldr	r3, [r5, #28]
 80020a8:	6a71      	ldr	r1, [r6, #36]	; 0x24
    if (nowdelta < vtp->dlist.delta) {
 80020aa:	68a2      	ldr	r2, [r4, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80020ac:	1ac8      	subs	r0, r1, r3
 80020ae:	4290      	cmp	r0, r2
  return systime + (systime_t)interval;
 80020b0:	eb03 0a02 	add.w	sl, r3, r2
 80020b4:	d334      	bcc.n	8002120 <VectorB0+0xc0>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 80020b6:	e9d4 3200 	ldrd	r3, r2, [r4]
    vtlp->lasttime = lasttime;
 80020ba:	f8c5 a01c 	str.w	sl, [r5, #28]
 80020be:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80020c0:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 80020c2:	f8c4 9000 	str.w	r9, [r4]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80020c6:	692b      	ldr	r3, [r5, #16]
 80020c8:	42bb      	cmp	r3, r7
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 80020ca:	bf08      	it	eq
 80020cc:	f8c6 900c 	streq.w	r9, [r6, #12]
 80020d0:	f389 8811 	msr	BASEPRI, r9
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 80020d4:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 80020d8:	4620      	mov	r0, r4
 80020da:	4798      	blx	r3
 80020dc:	f388 8811 	msr	BASEPRI, r8

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 80020e0:	6963      	ldr	r3, [r4, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0de      	beq.n	80020a4 <VectorB0+0x44>
  return (systime_t)STM32_ST_TIM->CNT;
 80020e6:	6a71      	ldr	r1, [r6, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80020e8:	eba1 000a 	sub.w	r0, r1, sl
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 80020ec:	4283      	cmp	r3, r0
 80020ee:	d33f      	bcc.n	8002170 <VectorB0+0x110>
  return (bool)(dlhp == dlhp->next);
 80020f0:	692a      	ldr	r2, [r5, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80020f2:	42ba      	cmp	r2, r7
 80020f4:	d057      	beq.n	80021a6 <VectorB0+0x146>
  while (likely(dlp->delta < delta)) {
 80020f6:	6891      	ldr	r1, [r2, #8]
 80020f8:	428b      	cmp	r3, r1
 80020fa:	d904      	bls.n	8002106 <VectorB0+0xa6>
    dlp = dlp->next;
 80020fc:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 80020fe:	1a5b      	subs	r3, r3, r1
  while (likely(dlp->delta < delta)) {
 8002100:	6891      	ldr	r1, [r2, #8]
 8002102:	4299      	cmp	r1, r3
 8002104:	d3fa      	bcc.n	80020fc <VectorB0+0x9c>
  dlp->delta      = delta;
 8002106:	60a3      	str	r3, [r4, #8]
  dlp->delta -= delta;
 8002108:	6891      	ldr	r1, [r2, #8]
  dlp->next       = dlhp;
 800210a:	6022      	str	r2, [r4, #0]
  dlp->delta -= delta;
 800210c:	1acb      	subs	r3, r1, r3
  dlp->prev       = dlp->next->prev;
 800210e:	6851      	ldr	r1, [r2, #4]
 8002110:	6061      	str	r1, [r4, #4]
  dlp->prev->next = dlp;
 8002112:	600c      	str	r4, [r1, #0]
  dlp->delta -= delta;
 8002114:	e9c2 4301 	strd	r4, r3, [r2, #4]
  dlhp->delta = (sysinterval_t)-1;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211c:	61ab      	str	r3, [r5, #24]
}
 800211e:	e7bf      	b.n	80020a0 <VectorB0+0x40>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8002120:	42bc      	cmp	r4, r7
 8002122:	d00d      	beq.n	8002140 <VectorB0+0xe0>
  currdelta = vtlp->lastdelta;
 8002124:	6a28      	ldr	r0, [r5, #32]
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
 8002126:	61e9      	str	r1, [r5, #28]
  vtp->dlist.delta -= nowdelta;
 8002128:	4413      	add	r3, r2
 800212a:	1a5b      	subs	r3, r3, r1
 800212c:	4283      	cmp	r3, r0
 800212e:	60a3      	str	r3, [r4, #8]
static void vt_set_alarm(virtual_timers_list_t *vtlp,
 8002130:	bf38      	it	cc
 8002132:	4603      	movcc	r3, r0
  return systime + (systime_t)interval;
 8002134:	18ca      	adds	r2, r1, r3
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002136:	6372      	str	r2, [r6, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8002138:	6a72      	ldr	r2, [r6, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800213a:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 800213c:	428b      	cmp	r3, r1
 800213e:	d920      	bls.n	8002182 <VectorB0+0x122>
 8002140:	2300      	movs	r3, #0
 8002142:	f383 8811 	msr	BASEPRI, r3
}
 8002146:	e797      	b.n	8002078 <VectorB0+0x18>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002148:	f3ef 8309 	mrs	r3, PSP
    psp -= sizeof (struct port_extctx);
 800214c:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800214e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002152:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002154:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <VectorB0+0x160>)
 800215a:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 800215c:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 800215e:	6889      	ldr	r1, [r1, #8]
 8002160:	6892      	ldr	r2, [r2, #8]
 8002162:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002164:	bf8c      	ite	hi
 8002166:	4a17      	ldrhi	r2, [pc, #92]	; (80021c4 <VectorB0+0x164>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8002168:	4a17      	ldrls	r2, [pc, #92]	; (80021c8 <VectorB0+0x168>)
 800216a:	619a      	str	r2, [r3, #24]
 800216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8002170:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  return (bool)(dlhp == dlhp->next);
 8002172:	692a      	ldr	r2, [r5, #16]
 8002174:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8002178:	42ba      	cmp	r2, r7
 800217a:	63eb      	str	r3, [r5, #60]	; 0x3c
 800217c:	d019      	beq.n	80021b2 <VectorB0+0x152>
 800217e:	4603      	mov	r3, r0
 8002180:	e7b9      	b.n	80020f6 <VectorB0+0x96>
    if (likely(nowdelta < delay)) {
 8002182:	4601      	mov	r1, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    currdelta += (sysinterval_t)1;
 8002188:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 800218a:	1854      	adds	r4, r2, r1
 800218c:	635c      	str	r4, [r3, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800218e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002190:	1aa2      	subs	r2, r4, r2
    if (likely(nowdelta < delay)) {
 8002192:	428a      	cmp	r2, r1
 8002194:	d20f      	bcs.n	80021b6 <VectorB0+0x156>
  if (currdelta > vtlp->lastdelta) {
 8002196:	4288      	cmp	r0, r1
 8002198:	d2d2      	bcs.n	8002140 <VectorB0+0xe0>
 800219a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    vtlp->lastdelta = currdelta;
 800219c:	6229      	str	r1, [r5, #32]
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	63eb      	str	r3, [r5, #60]	; 0x3c
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 80021a4:	e7cc      	b.n	8002140 <VectorB0+0xe0>
        delay = vtp->reload - nowdelta;
 80021a6:	4453      	add	r3, sl
 80021a8:	1a5a      	subs	r2, r3, r1
        vt_insert_first(vtlp, vtp, now, delay);
 80021aa:	4620      	mov	r0, r4
 80021ac:	f008 fdd8 	bl	800ad60 <vt_insert_first.constprop.0>
        return;
 80021b0:	e7c6      	b.n	8002140 <VectorB0+0xe0>
        delay = (sysinterval_t)0;
 80021b2:	2200      	movs	r2, #0
 80021b4:	e7f9      	b.n	80021aa <VectorB0+0x14a>
 80021b6:	4622      	mov	r2, r4
 80021b8:	e7e6      	b.n	8002188 <VectorB0+0x128>
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00
 80021c0:	200009b8 	.word	0x200009b8
 80021c4:	080002e3 	.word	0x080002e3
 80021c8:	080002e6 	.word	0x080002e6
 80021cc:	00000000 	.word	0x00000000

080021d0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80021d0:	4a8f      	ldr	r2, [pc, #572]	; (8002410 <__early_init+0x240>)
  gpiop->OTYPER  = config->otyper;
 80021d2:	4990      	ldr	r1, [pc, #576]	; (8002414 <__early_init+0x244>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80021d4:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80021d6:	f8df c240 	ldr.w	ip, [pc, #576]	; 8002418 <__early_init+0x248>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80021da:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80021de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80021e2:	6113      	str	r3, [r2, #16]
 80021e4:	6910      	ldr	r0, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80021e6:	f8df 8234 	ldr.w	r8, [pc, #564]	; 800241c <__early_init+0x24c>
 80021ea:	f8df e234 	ldr.w	lr, [pc, #564]	; 8002420 <__early_init+0x250>
 80021ee:	4f8d      	ldr	r7, [pc, #564]	; (8002424 <__early_init+0x254>)
 80021f0:	4e8d      	ldr	r6, [pc, #564]	; (8002428 <__early_init+0x258>)
 80021f2:	4d8e      	ldr	r5, [pc, #568]	; (800242c <__early_init+0x25c>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80021f4:	f8df a238 	ldr.w	sl, [pc, #568]	; 8002430 <__early_init+0x260>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80021f8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80021fc:	6110      	str	r0, [r2, #16]
 80021fe:	6910      	ldr	r0, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002200:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002202:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
 8002206:	6310      	str	r0, [r2, #48]	; 0x30
 8002208:	6d10      	ldr	r0, [r2, #80]	; 0x50
 800220a:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
  gpiop->OTYPER  = config->otyper;
 800220e:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002210:	6510      	str	r0, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8002212:	f46f 608a 	mvn.w	r0, #1104	; 0x450
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002216:	6d14      	ldr	r4, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8002218:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800221a:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800221c:	4885      	ldr	r0, [pc, #532]	; (8002434 <__early_init+0x264>)
 800221e:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 8002220:	f64f 70df 	movw	r0, #65503	; 0xffdf
 8002224:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8002226:	f44f 40ee 	mov.w	r0, #30464	; 0x7700
 800222a:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800222c:	f44f 202a 	mov.w	r0, #696320	; 0xaa000
 8002230:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002232:	4881      	ldr	r0, [pc, #516]	; (8002438 <__early_init+0x268>)
 8002234:	6008      	str	r0, [r1, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8002236:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  gpiop->ODR     = config->odr;
 800223a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  gpiop->OTYPER  = config->otyper;
 800223e:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
  gpiop->PUPDR   = config->pupdr;
 8002242:	f04f 3955 	mov.w	r9, #1431655765	; 0x55555555
  gpiop->MODER   = config->moder;
 8002246:	f04f 0b80 	mov.w	fp, #128	; 0x80
  gpiop->OTYPER  = config->otyper;
 800224a:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800224e:	f8c8 4008 	str.w	r4, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 8002252:	f8c8 900c 	str.w	r9, [r8, #12]
  gpiop->ODR     = config->odr;
 8002256:	f8c8 0014 	str.w	r0, [r8, #20]
  gpiop->AFRL    = config->afrl;
 800225a:	f8c8 3020 	str.w	r3, [r8, #32]
  gpiop->AFRH    = config->afrh;
 800225e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002262:	f8c8 b000 	str.w	fp, [r8]
  gpiop->PUPDR   = config->pupdr;
 8002266:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 800243c <__early_init+0x26c>
  gpiop->OTYPER  = config->otyper;
 800226a:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800226e:	f8ce 4008 	str.w	r4, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8002272:	f8ce 800c 	str.w	r8, [lr, #12]
  gpiop->ODR     = config->odr;
 8002276:	f8ce 0014 	str.w	r0, [lr, #20]
  gpiop->AFRL    = config->afrl;
 800227a:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 800227e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002282:	f8ce 3000 	str.w	r3, [lr]
  gpiop->OTYPER  = config->otyper;
 8002286:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800228a:	f8cc 4008 	str.w	r4, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 800228e:	f8cc 900c 	str.w	r9, [ip, #12]
  gpiop->ODR     = config->odr;
 8002292:	f8cc 0014 	str.w	r0, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8002296:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 800229a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800229e:	f8cc 3000 	str.w	r3, [ip]
  gpiop->OTYPER  = config->otyper;
 80022a2:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022a4:	60bc      	str	r4, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80022a6:	f8c7 900c 	str.w	r9, [r7, #12]
  gpiop->ODR     = config->odr;
 80022aa:	6178      	str	r0, [r7, #20]
  gpiop->AFRL    = config->afrl;
 80022ac:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022b0:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 80022b2:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022b4:	60b4      	str	r4, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80022b6:	f8c6 900c 	str.w	r9, [r6, #12]
  gpiop->ODR     = config->odr;
 80022ba:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80022bc:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80022be:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022c0:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 80022c2:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022c4:	60ac      	str	r4, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80022c6:	f8c5 900c 	str.w	r9, [r5, #12]
  gpiop->ODR     = config->odr;
 80022ca:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80022cc:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80022ce:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022d0:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 80022d2:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80022d4:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80022d6:	4c5a      	ldr	r4, [pc, #360]	; (8002440 <__early_init+0x270>)
 80022d8:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 80022da:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80022dc:	620b      	str	r3, [r1, #32]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80022de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  gpiop->AFRH    = config->afrh;
 80022e2:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80022e4:	600b      	str	r3, [r1, #0]
  PWR->CR = STM32_VOS;
 80022e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80022ea:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80022ec:	f8ca 3000 	str.w	r3, [sl]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80022f0:	6813      	ldr	r3, [r2, #0]
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	079b      	lsls	r3, r3, #30
 80022fc:	d5fc      	bpl.n	80022f8 <__early_init+0x128>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80022fe:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002300:	4943      	ldr	r1, [pc, #268]	; (8002410 <__early_init+0x240>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002308:	688b      	ldr	r3, [r1, #8]
 800230a:	f013 030c 	ands.w	r3, r3, #12
 800230e:	d1fb      	bne.n	8002308 <__early_init+0x138>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002310:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002312:	483f      	ldr	r0, [pc, #252]	; (8002410 <__early_init+0x240>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002314:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 8002318:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800231a:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 800231c:	680b      	ldr	r3, [r1, #0]
 800231e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8002322:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002324:	6803      	ldr	r3, [r0, #0]
 8002326:	039f      	lsls	r7, r3, #14
 8002328:	d5fc      	bpl.n	8002324 <__early_init+0x154>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800232a:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800232c:	4a38      	ldr	r2, [pc, #224]	; (8002410 <__early_init+0x240>)
  RCC->CSR |= RCC_CSR_LSION;
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8002334:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002336:	079e      	lsls	r6, r3, #30
 8002338:	d5fc      	bpl.n	8002334 <__early_init+0x164>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800233a:	4b42      	ldr	r3, [pc, #264]	; (8002444 <__early_init+0x274>)
 800233c:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800233e:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002340:	493b      	ldr	r1, [pc, #236]	; (8002430 <__early_init+0x260>)
  RCC->CR |= RCC_CR_PLLON;
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002348:	684b      	ldr	r3, [r1, #4]
 800234a:	045d      	lsls	r5, r3, #17
 800234c:	d5fc      	bpl.n	8002348 <__early_init+0x178>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 800234e:	680b      	ldr	r3, [r1, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8002350:	4a37      	ldr	r2, [pc, #220]	; (8002430 <__early_init+0x260>)
  PWR->CR |= PWR_CR_ODEN;
 8002352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002356:	600b      	str	r3, [r1, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8002358:	6853      	ldr	r3, [r2, #4]
 800235a:	03dc      	lsls	r4, r3, #15
 800235c:	d5fc      	bpl.n	8002358 <__early_init+0x188>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 800235e:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8002360:	4933      	ldr	r1, [pc, #204]	; (8002430 <__early_init+0x260>)
  PWR->CR |= PWR_CR_ODSWEN;
 8002362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002366:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8002368:	684b      	ldr	r3, [r1, #4]
 800236a:	0398      	lsls	r0, r3, #14
 800236c:	d5fc      	bpl.n	8002368 <__early_init+0x198>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800236e:	4a28      	ldr	r2, [pc, #160]	; (8002410 <__early_init+0x240>)
 8002370:	6813      	ldr	r3, [r2, #0]
 8002372:	0199      	lsls	r1, r3, #6
 8002374:	d5fc      	bpl.n	8002370 <__early_init+0x1a0>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 8002376:	4b34      	ldr	r3, [pc, #208]	; (8002448 <__early_init+0x278>)
 8002378:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                    STM32_PLLI2SSRC | STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;
 800237c:	6813      	ldr	r3, [r2, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 800237e:	4924      	ldr	r1, [pc, #144]	; (8002410 <__early_init+0x240>)
  RCC->CR |= RCC_CR_PLLI2SON;
 8002380:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002384:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8002386:	680b      	ldr	r3, [r1, #0]
 8002388:	011a      	lsls	r2, r3, #4
 800238a:	d5fc      	bpl.n	8002386 <__early_init+0x1b6>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <__early_init+0x27c>)
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;
 8002392:	680b      	ldr	r3, [r1, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <__early_init+0x240>)
  RCC->CR |= RCC_CR_PLLSAION;
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	d5fc      	bpl.n	800239c <__early_init+0x1cc>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <__early_init+0x280>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80023a4:	4c2b      	ldr	r4, [pc, #172]	; (8002454 <__early_init+0x284>)
    RCC->DCKCFGR = dckcfgr |
 80023a6:	482c      	ldr	r0, [pc, #176]	; (8002458 <__early_init+0x288>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80023a8:	6094      	str	r4, [r2, #8]
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80023aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    RCC->DCKCFGR = dckcfgr |
 80023ae:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80023b2:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <__early_init+0x28c>)
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d01e      	beq.n	80023fc <__early_init+0x22c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80023be:	4b28      	ldr	r3, [pc, #160]	; (8002460 <__early_init+0x290>)
 80023c0:	f240 7205 	movw	r2, #1797	; 0x705
 80023c4:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80023c6:	4a26      	ldr	r2, [pc, #152]	; (8002460 <__early_init+0x290>)
 80023c8:	6813      	ldr	r3, [r2, #0]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d1fa      	bne.n	80023c8 <__early_init+0x1f8>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80023d2:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <__early_init+0x240>)
 80023d4:	6893      	ldr	r3, [r2, #8]
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80023dc:	6893      	ldr	r3, [r2, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d1fa      	bne.n	80023dc <__early_init+0x20c>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80023e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6653      	str	r3, [r2, #100]	; 0x64
 80023f6:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 80023f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80023fc:	4a19      	ldr	r2, [pc, #100]	; (8002464 <__early_init+0x294>)
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <__early_init+0x298>)
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d1db      	bne.n	80023be <__early_init+0x1ee>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <__early_init+0x290>)
 8002408:	f240 1205 	movw	r2, #261	; 0x105
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e7da      	b.n	80023c6 <__early_init+0x1f6>
 8002410:	40023800 	.word	0x40023800
 8002414:	40020000 	.word	0x40020000
 8002418:	40020c00 	.word	0x40020c00
 800241c:	40020400 	.word	0x40020400
 8002420:	40020800 	.word	0x40020800
 8002424:	40021000 	.word	0x40021000
 8002428:	40021400 	.word	0x40021400
 800242c:	40021800 	.word	0x40021800
 8002430:	40007000 	.word	0x40007000
 8002434:	64155105 	.word	0x64155105
 8002438:	2a8004a0 	.word	0x2a8004a0
 800243c:	01555555 	.word	0x01555555
 8002440:	55555550 	.word	0x55555550
 8002444:	07405a08 	.word	0x07405a08
 8002448:	44413004 	.word	0x44413004
 800244c:	44033004 	.word	0x44033004
 8002450:	e0042000 	.word	0xe0042000
 8002454:	40089400 	.word	0x40089400
 8002458:	00800003 	.word	0x00800003
 800245c:	20006411 	.word	0x20006411
 8002460:	40023c00 	.word	0x40023c00
 8002464:	e000ed00 	.word	0xe000ed00
 8002468:	410fc241 	.word	0x410fc241
 800246c:	00000000 	.word	0x00000000

08002470 <chVTDoResetI>:
  return (bool)(dlhp->next == dlp);
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <chVTDoResetI+0xa4>)
 8002472:	691a      	ldr	r2, [r3, #16]
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8002474:	4290      	cmp	r0, r2
void chVTDoResetI(virtual_timer_t *vtp) {
 8002476:	b430      	push	{r4, r5}
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8002478:	d00e      	beq.n	8002498 <chVTDoResetI+0x28>
  dlp->prev->next = dlp->next;
 800247a:	6802      	ldr	r2, [r0, #0]
    vtp->dlist.next->delta += vtp->dlist.delta;
 800247c:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
 8002480:	6891      	ldr	r1, [r2, #8]
 8002482:	6022      	str	r2, [r4, #0]
 8002484:	4429      	add	r1, r5
 8002486:	e9c2 4101 	strd	r4, r1, [r2, #4]
    vtp->dlist.next = NULL;
 800248a:	2100      	movs	r1, #0
    vtlp->dlist.delta = (sysinterval_t)-1;
 800248c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    vtp->dlist.next = NULL;
 8002490:	6001      	str	r1, [r0, #0]
    vtlp->dlist.delta = (sysinterval_t)-1;
 8002492:	619a      	str	r2, [r3, #24]
}
 8002494:	bc30      	pop	{r4, r5}
 8002496:	4770      	bx	lr
  dlhp->next       = dlp->next;
 8002498:	461a      	mov	r2, r3
 800249a:	6801      	ldr	r1, [r0, #0]
 800249c:	f842 1f10 	str.w	r1, [r2, #16]!
  vtp->dlist.next = NULL;
 80024a0:	2500      	movs	r5, #0
  dlhp->next->prev = dlhp;
 80024a2:	604a      	str	r2, [r1, #4]
 80024a4:	6005      	str	r5, [r0, #0]
  return (bool)(dlhp == dlhp->next);
 80024a6:	691c      	ldr	r4, [r3, #16]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80024a8:	4294      	cmp	r4, r2
 80024aa:	d02c      	beq.n	8002506 <chVTDoResetI+0x96>
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80024ac:	68a2      	ldr	r2, [r4, #8]
 80024ae:	6881      	ldr	r1, [r0, #8]
 80024b0:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 80024b4:	4411      	add	r1, r2
 80024b6:	60a1      	str	r1, [r4, #8]
 80024b8:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	1a84      	subs	r4, r0, r2
  if (nowdelta >= vtlp->dlist.next->delta) {
 80024c0:	42a1      	cmp	r1, r4
 80024c2:	d9e7      	bls.n	8002494 <chVTDoResetI+0x24>
  currdelta = vtlp->lastdelta;
 80024c4:	6a1c      	ldr	r4, [r3, #32]
  delta = vtlp->dlist.next->delta - nowdelta;
 80024c6:	1a12      	subs	r2, r2, r0
 80024c8:	440a      	add	r2, r1
 80024ca:	42a2      	cmp	r2, r4
 80024cc:	bf38      	it	cc
 80024ce:	4622      	movcc	r2, r4
  return systime + (systime_t)interval;
 80024d0:	1881      	adds	r1, r0, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80024d2:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80024d6:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80024da:	1a08      	subs	r0, r1, r0
    if (likely(nowdelta < delay)) {
 80024dc:	4282      	cmp	r2, r0
 80024de:	bf98      	it	ls
 80024e0:	4620      	movls	r0, r4
 80024e2:	d8d7      	bhi.n	8002494 <chVTDoResetI+0x24>
    currdelta += (sysinterval_t)1;
 80024e4:	3001      	adds	r0, #1
  return systime + (systime_t)interval;
 80024e6:	180a      	adds	r2, r1, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80024e8:	f8cc 2034 	str.w	r2, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80024ec:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80024f0:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 80024f2:	4281      	cmp	r1, r0
 80024f4:	d20b      	bcs.n	800250e <chVTDoResetI+0x9e>
  if (currdelta > vtlp->lastdelta) {
 80024f6:	4284      	cmp	r4, r0
 80024f8:	d2cc      	bcs.n	8002494 <chVTDoResetI+0x24>
  currcore->rfcu.mask |= mask;
 80024fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    vtlp->lastdelta = currdelta;
 80024fc:	6218      	str	r0, [r3, #32]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002504:	e7c6      	b.n	8002494 <chVTDoResetI+0x24>
  STM32_ST_TIM->DIER = 0U;
 8002506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800250a:	60dd      	str	r5, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 800250c:	e7c2      	b.n	8002494 <chVTDoResetI+0x24>
  return (systime_t)STM32_ST_TIM->CNT;
 800250e:	4611      	mov	r1, r2
 8002510:	e7e8      	b.n	80024e4 <chVTDoResetI+0x74>
 8002512:	bf00      	nop
 8002514:	200009b8 	.word	0x200009b8
	...

08002520 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8002520:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002522:	2330      	movs	r3, #48	; 0x30
 8002524:	b086      	sub	sp, #24
 8002526:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = __instance_get_currthread(currcore);
 800252a:	4c14      	ldr	r4, [pc, #80]	; (800257c <test_wait_tick+0x5c>)
  vtp->func    = vtfunc;
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <test_wait_tick+0x60>)
  vtp->par     = par;
 800252e:	68e3      	ldr	r3, [r4, #12]
  vt_enqueue(vtlp, vtp, delay);
 8002530:	2101      	movs	r1, #1
  vtp->par     = par;
 8002532:	e9cd 2303 	strd	r2, r3, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 8002536:	4668      	mov	r0, sp
  vtp->reload  = (sysinterval_t)0;
 8002538:	2300      	movs	r3, #0
 800253a:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 800253c:	f008 fc48 	bl	800add0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 8002540:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8002542:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8002544:	2308      	movs	r3, #8
 8002546:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8002548:	6803      	ldr	r3, [r0, #0]
 800254a:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 800254c:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800254e:	2301      	movs	r3, #1
 8002550:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8002552:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8002554:	f7fd feb4 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8002558:	9b00      	ldr	r3, [sp, #0]
 800255a:	b113      	cbz	r3, 8002562 <test_wait_tick+0x42>
      chVTDoResetI(&vt);
 800255c:	4668      	mov	r0, sp
 800255e:	f7ff ff87 	bl	8002470 <chVTDoResetI>
 8002562:	2300      	movs	r3, #0
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	2230      	movs	r2, #48	; 0x30
 800256a:	f382 8811 	msr	BASEPRI, r2
 800256e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002572:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8002574:	f383 8811 	msr	BASEPRI, r3

  chThdSleep(1);
  return chVTGetSystemTime();
}
 8002578:	b006      	add	sp, #24
 800257a:	bd10      	pop	{r4, pc}
 800257c:	200009b8 	.word	0x200009b8
 8002580:	08001551 	.word	0x08001551
	...

08002590 <job_slow>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8002590:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <job_slow+0x60>)

static jobs_queue_t jq;
static job_descriptor_t jobs[JOBS_QUEUE_SIZE];
static msg_t msg_queue[JOBS_QUEUE_SIZE];

static void job_slow(void *arg) {
 8002592:	b510      	push	{r4, lr}
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	f103 0120 	add.w	r1, r3, #32
 800259a:	428a      	cmp	r2, r1
 800259c:	b086      	sub	sp, #24
 800259e:	d202      	bcs.n	80025a6 <job_slow+0x16>
    *chtest.tokp++ = token;
 80025a0:	1c51      	adds	r1, r2, #1
 80025a2:	60d9      	str	r1, [r3, #12]

  test_emit_token((int)arg);
 80025a4:	7010      	strb	r0, [r2, #0]
 80025a6:	2330      	movs	r3, #48	; 0x30
 80025a8:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = __instance_get_currthread(currcore);
 80025ac:	4c11      	ldr	r4, [pc, #68]	; (80025f4 <job_slow+0x64>)
  vtp->func    = vtfunc;
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <job_slow+0x68>)
  vtp->par     = par;
 80025b0:	68e3      	ldr	r3, [r4, #12]
  vt_enqueue(vtlp, vtp, delay);
 80025b2:	2164      	movs	r1, #100	; 0x64
  vtp->par     = par;
 80025b4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 80025b8:	4668      	mov	r0, sp
  vtp->reload  = (sysinterval_t)0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 80025be:	f008 fc07 	bl	800add0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 80025c2:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80025c4:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80025c6:	2308      	movs	r3, #8
 80025c8:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 80025ca:	6803      	ldr	r3, [r0, #0]
 80025cc:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 80025ce:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80025d0:	2301      	movs	r3, #1
 80025d2:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 80025d4:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80025d6:	f7fd fe73 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 80025da:	9b00      	ldr	r3, [sp, #0]
 80025dc:	b113      	cbz	r3, 80025e4 <job_slow+0x54>
      chVTDoResetI(&vt);
 80025de:	4668      	mov	r0, sp
 80025e0:	f7ff ff46 	bl	8002470 <chVTDoResetI>
 80025e4:	2300      	movs	r3, #0
 80025e6:	f383 8811 	msr	BASEPRI, r3
  chThdSleepMilliseconds(10);
}
 80025ea:	b006      	add	sp, #24
 80025ec:	bd10      	pop	{r4, pc}
 80025ee:	bf00      	nop
 80025f0:	20000ab4 	.word	0x20000ab4
 80025f4:	200009b8 	.word	0x200009b8
 80025f8:	08001551 	.word	0x08001551
 80025fc:	00000000 	.word	0x00000000

08002600 <__sch_reschedule_ahead.lto_priv.0>:
  thread_t *otp = __instance_get_currthread(oip);
 8002600:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <__sch_reschedule_ahead.lto_priv.0+0x34>)
  ch_priority_queue_t *p = pqp->next;
 8002602:	6810      	ldr	r0, [r2, #0]
 8002604:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 8002606:	6803      	ldr	r3, [r0, #0]
static void __sch_reschedule_ahead(void) {
 8002608:	b410      	push	{r4}
  ntp->state = CH_STATE_CURRENT;
 800260a:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	7704      	strb	r4, [r0, #28]
  tp->state = CH_STATE_READY;
 8002610:	2400      	movs	r4, #0
  pqp->next       = p->next;
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	770c      	strb	r4, [r1, #28]
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8002616:	690b      	ldr	r3, [r1, #16]
  } while (unlikely(pqp->prio > p->prio));
 8002618:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 800261a:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 800261c:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	42a2      	cmp	r2, r4
 8002622:	d8fb      	bhi.n	800261c <__sch_reschedule_ahead.lto_priv.0+0x1c>
  p->prev       = pqp->prev;
 8002624:	685a      	ldr	r2, [r3, #4]
}
 8002626:	bc10      	pop	{r4}
 8002628:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 800262c:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 800262e:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8002630:	f7fd be46 	b.w	80002c0 <__port_switch>
 8002634:	200009b8 	.word	0x200009b8
	...

08002640 <vtcb>:
static void vtcb(virtual_timer_t *vtp, void *p) {
 8002640:	b508      	push	{r3, lr}
 8002642:	2330      	movs	r3, #48	; 0x30
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	2200      	movs	r2, #0
 800264a:	f382 8811 	msr	BASEPRI, r2
 800264e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002652:	f3ef 8211 	mrs	r2, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_lock_status();
  if (!port_is_locked(sts)) {
 8002656:	b95a      	cbnz	r2, 8002670 <vtcb+0x30>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002658:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800265c:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002660:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8002664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (!port_is_locked(sts)) {
    if (port_is_isr_context()) {
 8002668:	b133      	cbz	r3, 8002678 <vtcb+0x38>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800266a:	2300      	movs	r3, #0
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	2300      	movs	r3, #0
 8002672:	f383 8811 	msr	BASEPRI, r3
}
 8002676:	bd08      	pop	{r3, pc}
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <vtcb+0x4c>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	6892      	ldr	r2, [r2, #8]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d9f1      	bls.n	800266a <vtcb+0x2a>
    __sch_reschedule_ahead();
 8002686:	f7ff ffbb 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 800268a:	e7ee      	b.n	800266a <vtcb+0x2a>
 800268c:	200009b8 	.word	0x200009b8

08002690 <rt_test_005_003_execute.lto_priv.0>:
 * - [5.3.2] Thread priority is returned to the previous value then a
 *   check is performed.
 * .
 */

static void rt_test_005_003_execute(void) {
 8002690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8002694:	4c29      	ldr	r4, [pc, #164]	; (800273c <rt_test_005_003_execute.lto_priv.0+0xac>)
  tprio_t prio, p1;

  /* [5.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8002696:	4e2a      	ldr	r6, [pc, #168]	; (8002740 <rt_test_005_003_execute.lto_priv.0+0xb0>)
 8002698:	68e3      	ldr	r3, [r4, #12]
  return chThdGetSelfX()->hdr.pqueue.prio;
 800269a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800269e:	2201      	movs	r2, #1
 80026a0:	6032      	str	r2, [r6, #0]
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 80026a2:	eb08 0502 	add.w	r5, r8, r2
 80026a6:	2230      	movs	r2, #48	; 0x30
 80026a8:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 80026ac:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4297      	cmp	r7, r2
 80026b2:	d038      	beq.n	8002726 <rt_test_005_003_execute.lto_priv.0+0x96>
 80026b4:	4295      	cmp	r5, r2
 80026b6:	d836      	bhi.n	8002726 <rt_test_005_003_execute.lto_priv.0+0x96>
  currtp->realprio = newprio;
 80026b8:	64dd      	str	r5, [r3, #76]	; 0x4c
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68e3      	ldr	r3, [r4, #12]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d901      	bls.n	80026ca <rt_test_005_003_execute.lto_priv.0+0x3a>
    __sch_reschedule_ahead();
 80026c6:	f7ff ff9b 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 80026ca:	2300      	movs	r3, #0
 80026cc:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 80026d0:	45b8      	cmp	r8, r7
 80026d2:	d12a      	bne.n	800272a <rt_test_005_003_execute.lto_priv.0+0x9a>
  return __sch_get_currthread();
 80026d4:	68e3      	ldr	r3, [r4, #12]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	4295      	cmp	r5, r2
 80026da:	d11d      	bne.n	8002718 <rt_test_005_003_execute.lto_priv.0+0x88>
  }
  test_end_step(1);

  /* [5.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 80026dc:	2202      	movs	r2, #2
 80026de:	6032      	str	r2, [r6, #0]
 80026e0:	2230      	movs	r2, #48	; 0x30
 80026e2:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 80026e6:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	4591      	cmp	r9, r2
 80026ee:	d023      	beq.n	8002738 <rt_test_005_003_execute.lto_priv.0+0xa8>
 80026f0:	4590      	cmp	r8, r2
 80026f2:	d821      	bhi.n	8002738 <rt_test_005_003_execute.lto_priv.0+0xa8>
  currtp->realprio = newprio;
 80026f4:	64df      	str	r7, [r3, #76]	; 0x4c
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	68e3      	ldr	r3, [r4, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d901      	bls.n	8002706 <rt_test_005_003_execute.lto_priv.0+0x76>
    __sch_reschedule_ahead();
 8002702:	f7ff ff7d 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8002706:	2300      	movs	r3, #0
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	454d      	cmp	r5, r9
 800270e:	d10c      	bne.n	800272a <rt_test_005_003_execute.lto_priv.0+0x9a>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8002710:	68e3      	ldr	r3, [r4, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4598      	cmp	r8, r3
 8002716:	d004      	beq.n	8002722 <rt_test_005_003_execute.lto_priv.0+0x92>
  chtest.failure_message = msg;
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <rt_test_005_003_execute.lto_priv.0+0xb4>)
 800271a:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 800271c:	f240 1201 	movw	r2, #257	; 0x101
 8002720:	80b2      	strh	r2, [r6, #4]
    p1 = chThdSetPriority(p1);
    test_assert(p1 == prio + 1, "unexpected returned priority level");
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
  }
  test_end_step(2);
}
 8002722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currtp->hdr.pqueue.prio = newprio;
 8002726:	609d      	str	r5, [r3, #8]
 8002728:	e7c6      	b.n	80026b8 <rt_test_005_003_execute.lto_priv.0+0x28>
  chtest.failure_message = msg;
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <rt_test_005_003_execute.lto_priv.0+0xb8>)
 800272c:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 800272e:	f240 1201 	movw	r2, #257	; 0x101
 8002732:	80b2      	strh	r2, [r6, #4]
 8002734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002738:	609f      	str	r7, [r3, #8]
 800273a:	e7db      	b.n	80026f4 <rt_test_005_003_execute.lto_priv.0+0x64>
 800273c:	200009b8 	.word	0x200009b8
 8002740:	20000ab4 	.word	0x20000ab4
 8002744:	0800baf4 	.word	0x0800baf4
 8002748:	0800bad0 	.word	0x0800bad0
 800274c:	00000000 	.word	0x00000000

08002750 <rt_test_005_004_execute.lto_priv.0>:
 * - [5.4.3] Raising thread priority above the boosted level.
 * - [5.4.4] Restoring original conditions.
 * .
 */

static void rt_test_005_004_execute(void) {
 8002750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8002754:	4d3a      	ldr	r5, [pc, #232]	; (8002840 <rt_test_005_004_execute.lto_priv.0+0xf0>)
  }
  test_end_step(1);

  /* [5.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8002756:	4e3b      	ldr	r6, [pc, #236]	; (8002844 <rt_test_005_004_execute.lto_priv.0+0xf4>)
 8002758:	68eb      	ldr	r3, [r5, #12]
  return chThdGetSelfX()->hdr.pqueue.prio;
 800275a:	689c      	ldr	r4, [r3, #8]
 800275c:	2202      	movs	r2, #2
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 800275e:	f104 0902 	add.w	r9, r4, #2
  test_set_step(2);
 8002762:	6032      	str	r2, [r6, #0]
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 8002764:	f8c3 9008 	str.w	r9, [r3, #8]
  {
    p1 = chThdSetPriority(prio + 1);
 8002768:	f104 0801 	add.w	r8, r4, #1
 800276c:	2230      	movs	r2, #48	; 0x30
 800276e:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8002772:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	4297      	cmp	r7, r2
 8002778:	d044      	beq.n	8002804 <rt_test_005_004_execute.lto_priv.0+0xb4>
 800277a:	4590      	cmp	r8, r2
 800277c:	d842      	bhi.n	8002804 <rt_test_005_004_execute.lto_priv.0+0xb4>
  currtp->realprio = newprio;
 800277e:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	68eb      	ldr	r3, [r5, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	429a      	cmp	r2, r3
 800278c:	d901      	bls.n	8002792 <rt_test_005_004_execute.lto_priv.0+0x42>
    __sch_reschedule_ahead();
 800278e:	f7ff ff37 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8002792:	2300      	movs	r3, #0
 8002794:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8002798:	42bc      	cmp	r4, r7
 800279a:	d136      	bne.n	800280a <rt_test_005_004_execute.lto_priv.0+0xba>
  return __sch_get_currthread();
 800279c:	68eb      	ldr	r3, [r5, #12]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	4591      	cmp	r9, r2
 80027a2:	d139      	bne.n	8002818 <rt_test_005_004_execute.lto_priv.0+0xc8>
 80027a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027a6:	4590      	cmp	r8, r2
 80027a8:	d13c      	bne.n	8002824 <rt_test_005_004_execute.lto_priv.0+0xd4>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
  }
  test_end_step(2);

  /* [5.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 80027aa:	2203      	movs	r2, #3
 80027ac:	6032      	str	r2, [r6, #0]
  {
    p1 = chThdSetPriority(prio + 3);
 80027ae:	18a7      	adds	r7, r4, r2
 80027b0:	2230      	movs	r2, #48	; 0x30
 80027b2:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 80027b6:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	4591      	cmp	r9, r2
 80027be:	d037      	beq.n	8002830 <rt_test_005_004_execute.lto_priv.0+0xe0>
 80027c0:	4297      	cmp	r7, r2
 80027c2:	d835      	bhi.n	8002830 <rt_test_005_004_execute.lto_priv.0+0xe0>
  currtp->realprio = newprio;
 80027c4:	64df      	str	r7, [r3, #76]	; 0x4c
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80027c6:	682b      	ldr	r3, [r5, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	68eb      	ldr	r3, [r5, #12]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d901      	bls.n	80027d6 <rt_test_005_004_execute.lto_priv.0+0x86>
    __sch_reschedule_ahead();
 80027d2:	f7ff ff15 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 80027d6:	2300      	movs	r3, #0
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	45c8      	cmp	r8, r9
 80027de:	d114      	bne.n	800280a <rt_test_005_004_execute.lto_priv.0+0xba>
 80027e0:	68ea      	ldr	r2, [r5, #12]
 80027e2:	6891      	ldr	r1, [r2, #8]
 80027e4:	428f      	cmp	r7, r1
 80027e6:	d117      	bne.n	8002818 <rt_test_005_004_execute.lto_priv.0+0xc8>
 80027e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027ea:	4297      	cmp	r7, r2
 80027ec:	d122      	bne.n	8002834 <rt_test_005_004_execute.lto_priv.0+0xe4>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
  }
  test_end_step(3);

  /* [5.4.4] Restoring original conditions.*/
  test_set_step(4);
 80027ee:	2204      	movs	r2, #4
 80027f0:	6032      	str	r2, [r6, #0]
 80027f2:	2230      	movs	r2, #48	; 0x30
 80027f4:	f382 8811 	msr	BASEPRI, r2
 80027f8:	68ea      	ldr	r2, [r5, #12]
  {
    chSysLock();
    chThdGetSelfX()->hdr.pqueue.prio = prio;
 80027fa:	6094      	str	r4, [r2, #8]
    chThdGetSelfX()->realprio = prio;
 80027fc:	64d4      	str	r4, [r2, #76]	; 0x4c
 80027fe:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
 8002802:	e007      	b.n	8002814 <rt_test_005_004_execute.lto_priv.0+0xc4>
    currtp->hdr.pqueue.prio = newprio;
 8002804:	f8c3 8008 	str.w	r8, [r3, #8]
 8002808:	e7b9      	b.n	800277e <rt_test_005_004_execute.lto_priv.0+0x2e>
  chtest.failure_message = msg;
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <rt_test_005_004_execute.lto_priv.0+0xf8>)
 800280c:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 800280e:	f240 1201 	movw	r2, #257	; 0x101
 8002812:	80b2      	strh	r2, [r6, #4]
    chSysUnlock();
  }
  test_end_step(4);
}
 8002814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <rt_test_005_004_execute.lto_priv.0+0xfc>)
 800281a:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 800281c:	f240 1201 	movw	r2, #257	; 0x101
 8002820:	80b2      	strh	r2, [r6, #4]
  return true;
 8002822:	e7f7      	b.n	8002814 <rt_test_005_004_execute.lto_priv.0+0xc4>
  chtest.failure_message = msg;
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <rt_test_005_004_execute.lto_priv.0+0x100>)
 8002826:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 8002828:	f240 1201 	movw	r2, #257	; 0x101
 800282c:	80b2      	strh	r2, [r6, #4]
  return true;
 800282e:	e7f1      	b.n	8002814 <rt_test_005_004_execute.lto_priv.0+0xc4>
 8002830:	609f      	str	r7, [r3, #8]
 8002832:	e7c7      	b.n	80027c4 <rt_test_005_004_execute.lto_priv.0+0x74>
  chtest.failure_message = msg;
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <rt_test_005_004_execute.lto_priv.0+0x104>)
 8002836:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 8002838:	f240 1201 	movw	r2, #257	; 0x101
 800283c:	80b2      	strh	r2, [r6, #4]
  return true;
 800283e:	e7e9      	b.n	8002814 <rt_test_005_004_execute.lto_priv.0+0xc4>
 8002840:	200009b8 	.word	0x200009b8
 8002844:	20000ab4 	.word	0x20000ab4
 8002848:	0800bad0 	.word	0x0800bad0
 800284c:	0800baf4 	.word	0x0800baf4
 8002850:	0800bb10 	.word	0x0800bb10
 8002854:	0800bb38 	.word	0x0800bb38
	...

08002860 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 8002860:	b510      	push	{r4, lr}
 8002862:	2330      	movs	r3, #48	; 0x30
 8002864:	4604      	mov	r4, r0
 8002866:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800286a:	4914      	ldr	r1, [pc, #80]	; (80028bc <thread1.lto_priv.0+0x5c>)
 800286c:	680b      	ldr	r3, [r1, #0]
 800286e:	b173      	cbz	r3, 800288e <thread1.lto_priv.0+0x2e>
    *trp = NULL;
 8002870:	2000      	movs	r0, #0
 8002872:	6008      	str	r0, [r1, #0]
    tp->u.rdymsg = msg;
 8002874:	6358      	str	r0, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8002876:	7718      	strb	r0, [r3, #28]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002878:	691a      	ldr	r2, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 800287a:	6898      	ldr	r0, [r3, #8]
    pqp = pqp->next;
 800287c:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800287e:	6891      	ldr	r1, [r2, #8]
 8002880:	4281      	cmp	r1, r0
 8002882:	d2fb      	bcs.n	800287c <thread1.lto_priv.0+0x1c>
  p->prev       = pqp->prev;
 8002884:	6851      	ldr	r1, [r2, #4]
 8002886:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800288a:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800288c:	6053      	str	r3, [r2, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <thread1.lto_priv.0+0x60>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	6892      	ldr	r2, [r2, #8]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	429a      	cmp	r2, r3
 800289a:	d901      	bls.n	80028a0 <thread1.lto_priv.0+0x40>
    __sch_reschedule_ahead();
 800289c:	f7ff feb0 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 80028a0:	2300      	movs	r3, #0
 80028a2:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <thread1.lto_priv.0+0x64>)
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	f103 0120 	add.w	r1, r3, #32
 80028ae:	428a      	cmp	r2, r1
 80028b0:	d203      	bcs.n	80028ba <thread1.lto_priv.0+0x5a>
  test_emit_token(*(char *)p);
 80028b2:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 80028b4:	1c50      	adds	r0, r2, #1
 80028b6:	60d8      	str	r0, [r3, #12]
 80028b8:	7011      	strb	r1, [r2, #0]
}
 80028ba:	bd10      	pop	{r4, pc}
 80028bc:	20001758 	.word	0x20001758
 80028c0:	200009b8 	.word	0x200009b8
 80028c4:	20000ab4 	.word	0x20000ab4
	...

080028d0 <thread4>:
static THD_FUNCTION(thread4, p) {
 80028d0:	b508      	push	{r3, lr}
 80028d2:	2230      	movs	r2, #48	; 0x30
 80028d4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 80028d8:	6883      	ldr	r3, [r0, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	dd0c      	ble.n	80028f8 <thread4+0x28>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <thread4+0x30>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d901      	bls.n	80028f0 <thread4+0x20>
    __sch_reschedule_ahead();
 80028ec:	f7ff fe88 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 80028f0:	2300      	movs	r3, #0
 80028f2:	f383 8811 	msr	BASEPRI, r3
}
 80028f6:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 80028f8:	f7fe fe62 	bl	80015c0 <chSemSignalI>
 80028fc:	e7ef      	b.n	80028de <thread4+0xe>
 80028fe:	bf00      	nop
 8002900:	200009b8 	.word	0x200009b8
	...

08002910 <obj_read>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8002910:	4b2f      	ldr	r3, [pc, #188]	; (80029d0 <obj_read+0xc0>)
                     bool async) {
 8002912:	b570      	push	{r4, r5, r6, lr}
 8002914:	68dd      	ldr	r5, [r3, #12]
 8002916:	460c      	mov	r4, r1
 8002918:	f103 0120 	add.w	r1, r3, #32
 800291c:	428d      	cmp	r5, r1
 800291e:	d204      	bcs.n	800292a <obj_read+0x1a>
  test_emit_token('a' + objp->obj_key);
 8002920:	6961      	ldr	r1, [r4, #20]
    *chtest.tokp++ = token;
 8002922:	1c6e      	adds	r6, r5, #1
 8002924:	3161      	adds	r1, #97	; 0x61
 8002926:	60de      	str	r6, [r3, #12]
 8002928:	7029      	strb	r1, [r5, #0]
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 800292a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800292c:	f023 0308 	bic.w	r3, r3, #8
 8002930:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 8002932:	b90a      	cbnz	r2, 8002938 <obj_read+0x28>
}
 8002934:	2000      	movs	r0, #0
 8002936:	bd70      	pop	{r4, r5, r6, pc}
 8002938:	2330      	movs	r3, #48	; 0x30
 800293a:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800293e:	6a23      	ldr	r3, [r4, #32]
 8002940:	2b00      	cmp	r3, #0
    /* Clearing all flags except those that are still meaningful, note,
       OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
       will handle them.*/
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002942:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002944:	db3c      	blt.n	80029c0 <obj_read+0xb0>
    return;
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002946:	0719      	lsls	r1, r3, #28
 8002948:	d421      	bmi.n	800298e <obj_read+0x7e>
    objp->obj_key   = 0U;
    objp->obj_flags = OC_FLAG_INLRU;
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800294a:	069a      	lsls	r2, r3, #26
 800294c:	d430      	bmi.n	80029b0 <obj_read+0xa0>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 800294e:	69c2      	ldr	r2, [r0, #28]
 8002950:	f100 0114 	add.w	r1, r0, #20
 8002954:	e9c4 2102 	strd	r2, r1, [r4, #8]
 8002958:	60d4      	str	r4, [r2, #12]
 800295a:	61c4      	str	r4, [r0, #28]
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 800295c:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6263      	str	r3, [r4, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 8002966:	3030      	adds	r0, #48	; 0x30
 8002968:	f7fe fe2a 	bl	80015c0 <chSemSignalI>
  sp->cnt++;
 800296c:	6a23      	ldr	r3, [r4, #32]
 800296e:	3301      	adds	r3, #1
 8002970:	6223      	str	r3, [r4, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <obj_read+0xc4>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	6892      	ldr	r2, [r2, #8]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d901      	bls.n	8002984 <obj_read+0x74>
    __sch_reschedule_ahead();
 8002980:	f7ff fe3e 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8002984:	2300      	movs	r3, #0
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	2000      	movs	r0, #0
 800298c:	bd70      	pop	{r4, r5, r6, pc}
    HASH_REMOVE(objp);
 800298e:	e9d4 3100 	ldrd	r3, r1, [r4]
    LRU_INSERT_TAIL(ocp, objp);
 8002992:	6a02      	ldr	r2, [r0, #32]
    HASH_REMOVE(objp);
 8002994:	600b      	str	r3, [r1, #0]
 8002996:	6059      	str	r1, [r3, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8002998:	f100 0114 	add.w	r1, r0, #20
 800299c:	e9c4 1202 	strd	r1, r2, [r4, #8]
    objp->obj_owner = NULL;
 80029a0:	2300      	movs	r3, #0
    objp->obj_flags = OC_FLAG_INLRU;
 80029a2:	2101      	movs	r1, #1
    LRU_INSERT_TAIL(ocp, objp);
 80029a4:	6094      	str	r4, [r2, #8]
 80029a6:	6204      	str	r4, [r0, #32]
    objp->obj_key   = 0U;
 80029a8:	e9c4 3304 	strd	r3, r3, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 80029ac:	6261      	str	r1, [r4, #36]	; 0x24
 80029ae:	e7da      	b.n	8002966 <obj_read+0x56>
      LRU_INSERT_TAIL(ocp, objp);
 80029b0:	6a02      	ldr	r2, [r0, #32]
 80029b2:	f100 0114 	add.w	r1, r0, #20
 80029b6:	e9c4 1202 	strd	r1, r2, [r4, #8]
 80029ba:	6094      	str	r4, [r2, #8]
 80029bc:	6204      	str	r4, [r0, #32]
 80029be:	e7cd      	b.n	800295c <obj_read+0x4c>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 80029c0:	f003 031a 	and.w	r3, r3, #26
    chSemSignalI(&objp->obj_sem);
 80029c4:	f104 0018 	add.w	r0, r4, #24
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 80029c8:	6263      	str	r3, [r4, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 80029ca:	f7fe fdf9 	bl	80015c0 <chSemSignalI>
    return;
 80029ce:	e7d0      	b.n	8002972 <obj_read+0x62>
 80029d0:	20000ab4 	.word	0x20000ab4
 80029d4:	200009b8 	.word	0x200009b8
	...

080029e0 <oslib_test_006_001_execute.lto_priv.0>:
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 80029e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  qp->next = qp;
 80029e4:	4c5b      	ldr	r4, [pc, #364]	; (8002b54 <oslib_test_006_001_execute.lto_priv.0+0x174>)
  ocp->hashp            = hashp;
 80029e6:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <oslib_test_006_001_execute.lto_priv.0+0x178>)
  sp->cnt = n;
 80029e8:	2104      	movs	r1, #4
 80029ea:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80029ee:	2001      	movs	r0, #1
  qp->prev = qp;
 80029f0:	e9c4 2209 	strd	r2, r2, [r4, #36]	; 0x24
  ocp->objn             = objn;
 80029f4:	e9c4 3101 	strd	r3, r1, [r4, #4]
  ocp->hashn            = hashn;
 80029f8:	2208      	movs	r2, #8
 80029fa:	62e0      	str	r0, [r4, #44]	; 0x2c
 80029fc:	63a1      	str	r1, [r4, #56]	; 0x38
  qp->next = qp;
 80029fe:	f104 0030 	add.w	r0, r4, #48	; 0x30
  ocp->readf            = readf;
 8002a02:	4956      	ldr	r1, [pc, #344]	; (8002b5c <oslib_test_006_001_execute.lto_priv.0+0x17c>)
  ocp->hashn            = hashn;
 8002a04:	6022      	str	r2, [r4, #0]
  qp->prev = qp;
 8002a06:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
  ocp->list.h.next      = NULL;
 8002a0a:	2200      	movs	r2, #0
  ocp->objvp            = objvp;
 8002a0c:	4854      	ldr	r0, [pc, #336]	; (8002b60 <oslib_test_006_001_execute.lto_priv.0+0x180>)
  ocp->readf            = readf;
 8002a0e:	63e1      	str	r1, [r4, #60]	; 0x3c
  ocp->list.prev        = &ocp->list;
 8002a10:	f104 0614 	add.w	r6, r4, #20
  ocp->writef           = writef;
 8002a14:	4953      	ldr	r1, [pc, #332]	; (8002b64 <oslib_test_006_001_execute.lto_priv.0+0x184>)
  ocp->objvp            = objvp;
 8002a16:	6120      	str	r0, [r4, #16]
  ocp->list.h.prev      = NULL;
 8002a18:	e9c4 2205 	strd	r2, r2, [r4, #20]
  ocp->list.prev        = &ocp->list;
 8002a1c:	6226      	str	r6, [r4, #32]
 8002a1e:	f103 0240 	add.w	r2, r3, #64	; 0x40
  ocp->writef           = writef;
 8002a22:	6421      	str	r1, [r4, #64]	; 0x40
    hashp->prev = hashp;
 8002a24:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 8002a28:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d1fa      	bne.n	8002a24 <oslib_test_006_001_execute.lto_priv.0+0x44>
 8002a2e:	4b4c      	ldr	r3, [pc, #304]	; (8002b60 <oslib_test_006_001_execute.lto_priv.0+0x180>)
 8002a30:	494d      	ldr	r1, [pc, #308]	; (8002b68 <oslib_test_006_001_execute.lto_priv.0+0x188>)
 8002a32:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 8002a36:	2701      	movs	r7, #1
    objp->obj_owner = NULL;
 8002a38:	2200      	movs	r2, #0
 8002a3a:	e000      	b.n	8002a3e <oslib_test_006_001_execute.lto_priv.0+0x5e>
 8002a3c:	462b      	mov	r3, r5
    objvp = (void *)((uint8_t *)objvp + objsz);
 8002a3e:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 8002a42:	f103 0018 	add.w	r0, r3, #24
  } while (objn > (ucnt_t)0);
 8002a46:	4565      	cmp	r5, ip
    LRU_INSERT_HEAD(ocp, objp);
 8002a48:	6099      	str	r1, [r3, #8]
 8002a4a:	e9c3 0006 	strd	r0, r0, [r3, #24]
 8002a4e:	621f      	str	r7, [r3, #32]
 8002a50:	60de      	str	r6, [r3, #12]
 8002a52:	60cb      	str	r3, [r1, #12]
    objp->obj_key   = 0U;
 8002a54:	e9c3 2204 	strd	r2, r2, [r3, #16]
    objp->dptr      = NULL;
 8002a58:	e9c3 7209 	strd	r7, r2, [r3, #36]	; 0x24
 8002a5c:	4619      	mov	r1, r3
  } while (objn > (ucnt_t)0);
 8002a5e:	d1ed      	bne.n	8002a3c <oslib_test_006_001_execute.lto_priv.0+0x5c>
 8002a60:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <oslib_test_006_001_execute.lto_priv.0+0x18c>)
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 8002a62:	4d43      	ldr	r5, [pc, #268]	; (8002b70 <oslib_test_006_001_execute.lto_priv.0+0x190>)
 8002a64:	61e3      	str	r3, [r4, #28]
 8002a66:	2302      	movs	r3, #2
  chSemSignalI(&ocp->lru_sem);
 8002a68:	f8df a108 	ldr.w	sl, [pc, #264]	; 8002b74 <oslib_test_006_001_execute.lto_priv.0+0x194>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002a6c:	4f42      	ldr	r7, [pc, #264]	; (8002b78 <oslib_test_006_001_execute.lto_priv.0+0x198>)
 8002a6e:	602b      	str	r3, [r5, #0]
  {
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8002a70:	f04f 0800 	mov.w	r8, #0
 8002a74:	f04f 0930 	mov.w	r9, #48	; 0x30
 8002a78:	e02a      	b.n	8002ad0 <oslib_test_006_001_execute.lto_priv.0+0xf0>
    LRU_INSERT_TAIL(ocp, objp);
 8002a7a:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 8002a7c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8002a80:	f8db 2000 	ldr.w	r2, [fp]
 8002a84:	600a      	str	r2, [r1, #0]
 8002a86:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8002a88:	e9cb 6302 	strd	r6, r3, [fp, #8]
 8002a8c:	f8c3 b008 	str.w	fp, [r3, #8]
    objp->obj_owner = NULL;
 8002a90:	2300      	movs	r3, #0
    LRU_INSERT_TAIL(ocp, objp);
 8002a92:	f8c4 b020 	str.w	fp, [r4, #32]
    objp->obj_key   = 0U;
 8002a96:	e9cb 3304 	strd	r3, r3, [fp, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 8002aa0:	4650      	mov	r0, sl
 8002aa2:	f7fe fd8d 	bl	80015c0 <chSemSignalI>
 8002aa6:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f8cb 3020 	str.w	r3, [fp, #32]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6892      	ldr	r2, [r2, #8]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d901      	bls.n	8002ac0 <oslib_test_006_001_execute.lto_priv.0+0xe0>
    __sch_reschedule_ahead();
 8002abc:	f7ff fda0 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f108 0801 	add.w	r8, r8, #1
 8002aca:	f1b8 0f08 	cmp.w	r8, #8
 8002ace:	d059      	beq.n	8002b84 <oslib_test_006_001_execute.lto_priv.0+0x1a4>
      oc_object_t * objp = chCacheGetObject(&cache1, NULL, i);
 8002ad0:	4640      	mov	r0, r8
 8002ad2:	f007 fe85 	bl	800a7e0 <chCacheGetObject.constprop.0>

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8002ad6:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t * objp = chCacheGetObject(&cache1, NULL, i);
 8002ad8:	4683      	mov	fp, r0
  if (!condition) {
 8002ada:	0798      	lsls	r0, r3, #30
 8002adc:	d51b      	bpl.n	8002b16 <oslib_test_006_001_execute.lto_priv.0+0x136>
 8002ade:	0719      	lsls	r1, r3, #28
 8002ae0:	d520      	bpl.n	8002b24 <oslib_test_006_001_execute.lto_priv.0+0x144>
 8002ae2:	f389 8811 	msr	BASEPRI, r9
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002ae6:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002aea:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002aec:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002af0:	db27      	blt.n	8002b42 <oslib_test_006_001_execute.lto_priv.0+0x162>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002af2:	071a      	lsls	r2, r3, #28
 8002af4:	d4c1      	bmi.n	8002a7a <oslib_test_006_001_execute.lto_priv.0+0x9a>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8002af6:	0698      	lsls	r0, r3, #26
 8002af8:	d41b      	bmi.n	8002b32 <oslib_test_006_001_execute.lto_priv.0+0x152>
      LRU_INSERT_HEAD(ocp, objp);
 8002afa:	69e2      	ldr	r2, [r4, #28]
 8002afc:	e9cb 2602 	strd	r2, r6, [fp, #8]
 8002b00:	f8c2 b00c 	str.w	fp, [r2, #12]
 8002b04:	f8c4 b01c 	str.w	fp, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8002b08:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8002b14:	e7c4      	b.n	8002aa0 <oslib_test_006_001_execute.lto_priv.0+0xc0>
  chtest.failure_message = msg;
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <oslib_test_006_001_execute.lto_priv.0+0x19c>)
 8002b18:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8002b1a:	f240 1201 	movw	r2, #257	; 0x101
 8002b1e:	80aa      	strh	r2, [r5, #4]
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 8002b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.failure_message = msg;
 8002b24:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <oslib_test_006_001_execute.lto_priv.0+0x1a0>)
 8002b26:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8002b28:	f240 1201 	movw	r2, #257	; 0x101
 8002b2c:	80aa      	strh	r2, [r5, #4]
 8002b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LRU_INSERT_TAIL(ocp, objp);
 8002b32:	6a22      	ldr	r2, [r4, #32]
 8002b34:	e9cb 6202 	strd	r6, r2, [fp, #8]
 8002b38:	f8c2 b008 	str.w	fp, [r2, #8]
 8002b3c:	f8c4 b020 	str.w	fp, [r4, #32]
 8002b40:	e7e2      	b.n	8002b08 <oslib_test_006_001_execute.lto_priv.0+0x128>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002b42:	f003 031a 	and.w	r3, r3, #26
 8002b46:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8002b4a:	f10b 0018 	add.w	r0, fp, #24
 8002b4e:	f7fe fd37 	bl	80015c0 <chSemSignalI>
    return;
 8002b52:	e7ad      	b.n	8002ab0 <oslib_test_006_001_execute.lto_priv.0+0xd0>
 8002b54:	20000970 	.word	0x20000970
 8002b58:	20000b04 	.word	0x20000b04
 8002b5c:	08002911 	.word	0x08002911
 8002b60:	20000c0c 	.word	0x20000c0c
 8002b64:	080012e1 	.word	0x080012e1
 8002b68:	20000984 	.word	0x20000984
 8002b6c:	20000cc0 	.word	0x20000cc0
 8002b70:	20000ab4 	.word	0x20000ab4
 8002b74:	200009a0 	.word	0x200009a0
 8002b78:	200009b8 	.word	0x200009b8
 8002b7c:	0800bb58 	.word	0x0800bb58
 8002b80:	0800bb64 	.word	0x0800bb64
    test_assert_sequence("", "unexpected tokens");
 8002b84:	49b1      	ldr	r1, [pc, #708]	; (8002e4c <oslib_test_006_001_execute.lto_priv.0+0x46c>)
 8002b86:	48b2      	ldr	r0, [pc, #712]	; (8002e50 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 8002b88:	f7fd ff42 	bl	8000a10 <__test_assert_sequence>
 8002b8c:	4681      	mov	r9, r0
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d1c6      	bne.n	8002b20 <oslib_test_006_001_execute.lto_priv.0+0x140>
  test_set_step(3);
 8002b92:	2303      	movs	r3, #3
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 8002b94:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8002e54 <oslib_test_006_001_execute.lto_priv.0+0x474>
 8002b98:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, NULL, i);
 8002b9a:	4648      	mov	r0, r9
 8002b9c:	f007 fe20 	bl	800a7e0 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8002ba0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (!condition) {
 8002ba2:	0799      	lsls	r1, r3, #30
      oc_object_t *objp = chCacheGetObject(&cache1, NULL, i);
 8002ba4:	4683      	mov	fp, r0
 8002ba6:	d5b6      	bpl.n	8002b16 <oslib_test_006_001_execute.lto_priv.0+0x136>
 8002ba8:	071a      	lsls	r2, r3, #28
 8002baa:	f140 813d 	bpl.w	8002e28 <oslib_test_006_001_execute.lto_priv.0+0x448>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8002bae:	f043 0308 	orr.w	r3, r3, #8
 8002bb2:	6243      	str	r3, [r0, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8002bb4:	4601      	mov	r1, r0
 8002bb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	4650      	mov	r0, sl
 8002bbc:	4798      	blx	r3
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	f040 813e 	bne.w	8002e40 <oslib_test_006_001_execute.lto_priv.0+0x460>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8002bc4:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002bc8:	0798      	lsls	r0, r3, #30
 8002bca:	d5a4      	bpl.n	8002b16 <oslib_test_006_001_execute.lto_priv.0+0x136>
 8002bcc:	f013 0808 	ands.w	r8, r3, #8
 8002bd0:	f040 8130 	bne.w	8002e34 <oslib_test_006_001_execute.lto_priv.0+0x454>
 8002bd4:	2330      	movs	r3, #48	; 0x30
 8002bd6:	f383 8811 	msr	BASEPRI, r3
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002bda:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002bde:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002be0:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002be4:	f2c0 815a 	blt.w	8002e9c <oslib_test_006_001_execute.lto_priv.0+0x4bc>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002be8:	0719      	lsls	r1, r3, #28
 8002bea:	f140 813f 	bpl.w	8002e6c <oslib_test_006_001_execute.lto_priv.0+0x48c>
    HASH_REMOVE(objp);
 8002bee:	e9db 2100 	ldrd	r2, r1, [fp]
    LRU_INSERT_TAIL(ocp, objp);
 8002bf2:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 8002bf4:	600a      	str	r2, [r1, #0]
 8002bf6:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8002bf8:	e9cb 6302 	strd	r6, r3, [fp, #8]
 8002bfc:	f8c3 b008 	str.w	fp, [r3, #8]
 8002c00:	f8c4 b020 	str.w	fp, [r4, #32]
    objp->obj_key   = 0U;
 8002c04:	e9cb 8804 	strd	r8, r8, [fp, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 8002c0e:	4892      	ldr	r0, [pc, #584]	; (8002e58 <oslib_test_006_001_execute.lto_priv.0+0x478>)
 8002c10:	f7fe fcd6 	bl	80015c0 <chSemSignalI>
 8002c14:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f8cb 3020 	str.w	r3, [fp, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d901      	bls.n	8002c2e <oslib_test_006_001_execute.lto_priv.0+0x24e>
    __sch_reschedule_ahead();
 8002c2a:	f7ff fce9 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8002c34:	f109 0901 	add.w	r9, r9, #1
 8002c38:	f1b9 0f08 	cmp.w	r9, #8
 8002c3c:	d1ad      	bne.n	8002b9a <oslib_test_006_001_execute.lto_priv.0+0x1ba>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8002c3e:	4983      	ldr	r1, [pc, #524]	; (8002e4c <oslib_test_006_001_execute.lto_priv.0+0x46c>)
 8002c40:	4886      	ldr	r0, [pc, #536]	; (8002e5c <oslib_test_006_001_execute.lto_priv.0+0x47c>)
 8002c42:	f7fd fee5 	bl	8000a10 <__test_assert_sequence>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	f47f af6a 	bne.w	8002b20 <oslib_test_006_001_execute.lto_priv.0+0x140>
  test_set_step(4);
 8002c4c:	2304      	movs	r3, #4
  return ocp->readf(ocp, objp, async);
 8002c4e:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8002e54 <oslib_test_006_001_execute.lto_priv.0+0x474>
 8002c52:	602b      	str	r3, [r5, #0]
 8002c54:	f04f 0b01 	mov.w	fp, #1
 8002c58:	f04f 0a30 	mov.w	sl, #48	; 0x30
      oc_object_t *objp = chCacheGetObject(&cache1, NULL, i);
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	f007 fdbf 	bl	800a7e0 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8002c62:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t *objp = chCacheGetObject(&cache1, NULL, i);
 8002c64:	4601      	mov	r1, r0
 8002c66:	0798      	lsls	r0, r3, #30
 8002c68:	f57f af55 	bpl.w	8002b16 <oslib_test_006_001_execute.lto_priv.0+0x136>
 8002c6c:	071a      	lsls	r2, r3, #28
 8002c6e:	f140 80db 	bpl.w	8002e28 <oslib_test_006_001_execute.lto_priv.0+0x448>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8002c72:	f043 0308 	orr.w	r3, r3, #8
 8002c76:	624b      	str	r3, [r1, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c7c:	4648      	mov	r0, r9
 8002c7e:	4798      	blx	r3
 8002c80:	2800      	cmp	r0, #0
 8002c82:	f040 80dd 	bne.w	8002e40 <oslib_test_006_001_execute.lto_priv.0+0x460>
      objp = chCacheGetObject(&cache1, NULL, i);
 8002c86:	4640      	mov	r0, r8
 8002c88:	f007 fdaa 	bl	800a7e0 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8002c8c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002c8e:	0793      	lsls	r3, r2, #30
 8002c90:	f57f af41 	bpl.w	8002b16 <oslib_test_006_001_execute.lto_priv.0+0x136>
 8002c94:	f012 0208 	ands.w	r2, r2, #8
 8002c98:	f040 80cc 	bne.w	8002e34 <oslib_test_006_001_execute.lto_priv.0+0x454>
 8002c9c:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002ca0:	6a03      	ldr	r3, [r0, #32]
 8002ca2:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002ca6:	f2c0 8131 	blt.w	8002f0c <oslib_test_006_001_execute.lto_priv.0+0x52c>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002caa:	0719      	lsls	r1, r3, #28
 8002cac:	f140 80ff 	bpl.w	8002eae <oslib_test_006_001_execute.lto_priv.0+0x4ce>
    HASH_REMOVE(objp);
 8002cb0:	e9d0 1c00 	ldrd	r1, ip, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 8002cb4:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 8002cb6:	f8cc 1000 	str.w	r1, [ip]
 8002cba:	f8c1 c004 	str.w	ip, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8002cbe:	e9c0 6302 	strd	r6, r3, [r0, #8]
 8002cc2:	6098      	str	r0, [r3, #8]
  if (++sp->cnt <= (cnt_t)0) {
 8002cc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cc6:	6220      	str	r0, [r4, #32]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	2b00      	cmp	r3, #0
    objp->obj_key   = 0U;
 8002ccc:	e9c0 2204 	strd	r2, r2, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8002cd0:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
 8002cd4:	63a3      	str	r3, [r4, #56]	; 0x38
 8002cd6:	f340 80fc 	ble.w	8002ed2 <oslib_test_006_001_execute.lto_priv.0+0x4f2>
 8002cda:	6a03      	ldr	r3, [r0, #32]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d901      	bls.n	8002cf0 <oslib_test_006_001_execute.lto_priv.0+0x310>
    __sch_reschedule_ahead();
 8002cec:	f7ff fc88 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8002cf6:	f108 0801 	add.w	r8, r8, #1
 8002cfa:	f1b8 0f08 	cmp.w	r8, #8
 8002cfe:	d1ad      	bne.n	8002c5c <oslib_test_006_001_execute.lto_priv.0+0x27c>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8002d00:	4952      	ldr	r1, [pc, #328]	; (8002e4c <oslib_test_006_001_execute.lto_priv.0+0x46c>)
 8002d02:	4856      	ldr	r0, [pc, #344]	; (8002e5c <oslib_test_006_001_execute.lto_priv.0+0x47c>)
 8002d04:	f7fd fe84 	bl	8000a10 <__test_assert_sequence>
 8002d08:	4681      	mov	r9, r0
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	f47f af08 	bne.w	8002b20 <oslib_test_006_001_execute.lto_priv.0+0x140>
  test_set_step(5);
 8002d10:	2305      	movs	r3, #5
 8002d12:	602b      	str	r3, [r5, #0]
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8002d14:	f04f 0b04 	mov.w	fp, #4
 8002d18:	f04f 0a30 	mov.w	sl, #48	; 0x30
      oc_object_t *objp = chCacheGetObject(&cache1, NULL, i);
 8002d1c:	4658      	mov	r0, fp
 8002d1e:	f007 fd5f 	bl	800a7e0 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8002d22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d24:	0799      	lsls	r1, r3, #30
 8002d26:	f57f aef6 	bpl.w	8002b16 <oslib_test_006_001_execute.lto_priv.0+0x136>
 8002d2a:	f013 0808 	ands.w	r8, r3, #8
 8002d2e:	f040 8081 	bne.w	8002e34 <oslib_test_006_001_execute.lto_priv.0+0x454>
 8002d32:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002d36:	6a03      	ldr	r3, [r0, #32]
 8002d38:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002d3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002d3c:	f2c0 8123 	blt.w	8002f86 <oslib_test_006_001_execute.lto_priv.0+0x5a6>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002d40:	071a      	lsls	r2, r3, #28
 8002d42:	f140 80ea 	bpl.w	8002f1a <oslib_test_006_001_execute.lto_priv.0+0x53a>
    HASH_REMOVE(objp);
 8002d46:	e9d0 2100 	ldrd	r2, r1, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 8002d4a:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 8002d4c:	600a      	str	r2, [r1, #0]
 8002d4e:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8002d50:	e9c0 6302 	strd	r6, r3, [r0, #8]
 8002d54:	6098      	str	r0, [r3, #8]
 8002d56:	6220      	str	r0, [r4, #32]
    objp->obj_key   = 0U;
 8002d58:	e9c0 8804 	strd	r8, r8, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	6243      	str	r3, [r0, #36]	; 0x24
 8002d60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d62:	3301      	adds	r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d68:	f340 80f7 	ble.w	8002f5a <oslib_test_006_001_execute.lto_priv.0+0x57a>
 8002d6c:	6a03      	ldr	r3, [r0, #32]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d901      	bls.n	8002d82 <oslib_test_006_001_execute.lto_priv.0+0x3a2>
    __sch_reschedule_ahead();
 8002d7e:	f7ff fc3f 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8002d82:	f389 8811 	msr	BASEPRI, r9
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8002d86:	f10b 0b01 	add.w	fp, fp, #1
 8002d8a:	f1bb 0f08 	cmp.w	fp, #8
 8002d8e:	d1c5      	bne.n	8002d1c <oslib_test_006_001_execute.lto_priv.0+0x33c>
    test_assert_sequence("", "unexpected tokens");
 8002d90:	492e      	ldr	r1, [pc, #184]	; (8002e4c <oslib_test_006_001_execute.lto_priv.0+0x46c>)
 8002d92:	482f      	ldr	r0, [pc, #188]	; (8002e50 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 8002d94:	f7fd fe3c 	bl	8000a10 <__test_assert_sequence>
 8002d98:	4681      	mov	r9, r0
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	f47f aec0 	bne.w	8002b20 <oslib_test_006_001_execute.lto_priv.0+0x140>
  test_set_step(6);
 8002da0:	2306      	movs	r3, #6
 8002da2:	602b      	str	r3, [r5, #0]
 8002da4:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8002da8:	f04f 0b01 	mov.w	fp, #1
      oc_object_t *objp = chCacheGetObject(&cache1, NULL, i);
 8002dac:	4640      	mov	r0, r8
 8002dae:	f007 fd17 	bl	800a7e0 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8002db2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002db4:	079a      	lsls	r2, r3, #30
 8002db6:	f57f aeae 	bpl.w	8002b16 <oslib_test_006_001_execute.lto_priv.0+0x136>
 8002dba:	071b      	lsls	r3, r3, #28
 8002dbc:	d534      	bpl.n	8002e28 <oslib_test_006_001_execute.lto_priv.0+0x448>
 8002dbe:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002dc2:	6a03      	ldr	r3, [r0, #32]
 8002dc4:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002dc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002dc8:	f2c0 8100 	blt.w	8002fcc <oslib_test_006_001_execute.lto_priv.0+0x5ec>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002dcc:	0719      	lsls	r1, r3, #28
 8002dce:	f140 80b7 	bpl.w	8002f40 <oslib_test_006_001_execute.lto_priv.0+0x560>
    HASH_REMOVE(objp);
 8002dd2:	e9d0 2100 	ldrd	r2, r1, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 8002dd6:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 8002dd8:	600a      	str	r2, [r1, #0]
 8002dda:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8002ddc:	e9c0 6302 	strd	r6, r3, [r0, #8]
 8002de0:	6098      	str	r0, [r3, #8]
 8002de2:	6220      	str	r0, [r4, #32]
    objp->obj_key   = 0U;
 8002de4:	e9c0 9904 	strd	r9, r9, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8002de8:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
 8002dec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dee:	3301      	adds	r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002df4:	f340 80ce 	ble.w	8002f94 <oslib_test_006_001_execute.lto_priv.0+0x5b4>
 8002df8:	6a03      	ldr	r3, [r0, #32]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d901      	bls.n	8002e0e <oslib_test_006_001_execute.lto_priv.0+0x42e>
    __sch_reschedule_ahead();
 8002e0a:	f7ff fbf9 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8002e0e:	f389 8811 	msr	BASEPRI, r9
    for (i = 0; i < NUM_OBJECTS; i++) {
 8002e12:	f108 0801 	add.w	r8, r8, #1
 8002e16:	f1b8 0f04 	cmp.w	r8, #4
 8002e1a:	d1c7      	bne.n	8002dac <oslib_test_006_001_execute.lto_priv.0+0x3cc>
}
 8002e1c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 8002e20:	490a      	ldr	r1, [pc, #40]	; (8002e4c <oslib_test_006_001_execute.lto_priv.0+0x46c>)
 8002e22:	480b      	ldr	r0, [pc, #44]	; (8002e50 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 8002e24:	f7fd bdf4 	b.w	8000a10 <__test_assert_sequence>
  chtest.failure_message = msg;
 8002e28:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <oslib_test_006_001_execute.lto_priv.0+0x480>)
 8002e2a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8002e2c:	f240 1201 	movw	r2, #257	; 0x101
 8002e30:	80aa      	strh	r2, [r5, #4]
  return true;
 8002e32:	e675      	b.n	8002b20 <oslib_test_006_001_execute.lto_priv.0+0x140>
  chtest.failure_message = msg;
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <oslib_test_006_001_execute.lto_priv.0+0x484>)
 8002e36:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8002e38:	f240 1201 	movw	r2, #257	; 0x101
 8002e3c:	80aa      	strh	r2, [r5, #4]
  return true;
 8002e3e:	e66f      	b.n	8002b20 <oslib_test_006_001_execute.lto_priv.0+0x140>
  chtest.failure_message = msg;
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <oslib_test_006_001_execute.lto_priv.0+0x488>)
 8002e42:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8002e44:	f240 1201 	movw	r2, #257	; 0x101
 8002e48:	80aa      	strh	r2, [r5, #4]
  return true;
 8002e4a:	e669      	b.n	8002b20 <oslib_test_006_001_execute.lto_priv.0+0x140>
 8002e4c:	0800bb7c 	.word	0x0800bb7c
 8002e50:	0800ce10 	.word	0x0800ce10
 8002e54:	20000970 	.word	0x20000970
 8002e58:	200009a0 	.word	0x200009a0
 8002e5c:	0800bbac 	.word	0x0800bbac
 8002e60:	0800bba4 	.word	0x0800bba4
 8002e64:	0800bba0 	.word	0x0800bba0
 8002e68:	0800bb90 	.word	0x0800bb90
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8002e6c:	069a      	lsls	r2, r3, #26
 8002e6e:	d40d      	bmi.n	8002e8c <oslib_test_006_001_execute.lto_priv.0+0x4ac>
      LRU_INSERT_HEAD(ocp, objp);
 8002e70:	69e2      	ldr	r2, [r4, #28]
 8002e72:	e9cb 2602 	strd	r2, r6, [fp, #8]
 8002e76:	f8c2 b00c 	str.w	fp, [r2, #12]
 8002e7a:	f8c4 b01c 	str.w	fp, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8002e7e:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8002e8a:	e6c0      	b.n	8002c0e <oslib_test_006_001_execute.lto_priv.0+0x22e>
      LRU_INSERT_TAIL(ocp, objp);
 8002e8c:	6a22      	ldr	r2, [r4, #32]
 8002e8e:	e9cb 6202 	strd	r6, r2, [fp, #8]
 8002e92:	f8c2 b008 	str.w	fp, [r2, #8]
 8002e96:	f8c4 b020 	str.w	fp, [r4, #32]
 8002e9a:	e7f0      	b.n	8002e7e <oslib_test_006_001_execute.lto_priv.0+0x49e>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002e9c:	f003 031a 	and.w	r3, r3, #26
 8002ea0:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8002ea4:	f10b 0018 	add.w	r0, fp, #24
 8002ea8:	f7fe fb8a 	bl	80015c0 <chSemSignalI>
    return;
 8002eac:	e6b7      	b.n	8002c1e <oslib_test_006_001_execute.lto_priv.0+0x23e>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8002eae:	069a      	lsls	r2, r3, #26
 8002eb0:	d426      	bmi.n	8002f00 <oslib_test_006_001_execute.lto_priv.0+0x520>
      LRU_INSERT_HEAD(ocp, objp);
 8002eb2:	69e2      	ldr	r2, [r4, #28]
 8002eb4:	e9c0 2602 	strd	r2, r6, [r0, #8]
 8002eb8:	60d0      	str	r0, [r2, #12]
 8002eba:	61e0      	str	r0, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8002ebc:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6243      	str	r3, [r0, #36]	; 0x24
 8002ec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ec8:	3301      	adds	r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ece:	f73f af04 	bgt.w	8002cda <oslib_test_006_001_execute.lto_priv.0+0x2fa>
  ch_queue_t *p = qp->next;
 8002ed2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 8002ed4:	f8df c104 	ldr.w	ip, [pc, #260]	; 8002fdc <oslib_test_006_001_execute.lto_priv.0+0x5fc>
  qp->next       = p->next;
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	6321      	str	r1, [r4, #48]	; 0x30
    tp->u.rdymsg = MSG_OK;
 8002edc:	2200      	movs	r2, #0
  qp->next->prev = qp;
 8002ede:	f8c1 c004 	str.w	ip, [r1, #4]
 8002ee2:	635a      	str	r2, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8002ee4:	771a      	strb	r2, [r3, #28]
  } while (unlikely(pqp->prio >= p->prio));
 8002ee6:	6899      	ldr	r1, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002ee8:	691a      	ldr	r2, [r3, #16]
    pqp = pqp->next;
 8002eea:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002eec:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8002ef0:	458c      	cmp	ip, r1
 8002ef2:	d2fa      	bcs.n	8002eea <oslib_test_006_001_execute.lto_priv.0+0x50a>
  p->prev       = pqp->prev;
 8002ef4:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 8002ef6:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8002ef8:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 8002efa:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8002efc:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 8002efe:	e6ec      	b.n	8002cda <oslib_test_006_001_execute.lto_priv.0+0x2fa>
      LRU_INSERT_TAIL(ocp, objp);
 8002f00:	6a22      	ldr	r2, [r4, #32]
 8002f02:	e9c0 6202 	strd	r6, r2, [r0, #8]
 8002f06:	6090      	str	r0, [r2, #8]
 8002f08:	6220      	str	r0, [r4, #32]
 8002f0a:	e7d7      	b.n	8002ebc <oslib_test_006_001_execute.lto_priv.0+0x4dc>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002f0c:	f003 031a 	and.w	r3, r3, #26
 8002f10:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8002f12:	3018      	adds	r0, #24
 8002f14:	f7fe fb54 	bl	80015c0 <chSemSignalI>
    return;
 8002f18:	e6e2      	b.n	8002ce0 <oslib_test_006_001_execute.lto_priv.0+0x300>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8002f1a:	0699      	lsls	r1, r3, #26
 8002f1c:	d50a      	bpl.n	8002f34 <oslib_test_006_001_execute.lto_priv.0+0x554>
      LRU_INSERT_TAIL(ocp, objp);
 8002f1e:	6a22      	ldr	r2, [r4, #32]
 8002f20:	e9c0 6202 	strd	r6, r2, [r0, #8]
 8002f24:	6090      	str	r0, [r2, #8]
 8002f26:	6220      	str	r0, [r4, #32]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8002f28:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6243      	str	r3, [r0, #36]	; 0x24
 8002f32:	e715      	b.n	8002d60 <oslib_test_006_001_execute.lto_priv.0+0x380>
      LRU_INSERT_HEAD(ocp, objp);
 8002f34:	69e2      	ldr	r2, [r4, #28]
 8002f36:	e9c0 2602 	strd	r2, r6, [r0, #8]
 8002f3a:	60d0      	str	r0, [r2, #12]
 8002f3c:	61e0      	str	r0, [r4, #28]
 8002f3e:	e7f3      	b.n	8002f28 <oslib_test_006_001_execute.lto_priv.0+0x548>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8002f40:	069a      	lsls	r2, r3, #26
 8002f42:	d43d      	bmi.n	8002fc0 <oslib_test_006_001_execute.lto_priv.0+0x5e0>
      LRU_INSERT_HEAD(ocp, objp);
 8002f44:	69e2      	ldr	r2, [r4, #28]
 8002f46:	e9c0 2602 	strd	r2, r6, [r0, #8]
 8002f4a:	60d0      	str	r0, [r2, #12]
 8002f4c:	61e0      	str	r0, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8002f4e:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6243      	str	r3, [r0, #36]	; 0x24
 8002f58:	e748      	b.n	8002dec <oslib_test_006_001_execute.lto_priv.0+0x40c>
  ch_queue_t *p = qp->next;
 8002f5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 8002f5c:	491f      	ldr	r1, [pc, #124]	; (8002fdc <oslib_test_006_001_execute.lto_priv.0+0x5fc>)
  qp->next       = p->next;
 8002f5e:	6813      	ldr	r3, [r2, #0]
 8002f60:	6323      	str	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 8002f62:	6059      	str	r1, [r3, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002f64:	6911      	ldr	r1, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8002f66:	6893      	ldr	r3, [r2, #8]
 8002f68:	f8c2 9034 	str.w	r9, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8002f6c:	f882 901c 	strb.w	r9, [r2, #28]
    pqp = pqp->next;
 8002f70:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002f72:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002f76:	459c      	cmp	ip, r3
 8002f78:	d2fa      	bcs.n	8002f70 <oslib_test_006_001_execute.lto_priv.0+0x590>
  p->prev       = pqp->prev;
 8002f7a:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 8002f7c:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 8002f7e:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 8002f80:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8002f82:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 8002f84:	e6f2      	b.n	8002d6c <oslib_test_006_001_execute.lto_priv.0+0x38c>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002f86:	f003 031a 	and.w	r3, r3, #26
 8002f8a:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8002f8c:	3018      	adds	r0, #24
 8002f8e:	f7fe fb17 	bl	80015c0 <chSemSignalI>
    return;
 8002f92:	e6ee      	b.n	8002d72 <oslib_test_006_001_execute.lto_priv.0+0x392>
  ch_queue_t *p = qp->next;
 8002f94:	6b23      	ldr	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 8002f96:	4911      	ldr	r1, [pc, #68]	; (8002fdc <oslib_test_006_001_execute.lto_priv.0+0x5fc>)
  qp->next       = p->next;
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	6322      	str	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 8002f9c:	6051      	str	r1, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002f9e:	6919      	ldr	r1, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8002fa6:	f883 901c 	strb.w	r9, [r3, #28]
    pqp = pqp->next;
 8002faa:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002fac:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002fb0:	4594      	cmp	ip, r2
 8002fb2:	d2fa      	bcs.n	8002faa <oslib_test_006_001_execute.lto_priv.0+0x5ca>
  p->prev       = pqp->prev;
 8002fb4:	684a      	ldr	r2, [r1, #4]
  p->next       = pqp;
 8002fb6:	6019      	str	r1, [r3, #0]
  p->prev       = pqp->prev;
 8002fb8:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8002fba:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8002fbc:	604b      	str	r3, [r1, #4]
  return __sch_ready_behind(tp);
 8002fbe:	e71b      	b.n	8002df8 <oslib_test_006_001_execute.lto_priv.0+0x418>
      LRU_INSERT_TAIL(ocp, objp);
 8002fc0:	6a22      	ldr	r2, [r4, #32]
 8002fc2:	e9c0 6202 	strd	r6, r2, [r0, #8]
 8002fc6:	6090      	str	r0, [r2, #8]
 8002fc8:	6220      	str	r0, [r4, #32]
 8002fca:	e7c0      	b.n	8002f4e <oslib_test_006_001_execute.lto_priv.0+0x56e>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002fcc:	f003 031a 	and.w	r3, r3, #26
 8002fd0:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8002fd2:	3018      	adds	r0, #24
 8002fd4:	f7fe faf4 	bl	80015c0 <chSemSignalI>
    return;
 8002fd8:	e711      	b.n	8002dfe <oslib_test_006_001_execute.lto_priv.0+0x41e>
 8002fda:	bf00      	nop
 8002fdc:	200009a0 	.word	0x200009a0

08002fe0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002fe0:	b570      	push	{r4, r5, r6, lr}
  thread_t *tp = __instance_get_currthread(currcore);
 8002fe2:	4c17      	ldr	r4, [pc, #92]	; (8003040 <chSchGoSleepTimeoutS+0x60>)
  if (TIME_INFINITE != timeout) {
 8002fe4:	1c4b      	adds	r3, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 8002fe6:	68e6      	ldr	r6, [r4, #12]
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002fe8:	b086      	sub	sp, #24
 8002fea:	4605      	mov	r5, r0
  if (TIME_INFINITE != timeout) {
 8002fec:	d01a      	beq.n	8003024 <chSchGoSleepTimeoutS+0x44>
  vtp->func    = vtfunc;
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <chSchGoSleepTimeoutS+0x64>)
  vt_enqueue(vtlp, vtp, delay);
 8002ff0:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 8002ff2:	e9cd 3603 	strd	r3, r6, [sp, #12]
  vtp->reload  = (sysinterval_t)0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8002ffa:	f007 fee9 	bl	800add0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 8002ffe:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8003000:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8003002:	770d      	strb	r5, [r1, #28]
  pqp->next       = p->next;
 8003004:	6803      	ldr	r3, [r0, #0]
 8003006:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8003008:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800300a:	2301      	movs	r3, #1
 800300c:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800300e:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8003010:	f7fd f956 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8003014:	9b00      	ldr	r3, [sp, #0]
 8003016:	b113      	cbz	r3, 800301e <chSchGoSleepTimeoutS+0x3e>
      chVTDoResetI(&vt);
 8003018:	4668      	mov	r0, sp
 800301a:	f7ff fa29 	bl	8002470 <chVTDoResetI>
}
 800301e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8003020:	b006      	add	sp, #24
 8003022:	bd70      	pop	{r4, r5, r6, pc}
  ch_priority_queue_t *p = pqp->next;
 8003024:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8003026:	7735      	strb	r5, [r6, #28]
  pqp->next       = p->next;
 8003028:	6803      	ldr	r3, [r0, #0]
 800302a:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 800302c:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 800302e:	605c      	str	r4, [r3, #4]
  chSysSwitch(ntp, otp);
 8003030:	4631      	mov	r1, r6
  ntp->state = CH_STATE_CURRENT;
 8003032:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8003034:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8003036:	f7fd f943 	bl	80002c0 <__port_switch>
}
 800303a:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800303c:	b006      	add	sp, #24
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	200009b8 	.word	0x200009b8
 8003044:	08001551 	.word	0x08001551
	...

08003050 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8003050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003054:	b083      	sub	sp, #12
  qnotify_t nfy = oqp->q_notify;
 8003056:	f8d0 801c 	ldr.w	r8, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 800305a:	9201      	str	r2, [sp, #4]
 800305c:	4699      	mov	r9, r3
 800305e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8003062:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8003066:	b382      	cbz	r2, 80030ca <oqWriteTimeout+0x7a>
 8003068:	f8dd b004 	ldr.w	fp, [sp, #4]
 800306c:	4604      	mov	r4, r0
 800306e:	460f      	mov	r7, r1
  if (n > oqGetEmptyI(oqp)) {
 8003070:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8003072:	e9d4 6004 	ldrd	r6, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8003076:	459b      	cmp	fp, r3
    n = oqGetEmptyI(oqp);
 8003078:	bf8c      	ite	hi
 800307a:	68a5      	ldrhi	r5, [r4, #8]
 800307c:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800307e:	1a36      	subs	r6, r6, r0
  if (n < s1) {
 8003080:	42ae      	cmp	r6, r5
 8003082:	d84d      	bhi.n	8003120 <oqWriteTimeout+0xd0>
  else if (n > s1) {
 8003084:	d228      	bcs.n	80030d8 <oqWriteTimeout+0x88>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003086:	4632      	mov	r2, r6
 8003088:	4639      	mov	r1, r7
 800308a:	f7fd f963 	bl	8000354 <memcpy>
    s2 = n - s1;
 800308e:	1baa      	subs	r2, r5, r6
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8003090:	68e0      	ldr	r0, [r4, #12]
 8003092:	9200      	str	r2, [sp, #0]
 8003094:	19b9      	adds	r1, r7, r6
 8003096:	f7fd f95d 	bl	8000354 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800309a:	68e3      	ldr	r3, [r4, #12]
 800309c:	9a00      	ldr	r2, [sp, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80030a2:	68a3      	ldr	r3, [r4, #8]
 80030a4:	1b5b      	subs	r3, r3, r5
 80030a6:	60a3      	str	r3, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 80030a8:	b30d      	cbz	r5, 80030ee <oqWriteTimeout+0x9e>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80030aa:	f1b8 0f00 	cmp.w	r8, #0
 80030ae:	d001      	beq.n	80030b4 <oqWriteTimeout+0x64>
        nfy(oqp);
 80030b0:	4620      	mov	r0, r4
 80030b2:	47c0      	blx	r8
 80030b4:	2300      	movs	r3, #0
 80030b6:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80030ba:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80030be:	442f      	add	r7, r5
 80030c0:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 80030c4:	f1bb 0f00 	cmp.w	fp, #0
 80030c8:	d1d2      	bne.n	8003070 <oqWriteTimeout+0x20>
 80030ca:	9801      	ldr	r0, [sp, #4]
 80030cc:	2300      	movs	r3, #0
 80030ce:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80030d2:	b003      	add	sp, #12
 80030d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80030d8:	462a      	mov	r2, r5
 80030da:	4639      	mov	r1, r7
 80030dc:	f7fd f93a 	bl	8000354 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80030e0:	68e3      	ldr	r3, [r4, #12]
 80030e2:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80030e4:	68a3      	ldr	r3, [r4, #8]
 80030e6:	1b5b      	subs	r3, r3, r5
 80030e8:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 80030ea:	2d00      	cmp	r5, #0
 80030ec:	d1dd      	bne.n	80030aa <oqWriteTimeout+0x5a>
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <oqWriteTimeout+0xe0>)
 80030f0:	68db      	ldr	r3, [r3, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80030f2:	f1b9 0f00 	cmp.w	r9, #0
 80030f6:	d00a      	beq.n	800310e <oqWriteTimeout+0xbe>
  p->prev       = qp->prev;
 80030f8:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80030fa:	4649      	mov	r1, r9
 80030fc:	e9c3 4200 	strd	r4, r2, [r3]
 8003100:	2004      	movs	r0, #4
  p->prev->next = p;
 8003102:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8003104:	6063      	str	r3, [r4, #4]
 8003106:	f7ff ff6b 	bl	8002fe0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 800310a:	2800      	cmp	r0, #0
 800310c:	d0b0      	beq.n	8003070 <oqWriteTimeout+0x20>
  return max - n;
 800310e:	9b01      	ldr	r3, [sp, #4]
 8003110:	eba3 000b 	sub.w	r0, r3, fp
 8003114:	2300      	movs	r3, #0
 8003116:	f383 8811 	msr	BASEPRI, r3
}
 800311a:	b003      	add	sp, #12
 800311c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003120:	462a      	mov	r2, r5
 8003122:	4639      	mov	r1, r7
 8003124:	f7fd f916 	bl	8000354 <memcpy>
    oqp->q_wrptr += n;
 8003128:	6963      	ldr	r3, [r4, #20]
 800312a:	442b      	add	r3, r5
 800312c:	6163      	str	r3, [r4, #20]
 800312e:	e7b8      	b.n	80030a2 <oqWriteTimeout+0x52>
 8003130:	200009b8 	.word	0x200009b8
	...

08003140 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003144:	3030      	adds	r0, #48	; 0x30
 8003146:	f7ff bf83 	b.w	8003050 <oqWriteTimeout>
 800314a:	bf00      	nop
 800314c:	0000      	movs	r0, r0
	...

08003150 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003150:	3030      	adds	r0, #48	; 0x30
 8003152:	f7ff bf7d 	b.w	8003050 <oqWriteTimeout>
 8003156:	bf00      	nop
	...

08003160 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	2330      	movs	r3, #48	; 0x30
 8003164:	4604      	mov	r4, r0
 8003166:	460d      	mov	r5, r1
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	4e16      	ldr	r6, [pc, #88]	; (80031c8 <iqGetTimeout+0x68>)
}
 800316e:	e008      	b.n	8003182 <iqGetTimeout+0x22>
  p->prev       = qp->prev;
 8003170:	6862      	ldr	r2, [r4, #4]
 8003172:	e9c3 4200 	strd	r4, r2, [r3]
  p->prev->next = p;
 8003176:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8003178:	6063      	str	r3, [r4, #4]
 800317a:	f7ff ff31 	bl	8002fe0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 800317e:	2800      	cmp	r0, #0
 8003180:	db08      	blt.n	8003194 <iqGetTimeout+0x34>
  while (iqIsEmptyI(iqp)) {
 8003182:	68a3      	ldr	r3, [r4, #8]
 8003184:	4629      	mov	r1, r5
 8003186:	2004      	movs	r0, #4
 8003188:	b943      	cbnz	r3, 800319c <iqGetTimeout+0x3c>
 800318a:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800318c:	2d00      	cmp	r5, #0
 800318e:	d1ef      	bne.n	8003170 <iqGetTimeout+0x10>
    return MSG_TIMEOUT;
 8003190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003194:	2300      	movs	r3, #0
 8003196:	f383 8811 	msr	BASEPRI, r3
}
 800319a:	bd70      	pop	{r4, r5, r6, pc}
  iqp->q_counter--;
 800319c:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800319e:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 80031a0:	3b01      	subs	r3, #1
 80031a2:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80031a4:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 80031a6:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80031a8:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 80031aa:	bf28      	it	cs
 80031ac:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 80031ae:	61a2      	str	r2, [r4, #24]
 80031b0:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80031b2:	bf28      	it	cs
 80031b4:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 80031b6:	69e3      	ldr	r3, [r4, #28]
 80031b8:	b10b      	cbz	r3, 80031be <iqGetTimeout+0x5e>
    iqp->q_notify(iqp);
 80031ba:	4620      	mov	r0, r4
 80031bc:	4798      	blx	r3
 80031be:	2300      	movs	r3, #0
 80031c0:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80031c4:	4628      	mov	r0, r5
}
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	200009b8 	.word	0x200009b8
 80031cc:	00000000 	.word	0x00000000

080031d0 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031d4:	300c      	adds	r0, #12
 80031d6:	f7ff bfc3 	b.w	8003160 <iqGetTimeout>
 80031da:	bf00      	nop
 80031dc:	0000      	movs	r0, r0
	...

080031e0 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80031e0:	300c      	adds	r0, #12
 80031e2:	f7ff bfbd 	b.w	8003160 <iqGetTimeout>
 80031e6:	bf00      	nop
	...

080031f0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80031f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f4:	b083      	sub	sp, #12
  qnotify_t nfy = iqp->q_notify;
 80031f6:	69c7      	ldr	r7, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 80031f8:	9201      	str	r2, [sp, #4]
 80031fa:	4699      	mov	r9, r3
 80031fc:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8003200:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8003204:	2a00      	cmp	r2, #0
 8003206:	d033      	beq.n	8003270 <iqReadTimeout+0x80>
 8003208:	f8dd b004 	ldr.w	fp, [sp, #4]
 800320c:	4604      	mov	r4, r0
 800320e:	460e      	mov	r6, r1
  if (n > iqGetFullI(iqp)) {
 8003210:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003212:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8003214:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003216:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8003218:	bf8c      	ite	hi
 800321a:	68a5      	ldrhi	r5, [r4, #8]
 800321c:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800321e:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8003222:	45a8      	cmp	r8, r5
 8003224:	d84f      	bhi.n	80032c6 <iqReadTimeout+0xd6>
  else if (n > s1) {
 8003226:	d22a      	bcs.n	800327e <iqReadTimeout+0x8e>
    s2 = n - s1;
 8003228:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800322c:	4642      	mov	r2, r8
 800322e:	4630      	mov	r0, r6
    s2 = n - s1;
 8003230:	9300      	str	r3, [sp, #0]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003232:	f7fd f88f 	bl	8000354 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8003236:	eb06 0008 	add.w	r0, r6, r8
 800323a:	f8dd 8000 	ldr.w	r8, [sp]
 800323e:	68e1      	ldr	r1, [r4, #12]
 8003240:	4642      	mov	r2, r8
 8003242:	f7fd f887 	bl	8000354 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8003246:	68e2      	ldr	r2, [r4, #12]
 8003248:	4442      	add	r2, r8
 800324a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800324c:	68a2      	ldr	r2, [r4, #8]
 800324e:	1b52      	subs	r2, r2, r5
 8003250:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8003252:	b1fd      	cbz	r5, 8003294 <iqReadTimeout+0xa4>
      if (nfy != NULL) {
 8003254:	b10f      	cbz	r7, 800325a <iqReadTimeout+0x6a>
        nfy(iqp);
 8003256:	4620      	mov	r0, r4
 8003258:	47b8      	blx	r7
 800325a:	2300      	movs	r3, #0
 800325c:	f383 8811 	msr	BASEPRI, r3
      n  -= done;
 8003260:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8003264:	442e      	add	r6, r5
 8003266:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 800326a:	f1bb 0f00 	cmp.w	fp, #0
 800326e:	d1cf      	bne.n	8003210 <iqReadTimeout+0x20>
 8003270:	9801      	ldr	r0, [sp, #4]
 8003272:	2300      	movs	r3, #0
 8003274:	f383 8811 	msr	BASEPRI, r3
}
 8003278:	b003      	add	sp, #12
 800327a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800327e:	462a      	mov	r2, r5
 8003280:	4630      	mov	r0, r6
 8003282:	f7fd f867 	bl	8000354 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8003286:	68e2      	ldr	r2, [r4, #12]
 8003288:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800328a:	68a2      	ldr	r2, [r4, #8]
 800328c:	1b52      	subs	r2, r2, r5
 800328e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8003290:	2d00      	cmp	r5, #0
 8003292:	d1df      	bne.n	8003254 <iqReadTimeout+0x64>
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <iqReadTimeout+0xe8>)
 8003296:	68da      	ldr	r2, [r3, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8003298:	f1b9 0f00 	cmp.w	r9, #0
 800329c:	d00a      	beq.n	80032b4 <iqReadTimeout+0xc4>
  p->prev       = qp->prev;
 800329e:	6861      	ldr	r1, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80032a0:	2004      	movs	r0, #4
 80032a2:	e9c2 4100 	strd	r4, r1, [r2]
  p->prev->next = p;
 80032a6:	600a      	str	r2, [r1, #0]
 80032a8:	4649      	mov	r1, r9
  qp->prev      = p;
 80032aa:	6062      	str	r2, [r4, #4]
 80032ac:	f7ff fe98 	bl	8002fe0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d0ad      	beq.n	8003210 <iqReadTimeout+0x20>
  return max - n;
 80032b4:	9b01      	ldr	r3, [sp, #4]
 80032b6:	eba3 000b 	sub.w	r0, r3, fp
 80032ba:	2300      	movs	r3, #0
 80032bc:	f383 8811 	msr	BASEPRI, r3
}
 80032c0:	b003      	add	sp, #12
 80032c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80032c6:	462a      	mov	r2, r5
 80032c8:	4630      	mov	r0, r6
 80032ca:	f7fd f843 	bl	8000354 <memcpy>
    iqp->q_rdptr += n;
 80032ce:	69a2      	ldr	r2, [r4, #24]
 80032d0:	442a      	add	r2, r5
 80032d2:	61a2      	str	r2, [r4, #24]
 80032d4:	e7ba      	b.n	800324c <iqReadTimeout+0x5c>
 80032d6:	bf00      	nop
 80032d8:	200009b8 	.word	0x200009b8
 80032dc:	00000000 	.word	0x00000000

080032e0 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80032e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032e4:	300c      	adds	r0, #12
 80032e6:	f7ff bf83 	b.w	80031f0 <iqReadTimeout>
 80032ea:	bf00      	nop
 80032ec:	0000      	movs	r0, r0
	...

080032f0 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80032f0:	300c      	adds	r0, #12
 80032f2:	f7ff bf7d 	b.w	80031f0 <iqReadTimeout>
 80032f6:	bf00      	nop
	...

08003300 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8003300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003304:	2330      	movs	r3, #48	; 0x30
 8003306:	4604      	mov	r4, r0
 8003308:	460f      	mov	r7, r1
 800330a:	4616      	mov	r6, r2
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8003374 <oqPutTimeout+0x74>
 8003314:	e008      	b.n	8003328 <oqPutTimeout+0x28>
  p->prev       = qp->prev;
 8003316:	6865      	ldr	r5, [r4, #4]
 8003318:	e9c3 4500 	strd	r4, r5, [r3]
  p->prev->next = p;
 800331c:	602b      	str	r3, [r5, #0]
  qp->prev      = p;
 800331e:	6063      	str	r3, [r4, #4]
 8003320:	f7ff fe5e 	bl	8002fe0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8003324:	2800      	cmp	r0, #0
 8003326:	db09      	blt.n	800333c <oqPutTimeout+0x3c>
  while (oqIsFullI(oqp)) {
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	4631      	mov	r1, r6
 800332c:	2004      	movs	r0, #4
 800332e:	b953      	cbnz	r3, 8003346 <oqPutTimeout+0x46>
 8003330:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8003334:	2e00      	cmp	r6, #0
 8003336:	d1ee      	bne.n	8003316 <oqPutTimeout+0x16>
    return MSG_TIMEOUT;
 8003338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800333c:	2300      	movs	r3, #0
 800333e:	f383 8811 	msr	BASEPRI, r3
}
 8003342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *oqp->q_wrptr++ = b;
 8003346:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8003348:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800334a:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 800334c:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800334e:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8003350:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003352:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003354:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003358:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800335a:	bf24      	itt	cs
 800335c:	68e3      	ldrcs	r3, [r4, #12]
 800335e:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8003360:	69e3      	ldr	r3, [r4, #28]
 8003362:	b10b      	cbz	r3, 8003368 <oqPutTimeout+0x68>
    oqp->q_notify(oqp);
 8003364:	4620      	mov	r0, r4
 8003366:	4798      	blx	r3
 8003368:	2000      	movs	r0, #0
 800336a:	f380 8811 	msr	BASEPRI, r0
}
 800336e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003372:	bf00      	nop
 8003374:	200009b8 	.word	0x200009b8
	...

08003380 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003384:	3030      	adds	r0, #48	; 0x30
 8003386:	f7ff bfbb 	b.w	8003300 <oqPutTimeout>
 800338a:	bf00      	nop
 800338c:	0000      	movs	r0, r0
	...

08003390 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003390:	3030      	adds	r0, #48	; 0x30
 8003392:	f7ff bfb5 	b.w	8003300 <oqPutTimeout>
 8003396:	bf00      	nop
	...

080033a0 <chMBPostTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80033a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033a4:	4604      	mov	r4, r0
 80033a6:	4688      	mov	r8, r1
 80033a8:	4691      	mov	r9, r2
 80033aa:	2330      	movs	r3, #48	; 0x30
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	4e2d      	ldr	r6, [pc, #180]	; (8003468 <chMBPostTimeout+0xc8>)

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80033b2:	f100 0718 	add.w	r7, r0, #24
 80033b6:	e007      	b.n	80033c8 <chMBPostTimeout+0x28>
  p->prev       = qp->prev;
 80033b8:	69e5      	ldr	r5, [r4, #28]
 80033ba:	e9c3 7500 	strd	r7, r5, [r3]
  p->prev->next = p;
 80033be:	602b      	str	r3, [r5, #0]
  qp->prev      = p;
 80033c0:	61e3      	str	r3, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80033c2:	f7ff fe0d 	bl	8002fe0 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 80033c6:	b988      	cbnz	r0, 80033ec <chMBPostTimeout+0x4c>
    if (mbp->reset) {
 80033c8:	7d23      	ldrb	r3, [r4, #20]
 80033ca:	4649      	mov	r1, r9
 80033cc:	2004      	movs	r0, #4
 80033ce:	b993      	cbnz	r3, 80033f6 <chMBPostTimeout+0x56>
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 80033d0:	e9d4 5200 	ldrd	r5, r2, [r4]
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return mbp->cnt;
 80033d4:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80033d6:	eba2 0c05 	sub.w	ip, r2, r5
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80033da:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 80033de:	d111      	bne.n	8003404 <chMBPostTimeout+0x64>
 80033e0:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80033e2:	f1b9 0f00 	cmp.w	r9, #0
 80033e6:	d1e7      	bne.n	80033b8 <chMBPostTimeout+0x18>
    return MSG_TIMEOUT;
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ec:	2300      	movs	r3, #0
 80033ee:	f383 8811 	msr	BASEPRI, r3
}
 80033f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return MSG_RESET;
 80033f6:	f06f 0001 	mvn.w	r0, #1
 80033fa:	2300      	movs	r3, #0
 80033fc:	f383 8811 	msr	BASEPRI, r3
}
 8003400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      *mbp->wrptr++ = msg;
 8003404:	68a0      	ldr	r0, [r4, #8]
 8003406:	1d01      	adds	r1, r0, #4
      if (mbp->wrptr >= mbp->top) {
 8003408:	428a      	cmp	r2, r1
  return (bool)(qp->next != qp);
 800340a:	6a22      	ldr	r2, [r4, #32]
      *mbp->wrptr++ = msg;
 800340c:	60a1      	str	r1, [r4, #8]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800340e:	f104 0120 	add.w	r1, r4, #32
      *mbp->wrptr++ = msg;
 8003412:	f8c0 8000 	str.w	r8, [r0]
      mbp->cnt++;
 8003416:	f103 0301 	add.w	r3, r3, #1
        mbp->wrptr = mbp->buffer;
 800341a:	bf98      	it	ls
 800341c:	60a5      	strls	r5, [r4, #8]
  if (ch_queue_notempty(&tqp->queue)) {
 800341e:	4291      	cmp	r1, r2
      mbp->cnt++;
 8003420:	6123      	str	r3, [r4, #16]
 8003422:	d010      	beq.n	8003446 <chMBPostTimeout+0xa6>
  qp->next       = p->next;
 8003424:	6813      	ldr	r3, [r2, #0]
 8003426:	6223      	str	r3, [r4, #32]
  tp->u.rdymsg = msg;
 8003428:	2000      	movs	r0, #0
  qp->next->prev = qp;
 800342a:	6059      	str	r1, [r3, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800342c:	6894      	ldr	r4, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800342e:	6913      	ldr	r3, [r2, #16]
 8003430:	6350      	str	r0, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8003432:	7710      	strb	r0, [r2, #28]
    pqp = pqp->next;
 8003434:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	42a1      	cmp	r1, r4
 800343a:	d2fb      	bcs.n	8003434 <chMBPostTimeout+0x94>
  p->prev       = pqp->prev;
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 8003442:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8003444:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <chMBPostTimeout+0xc8>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	6892      	ldr	r2, [r2, #8]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	d907      	bls.n	8003464 <chMBPostTimeout+0xc4>
    __sch_reschedule_ahead();
 8003454:	f7ff f8d4 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 8003458:	2000      	movs	r0, #0
 800345a:	2300      	movs	r3, #0
 800345c:	f383 8811 	msr	BASEPRI, r3
}
 8003460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return MSG_OK;
 8003464:	2000      	movs	r0, #0
 8003466:	e7c1      	b.n	80033ec <chMBPostTimeout+0x4c>
 8003468:	200009b8 	.word	0x200009b8
 800346c:	00000000 	.word	0x00000000

08003470 <chMBFetchTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8003470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8003474:	4f25      	ldr	r7, [pc, #148]	; (800350c <chMBFetchTimeoutS+0x9c>)
 8003476:	4604      	mov	r4, r0
 8003478:	4688      	mov	r8, r1
 800347a:	4691      	mov	r9, r2

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 800347c:	f100 0620 	add.w	r6, r0, #32
 8003480:	e00a      	b.n	8003498 <chMBFetchTimeoutS+0x28>
  return mbp->cnt;
 8003482:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8003484:	b98b      	cbnz	r3, 80034aa <chMBFetchTimeoutS+0x3a>
 8003486:	68fb      	ldr	r3, [r7, #12]
  p->prev       = qp->prev;
 8003488:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800348a:	e9c3 6500 	strd	r6, r5, [r3]
  p->prev->next = p;
 800348e:	602b      	str	r3, [r5, #0]
  qp->prev      = p;
 8003490:	6263      	str	r3, [r4, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003492:	f7ff fda5 	bl	8002fe0 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 8003496:	b930      	cbnz	r0, 80034a6 <chMBFetchTimeoutS+0x36>
    if (mbp->reset) {
 8003498:	7d23      	ldrb	r3, [r4, #20]
 800349a:	4649      	mov	r1, r9
 800349c:	2004      	movs	r0, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0ef      	beq.n	8003482 <chMBFetchTimeoutS+0x12>
      return MSG_RESET;
 80034a2:	f06f 0001 	mvn.w	r0, #1

  return rdymsg;
}
 80034a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      *msgp = *mbp->rdptr++;
 80034aa:	68e1      	ldr	r1, [r4, #12]
 80034ac:	180a      	adds	r2, r1, r0
 80034ae:	6809      	ldr	r1, [r1, #0]
 80034b0:	60e2      	str	r2, [r4, #12]
 80034b2:	f8c8 1000 	str.w	r1, [r8]
      if (mbp->rdptr >= mbp->top) {
 80034b6:	6861      	ldr	r1, [r4, #4]
 80034b8:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->buffer;
 80034ba:	bf24      	itt	cs
 80034bc:	6822      	ldrcs	r2, [r4, #0]
 80034be:	60e2      	strcs	r2, [r4, #12]
  return (bool)(qp->next != qp);
 80034c0:	69a2      	ldr	r2, [r4, #24]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 80034c2:	f104 0118 	add.w	r1, r4, #24
      mbp->cnt--;
 80034c6:	3b01      	subs	r3, #1
  if (ch_queue_notempty(&tqp->queue)) {
 80034c8:	4291      	cmp	r1, r2
 80034ca:	6123      	str	r3, [r4, #16]
 80034cc:	d010      	beq.n	80034f0 <chMBFetchTimeoutS+0x80>
  qp->next       = p->next;
 80034ce:	6813      	ldr	r3, [r2, #0]
 80034d0:	61a3      	str	r3, [r4, #24]
  tp->u.rdymsg = msg;
 80034d2:	2000      	movs	r0, #0
  qp->next->prev = qp;
 80034d4:	6059      	str	r1, [r3, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80034d6:	6894      	ldr	r4, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80034d8:	6913      	ldr	r3, [r2, #16]
 80034da:	6350      	str	r0, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 80034dc:	7710      	strb	r0, [r2, #28]
    pqp = pqp->next;
 80034de:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	42a1      	cmp	r1, r4
 80034e4:	d2fb      	bcs.n	80034de <chMBFetchTimeoutS+0x6e>
  p->prev       = pqp->prev;
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 80034ec:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 80034ee:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <chMBFetchTimeoutS+0x9c>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	6892      	ldr	r2, [r2, #8]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d904      	bls.n	8003508 <chMBFetchTimeoutS+0x98>
    __sch_reschedule_ahead();
 80034fe:	f7ff f87f 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 8003502:	2000      	movs	r0, #0
}
 8003504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return MSG_OK;
 8003508:	2000      	movs	r0, #0
 800350a:	e7cc      	b.n	80034a6 <chMBFetchTimeoutS+0x36>
 800350c:	200009b8 	.word	0x200009b8

08003510 <oslib_test_002_003_execute.lto_priv.0>:
}

static void oslib_test_002_003_execute(void) {
 8003510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 8003514:	4f54      	ldr	r7, [pc, #336]	; (8003668 <oslib_test_002_003_execute.lto_priv.0+0x158>)
 8003516:	4e55      	ldr	r6, [pc, #340]	; (800366c <oslib_test_002_003_execute.lto_priv.0+0x15c>)
 8003518:	2301      	movs	r3, #1
static void oslib_test_002_003_execute(void) {
 800351a:	b082      	sub	sp, #8
  test_set_step(1);
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	2442      	movs	r4, #66	; 0x42
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003520:	4621      	mov	r1, r4
 8003522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003526:	4630      	mov	r0, r6
 8003528:	f7ff ff3a 	bl	80033a0 <chMBPostTimeout>
    for (i = 0; i < MB_SIZE; i++) {
 800352c:	3401      	adds	r4, #1
  if (!condition) {
 800352e:	4605      	mov	r5, r0
 8003530:	2800      	cmp	r0, #0
 8003532:	d13c      	bne.n	80035ae <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8003534:	2c46      	cmp	r4, #70	; 0x46
 8003536:	d1f3      	bne.n	8003520 <oslib_test_002_003_execute.lto_priv.0+0x10>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8003538:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800353a:	484c      	ldr	r0, [pc, #304]	; (800366c <oslib_test_002_003_execute.lto_priv.0+0x15c>)
  test_set_step(2);
 800353c:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800353e:	2201      	movs	r2, #1
 8003540:	2158      	movs	r1, #88	; 0x58
 8003542:	f7ff ff2d 	bl	80033a0 <chMBPostTimeout>
 8003546:	3001      	adds	r0, #1
 8003548:	d131      	bne.n	80035ae <oslib_test_002_003_execute.lto_priv.0+0x9e>
 800354a:	f04f 0830 	mov.w	r8, #48	; 0x30
 800354e:	f388 8811 	msr	BASEPRI, r8
  if (mbp->reset) {
 8003552:	7d34      	ldrb	r4, [r6, #20]
 8003554:	2c00      	cmp	r4, #0
 8003556:	d17d      	bne.n	8003654 <oslib_test_002_003_execute.lto_priv.0+0x144>
  return (size_t)(mbp->top - mbp->buffer);
 8003558:	e9d6 5300 	ldrd	r5, r3, [r6]
  return mbp->cnt;
 800355c:	6932      	ldr	r2, [r6, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800355e:	1b59      	subs	r1, r3, r5
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003560:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
 8003564:	d02b      	beq.n	80035be <oslib_test_002_003_execute.lto_priv.0+0xae>
    *mbp->wrptr++ = msg;
 8003566:	68b0      	ldr	r0, [r6, #8]
 8003568:	1d01      	adds	r1, r0, #4
    if (mbp->wrptr >= mbp->top) {
 800356a:	428b      	cmp	r3, r1
    *mbp->wrptr++ = msg;
 800356c:	60b1      	str	r1, [r6, #8]
  return (bool)(qp->next != qp);
 800356e:	6a33      	ldr	r3, [r6, #32]
 8003570:	493f      	ldr	r1, [pc, #252]	; (8003670 <oslib_test_002_003_execute.lto_priv.0+0x160>)
 8003572:	f04f 0458 	mov.w	r4, #88	; 0x58
 8003576:	6004      	str	r4, [r0, #0]
    mbp->cnt++;
 8003578:	f102 0201 	add.w	r2, r2, #1
      mbp->wrptr = mbp->buffer;
 800357c:	bf98      	it	ls
 800357e:	60b5      	strls	r5, [r6, #8]
 8003580:	428b      	cmp	r3, r1
    mbp->cnt++;
 8003582:	6132      	str	r2, [r6, #16]
 8003584:	d062      	beq.n	800364c <oslib_test_002_003_execute.lto_priv.0+0x13c>
  qp->next       = p->next;
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	6232      	str	r2, [r6, #32]
 800358a:	2000      	movs	r0, #0
  qp->next->prev = qp;
 800358c:	6051      	str	r1, [r2, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800358e:	689c      	ldr	r4, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	6358      	str	r0, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8003594:	7718      	strb	r0, [r3, #28]
    pqp = pqp->next;
 8003596:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003598:	6891      	ldr	r1, [r2, #8]
 800359a:	42a1      	cmp	r1, r4
 800359c:	d2fb      	bcs.n	8003596 <oslib_test_002_003_execute.lto_priv.0+0x86>
  p->prev       = pqp->prev;
 800359e:	6851      	ldr	r1, [r2, #4]
 80035a0:	2000      	movs	r0, #0
 80035a2:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80035a6:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80035a8:	6053      	str	r3, [r2, #4]
 80035aa:	f380 8811 	msr	BASEPRI, r0
  chtest.failure_message = msg;
 80035ae:	4b31      	ldr	r3, [pc, #196]	; (8003674 <oslib_test_002_003_execute.lto_priv.0+0x164>)
 80035b0:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80035b2:	f240 1201 	movw	r2, #257	; 0x101
 80035b6:	80ba      	strh	r2, [r7, #4]
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 80035b8:	b002      	add	sp, #8
 80035ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035be:	f384 8811 	msr	BASEPRI, r4
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 80035c2:	2101      	movs	r1, #1
 80035c4:	2058      	movs	r0, #88	; 0x58
 80035c6:	f007 fa3b 	bl	800aa40 <chMBPostAheadTimeout.constprop.0>
  if (!condition) {
 80035ca:	3001      	adds	r0, #1
 80035cc:	d1ef      	bne.n	80035ae <oslib_test_002_003_execute.lto_priv.0+0x9e>
 80035ce:	f388 8811 	msr	BASEPRI, r8
    msg1 = chMBPostAheadI(&mb1, 'X');
 80035d2:	2058      	movs	r0, #88	; 0x58
 80035d4:	f007 f9f4 	bl	800a9c0 <chMBPostAheadI.constprop.0>
 80035d8:	f384 8811 	msr	BASEPRI, r4
 80035dc:	3001      	adds	r0, #1
 80035de:	d1e6      	bne.n	80035ae <oslib_test_002_003_execute.lto_priv.0+0x9e>
  test_set_step(3);
 80035e0:	2303      	movs	r3, #3
 80035e2:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 80035e4:	f007 fa8c 	bl	800ab00 <chMBReset.constprop.0>
  test_set_step(4);
 80035e8:	2304      	movs	r3, #4
 80035ea:	603b      	str	r3, [r7, #0]
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 80035ec:	7534      	strb	r4, [r6, #20]
 80035ee:	f388 8811 	msr	BASEPRI, r8
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 80035f2:	2201      	movs	r2, #1
 80035f4:	eb0d 0103 	add.w	r1, sp, r3
 80035f8:	481c      	ldr	r0, [pc, #112]	; (800366c <oslib_test_002_003_execute.lto_priv.0+0x15c>)
 80035fa:	f7ff ff39 	bl	8003470 <chMBFetchTimeoutS>
 80035fe:	f384 8811 	msr	BASEPRI, r4
 8003602:	3001      	adds	r0, #1
 8003604:	d1d3      	bne.n	80035ae <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8003606:	f388 8811 	msr	BASEPRI, r8

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800360a:	7d33      	ldrb	r3, [r6, #20]
 800360c:	bb4b      	cbnz	r3, 8003662 <oslib_test_002_003_execute.lto_priv.0+0x152>
  return mbp->cnt;
 800360e:	6932      	ldr	r2, [r6, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8003610:	b31a      	cbz	r2, 800365a <oslib_test_002_003_execute.lto_priv.0+0x14a>
    *msgp = *mbp->rdptr++;
 8003612:	68f1      	ldr	r1, [r6, #12]
 8003614:	1d0b      	adds	r3, r1, #4
 8003616:	6809      	ldr	r1, [r1, #0]
 8003618:	9101      	str	r1, [sp, #4]
    if (mbp->rdptr >= mbp->top) {
 800361a:	6871      	ldr	r1, [r6, #4]
    *msgp = *mbp->rdptr++;
 800361c:	60f3      	str	r3, [r6, #12]
    if (mbp->rdptr >= mbp->top) {
 800361e:	428b      	cmp	r3, r1
      mbp->rdptr = mbp->buffer;
 8003620:	bf24      	itt	cs
 8003622:	6833      	ldrcs	r3, [r6, #0]
 8003624:	60f3      	strcs	r3, [r6, #12]
 8003626:	4914      	ldr	r1, [pc, #80]	; (8003678 <oslib_test_002_003_execute.lto_priv.0+0x168>)
  return (bool)(qp->next != qp);
 8003628:	69b3      	ldr	r3, [r6, #24]
    }
    mbp->cnt--;
 800362a:	3a01      	subs	r2, #1
 800362c:	428b      	cmp	r3, r1
 800362e:	6132      	str	r2, [r6, #16]
 8003630:	d00c      	beq.n	800364c <oslib_test_002_003_execute.lto_priv.0+0x13c>
  qp->next       = p->next;
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	61b2      	str	r2, [r6, #24]
 8003636:	2000      	movs	r0, #0
  qp->next->prev = qp;
 8003638:	6051      	str	r1, [r2, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800363a:	689c      	ldr	r4, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	6358      	str	r0, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8003640:	7718      	strb	r0, [r3, #28]
    pqp = pqp->next;
 8003642:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003644:	6891      	ldr	r1, [r2, #8]
 8003646:	42a1      	cmp	r1, r4
 8003648:	d3a9      	bcc.n	800359e <oslib_test_002_003_execute.lto_priv.0+0x8e>
 800364a:	e7fa      	b.n	8003642 <oslib_test_002_003_execute.lto_priv.0+0x132>
 800364c:	2300      	movs	r3, #0
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	e7ac      	b.n	80035ae <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8003654:	f385 8811 	msr	BASEPRI, r5
 8003658:	e7a9      	b.n	80035ae <oslib_test_002_003_execute.lto_priv.0+0x9e>
 800365a:	2300      	movs	r3, #0
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	e7aa      	b.n	80035b8 <oslib_test_002_003_execute.lto_priv.0+0xa8>
 8003662:	f384 8811 	msr	BASEPRI, r4
 8003666:	e7a2      	b.n	80035ae <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8003668:	20000ab4 	.word	0x20000ab4
 800366c:	2000084c 	.word	0x2000084c
 8003670:	2000086c 	.word	0x2000086c
 8003674:	0800bbb8 	.word	0x0800bbb8
 8003678:	20000864 	.word	0x20000864
 800367c:	00000000 	.word	0x00000000

08003680 <Thread1.lto_priv.0>:

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8003680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003684:	4d23      	ldr	r5, [pc, #140]	; (8003714 <Thread1.lto_priv.0+0x94>)
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003686:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003718 <Thread1.lto_priv.0+0x98>
 800368a:	b083      	sub	sp, #12
 800368c:	2730      	movs	r7, #48	; 0x30
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 800368e:	f105 081c 	add.w	r8, r5, #28
 8003692:	f387 8811 	msr	BASEPRI, r7
 8003696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800369a:	a901      	add	r1, sp, #4
 800369c:	4640      	mov	r0, r8
 800369e:	f7ff fee7 	bl	8003470 <chMBFetchTimeoutS>
 80036a2:	2300      	movs	r3, #0
 80036a4:	4604      	mov	r4, r0
 80036a6:	f383 8811 	msr	BASEPRI, r3
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
  if (msg == MSG_OK) {
 80036aa:	b110      	cbz	r0, 80036b2 <Thread1.lto_priv.0+0x32>
  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
}
 80036ac:	b003      	add	sp, #12
 80036ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 80036b2:	9e01      	ldr	r6, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 80036b4:	6833      	ldr	r3, [r6, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f8      	beq.n	80036ac <Thread1.lto_priv.0+0x2c>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 80036ba:	6870      	ldr	r0, [r6, #4]
 80036bc:	4798      	blx	r3
 80036be:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 80036c2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
  if (++sp->cnt <= (cnt_t)0) {
 80036c6:	3301      	adds	r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	6032      	str	r2, [r6, #0]
 80036cc:	e9c5 3602 	strd	r3, r6, [r5, #8]
 80036d0:	dd0d      	ble.n	80036ee <Thread1.lto_priv.0+0x6e>
 80036d2:	f8d9 2000 	ldr.w	r2, [r9]
 80036d6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80036da:	6892      	ldr	r2, [r2, #8]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d901      	bls.n	80036e6 <Thread1.lto_priv.0+0x66>
    __sch_reschedule_ahead();
 80036e2:	f7fe ff8d 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 80036e6:	2300      	movs	r3, #0
 80036e8:	f383 8811 	msr	BASEPRI, r3
  } while (msg == MSG_OK);
 80036ec:	e7d1      	b.n	8003692 <Thread1.lto_priv.0+0x12>
  ch_queue_t *p = qp->next;
 80036ee:	682b      	ldr	r3, [r5, #0]
  qp->next       = p->next;
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	602a      	str	r2, [r5, #0]
  qp->next->prev = qp;
 80036f4:	6055      	str	r5, [r2, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80036f6:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80036f8:	691a      	ldr	r2, [r3, #16]
    tp->u.rdymsg = MSG_OK;
 80036fa:	635c      	str	r4, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 80036fc:	771c      	strb	r4, [r3, #28]
    pqp = pqp->next;
 80036fe:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003700:	6891      	ldr	r1, [r2, #8]
 8003702:	4281      	cmp	r1, r0
 8003704:	d2fb      	bcs.n	80036fe <Thread1.lto_priv.0+0x7e>
  p->prev       = pqp->prev;
 8003706:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 8003708:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800370a:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 800370c:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800370e:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 8003710:	e7df      	b.n	80036d2 <Thread1.lto_priv.0+0x52>
 8003712:	bf00      	nop
 8003714:	20000b88 	.word	0x20000b88
 8003718:	200009b8 	.word	0x200009b8
 800371c:	00000000 	.word	0x00000000

08003720 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8003720:	b510      	push	{r4, lr}
 8003722:	2330      	movs	r3, #48	; 0x30
 8003724:	4604      	mov	r4, r0
 8003726:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800372a:	6882      	ldr	r2, [r0, #8]
 800372c:	1e53      	subs	r3, r2, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	6083      	str	r3, [r0, #8]
 8003732:	db07      	blt.n	8003744 <chGuardedPoolAllocTimeout+0x24>
  objp = mp->next;
 8003734:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8003736:	b1c8      	cbz	r0, 800376c <chGuardedPoolAllocTimeout+0x4c>
    mp->next = mp->next->next;
 8003738:	6803      	ldr	r3, [r0, #0]
 800373a:	60e3      	str	r3, [r4, #12]
 800373c:	2300      	movs	r3, #0
 800373e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8003742:	bd10      	pop	{r4, pc}
    if (unlikely(TIME_IMMEDIATE == timeout)) {
 8003744:	4608      	mov	r0, r1
 8003746:	b1d9      	cbz	r1, 8003780 <chGuardedPoolAllocTimeout+0x60>
  return __sch_get_currthread();
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <chGuardedPoolAllocTimeout+0x64>)
  p->prev       = qp->prev;
 800374a:	6862      	ldr	r2, [r4, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800374e:	2005      	movs	r0, #5
 8003750:	e9c3 4200 	strd	r4, r2, [r3]
    currtp->u.wtsemp = sp;
 8003754:	635c      	str	r4, [r3, #52]	; 0x34
  p->prev->next = p;
 8003756:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8003758:	6063      	str	r3, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800375a:	f7ff fc41 	bl	8002fe0 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800375e:	2800      	cmp	r0, #0
 8003760:	d0e8      	beq.n	8003734 <chGuardedPoolAllocTimeout+0x14>
    return NULL;
 8003762:	2000      	movs	r0, #0
 8003764:	2300      	movs	r3, #0
 8003766:	f383 8811 	msr	BASEPRI, r3
}
 800376a:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 800376c:	69a3      	ldr	r3, [r4, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f7      	beq.n	8003762 <chGuardedPoolAllocTimeout+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 8003772:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8003776:	4798      	blx	r3
 8003778:	2300      	movs	r3, #0
 800377a:	f383 8811 	msr	BASEPRI, r3
}
 800377e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8003780:	60a2      	str	r2, [r4, #8]
  if (msg != MSG_OK) {
 8003782:	e7db      	b.n	800373c <chGuardedPoolAllocTimeout+0x1c>
 8003784:	200009b8 	.word	0x200009b8
	...

08003790 <oslib_test_007_002_execute.lto_priv.0>:
static void oslib_test_007_002_execute(void) {
 8003790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8003794:	4f4f      	ldr	r7, [pc, #316]	; (80038d4 <oslib_test_007_002_execute.lto_priv.0+0x144>)
 8003796:	4d50      	ldr	r5, [pc, #320]	; (80038d8 <oslib_test_007_002_execute.lto_priv.0+0x148>)
 8003798:	4c50      	ldr	r4, [pc, #320]	; (80038dc <oslib_test_007_002_execute.lto_priv.0+0x14c>)
 800379a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 80038e0 <oslib_test_007_002_execute.lto_priv.0+0x150>
 800379e:	2301      	movs	r3, #1
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	f04f 0a04 	mov.w	sl, #4
 80037a6:	f04f 0830 	mov.w	r8, #48	; 0x30
    tp->u.rdymsg = MSG_OK;
 80037aa:	2600      	movs	r6, #0
 80037ac:	e010      	b.n	80037d0 <oslib_test_007_002_execute.lto_priv.0+0x40>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80037ae:	f8d9 2000 	ldr.w	r2, [r9]
 80037b2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80037b6:	6892      	ldr	r2, [r2, #8]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d901      	bls.n	80037c2 <oslib_test_007_002_execute.lto_priv.0+0x32>
    __sch_reschedule_ahead();
 80037be:	f7fe ff1f 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 80037c2:	f386 8811 	msr	BASEPRI, r6
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80037c6:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 80037c8:	f1ba 0a01 	subs.w	sl, sl, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80037cc:	441d      	add	r5, r3
  while (n != 0U) {
 80037ce:	d01b      	beq.n	8003808 <oslib_test_007_002_execute.lto_priv.0+0x78>
 80037d0:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 80037d4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 80037d8:	3301      	adds	r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	e9c4 3502 	strd	r3, r5, [r4, #8]
 80037e0:	602a      	str	r2, [r5, #0]
 80037e2:	dce4      	bgt.n	80037ae <oslib_test_007_002_execute.lto_priv.0+0x1e>
  ch_queue_t *p = qp->next;
 80037e4:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 80037e6:	6813      	ldr	r3, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80037e8:	6890      	ldr	r0, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80037ea:	6911      	ldr	r1, [r2, #16]
  qp->next       = p->next;
 80037ec:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 80037ee:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 80037f0:	6356      	str	r6, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 80037f2:	7716      	strb	r6, [r2, #28]
    pqp = pqp->next;
 80037f4:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80037f6:	688b      	ldr	r3, [r1, #8]
 80037f8:	4283      	cmp	r3, r0
 80037fa:	d2fb      	bcs.n	80037f4 <oslib_test_007_002_execute.lto_priv.0+0x64>
  p->prev       = pqp->prev;
 80037fc:	684b      	ldr	r3, [r1, #4]
 80037fe:	e9c2 1300 	strd	r1, r3, [r2]
  p->prev->next = p;
 8003802:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8003804:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 8003806:	e7d2      	b.n	80037ae <oslib_test_007_002_execute.lto_priv.0+0x1e>
  test_set_step(2);
 8003808:	2302      	movs	r3, #2
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800380a:	4e34      	ldr	r6, [pc, #208]	; (80038dc <oslib_test_007_002_execute.lto_priv.0+0x14c>)
  test_set_step(2);
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	2504      	movs	r5, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8003810:	2100      	movs	r1, #0
 8003812:	4630      	mov	r0, r6
 8003814:	f7ff ff84 	bl	8003720 <chGuardedPoolAllocTimeout>
 8003818:	2800      	cmp	r0, #0
 800381a:	d042      	beq.n	80038a2 <oslib_test_007_002_execute.lto_priv.0+0x112>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800381c:	3d01      	subs	r5, #1
 800381e:	d1f7      	bne.n	8003810 <oslib_test_007_002_execute.lto_priv.0+0x80>
  test_set_step(3);
 8003820:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003822:	482e      	ldr	r0, [pc, #184]	; (80038dc <oslib_test_007_002_execute.lto_priv.0+0x14c>)
  test_set_step(3);
 8003824:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003826:	4629      	mov	r1, r5
 8003828:	f7ff ff7a 	bl	8003720 <chGuardedPoolAllocTimeout>
 800382c:	bb90      	cbnz	r0, 8003894 <oslib_test_007_002_execute.lto_priv.0+0x104>
  test_set_step(4);
 800382e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80038d8 <oslib_test_007_002_execute.lto_priv.0+0x148>
 8003832:	2304      	movs	r3, #4
 8003834:	603b      	str	r3, [r7, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8003836:	f10a 0810 	add.w	r8, sl, #16
 800383a:	2630      	movs	r6, #48	; 0x30
      chGuardedPoolFree(&gmp1, &objects[i]);
 800383c:	4651      	mov	r1, sl
 800383e:	f386 8811 	msr	BASEPRI, r6
 8003842:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 8003846:	3301      	adds	r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	e9c4 3102 	strd	r3, r1, [r4, #8]
 800384e:	f84a 2b04 	str.w	r2, [sl], #4
 8003852:	dd2d      	ble.n	80038b0 <oslib_test_007_002_execute.lto_priv.0+0x120>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003854:	f8d9 2000 	ldr.w	r2, [r9]
 8003858:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800385c:	6892      	ldr	r2, [r2, #8]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d901      	bls.n	8003868 <oslib_test_007_002_execute.lto_priv.0+0xd8>
    __sch_reschedule_ahead();
 8003864:	f7fe fecc 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8003868:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800386c:	45d0      	cmp	r8, sl
 800386e:	d1e5      	bne.n	800383c <oslib_test_007_002_execute.lto_priv.0+0xac>
  test_set_step(5);
 8003870:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8003872:	4d1a      	ldr	r5, [pc, #104]	; (80038dc <oslib_test_007_002_execute.lto_priv.0+0x14c>)
  test_set_step(5);
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8003878:	2100      	movs	r1, #0
 800387a:	4628      	mov	r0, r5
 800387c:	f7ff ff50 	bl	8003720 <chGuardedPoolAllocTimeout>
 8003880:	b178      	cbz	r0, 80038a2 <oslib_test_007_002_execute.lto_priv.0+0x112>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8003882:	3c01      	subs	r4, #1
 8003884:	d1f8      	bne.n	8003878 <oslib_test_007_002_execute.lto_priv.0+0xe8>
  test_set_step(6);
 8003886:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003888:	4814      	ldr	r0, [pc, #80]	; (80038dc <oslib_test_007_002_execute.lto_priv.0+0x14c>)
  test_set_step(6);
 800388a:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800388c:	4621      	mov	r1, r4
 800388e:	f7ff ff47 	bl	8003720 <chGuardedPoolAllocTimeout>
 8003892:	b158      	cbz	r0, 80038ac <oslib_test_007_002_execute.lto_priv.0+0x11c>
  chtest.failure_message = msg;
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <oslib_test_007_002_execute.lto_priv.0+0x154>)
 8003896:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8003898:	f240 1201 	movw	r2, #257	; 0x101
 800389c:	80ba      	strh	r2, [r7, #4]
}
 800389e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <oslib_test_007_002_execute.lto_priv.0+0x158>)
 80038a4:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80038a6:	f240 1201 	movw	r2, #257	; 0x101
 80038aa:	80ba      	strh	r2, [r7, #4]
 80038ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  ch_queue_t *p = qp->next;
 80038b0:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 80038b2:	6813      	ldr	r3, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80038b4:	6911      	ldr	r1, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 80038b6:	6890      	ldr	r0, [r2, #8]
  qp->next->prev = qp;
 80038b8:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 80038ba:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 80038bc:	6355      	str	r5, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 80038be:	7715      	strb	r5, [r2, #28]
    pqp = pqp->next;
 80038c0:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80038c2:	688b      	ldr	r3, [r1, #8]
 80038c4:	4283      	cmp	r3, r0
 80038c6:	d2fb      	bcs.n	80038c0 <oslib_test_007_002_execute.lto_priv.0+0x130>
  p->prev       = pqp->prev;
 80038c8:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 80038ca:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 80038cc:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 80038ce:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 80038d0:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 80038d2:	e7bf      	b.n	8003854 <oslib_test_007_002_execute.lto_priv.0+0xc4>
 80038d4:	20000ab4 	.word	0x20000ab4
 80038d8:	20000cfc 	.word	0x20000cfc
 80038dc:	20000810 	.word	0x20000810
 80038e0:	200009b8 	.word	0x200009b8
 80038e4:	0800b9ec 	.word	0x0800b9ec
 80038e8:	0800b9e0 	.word	0x0800b9e0
 80038ec:	00000000 	.word	0x00000000

080038f0 <oslib_test_007_003_execute.lto_priv.0>:

static void oslib_test_007_003_execute(void) {
 80038f0:	b510      	push	{r4, lr}

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 80038f2:	4c08      	ldr	r4, [pc, #32]	; (8003914 <oslib_test_007_003_execute.lto_priv.0+0x24>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80038f4:	4808      	ldr	r0, [pc, #32]	; (8003918 <oslib_test_007_003_execute.lto_priv.0+0x28>)
  test_set_step(1);
 80038f6:	2301      	movs	r3, #1
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80038f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_set_step(1);
 80038fc:	6023      	str	r3, [r4, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80038fe:	f7ff ff0f 	bl	8003720 <chGuardedPoolAllocTimeout>
  if (!condition) {
 8003902:	b900      	cbnz	r0, 8003906 <oslib_test_007_003_execute.lto_priv.0+0x16>
  }
  test_end_step(1);
}
 8003904:	bd10      	pop	{r4, pc}
  chtest.failure_message = msg;
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <oslib_test_007_003_execute.lto_priv.0+0x2c>)
 8003908:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 800390a:	f240 1201 	movw	r2, #257	; 0x101
 800390e:	80a2      	strh	r2, [r4, #4]
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	20000ab4 	.word	0x20000ab4
 8003918:	20000810 	.word	0x20000810
 800391c:	0800b9ec 	.word	0x0800b9ec

08003920 <rt_test_002_002_execute.lto_priv.0>:
static void rt_test_002_002_execute(void) {
 8003920:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003922:	4c48      	ldr	r4, [pc, #288]	; (8003a44 <rt_test_002_002_execute.lto_priv.0+0x124>)
 8003924:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8003926:	b086      	sub	sp, #24
  test_set_step(1);
 8003928:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800392a:	f3ef 8311 	mrs	r3, BASEPRI
  if (!port_is_locked(sts)) {
 800392e:	b96b      	cbnz	r3, 800394c <rt_test_002_002_execute.lto_priv.0+0x2c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003930:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003934:	2330      	movs	r3, #48	; 0x30
 8003936:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800393a:	f3ef 8305 	mrs	r3, IPSR
 800393e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8003942:	2b00      	cmp	r3, #0
 8003944:	d073      	beq.n	8003a2e <rt_test_002_002_execute.lto_priv.0+0x10e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003946:	2300      	movs	r3, #0
 8003948:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 800394c:	2302      	movs	r3, #2
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	2330      	movs	r3, #48	; 0x30
 8003952:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003956:	f3ef 8211 	mrs	r2, BASEPRI
  if (!port_is_locked(sts)) {
 800395a:	b962      	cbnz	r2, 8003976 <rt_test_002_002_execute.lto_priv.0+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800395c:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003960:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003964:	f3ef 8305 	mrs	r3, IPSR
 8003968:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 800396c:	2b00      	cmp	r3, #0
 800396e:	d054      	beq.n	8003a1a <rt_test_002_002_execute.lto_priv.0+0xfa>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003970:	2300      	movs	r3, #0
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	2300      	movs	r3, #0
 8003978:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 800397c:	2303      	movs	r3, #3
 800397e:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003980:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (!port_is_locked(port_get_lock_status())) {
 8003984:	b913      	cbnz	r3, 800398c <rt_test_002_002_execute.lto_priv.0+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003986:	2330      	movs	r3, #48	; 0x30
 8003988:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800398c:	f3ef 8311 	mrs	r3, BASEPRI
 8003990:	b913      	cbnz	r3, 8003998 <rt_test_002_002_execute.lto_priv.0+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003992:	2330      	movs	r3, #48	; 0x30
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	2300      	movs	r3, #0
 800399a:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 800399e:	2204      	movs	r2, #4
 80039a0:	6022      	str	r2, [r4, #0]
 80039a2:	2230      	movs	r2, #48	; 0x30
 80039a4:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039a8:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (port_is_locked(port_get_lock_status())) {
 80039ac:	b10a      	cbz	r2, 80039b2 <rt_test_002_002_execute.lto_priv.0+0x92>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80039ae:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039b2:	f3ef 8311 	mrs	r3, BASEPRI
 80039b6:	b113      	cbz	r3, 80039be <rt_test_002_002_execute.lto_priv.0+0x9e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80039b8:	2300      	movs	r3, #0
 80039ba:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 80039be:	2205      	movs	r2, #5
  vtp->dlist.next = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	6022      	str	r2, [r4, #0]
 80039c6:	2330      	movs	r3, #48	; 0x30
 80039c8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80039cc:	9b00      	ldr	r3, [sp, #0]
    chVTDoResetI(vtp);
 80039ce:	466e      	mov	r6, sp
  if (chVTIsArmedI(vtp)) {
 80039d0:	b113      	cbz	r3, 80039d8 <rt_test_002_002_execute.lto_priv.0+0xb8>
    chVTDoResetI(vtp);
 80039d2:	4630      	mov	r0, r6
 80039d4:	f7fe fd4c 	bl	8002470 <chVTDoResetI>
  vtp->func    = vtfunc;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <rt_test_002_002_execute.lto_priv.0+0x128>)
  vtp->par     = par;
 80039da:	2500      	movs	r5, #0
  vt_enqueue(vtlp, vtp, delay);
 80039dc:	2101      	movs	r1, #1
 80039de:	4630      	mov	r0, r6
  vtp->func    = vtfunc;
 80039e0:	e9cd 3503 	strd	r3, r5, [sp, #12]
  vtp->reload  = (sysinterval_t)0;
 80039e4:	9505      	str	r5, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 80039e6:	f007 f9f3 	bl	800add0 <vt_enqueue.constprop.0>
 80039ea:	f385 8811 	msr	BASEPRI, r5
 80039ee:	2630      	movs	r6, #48	; 0x30
 80039f0:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80039f4:	210a      	movs	r1, #10
 80039f6:	2008      	movs	r0, #8
 80039f8:	f7ff faf2 	bl	8002fe0 <chSchGoSleepTimeoutS>
 80039fc:	f385 8811 	msr	BASEPRI, r5
 8003a00:	f386 8811 	msr	BASEPRI, r6
  return (bool)(vtp->dlist.next != NULL);
 8003a04:	9b00      	ldr	r3, [sp, #0]
 8003a06:	f385 8811 	msr	BASEPRI, r5
  if (!condition) {
 8003a0a:	b123      	cbz	r3, 8003a16 <rt_test_002_002_execute.lto_priv.0+0xf6>
  chtest.failure_message = msg;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <rt_test_002_002_execute.lto_priv.0+0x12c>)
 8003a0e:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003a10:	f240 1201 	movw	r2, #257	; 0x101
 8003a14:	80a2      	strh	r2, [r4, #4]
}
 8003a16:	b006      	add	sp, #24
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <rt_test_002_002_execute.lto_priv.0+0x130>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	6892      	ldr	r2, [r2, #8]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d9a3      	bls.n	8003970 <rt_test_002_002_execute.lto_priv.0+0x50>
    __sch_reschedule_ahead();
 8003a28:	f7fe fdea 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8003a2c:	e7a0      	b.n	8003970 <rt_test_002_002_execute.lto_priv.0+0x50>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <rt_test_002_002_execute.lto_priv.0+0x130>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	6892      	ldr	r2, [r2, #8]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d984      	bls.n	8003946 <rt_test_002_002_execute.lto_priv.0+0x26>
    __sch_reschedule_ahead();
 8003a3c:	f7fe fde0 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8003a40:	e781      	b.n	8003946 <rt_test_002_002_execute.lto_priv.0+0x26>
 8003a42:	bf00      	nop
 8003a44:	20000ab4 	.word	0x20000ab4
 8003a48:	08002641 	.word	0x08002641
 8003a4c:	0800bbd0 	.word	0x0800bbd0
 8003a50:	200009b8 	.word	0x200009b8
	...

08003a60 <rt_test_004_001_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [4.1.1] Time stamps are generated and checked for monotonicity.
 * .
 */

static void rt_test_004_001_execute(void) {
 8003a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* [4.1.1] Time stamps are generated and checked for monotonicity.*/
  test_set_step(1);
 8003a64:	f8df a090 	ldr.w	sl, [pc, #144]	; 8003af8 <rt_test_004_001_execute.lto_priv.0+0x98>
 8003a68:	2101      	movs	r1, #1
 8003a6a:	f8ca 1000 	str.w	r1, [sl]
 8003a6e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8003a72:	f389 8811 	msr	BASEPRI, r9

  /* Current system time.*/
  now = chVTGetSystemTimeX();

  /* Last time stamp generated.*/
  last = oip->vtlist.laststamp;
 8003a76:	4e21      	ldr	r6, [pc, #132]	; (8003afc <rt_test_004_001_execute.lto_priv.0+0x9c>)
 8003a78:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000

  /* Interval between the last time stamp and current time used for a new
     time stamp. Note that this fails if the interval is larger than a
     systime_t type.*/
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 8003a7c:	f04f 0800 	mov.w	r8, #0
 8003a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
  last = oip->vtlist.laststamp;
 8003a82:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
 8003a86:	1a80      	subs	r0, r0, r2
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 8003a88:	1884      	adds	r4, r0, r2
 8003a8a:	f143 0500 	adc.w	r5, r3, #0

  chDbgAssert(oip->vtlist.laststamp <= stamp, "wrapped");

  /* Storing the new stamp.*/
  oip->vtlist.laststamp = stamp;
 8003a8e:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
 8003a92:	f388 8811 	msr	BASEPRI, r8
 8003a96:	f389 8811 	msr	BASEPRI, r9
 8003a9a:	2008      	movs	r0, #8
 8003a9c:	f7ff faa0 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003aa0:	f388 8811 	msr	BASEPRI, r8
 8003aa4:	f389 8811 	msr	BASEPRI, r9
 8003aa8:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 8003aac:	f388 8811 	msr	BASEPRI, r8
      test_assert(last <= now, "not monotonic");
      last = now;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8003ab0:	f242 7e0f 	movw	lr, #9999	; 0x270f
 8003ab4:	e004      	b.n	8003ac0 <rt_test_004_001_execute.lto_priv.0+0x60>
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003ab8:	eba3 030b 	sub.w	r3, r3, fp
 8003abc:	4573      	cmp	r3, lr
 8003abe:	d819      	bhi.n	8003af4 <rt_test_004_001_execute.lto_priv.0+0x94>
 8003ac0:	f389 8811 	msr	BASEPRI, r9
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  last = oip->vtlist.laststamp;
 8003ac6:	e9d6 010a 	ldrd	r0, r1, [r6, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8003aca:	1a1b      	subs	r3, r3, r0
 8003acc:	46a4      	mov	ip, r4
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 8003ace:	181c      	adds	r4, r3, r0
 8003ad0:	462a      	mov	r2, r5
 8003ad2:	f141 0500 	adc.w	r5, r1, #0
  oip->vtlist.laststamp = stamp;
 8003ad6:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
 8003ada:	f388 8811 	msr	BASEPRI, r8
  if (!condition) {
 8003ade:	4564      	cmp	r4, ip
 8003ae0:	eb75 0302 	sbcs.w	r3, r5, r2
 8003ae4:	d2e7      	bcs.n	8003ab6 <rt_test_004_001_execute.lto_priv.0+0x56>
  chtest.failure_message = msg;
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <rt_test_004_001_execute.lto_priv.0+0xa0>)
 8003ae8:	f8ca 3008 	str.w	r3, [sl, #8]
  chtest.global_fail     = true;
 8003aec:	f240 1201 	movw	r2, #257	; 0x101
 8003af0:	f8aa 2004 	strh.w	r2, [sl, #4]
  }
  test_end_step(1);
}
 8003af4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af8:	20000ab4 	.word	0x20000ab4
 8003afc:	200009b8 	.word	0x200009b8
 8003b00:	0800bbe4 	.word	0x0800bbe4
	...

08003b10 <rt_test_005_001_execute.lto_priv.0>:
static void rt_test_005_001_execute(void) {
 8003b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8003b14:	4d37      	ldr	r5, [pc, #220]	; (8003bf4 <rt_test_005_001_execute.lto_priv.0+0xe4>)
 8003b16:	2301      	movs	r3, #1
 8003b18:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003b1c:	602b      	str	r3, [r5, #0]
 8003b1e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8003b22:	2630      	movs	r6, #48	; 0x30
 8003b24:	f386 8811 	msr	BASEPRI, r6
 8003b28:	2164      	movs	r1, #100	; 0x64
 8003b2a:	2008      	movs	r0, #8
 8003b2c:	f7ff fa58 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003b30:	2700      	movs	r7, #0
 8003b32:	f387 8811 	msr	BASEPRI, r7
 8003b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003b38:	3b64      	subs	r3, #100	; 0x64
 8003b3a:	eba3 0308 	sub.w	r3, r3, r8
  if (!condition) {
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d851      	bhi.n	8003be6 <rt_test_005_001_execute.lto_priv.0+0xd6>
  test_set_step(2);
 8003b42:	2302      	movs	r3, #2
 8003b44:	602b      	str	r3, [r5, #0]
 8003b46:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8003b4a:	f386 8811 	msr	BASEPRI, r6
 8003b4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b52:	2008      	movs	r0, #8
 8003b54:	f7ff fa44 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003b58:	f387 8811 	msr	BASEPRI, r7
 8003b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b5e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003b62:	eba3 0308 	sub.w	r3, r3, r8
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d83d      	bhi.n	8003be6 <rt_test_005_001_execute.lto_priv.0+0xd6>
  test_set_step(3);
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	602b      	str	r3, [r5, #0]
 8003b6e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8003b72:	f386 8811 	msr	BASEPRI, r6
 8003b76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b7a:	2008      	movs	r0, #8
 8003b7c:	f7ff fa30 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003b80:	f387 8811 	msr	BASEPRI, r7
 8003b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b86:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003b8a:	eba3 0308 	sub.w	r3, r3, r8
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d829      	bhi.n	8003be6 <rt_test_005_001_execute.lto_priv.0+0xd6>
  test_set_step(4);
 8003b92:	2304      	movs	r3, #4
 8003b94:	602b      	str	r3, [r5, #0]
 8003b96:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8003b9a:	f386 8811 	msr	BASEPRI, r6
 8003b9e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ba2:	2008      	movs	r0, #8
 8003ba4:	f7ff fa1c 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003ba8:	f387 8811 	msr	BASEPRI, r7
 8003bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bae:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8003bb2:	3b10      	subs	r3, #16
 8003bb4:	eba3 0308 	sub.w	r3, r3, r8
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d814      	bhi.n	8003be6 <rt_test_005_001_execute.lto_priv.0+0xd6>
  test_set_step(5);
 8003bbc:	2305      	movs	r3, #5
 8003bbe:	602b      	str	r3, [r5, #0]
 8003bc0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  return systime + (systime_t)interval;
 8003bc2:	3764      	adds	r7, #100	; 0x64
 8003bc4:	f386 8811 	msr	BASEPRI, r6
 8003bc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  if (likely(interval > (sysinterval_t)0)) {
 8003bca:	1a79      	subs	r1, r7, r1
 8003bcc:	d002      	beq.n	8003bd4 <rt_test_005_001_execute.lto_priv.0+0xc4>
 8003bce:	2008      	movs	r0, #8
 8003bd0:	f7ff fa06 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003be0:	1bdf      	subs	r7, r3, r7
 8003be2:	2f02      	cmp	r7, #2
 8003be4:	d904      	bls.n	8003bf0 <rt_test_005_001_execute.lto_priv.0+0xe0>
  chtest.failure_message = msg;
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <rt_test_005_001_execute.lto_priv.0+0xe8>)
 8003be8:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8003bea:	f240 1201 	movw	r2, #257	; 0x101
 8003bee:	80aa      	strh	r2, [r5, #4]
}
 8003bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bf4:	20000ab4 	.word	0x20000ab4
 8003bf8:	0800bbf4 	.word	0x0800bbf4
 8003bfc:	00000000 	.word	0x00000000

08003c00 <thread2>:
static THD_FUNCTION(thread2, p) {
 8003c00:	b510      	push	{r4, lr}
 8003c02:	2430      	movs	r4, #48	; 0x30
 8003c04:	f384 8811 	msr	BASEPRI, r4
 8003c08:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003c0c:	2008      	movs	r0, #8
 8003c0e:	f7ff f9e7 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003c12:	2100      	movs	r1, #0
 8003c14:	f381 8811 	msr	BASEPRI, r1
 8003c18:	f384 8811 	msr	BASEPRI, r4
  if (++sp->cnt <= (cnt_t)0) {
 8003c1c:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <thread2+0x68>)
 8003c1e:	6893      	ldr	r3, [r2, #8]
 8003c20:	3301      	adds	r3, #1
 8003c22:	428b      	cmp	r3, r1
 8003c24:	6093      	str	r3, [r2, #8]
 8003c26:	dd0c      	ble.n	8003c42 <thread2+0x42>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003c28:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <thread2+0x6c>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	6892      	ldr	r2, [r2, #8]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d901      	bls.n	8003c3a <thread2+0x3a>
    __sch_reschedule_ahead();
 8003c36:	f7fe fce3 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f383 8811 	msr	BASEPRI, r3
}
 8003c40:	bd10      	pop	{r4, pc}
  ch_queue_t *p = qp->next;
 8003c42:	6813      	ldr	r3, [r2, #0]
  qp->next       = p->next;
 8003c44:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003c46:	6918      	ldr	r0, [r3, #16]
 8003c48:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 8003c4a:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8003c4c:	689c      	ldr	r4, [r3, #8]
    tp->u.rdymsg = MSG_OK;
 8003c4e:	6359      	str	r1, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8003c50:	7719      	strb	r1, [r3, #28]
    pqp = pqp->next;
 8003c52:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003c54:	6882      	ldr	r2, [r0, #8]
 8003c56:	42a2      	cmp	r2, r4
 8003c58:	d2fb      	bcs.n	8003c52 <thread2+0x52>
  p->prev       = pqp->prev;
 8003c5a:	6842      	ldr	r2, [r0, #4]
 8003c5c:	e9c3 0200 	strd	r0, r2, [r3]
  p->prev->next = p;
 8003c60:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8003c62:	6043      	str	r3, [r0, #4]
  return __sch_ready_behind(tp);
 8003c64:	e7e0      	b.n	8003c28 <thread2+0x28>
 8003c66:	bf00      	nop
 8003c68:	20000d0c 	.word	0x20000d0c
 8003c6c:	200009b8 	.word	0x200009b8

08003c70 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4604      	mov	r4, r0
 8003c74:	2530      	movs	r5, #48	; 0x30
 8003c76:	f385 8811 	msr	BASEPRI, r5
 8003c7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003c7e:	2008      	movs	r0, #8
 8003c80:	f7ff f9ae 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003c84:	2300      	movs	r3, #0
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f385 8811 	msr	BASEPRI, r5
  tp->epending |= events;
 8003c8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003c90:	7f22      	ldrb	r2, [r4, #28]
  tp->epending |= events;
 8003c92:	f043 0301 	orr.w	r3, r3, #1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003c96:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8003c98:	6463      	str	r3, [r4, #68]	; 0x44
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003c9a:	d021      	beq.n	8003ce0 <evt_thread3+0x70>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003c9c:	2a0b      	cmp	r2, #11
 8003c9e:	d00c      	beq.n	8003cba <evt_thread3+0x4a>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <evt_thread3+0x78>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	6892      	ldr	r2, [r2, #8]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d901      	bls.n	8003cb2 <evt_thread3+0x42>
    __sch_reschedule_ahead();
 8003cae:	f7fe fca7 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f383 8811 	msr	BASEPRI, r3
}
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8003cba:	6b62      	ldr	r2, [r4, #52]	; 0x34
      ((tp->state == CH_STATE_WTANDEVT) &&
 8003cbc:	ea32 0303 	bics.w	r3, r2, r3
 8003cc0:	d1ee      	bne.n	8003ca0 <evt_thread3+0x30>
    tp->u.rdymsg = MSG_OK;
 8003cc2:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003cc4:	6923      	ldr	r3, [r4, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8003cc6:	68a1      	ldr	r1, [r4, #8]
 8003cc8:	6362      	str	r2, [r4, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8003cca:	7722      	strb	r2, [r4, #28]
    pqp = pqp->next;
 8003ccc:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	428a      	cmp	r2, r1
 8003cd2:	d2fb      	bcs.n	8003ccc <evt_thread3+0x5c>
  p->prev       = pqp->prev;
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	e9c4 3200 	strd	r3, r2, [r4]
  p->prev->next = p;
 8003cda:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 8003cdc:	605c      	str	r4, [r3, #4]
  return __sch_ready_behind(tp);
 8003cde:	e7df      	b.n	8003ca0 <evt_thread3+0x30>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003ce0:	6b62      	ldr	r2, [r4, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003ce2:	4213      	tst	r3, r2
 8003ce4:	d1ed      	bne.n	8003cc2 <evt_thread3+0x52>
 8003ce6:	e7db      	b.n	8003ca0 <evt_thread3+0x30>
 8003ce8:	200009b8 	.word	0x200009b8
 8003cec:	00000000 	.word	0x00000000

08003cf0 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	2330      	movs	r3, #48	; 0x30
 8003cf4:	f383 8811 	msr	BASEPRI, r3
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003cf8:	4c15      	ldr	r4, [pc, #84]	; (8003d50 <evt_thread7+0x60>)
  chEvtBroadcastFlagsI(esp, flags);
 8003cfa:	4816      	ldr	r0, [pc, #88]	; (8003d54 <evt_thread7+0x64>)
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	f7fd fcb7 	bl	8001670 <chEvtBroadcastFlagsI>
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	68e3      	ldr	r3, [r4, #12]
 8003d06:	6892      	ldr	r2, [r2, #8]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d901      	bls.n	8003d12 <evt_thread7+0x22>
    __sch_reschedule_ahead();
 8003d0e:	f7fe fc77 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8003d12:	2500      	movs	r5, #0
 8003d14:	f385 8811 	msr	BASEPRI, r5
 8003d18:	2630      	movs	r6, #48	; 0x30
 8003d1a:	f386 8811 	msr	BASEPRI, r6
 8003d1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d22:	2008      	movs	r0, #8
 8003d24:	f7ff f95c 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003d28:	f385 8811 	msr	BASEPRI, r5
 8003d2c:	f386 8811 	msr	BASEPRI, r6
 8003d30:	4809      	ldr	r0, [pc, #36]	; (8003d58 <evt_thread7+0x68>)
 8003d32:	4629      	mov	r1, r5
 8003d34:	f7fd fc9c 	bl	8001670 <chEvtBroadcastFlagsI>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	68e3      	ldr	r3, [r4, #12]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d901      	bls.n	8003d48 <evt_thread7+0x58>
    __sch_reschedule_ahead();
 8003d44:	f7fe fc5c 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f383 8811 	msr	BASEPRI, r3
}
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	200009b8 	.word	0x200009b8
 8003d54:	20000808 	.word	0x20000808
 8003d58:	2000080c 	.word	0x2000080c
 8003d5c:	00000000 	.word	0x00000000

08003d60 <rt_test_010_006_execute.lto_priv.0>:
static void rt_test_010_006_execute(void) {
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003d62:	4c46      	ldr	r4, [pc, #280]	; (8003e7c <rt_test_010_006_execute.lto_priv.0+0x11c>)
  return __sch_get_currthread();
 8003d64:	4d46      	ldr	r5, [pc, #280]	; (8003e80 <rt_test_010_006_execute.lto_priv.0+0x120>)
 8003d66:	2301      	movs	r3, #1
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	68e9      	ldr	r1, [r5, #12]
 8003d6c:	2330      	movs	r3, #48	; 0x30
 8003d6e:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();
  eventmask_t m;

  chSysLock();
  m = currtp->epending & events;
 8003d72:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  if (m == (eventmask_t)0) {
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d143      	bne.n	8003e00 <rt_test_010_006_execute.lto_priv.0+0xa0>
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	68e9      	ldr	r1, [r5, #12]
 8003d7e:	2230      	movs	r2, #48	; 0x30
 8003d80:	f382 8811 	msr	BASEPRI, r2
  thread_t *currtp = chThdGetSelfX();
  eventmask_t m;

  chSysLock();
  m = currtp->epending & events;
  if (m == (eventmask_t)0) {
 8003d84:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d14a      	bne.n	8003e20 <rt_test_010_006_execute.lto_priv.0+0xc0>
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	68e9      	ldr	r1, [r5, #12]
 8003d90:	f382 8811 	msr	BASEPRI, r2
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();

  chSysLock();
  if ((currtp->epending & events) != events) {
 8003d94:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8003d96:	3001      	adds	r0, #1
 8003d98:	d058      	beq.n	8003e4c <rt_test_010_006_execute.lto_priv.0+0xec>
 8003d9a:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 8003d9e:	2302      	movs	r3, #2
 8003da0:	68ef      	ldr	r7, [r5, #12]
 8003da2:	6023      	str	r3, [r4, #0]
 8003da4:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 8003da8:	6c7e      	ldr	r6, [r7, #68]	; 0x44
  if (m == (eventmask_t)0) {
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	d042      	beq.n	8003e34 <rt_test_010_006_execute.lto_priv.0+0xd4>
  m ^= m & (m - (eventmask_t)1);
 8003dae:	4273      	negs	r3, r6
  currtp->epending &= ~m;
 8003db0:	ea26 0203 	bic.w	r2, r6, r3
 8003db4:	647a      	str	r2, [r7, #68]	; 0x44
  m ^= m & (m - (eventmask_t)1);
 8003db6:	401e      	ands	r6, r3
 8003db8:	2300      	movs	r3, #0
 8003dba:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8003dbe:	bb4e      	cbnz	r6, 8003e14 <rt_test_010_006_execute.lto_priv.0+0xb4>
 8003dc0:	68ee      	ldr	r6, [r5, #12]
 8003dc2:	2330      	movs	r3, #48	; 0x30
 8003dc4:	f383 8811 	msr	BASEPRI, r3
  m = currtp->epending & events;
 8003dc8:	6c77      	ldr	r7, [r6, #68]	; 0x44
  if (m == (eventmask_t)0) {
 8003dca:	2f00      	cmp	r7, #0
 8003dcc:	d040      	beq.n	8003e50 <rt_test_010_006_execute.lto_priv.0+0xf0>
  currtp->epending &= ~m;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	6473      	str	r3, [r6, #68]	; 0x44
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	b9ef      	cbnz	r7, 8003e14 <rt_test_010_006_execute.lto_priv.0+0xb4>
 8003dd8:	68ed      	ldr	r5, [r5, #12]
 8003dda:	2330      	movs	r3, #48	; 0x30
 8003ddc:	f383 8811 	msr	BASEPRI, r3
  if ((currtp->epending & events) != events) {
 8003de0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003de2:	3301      	adds	r3, #1
 8003de4:	d009      	beq.n	8003dfa <rt_test_010_006_execute.lto_priv.0+0x9a>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    currtp->u.ewmask = events;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dea:	636b      	str	r3, [r5, #52]	; 0x34
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003dec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003df0:	200b      	movs	r0, #11
 8003df2:	f7ff f8f5 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	db3c      	blt.n	8003e74 <rt_test_010_006_execute.lto_priv.0+0x114>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  currtp->epending &= ~events;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	646b      	str	r3, [r5, #68]	; 0x44
 8003dfe:	e011      	b.n	8003e24 <rt_test_010_006_execute.lto_priv.0+0xc4>
  m ^= m & (m - (eventmask_t)1);
 8003e00:	425a      	negs	r2, r3
  currtp->epending &= ~m;
 8003e02:	ea23 0002 	bic.w	r0, r3, r2
 8003e06:	6448      	str	r0, [r1, #68]	; 0x44
  m ^= m & (m - (eventmask_t)1);
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f382 8811 	msr	BASEPRI, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0b3      	beq.n	8003d7c <rt_test_010_006_execute.lto_priv.0+0x1c>
  chtest.failure_message = msg;
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <rt_test_010_006_execute.lto_priv.0+0x124>)
 8003e16:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003e18:	f240 1201 	movw	r2, #257	; 0x101
 8003e1c:	80a2      	strh	r2, [r4, #4]
}
 8003e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  currtp->epending &= ~m;
 8003e20:	2300      	movs	r3, #0
 8003e22:	644b      	str	r3, [r1, #68]	; 0x44
 8003e24:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8003e28:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <rt_test_010_006_execute.lto_priv.0+0x124>)
 8003e2a:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003e2c:	f240 1201 	movw	r2, #257	; 0x101
 8003e30:	80a2      	strh	r2, [r4, #4]
  test_end_step(2);
 8003e32:	e7f4      	b.n	8003e1e <rt_test_010_006_execute.lto_priv.0+0xbe>
    currtp->u.ewmask = events;
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003e3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003e3e:	200a      	movs	r0, #10
 8003e40:	f7ff f8ce 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	db0f      	blt.n	8003e68 <rt_test_010_006_execute.lto_priv.0+0x108>
    m = currtp->epending & events;
 8003e48:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8003e4a:	e7b0      	b.n	8003dae <rt_test_010_006_execute.lto_priv.0+0x4e>
  currtp->epending &= ~events;
 8003e4c:	644b      	str	r3, [r1, #68]	; 0x44
 8003e4e:	e7e9      	b.n	8003e24 <rt_test_010_006_execute.lto_priv.0+0xc4>
    currtp->u.ewmask = events;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e54:	6373      	str	r3, [r6, #52]	; 0x34
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003e56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003e5a:	200a      	movs	r0, #10
 8003e5c:	f7ff f8c0 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	db04      	blt.n	8003e6e <rt_test_010_006_execute.lto_priv.0+0x10e>
    m = currtp->epending & events;
 8003e64:	6c77      	ldr	r7, [r6, #68]	; 0x44
 8003e66:	e7b2      	b.n	8003dce <rt_test_010_006_execute.lto_priv.0+0x6e>
 8003e68:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8003e6c:	e7a8      	b.n	8003dc0 <rt_test_010_006_execute.lto_priv.0+0x60>
 8003e6e:	f387 8811 	msr	BASEPRI, r7
 8003e72:	e7b1      	b.n	8003dd8 <rt_test_010_006_execute.lto_priv.0+0x78>
 8003e74:	2300      	movs	r3, #0
 8003e76:	f383 8811 	msr	BASEPRI, r3
}
 8003e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e7c:	20000ab4 	.word	0x20000ab4
 8003e80:	200009b8 	.word	0x200009b8
 8003e84:	0800bc08 	.word	0x0800bc08
	...

08003e90 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8003e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e94:	4605      	mov	r5, r0
 8003e96:	2630      	movs	r6, #48	; 0x30
 8003e98:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	2008      	movs	r0, #8
 8003ea0:	f7ff f89e 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8003ea4:	f04f 0a00 	mov.w	sl, #0
 8003ea8:	f38a 8811 	msr	BASEPRI, sl
 8003eac:	f386 8811 	msr	BASEPRI, r6
 8003eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003eb4:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 8003eb8:	f38a 8811 	msr	BASEPRI, sl
  return systime + (systime_t)interval;
 8003ebc:	4c20      	ldr	r4, [pc, #128]	; (8003f40 <msg_loop_test+0xb0>)
  __ch_msg_insert(&tp->msgqueue, currtp);
 8003ebe:	f105 083c 	add.w	r8, r5, #60	; 0x3c
  currtp->u.sentmsg = msg;
 8003ec2:	f04f 0b01 	mov.w	fp, #1
  tp->state = CH_STATE_READY;
 8003ec6:	4657      	mov	r7, sl
 8003ec8:	e018      	b.n	8003efc <msg_loop_test+0x6c>
  thread_t *otp = __instance_get_currthread(oip);
 8003eca:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8003ecc:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8003ece:	230c      	movs	r3, #12
 8003ed0:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8003ed2:	6803      	ldr	r3, [r0, #0]
 8003ed4:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8003ed6:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8003ed8:	f880 b01c 	strb.w	fp, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8003edc:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8003ede:	f7fc f9ef 	bl	80002c0 <__port_switch>
 8003ee2:	f387 8811 	msr	BASEPRI, r7
 8003ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 8003eea:	f242 720f 	movw	r2, #9999	; 0x270f
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003ef0:	eba3 0309 	sub.w	r3, r3, r9
 8003ef4:	4293      	cmp	r3, r2
    n++;
 8003ef6:	f10a 0a01 	add.w	sl, sl, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 8003efa:	d819      	bhi.n	8003f30 <msg_loop_test+0xa0>
  return __sch_get_currthread();
 8003efc:	68e3      	ldr	r3, [r4, #12]
 8003efe:	f386 8811 	msr	BASEPRI, r6
  p->prev       = qp->prev;
 8003f02:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003f04:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
 8003f08:	e9c3 8200 	strd	r8, r2, [r3]
  p->prev->next = p;
 8003f0c:	6013      	str	r3, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 8003f0e:	7f2a      	ldrb	r2, [r5, #28]
  qp->prev      = p;
 8003f10:	642b      	str	r3, [r5, #64]	; 0x40
 8003f12:	2a0e      	cmp	r2, #14
 8003f14:	d1d9      	bne.n	8003eca <msg_loop_test+0x3a>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003f16:	692b      	ldr	r3, [r5, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8003f18:	68a9      	ldr	r1, [r5, #8]
  tp->state = CH_STATE_READY;
 8003f1a:	772f      	strb	r7, [r5, #28]
    pqp = pqp->next;
 8003f1c:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	428a      	cmp	r2, r1
 8003f22:	d2fb      	bcs.n	8003f1c <msg_loop_test+0x8c>
  p->prev       = pqp->prev;
 8003f24:	685a      	ldr	r2, [r3, #4]
  p->next       = pqp;
 8003f26:	602b      	str	r3, [r5, #0]
  p->prev       = pqp->prev;
 8003f28:	606a      	str	r2, [r5, #4]
  p->prev->next = p;
 8003f2a:	6015      	str	r5, [r2, #0]
  pqp->prev     = p;
 8003f2c:	605d      	str	r5, [r3, #4]
  return __sch_ready_behind(tp);
 8003f2e:	e7cc      	b.n	8003eca <msg_loop_test+0x3a>
  (void)chMsgSend(tp, 0);
 8003f30:	2100      	movs	r1, #0
 8003f32:	4628      	mov	r0, r5
 8003f34:	f7fd fc84 	bl	8001840 <chMsgSend>
}
 8003f38:	4650      	mov	r0, sl
 8003f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3e:	bf00      	nop
 8003f40:	200009b8 	.word	0x200009b8
	...

08003f50 <chSchWakeupS>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003f50:	b410      	push	{r4}
  thread_t *otp = __instance_get_currthread(oip);
 8003f52:	4c15      	ldr	r4, [pc, #84]	; (8003fa8 <chSchWakeupS+0x58>)
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8003f54:	6882      	ldr	r2, [r0, #8]
  thread_t *otp = __instance_get_currthread(oip);
 8003f56:	68e3      	ldr	r3, [r4, #12]
  ntp->u.rdymsg = msg;
 8003f58:	6341      	str	r1, [r0, #52]	; 0x34
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8003f5a:	6899      	ldr	r1, [r3, #8]
 8003f5c:	428a      	cmp	r2, r1
 8003f5e:	d915      	bls.n	8003f8c <chSchWakeupS+0x3c>
  tp->state = CH_STATE_READY;
 8003f60:	2200      	movs	r2, #0
 8003f62:	771a      	strb	r2, [r3, #28]
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8003f64:	691a      	ldr	r2, [r3, #16]
    pqp = pqp->next;
 8003f66:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio > p->prio));
 8003f68:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8003f6c:	4561      	cmp	r1, ip
 8003f6e:	d3fa      	bcc.n	8003f66 <chSchWakeupS+0x16>
  p->prev       = pqp->prev;
 8003f70:	6851      	ldr	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8003f72:	f04f 0c01 	mov.w	ip, #1
 8003f76:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8003f7a:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8003f7c:	6053      	str	r3, [r2, #4]
    chSysSwitch(ntp, otp);
 8003f7e:	4619      	mov	r1, r3
    __instance_set_currthread(oip, ntp);
 8003f80:	60e0      	str	r0, [r4, #12]
    ntp->state = CH_STATE_CURRENT;
 8003f82:	f880 c01c 	strb.w	ip, [r0, #28]
}
 8003f86:	bc10      	pop	{r4}
    chSysSwitch(ntp, otp);
 8003f88:	f7fc b99a 	b.w	80002c0 <__port_switch>
  tp->state = CH_STATE_READY;
 8003f8c:	2100      	movs	r1, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003f8e:	6903      	ldr	r3, [r0, #16]
  tp->state = CH_STATE_READY;
 8003f90:	7701      	strb	r1, [r0, #28]
    pqp = pqp->next;
 8003f92:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003f94:	6899      	ldr	r1, [r3, #8]
 8003f96:	428a      	cmp	r2, r1
 8003f98:	d9fb      	bls.n	8003f92 <chSchWakeupS+0x42>
  p->prev       = pqp->prev;
 8003f9a:	685a      	ldr	r2, [r3, #4]
}
 8003f9c:	bc10      	pop	{r4}
 8003f9e:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8003fa2:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8003fa4:	6058      	str	r0, [r3, #4]
 8003fa6:	4770      	bx	lr
 8003fa8:	200009b8 	.word	0x200009b8
 8003fac:	00000000 	.word	0x00000000

08003fb0 <rt_test_007_001_execute.lto_priv.0>:
static void rt_test_007_001_execute(void) {
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003fb2:	4d3b      	ldr	r5, [pc, #236]	; (80040a0 <rt_test_007_001_execute.lto_priv.0+0xf0>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	602a      	str	r2, [r5, #0]
 8003fb8:	2630      	movs	r6, #48	; 0x30
 8003fba:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8003fbe:	4c39      	ldr	r4, [pc, #228]	; (80040a4 <rt_test_007_001_execute.lto_priv.0+0xf4>)
 8003fc0:	68a3      	ldr	r3, [r4, #8]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	60a3      	str	r3, [r4, #8]
 8003fc8:	db44      	blt.n	8004054 <rt_test_007_001_execute.lto_priv.0+0xa4>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f386 8811 	msr	BASEPRI, r6
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	bb23      	cbnz	r3, 8004022 <rt_test_007_001_execute.lto_priv.0+0x72>
 8003fd8:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 8003fdc:	2302      	movs	r3, #2
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	2330      	movs	r3, #48	; 0x30
 8003fe2:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8003fe6:	68a3      	ldr	r3, [r4, #8]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	60a3      	str	r3, [r4, #8]
 8003fee:	dd21      	ble.n	8004034 <rt_test_007_001_execute.lto_priv.0+0x84>
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	f386 8811 	msr	BASEPRI, r6
 8003ff6:	2730      	movs	r7, #48	; 0x30
 8003ff8:	f387 8811 	msr	BASEPRI, r7
 8003ffc:	68a3      	ldr	r3, [r4, #8]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d120      	bne.n	8004044 <rt_test_007_001_execute.lto_priv.0+0x94>
 8004002:	f386 8811 	msr	BASEPRI, r6
  test_set_step(3);
 8004006:	2303      	movs	r3, #3
  chSemResetWithMessage(sp, n, MSG_RESET);
 8004008:	4826      	ldr	r0, [pc, #152]	; (80040a4 <rt_test_007_001_execute.lto_priv.0+0xf4>)
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	2102      	movs	r1, #2
 800400e:	f006 fe77 	bl	800ad00 <chSemResetWithMessage.constprop.0>
 8004012:	f387 8811 	msr	BASEPRI, r7
 8004016:	68a3      	ldr	r3, [r4, #8]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d113      	bne.n	8004044 <rt_test_007_001_execute.lto_priv.0+0x94>
 800401c:	f386 8811 	msr	BASEPRI, r6
}
 8004020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 8004022:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <rt_test_007_001_execute.lto_priv.0+0xf8>)
 8004024:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004026:	f240 1201 	movw	r2, #257	; 0x101
 800402a:	80aa      	strh	r2, [r5, #4]
 800402c:	2300      	movs	r3, #0
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ch_queue_t *p = qp->next;
 8004034:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004036:	6803      	ldr	r3, [r0, #0]
 8004038:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 800403a:	2100      	movs	r1, #0
  qp->next->prev = qp;
 800403c:	605c      	str	r4, [r3, #4]
 800403e:	f7ff ff87 	bl	8003f50 <chSchWakeupS>
 8004042:	e7d5      	b.n	8003ff0 <rt_test_007_001_execute.lto_priv.0+0x40>
  chtest.failure_message = msg;
 8004044:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <rt_test_007_001_execute.lto_priv.0+0xf8>)
 8004046:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004048:	f240 1201 	movw	r2, #257	; 0x101
 800404c:	80aa      	strh	r2, [r5, #4]
 800404e:	f386 8811 	msr	BASEPRI, r6
 8004052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <rt_test_007_001_execute.lto_priv.0+0xfc>)
  p->prev       = qp->prev;
 8004056:	6861      	ldr	r1, [r4, #4]
 8004058:	68df      	ldr	r7, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 800405a:	6818      	ldr	r0, [r3, #0]
    currtp->u.wtsemp = sp;
 800405c:	637c      	str	r4, [r7, #52]	; 0x34
  p->prev       = qp->prev;
 800405e:	e9c7 4100 	strd	r4, r1, [r7]
  p->prev->next = p;
 8004062:	600f      	str	r7, [r1, #0]
  otp->state = newstate;
 8004064:	2105      	movs	r1, #5
 8004066:	7739      	strb	r1, [r7, #28]
  pqp->next       = p->next;
 8004068:	6801      	ldr	r1, [r0, #0]
  qp->prev      = p;
 800406a:	6067      	str	r7, [r4, #4]
  pqp->next       = p->next;
 800406c:	6019      	str	r1, [r3, #0]
  pqp->next->prev = pqp;
 800406e:	604b      	str	r3, [r1, #4]
  ntp->state = CH_STATE_CURRENT;
 8004070:	7702      	strb	r2, [r0, #28]
  chSysSwitch(ntp, otp);
 8004072:	4639      	mov	r1, r7
  __instance_set_currthread(oip, ntp);
 8004074:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8004076:	f7fc f923 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 800407a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800407c:	2300      	movs	r3, #0
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8004086:	68a3      	ldr	r3, [r4, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1ca      	bne.n	8004022 <rt_test_007_001_execute.lto_priv.0+0x72>
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	2a00      	cmp	r2, #0
 8004092:	d0a3      	beq.n	8003fdc <rt_test_007_001_execute.lto_priv.0+0x2c>
  chtest.failure_message = msg;
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <rt_test_007_001_execute.lto_priv.0+0x100>)
 8004096:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004098:	f240 1201 	movw	r2, #257	; 0x101
 800409c:	80aa      	strh	r2, [r5, #4]
 800409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040a0:	20000ab4 	.word	0x20000ab4
 80040a4:	20000d0c 	.word	0x20000d0c
 80040a8:	0800bc18 	.word	0x0800bc18
 80040ac:	200009b8 	.word	0x200009b8
 80040b0:	0800bc2c 	.word	0x0800bc2c
	...

080040c0 <thread3>:
static THD_FUNCTION(thread3, p) {
 80040c0:	b510      	push	{r4, lr}
 80040c2:	2330      	movs	r3, #48	; 0x30
 80040c4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80040c8:	4c19      	ldr	r4, [pc, #100]	; (8004130 <thread3+0x70>)
 80040ca:	68a3      	ldr	r3, [r4, #8]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	60a3      	str	r3, [r4, #8]
 80040d2:	db18      	blt.n	8004106 <thread3+0x46>
 80040d4:	2100      	movs	r1, #0
 80040d6:	f381 8811 	msr	BASEPRI, r1
 80040da:	2330      	movs	r3, #48	; 0x30
 80040dc:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 80040e0:	68a3      	ldr	r3, [r4, #8]
 80040e2:	3301      	adds	r3, #1
 80040e4:	428b      	cmp	r3, r1
 80040e6:	60a3      	str	r3, [r4, #8]
 80040e8:	dd03      	ble.n	80040f2 <thread3+0x32>
 80040ea:	2300      	movs	r3, #0
 80040ec:	f383 8811 	msr	BASEPRI, r3
}
 80040f0:	bd10      	pop	{r4, pc}
  ch_queue_t *p = qp->next;
 80040f2:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 80040f4:	6803      	ldr	r3, [r0, #0]
 80040f6:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 80040f8:	605c      	str	r4, [r3, #4]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 80040fa:	f7ff ff29 	bl	8003f50 <chSchWakeupS>
 80040fe:	2300      	movs	r3, #0
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	bd10      	pop	{r4, pc}
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <thread3+0x74>)
  p->prev       = qp->prev;
 8004108:	6862      	ldr	r2, [r4, #4]
 800410a:	68d9      	ldr	r1, [r3, #12]
  otp->state = newstate;
 800410c:	2005      	movs	r0, #5
 800410e:	e9c1 4200 	strd	r4, r2, [r1]
    currtp->u.wtsemp = sp;
 8004112:	634c      	str	r4, [r1, #52]	; 0x34
  p->prev->next = p;
 8004114:	6011      	str	r1, [r2, #0]
 8004116:	7708      	strb	r0, [r1, #28]
  ch_priority_queue_t *p = pqp->next;
 8004118:	6818      	ldr	r0, [r3, #0]
  qp->prev      = p;
 800411a:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 800411c:	6802      	ldr	r2, [r0, #0]
 800411e:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8004120:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8004122:	2201      	movs	r2, #1
 8004124:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8004126:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8004128:	f7fc f8ca 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 800412c:	e7d2      	b.n	80040d4 <thread3+0x14>
 800412e:	bf00      	nop
 8004130:	20000d0c 	.word	0x20000d0c
 8004134:	200009b8 	.word	0x200009b8
	...

08004140 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8004140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	4f18      	ldr	r7, [pc, #96]	; (80041a8 <bmk_thread1+0x68>)
 8004146:	2630      	movs	r6, #48	; 0x30
  otp->state = newstate;
 8004148:	f04f 090e 	mov.w	r9, #14
  ntp->state = CH_STATE_CURRENT;
 800414c:	f04f 0801 	mov.w	r8, #1
 8004150:	e00f      	b.n	8004172 <bmk_thread1+0x32>
  qp->next       = p->next;
 8004152:	6803      	ldr	r3, [r0, #0]
 8004154:	63eb      	str	r3, [r5, #60]	; 0x3c

  if (!chMsgIsPendingI(currtp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = threadref(ch_queue_fifo_remove(&currtp->msgqueue));
  tp->state = CH_STATE_SNDMSG;
 8004156:	220d      	movs	r2, #13
  qp->next->prev = qp;
 8004158:	605c      	str	r4, [r3, #4]
 800415a:	7702      	strb	r2, [r0, #28]
 800415c:	f38a 8811 	msr	BASEPRI, sl
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 8004160:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004162:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8004166:	4621      	mov	r1, r4
 8004168:	f7ff fef2 	bl	8003f50 <chSchWakeupS>
 800416c:	f38a 8811 	msr	BASEPRI, sl
  } while (msg);
 8004170:	b1bc      	cbz	r4, 80041a2 <bmk_thread1+0x62>
 8004172:	f386 8811 	msr	BASEPRI, r6
 8004176:	68fd      	ldr	r5, [r7, #12]
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 8004178:	462c      	mov	r4, r5
 800417a:	f04f 0a00 	mov.w	sl, #0
 800417e:	f854 0f3c 	ldr.w	r0, [r4, #60]!
  if (!chMsgIsPendingI(currtp)) {
 8004182:	42a0      	cmp	r0, r4
 8004184:	d1e5      	bne.n	8004152 <bmk_thread1+0x12>
  ch_priority_queue_t *p = pqp->next;
 8004186:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 8004188:	f885 901c 	strb.w	r9, [r5, #28]
  pqp->next       = p->next;
 800418c:	6803      	ldr	r3, [r0, #0]
 800418e:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8004190:	605f      	str	r7, [r3, #4]
  chSysSwitch(ntp, otp);
 8004192:	4629      	mov	r1, r5
  ntp->state = CH_STATE_CURRENT;
 8004194:	f880 801c 	strb.w	r8, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8004198:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800419a:	f7fc f891 	bl	80002c0 <__port_switch>
  ch_queue_t *p = qp->next;
 800419e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
}
 80041a0:	e7d7      	b.n	8004152 <bmk_thread1+0x12>
}
 80041a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a6:	bf00      	nop
 80041a8:	200009b8 	.word	0x200009b8
 80041ac:	00000000 	.word	0x00000000

080041b0 <chThdCreateSuspendedI>:
  stktop  = (uint8_t *)tdp->wend -
 80041b0:	6883      	ldr	r3, [r0, #8]
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80041b2:	b470      	push	{r4, r5, r6}
  tp->flags             = (tmode_t)0;
 80041b4:	2100      	movs	r1, #0
  tp->wabase = (void *)tdp->wbase;
 80041b6:	6844      	ldr	r4, [r0, #4]
 80041b8:	f843 4c4c 	str.w	r4, [r3, #-76]
  tp->state             = CH_STATE_WTSTART;
 80041bc:	2202      	movs	r2, #2
  tp->hdr.pqueue.prio   = tdp->prio;
 80041be:	68c4      	ldr	r4, [r0, #12]
  tp->flags             = (tmode_t)0;
 80041c0:	f803 1c43 	strb.w	r1, [r3, #-67]
  tp->state             = CH_STATE_WTSTART;
 80041c4:	f803 2c44 	strb.w	r2, [r3, #-68]
  if (tdp->owner != NULL) {
 80041c8:	6982      	ldr	r2, [r0, #24]
  tp->hdr.pqueue.prio   = tdp->prio;
 80041ca:	f843 4c58 	str.w	r4, [r3, #-88]
  tp->realprio          = tdp->prio;
 80041ce:	f843 4c14 	str.w	r4, [r3, #-20]
  tp->refs              = (trefs_t)1;
 80041d2:	2401      	movs	r4, #1
 80041d4:	f803 4c42 	strb.w	r4, [r3, #-66]
  tp->name              = tdp->name;
 80041d8:	6804      	ldr	r4, [r0, #0]
 80041da:	f843 4c40 	str.w	r4, [r3, #-64]
  PORT_SETUP_CONTEXT(tp, stkbase, tp, tdp->funcp, tdp->arg);
 80041de:	f1a3 0484 	sub.w	r4, r3, #132	; 0x84
 80041e2:	f843 4c54 	str.w	r4, [r3, #-84]
 80041e6:	e9d0 4004 	ldrd	r4, r0, [r0, #16]
 80041ea:	e943 4021 	strd	r4, r0, [r3, #-132]	; 0x84
    tp->owner           = currcore;
 80041ee:	4c14      	ldr	r4, [pc, #80]	; (8004240 <chThdCreateSuspendedI+0x90>)
  PORT_SETUP_CONTEXT(tp, stkbase, tp, tdp->funcp, tdp->arg);
 80041f0:	4d14      	ldr	r5, [pc, #80]	; (8004244 <chThdCreateSuspendedI+0x94>)
 80041f2:	f843 5c64 	str.w	r5, [r3, #-100]
    tp->owner           = currcore;
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	bf08      	it	eq
 80041fa:	4622      	moveq	r2, r4
  tp->object            = NULL;
 80041fc:	e943 110d 	strd	r1, r1, [r3, #-52]	; 0x34
  tp->epending          = (eventmask_t)0;
 8004200:	e943 1107 	strd	r1, r1, [r3, #-28]
  ch_queue_init(&tp->msgqueue);
 8004204:	f1a3 0124 	sub.w	r1, r3, #36	; 0x24
  qp->prev = qp;
 8004208:	f843 1c20 	str.w	r1, [r3, #-32]
  p->prev       = qp->prev;
 800420c:	6b54      	ldr	r4, [r2, #52]	; 0x34
  qp->next = qp;
 800420e:	f843 1c24 	str.w	r1, [r3, #-36]
  ch_list_init(&tp->waiting);
 8004212:	f1a3 0528 	sub.w	r5, r3, #40	; 0x28
  REG_INSERT(tp->owner, tp);
 8004216:	f1a3 013c 	sub.w	r1, r3, #60	; 0x3c
 800421a:	f102 0630 	add.w	r6, r2, #48	; 0x30
  p->next       = qp;
 800421e:	f843 6c3c 	str.w	r6, [r3, #-60]
  lp->next = lp;
 8004222:	f843 5c28 	str.w	r5, [r3, #-40]
  p->prev       = qp->prev;
 8004226:	f843 4c38 	str.w	r4, [r3, #-56]
  tp->waend  = (void *)tdp->wend;
 800422a:	f843 3c48 	str.w	r3, [r3, #-72]
  if (tdp->owner != NULL) {
 800422e:	f843 2c50 	str.w	r2, [r3, #-80]
}
 8004232:	f1a3 0060 	sub.w	r0, r3, #96	; 0x60
  p->prev->next = p;
 8004236:	6021      	str	r1, [r4, #0]
  qp->prev      = p;
 8004238:	6351      	str	r1, [r2, #52]	; 0x34
 800423a:	bc70      	pop	{r4, r5, r6}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	200009b8 	.word	0x200009b8
 8004244:	080002d1 	.word	0x080002d1
	...

08004250 <oslib_test_005_001_execute.lto_priv.0>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4b3e      	ldr	r3, [pc, #248]	; (800434c <oslib_test_005_001_execute.lto_priv.0+0xfc>)
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
 8004254:	4d3e      	ldr	r5, [pc, #248]	; (8004350 <oslib_test_005_001_execute.lto_priv.0+0x100>)
  {
    thread_descriptor_t td = {
 8004256:	4a3f      	ldr	r2, [pc, #252]	; (8004354 <oslib_test_005_001_execute.lto_priv.0+0x104>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004258:	68db      	ldr	r3, [r3, #12]
static void oslib_test_005_001_execute(void) {
 800425a:	b08c      	sub	sp, #48	; 0x30
  test_set_step(1);
 800425c:	2101      	movs	r1, #1
 800425e:	6029      	str	r1, [r5, #0]
    thread_descriptor_t td = {
 8004260:	493d      	ldr	r1, [pc, #244]	; (8004358 <oslib_test_005_001_execute.lto_priv.0+0x108>)
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 8004262:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td = {
 8004264:	9105      	str	r1, [sp, #20]
 8004266:	f502 7108 	add.w	r1, r2, #544	; 0x220
 800426a:	e9cd 2106 	strd	r2, r1, [sp, #24]
 800426e:	4a3b      	ldr	r2, [pc, #236]	; (800435c <oslib_test_005_001_execute.lto_priv.0+0x10c>)
 8004270:	2600      	movs	r6, #0
      .prio  = chThdGetPriorityX() + 1,
 8004272:	3301      	adds	r3, #1
    thread_descriptor_t td = {
 8004274:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004278:	960b      	str	r6, [sp, #44]	; 0x2c
 800427a:	960a      	str	r6, [sp, #40]	; 0x28
 800427c:	2330      	movs	r3, #48	; 0x30
 800427e:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 8004282:	a805      	add	r0, sp, #20
 8004284:	f7ff ff94 	bl	80041b0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8004288:	4631      	mov	r1, r6
  tp = chThdCreateSuspendedI(tdp);
 800428a:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800428c:	f7ff fe60 	bl	8003f50 <chSchWakeupS>
 8004290:	f386 8811 	msr	BASEPRI, r6
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 8004294:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8004296:	4a32      	ldr	r2, [pc, #200]	; (8004360 <oslib_test_005_001_execute.lto_priv.0+0x110>)
 8004298:	4932      	ldr	r1, [pc, #200]	; (8004364 <oslib_test_005_001_execute.lto_priv.0+0x114>)
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	4620      	mov	r0, r4
 800429e:	f7fd fc27 	bl	8001af0 <chDelegateCallVeneer>
  if (!condition) {
 80042a2:	f245 53aa 	movw	r3, #21930	; 0x55aa
 80042a6:	4298      	cmp	r0, r3
 80042a8:	d148      	bne.n	800433c <oslib_test_005_001_execute.lto_priv.0+0xec>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 80042aa:	4a2f      	ldr	r2, [pc, #188]	; (8004368 <oslib_test_005_001_execute.lto_priv.0+0x118>)
 80042ac:	492f      	ldr	r1, [pc, #188]	; (800436c <oslib_test_005_001_execute.lto_priv.0+0x11c>)
 80042ae:	2341      	movs	r3, #65	; 0x41
 80042b0:	4620      	mov	r0, r4
 80042b2:	f7fd fc1d 	bl	8001af0 <chDelegateCallVeneer>
 80042b6:	2841      	cmp	r0, #65	; 0x41
 80042b8:	d140      	bne.n	800433c <oslib_test_005_001_execute.lto_priv.0+0xec>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 80042ba:	2343      	movs	r3, #67	; 0x43
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4a2c      	ldr	r2, [pc, #176]	; (8004370 <oslib_test_005_001_execute.lto_priv.0+0x120>)
 80042c0:	492c      	ldr	r1, [pc, #176]	; (8004374 <oslib_test_005_001_execute.lto_priv.0+0x124>)
 80042c2:	2342      	movs	r3, #66	; 0x42
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7fd fc13 	bl	8001af0 <chDelegateCallVeneer>
 80042ca:	2842      	cmp	r0, #66	; 0x42
 80042cc:	d136      	bne.n	800433c <oslib_test_005_001_execute.lto_priv.0+0xec>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 80042ce:	2146      	movs	r1, #70	; 0x46
 80042d0:	2345      	movs	r3, #69	; 0x45
 80042d2:	e9cd 3100 	strd	r3, r1, [sp]
 80042d6:	4a28      	ldr	r2, [pc, #160]	; (8004378 <oslib_test_005_001_execute.lto_priv.0+0x128>)
 80042d8:	4928      	ldr	r1, [pc, #160]	; (800437c <oslib_test_005_001_execute.lto_priv.0+0x12c>)
 80042da:	2344      	movs	r3, #68	; 0x44
 80042dc:	4620      	mov	r0, r4
 80042de:	f7fd fc07 	bl	8001af0 <chDelegateCallVeneer>
 80042e2:	2844      	cmp	r0, #68	; 0x44
 80042e4:	d12a      	bne.n	800433c <oslib_test_005_001_execute.lto_priv.0+0xec>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 80042e6:	214a      	movs	r1, #74	; 0x4a
 80042e8:	2249      	movs	r2, #73	; 0x49
 80042ea:	2348      	movs	r3, #72	; 0x48
 80042ec:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	4a23      	ldr	r2, [pc, #140]	; (8004380 <oslib_test_005_001_execute.lto_priv.0+0x130>)
 80042f4:	4923      	ldr	r1, [pc, #140]	; (8004384 <oslib_test_005_001_execute.lto_priv.0+0x134>)
 80042f6:	2347      	movs	r3, #71	; 0x47
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7fd fbf9 	bl	8001af0 <chDelegateCallVeneer>
 80042fe:	2847      	cmp	r0, #71	; 0x47
 8004300:	d11c      	bne.n	800433c <oslib_test_005_001_execute.lto_priv.0+0xec>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8004302:	4a21      	ldr	r2, [pc, #132]	; (8004388 <oslib_test_005_001_execute.lto_priv.0+0x138>)
 8004304:	4917      	ldr	r1, [pc, #92]	; (8004364 <oslib_test_005_001_execute.lto_priv.0+0x114>)
 8004306:	4620      	mov	r0, r4
 8004308:	f7fd fbf2 	bl	8001af0 <chDelegateCallVeneer>
 800430c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004310:	4298      	cmp	r0, r3
 8004312:	d113      	bne.n	800433c <oslib_test_005_001_execute.lto_priv.0+0xec>
    test_assert(retval == (int)'G', "invalid return value");

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func_end);
    test_assert(retval == 0xAA55, "invalid return value");

    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 8004314:	491d      	ldr	r1, [pc, #116]	; (800438c <oslib_test_005_001_execute.lto_priv.0+0x13c>)
 8004316:	481e      	ldr	r0, [pc, #120]	; (8004390 <oslib_test_005_001_execute.lto_priv.0+0x140>)
 8004318:	f7fc fb7a 	bl	8000a10 <__test_assert_sequence>
 800431c:	b998      	cbnz	r0, 8004346 <oslib_test_005_001_execute.lto_priv.0+0xf6>
  }
  test_end_step(2);

  /* [5.1.3] Waiting for the thread to terminate-.*/
  test_set_step(3);
 800431e:	2303      	movs	r3, #3
  {
    msg_t msg = chThdWait(tp);
 8004320:	4620      	mov	r0, r4
  test_set_step(3);
 8004322:	602b      	str	r3, [r5, #0]
    msg_t msg = chThdWait(tp);
 8004324:	f7fd f9dc 	bl	80016e0 <chThdWait>
 8004328:	f640 73a5 	movw	r3, #4005	; 0xfa5
 800432c:	4298      	cmp	r0, r3
 800432e:	d00a      	beq.n	8004346 <oslib_test_005_001_execute.lto_priv.0+0xf6>
  chtest.failure_message = msg;
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <oslib_test_005_001_execute.lto_priv.0+0x144>)
 8004332:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004334:	f240 1201 	movw	r2, #257	; 0x101
 8004338:	80aa      	strh	r2, [r5, #4]
    return __test_fail(msg);
 800433a:	e004      	b.n	8004346 <oslib_test_005_001_execute.lto_priv.0+0xf6>
  chtest.failure_message = msg;
 800433c:	4b16      	ldr	r3, [pc, #88]	; (8004398 <oslib_test_005_001_execute.lto_priv.0+0x148>)
 800433e:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004340:	f240 1201 	movw	r2, #257	; 0x101
 8004344:	80aa      	strh	r2, [r5, #4]
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 8004346:	b00c      	add	sp, #48	; 0x30
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	bf00      	nop
 800434c:	200009b8 	.word	0x200009b8
 8004350:	20000ab4 	.word	0x20000ab4
 8004354:	20001be0 	.word	0x20001be0
 8004358:	0800bc44 	.word	0x0800bc44
 800435c:	08005c31 	.word	0x08005c31
 8004360:	080011b1 	.word	0x080011b1
 8004364:	08000931 	.word	0x08000931
 8004368:	080011d1 	.word	0x080011d1
 800436c:	08000941 	.word	0x08000941
 8004370:	080011f1 	.word	0x080011f1
 8004374:	08000961 	.word	0x08000961
 8004378:	08001221 	.word	0x08001221
 800437c:	08000981 	.word	0x08000981
 8004380:	08001261 	.word	0x08001261
 8004384:	080009a1 	.word	0x080009a1
 8004388:	080012b1 	.word	0x080012b1
 800438c:	0800bb7c 	.word	0x0800bb7c
 8004390:	0800bc68 	.word	0x0800bc68
 8004394:	0800bc78 	.word	0x0800bc78
 8004398:	0800bc50 	.word	0x0800bc50
 800439c:	00000000 	.word	0x00000000

080043a0 <oslib_test_004_001_execute.lto_priv.0>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 80043a4:	4f67      	ldr	r7, [pc, #412]	; (8004544 <oslib_test_004_001_execute.lto_priv.0+0x1a4>)
  mp->next = NULL;
 80043a6:	4c68      	ldr	r4, [pc, #416]	; (8004548 <oslib_test_004_001_execute.lto_priv.0+0x1a8>)
  sp->cnt = n;
 80043a8:	4e68      	ldr	r6, [pc, #416]	; (800454c <oslib_test_004_001_execute.lto_priv.0+0x1ac>)
 80043aa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8004550 <oslib_test_004_001_execute.lto_priv.0+0x1b0>
 80043ae:	2301      	movs	r3, #1
 80043b0:	f04f 0a00 	mov.w	sl, #0
  mp->align = align;
 80043b4:	2504      	movs	r5, #4
 80043b6:	603b      	str	r3, [r7, #0]
  mp->object_size = size;
 80043b8:	2308      	movs	r3, #8
 80043ba:	e9c4 a303 	strd	sl, r3, [r4, #12]
  mp->provider = provider;
 80043be:	e9c4 5a05 	strd	r5, sl, [r4, #20]
  qp->prev = qp;
 80043c2:	e9c4 4400 	strd	r4, r4, [r4]
static void oslib_test_004_001_execute(void) {
 80043c6:	b08f      	sub	sp, #60	; 0x3c
 80043c8:	f8c4 a008 	str.w	sl, [r4, #8]
 80043cc:	f04f 0830 	mov.w	r8, #48	; 0x30
 80043d0:	e00f      	b.n	80043f2 <oslib_test_004_001_execute.lto_priv.0+0x52>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80043d2:	f8d9 2000 	ldr.w	r2, [r9]
 80043d6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80043da:	6892      	ldr	r2, [r2, #8]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d901      	bls.n	80043e6 <oslib_test_004_001_execute.lto_priv.0+0x46>
    __sch_reschedule_ahead();
 80043e2:	f7fe f90d 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 80043e6:	f38a 8811 	msr	BASEPRI, sl
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80043ea:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 80043ec:	3d01      	subs	r5, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80043ee:	441e      	add	r6, r3
  while (n != 0U) {
 80043f0:	d01d      	beq.n	800442e <oslib_test_004_001_execute.lto_priv.0+0x8e>
 80043f2:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 80043f6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 80043fa:	3301      	adds	r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004402:	6032      	str	r2, [r6, #0]
 8004404:	dce5      	bgt.n	80043d2 <oslib_test_004_001_execute.lto_priv.0+0x32>
  ch_queue_t *p = qp->next;
 8004406:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 8004408:	6813      	ldr	r3, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800440a:	6890      	ldr	r0, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800440c:	6911      	ldr	r1, [r2, #16]
  qp->next       = p->next;
 800440e:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8004410:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 8004412:	f8c2 a034 	str.w	sl, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8004416:	f882 a01c 	strb.w	sl, [r2, #28]
    pqp = pqp->next;
 800441a:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800441c:	688b      	ldr	r3, [r1, #8]
 800441e:	4283      	cmp	r3, r0
 8004420:	d2fb      	bcs.n	800441a <oslib_test_004_001_execute.lto_priv.0+0x7a>
  p->prev       = pqp->prev;
 8004422:	684b      	ldr	r3, [r1, #4]
 8004424:	e9c2 1300 	strd	r1, r3, [r2]
  p->prev->next = p;
 8004428:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800442a:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800442c:	e7d1      	b.n	80043d2 <oslib_test_004_001_execute.lto_priv.0+0x32>
  mbp->buffer = buf;
 800442e:	4b49      	ldr	r3, [pc, #292]	; (8004554 <oslib_test_004_001_execute.lto_priv.0+0x1b4>)
 8004430:	61e3      	str	r3, [r4, #28]
  mbp->wrptr  = buf;
 8004432:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  mbp->top    = &buf[n];
 8004436:	3310      	adds	r3, #16
 8004438:	6223      	str	r3, [r4, #32]
 800443a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  qp->next = qp;
 800443e:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004558 <oslib_test_004_001_execute.lto_priv.0+0x1b8>
  {
    thread_descriptor_t td1 = {
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 8004442:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td1 = {
 8004444:	4e45      	ldr	r6, [pc, #276]	; (800455c <oslib_test_004_001_execute.lto_priv.0+0x1bc>)
  mbp->cnt    = (size_t)0;
 8004446:	62e5      	str	r5, [r4, #44]	; 0x2c
      .prio  = chThdGetPriorityX() - 1,
 8004448:	3b01      	subs	r3, #1
    thread_descriptor_t td1 = {
 800444a:	930a      	str	r3, [sp, #40]	; 0x28
 800444c:	4b44      	ldr	r3, [pc, #272]	; (8004560 <oslib_test_004_001_execute.lto_priv.0+0x1c0>)
 800444e:	9308      	str	r3, [sp, #32]
 8004450:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8004454:	9309      	str	r3, [sp, #36]	; 0x24
 8004456:	f10b 0308 	add.w	r3, fp, #8
  qp->prev = qp;
 800445a:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  test_set_step(2);
 800445e:	2302      	movs	r3, #2
 8004460:	603b      	str	r3, [r7, #0]
    thread_descriptor_t td1 = {
 8004462:	4b40      	ldr	r3, [pc, #256]	; (8004564 <oslib_test_004_001_execute.lto_priv.0+0x1c4>)
  mbp->reset  = false;
 8004464:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 8004468:	e9c4 bb0d 	strd	fp, fp, [r4, #52]	; 0x34
 800446c:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 8004470:	9307      	str	r3, [sp, #28]
 8004472:	960b      	str	r6, [sp, #44]	; 0x2c
 8004474:	2430      	movs	r4, #48	; 0x30
 8004476:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 800447a:	a807      	add	r0, sp, #28
 800447c:	f7ff fe98 	bl	80041b0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8004480:	4629      	mov	r1, r5
  tp = chThdCreateSuspendedI(tdp);
 8004482:	4680      	mov	r8, r0
  chSchWakeupS(tp, MSG_OK);
 8004484:	f7ff fd64 	bl	8003f50 <chSchWakeupS>
 8004488:	f385 8811 	msr	BASEPRI, r5
 800448c:	f8d9 300c 	ldr.w	r3, [r9, #12]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp1 = chThdCreate(&td1);

    thread_descriptor_t td2 = {
 8004490:	9505      	str	r5, [sp, #20]
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 8004492:	689b      	ldr	r3, [r3, #8]
    thread_descriptor_t td2 = {
 8004494:	9604      	str	r6, [sp, #16]
      .prio  = chThdGetPriorityX() - 2,
 8004496:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 8004498:	9303      	str	r3, [sp, #12]
 800449a:	4b33      	ldr	r3, [pc, #204]	; (8004568 <oslib_test_004_001_execute.lto_priv.0+0x1c8>)
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	4b31      	ldr	r3, [pc, #196]	; (800456c <oslib_test_004_001_execute.lto_priv.0+0x1cc>)
 80044a6:	9506      	str	r5, [sp, #24]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 80044ae:	4668      	mov	r0, sp
 80044b0:	f7ff fe7e 	bl	80041b0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 80044b4:	4629      	mov	r1, r5
  tp = chThdCreateSuspendedI(tdp);
 80044b6:	4606      	mov	r6, r0
  chSchWakeupS(tp, MSG_OK);
 80044b8:	f7ff fd4a 	bl	8003f50 <chSchWakeupS>
 80044bc:	f385 8811 	msr	BASEPRI, r5
    tp2 = chThdCreate(&td2);
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 80044c0:	2303      	movs	r3, #3
 80044c2:	4c2b      	ldr	r4, [pc, #172]	; (8004570 <oslib_test_004_001_execute.lto_priv.0+0x1d0>)
 80044c4:	603b      	str	r3, [r7, #0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80044c6:	f1ab 0534 	sub.w	r5, fp, #52	; 0x34
 80044ca:	f04f 0a61 	mov.w	sl, #97	; 0x61
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80044ce:	f1ab 0b18 	sub.w	fp, fp, #24
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80044d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044d6:	4628      	mov	r0, r5
 80044d8:	f7ff f922 	bl	8003720 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80044dc:	2200      	movs	r2, #0
    unsigned i;
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
 80044de:	e9c0 4a00 	strd	r4, sl, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80044e2:	4601      	mov	r1, r0
    for (i = 0; i < 8; i++) {
 80044e4:	f10a 0a01 	add.w	sl, sl, #1
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80044e8:	4658      	mov	r0, fp
 80044ea:	f7fe ff59 	bl	80033a0 <chMBPostTimeout>
 80044ee:	f1ba 0f69 	cmp.w	sl, #105	; 0x69
 80044f2:	d1ee      	bne.n	80044d2 <oslib_test_004_001_execute.lto_priv.0+0x132>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 80044f4:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80044f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044fa:	4813      	ldr	r0, [pc, #76]	; (8004548 <oslib_test_004_001_execute.lto_priv.0+0x1a8>)
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	f7ff f90f 	bl	8003720 <chGuardedPoolAllocTimeout>
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 8004502:	2400      	movs	r4, #0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8004504:	4622      	mov	r2, r4
    jdp->jobarg  = NULL;
 8004506:	e9c0 4400 	strd	r4, r4, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800450a:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800450c:	4819      	ldr	r0, [pc, #100]	; (8004574 <oslib_test_004_001_execute.lto_priv.0+0x1d4>)
 800450e:	f7fe ff47 	bl	80033a0 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8004512:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004516:	480c      	ldr	r0, [pc, #48]	; (8004548 <oslib_test_004_001_execute.lto_priv.0+0x1a8>)
 8004518:	f7ff f902 	bl	8003720 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800451c:	4622      	mov	r2, r4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800451e:	4601      	mov	r1, r0
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 8004520:	e9c0 4400 	strd	r4, r4, [r0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8004524:	4813      	ldr	r0, [pc, #76]	; (8004574 <oslib_test_004_001_execute.lto_priv.0+0x1d4>)
 8004526:	f7fe ff3b 	bl	80033a0 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 800452a:	4640      	mov	r0, r8
 800452c:	f7fd f8d8 	bl	80016e0 <chThdWait>
    (void) chThdWait(tp2);
 8004530:	4630      	mov	r0, r6
 8004532:	f7fd f8d5 	bl	80016e0 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8004536:	4910      	ldr	r1, [pc, #64]	; (8004578 <oslib_test_004_001_execute.lto_priv.0+0x1d8>)
 8004538:	4810      	ldr	r0, [pc, #64]	; (800457c <oslib_test_004_001_execute.lto_priv.0+0x1dc>)
  }
  test_end_step(4);
}
 800453a:	b00f      	add	sp, #60	; 0x3c
 800453c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8004540:	f7fc ba66 	b.w	8000a10 <__test_assert_sequence>
 8004544:	20000ab4 	.word	0x20000ab4
 8004548:	20000b88 	.word	0x20000b88
 800454c:	20000b68 	.word	0x20000b68
 8004550:	200009b8 	.word	0x200009b8
 8004554:	20000bec 	.word	0x20000bec
 8004558:	20000bbc 	.word	0x20000bbc
 800455c:	08003681 	.word	0x08003681
 8004560:	200017a0 	.word	0x200017a0
 8004564:	0800bc8c 	.word	0x0800bc8c
 8004568:	200019c0 	.word	0x200019c0
 800456c:	0800bc98 	.word	0x0800bc98
 8004570:	08002591 	.word	0x08002591
 8004574:	20000ba4 	.word	0x20000ba4
 8004578:	0800bb7c 	.word	0x0800bb7c
 800457c:	0800bbac 	.word	0x0800bbac

08004580 <chThdCreateStatic>:
                            tprio_t prio, tfunc_t func, void *arg) {
 8004580:	b570      	push	{r4, r5, r6, lr}
  wend = (uint8_t *)wbase + wsize;
 8004582:	1844      	adds	r4, r0, r1
                            tprio_t prio, tfunc_t func, void *arg) {
 8004584:	9904      	ldr	r1, [sp, #16]
  tp->wabase = (void *)tdp->wbase;
 8004586:	f844 0c4c 	str.w	r0, [r4, #-76]
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
 800458a:	4823      	ldr	r0, [pc, #140]	; (8004618 <chThdCreateStatic+0x98>)
 800458c:	f844 1c80 	str.w	r1, [r4, #-128]
 8004590:	f844 0c64 	str.w	r0, [r4, #-100]
    tp->owner           = tdp->owner;
 8004594:	4921      	ldr	r1, [pc, #132]	; (800461c <chThdCreateStatic+0x9c>)
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
 8004596:	f844 3c84 	str.w	r3, [r4, #-132]
  ch_list_init(&tp->waiting);
 800459a:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
  tp->state             = CH_STATE_WTSTART;
 800459e:	2302      	movs	r3, #2
  tp->flags             = (tmode_t)0;
 80045a0:	2500      	movs	r5, #0
  tp->hdr.pqueue.prio   = tdp->prio;
 80045a2:	f844 2c58 	str.w	r2, [r4, #-88]
  tp->state             = CH_STATE_WTSTART;
 80045a6:	f804 3c44 	strb.w	r3, [r4, #-68]
  lp->next = lp;
 80045aa:	f844 0c28 	str.w	r0, [r4, #-40]
  ch_queue_init(&tp->msgqueue);
 80045ae:	f1a4 0324 	sub.w	r3, r4, #36	; 0x24
    tp->owner           = tdp->owner;
 80045b2:	f844 1c50 	str.w	r1, [r4, #-80]
  tp->realprio          = tdp->prio;
 80045b6:	f844 2c14 	str.w	r2, [r4, #-20]
  tp->name              = tdp->name;
 80045ba:	4919      	ldr	r1, [pc, #100]	; (8004620 <chThdCreateStatic+0xa0>)
  tp->waend  = (void *)tdp->wend;
 80045bc:	f844 4c48 	str.w	r4, [r4, #-72]
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
 80045c0:	f1a4 0284 	sub.w	r2, r4, #132	; 0x84
  tp->refs              = (trefs_t)1;
 80045c4:	2001      	movs	r0, #1
  qp->prev = qp;
 80045c6:	e944 3309 	strd	r3, r3, [r4, #-36]	; 0x24
  tp->flags             = (tmode_t)0;
 80045ca:	f804 5c43 	strb.w	r5, [r4, #-67]
  tp->object            = NULL;
 80045ce:	e944 550d 	strd	r5, r5, [r4, #-52]	; 0x34
  tp->refs              = (trefs_t)1;
 80045d2:	f804 0c42 	strb.w	r0, [r4, #-66]
  tp->epending          = (eventmask_t)0;
 80045d6:	e944 5507 	strd	r5, r5, [r4, #-28]
  tp->name              = tdp->name;
 80045da:	f844 1c40 	str.w	r1, [r4, #-64]
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
 80045de:	f844 2c54 	str.w	r2, [r4, #-84]
 80045e2:	2330      	movs	r3, #48	; 0x30
  stktop  = wend - MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN);
 80045e4:	f1a4 0660 	sub.w	r6, r4, #96	; 0x60
 80045e8:	f383 8811 	msr	BASEPRI, r3
  REG_INSERT(tp->owner, tp);
 80045ec:	f854 3c50 	ldr.w	r3, [r4, #-80]
  p->prev       = qp->prev;
 80045f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045f2:	f844 1c38 	str.w	r1, [r4, #-56]
 80045f6:	f1a4 023c 	sub.w	r2, r4, #60	; 0x3c
 80045fa:	f103 0030 	add.w	r0, r3, #48	; 0x30
  p->next       = qp;
 80045fe:	f844 0c3c 	str.w	r0, [r4, #-60]
  p->prev->next = p;
 8004602:	600a      	str	r2, [r1, #0]
  chSchWakeupS(tp, MSG_OK);
 8004604:	4630      	mov	r0, r6
 8004606:	4629      	mov	r1, r5
  qp->prev      = p;
 8004608:	635a      	str	r2, [r3, #52]	; 0x34
 800460a:	f7ff fca1 	bl	8003f50 <chSchWakeupS>
 800460e:	f385 8811 	msr	BASEPRI, r5
}
 8004612:	4630      	mov	r0, r6
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	bf00      	nop
 8004618:	080002d1 	.word	0x080002d1
 800461c:	200009b8 	.word	0x200009b8
 8004620:	0800bca4 	.word	0x0800bca4
	...

08004630 <rt_test_005_002_execute.lto_priv.0>:
static void rt_test_005_002_execute(void) {
 8004630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return __sch_get_currthread();
 8004634:	4d81      	ldr	r5, [pc, #516]	; (800483c <rt_test_005_002_execute.lto_priv.0+0x20c>)
  test_set_step(1);
 8004636:	f8df a208 	ldr.w	sl, [pc, #520]	; 8004840 <rt_test_005_002_execute.lto_priv.0+0x210>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800463a:	68eb      	ldr	r3, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800463c:	4881      	ldr	r0, [pc, #516]	; (8004844 <rt_test_005_002_execute.lto_priv.0+0x214>)
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	4b81      	ldr	r3, [pc, #516]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004642:	4c82      	ldr	r4, [pc, #520]	; (800484c <rt_test_005_002_execute.lto_priv.0+0x21c>)
static void rt_test_005_002_execute(void) {
 8004644:	b083      	sub	sp, #12
  test_set_step(1);
 8004646:	2101      	movs	r1, #1
 8004648:	f8ca 1000 	str.w	r1, [sl]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800464c:	4980      	ldr	r1, [pc, #512]	; (8004850 <rt_test_005_002_execute.lto_priv.0+0x220>)
 800464e:	9100      	str	r1, [sp, #0]
 8004650:	3a05      	subs	r2, #5
 8004652:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004656:	f7ff ff93 	bl	8004580 <chThdCreateStatic>
 800465a:	68eb      	ldr	r3, [r5, #12]
 800465c:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4b7c      	ldr	r3, [pc, #496]	; (8004854 <rt_test_005_002_execute.lto_priv.0+0x224>)
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	3a04      	subs	r2, #4
 8004666:	4b78      	ldr	r3, [pc, #480]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004668:	487b      	ldr	r0, [pc, #492]	; (8004858 <rt_test_005_002_execute.lto_priv.0+0x228>)
 800466a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800466e:	f7ff ff87 	bl	8004580 <chThdCreateStatic>
 8004672:	68eb      	ldr	r3, [r5, #12]
 8004674:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	4b78      	ldr	r3, [pc, #480]	; (800485c <rt_test_005_002_execute.lto_priv.0+0x22c>)
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	3a03      	subs	r2, #3
 800467e:	4b72      	ldr	r3, [pc, #456]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004680:	4877      	ldr	r0, [pc, #476]	; (8004860 <rt_test_005_002_execute.lto_priv.0+0x230>)
 8004682:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004686:	f7ff ff7b 	bl	8004580 <chThdCreateStatic>
 800468a:	68eb      	ldr	r3, [r5, #12]
 800468c:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	4b74      	ldr	r3, [pc, #464]	; (8004864 <rt_test_005_002_execute.lto_priv.0+0x234>)
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	3a02      	subs	r2, #2
 8004696:	4b6c      	ldr	r3, [pc, #432]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004698:	4873      	ldr	r0, [pc, #460]	; (8004868 <rt_test_005_002_execute.lto_priv.0+0x238>)
 800469a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800469e:	f7ff ff6f 	bl	8004580 <chThdCreateStatic>
 80046a2:	68eb      	ldr	r3, [r5, #12]
 80046a4:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	4b70      	ldr	r3, [pc, #448]	; (800486c <rt_test_005_002_execute.lto_priv.0+0x23c>)
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4870      	ldr	r0, [pc, #448]	; (8004870 <rt_test_005_002_execute.lto_priv.0+0x240>)
 80046ae:	4b66      	ldr	r3, [pc, #408]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 80046b0:	3a01      	subs	r2, #1
 80046b2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80046b6:	f7ff ff63 	bl	8004580 <chThdCreateStatic>
 80046ba:	f104 0614 	add.w	r6, r4, #20
 80046be:	6120      	str	r0, [r4, #16]
 80046c0:	4627      	mov	r7, r4
 80046c2:	46a1      	mov	r9, r4
      threads[i] = NULL;
 80046c4:	f04f 0800 	mov.w	r8, #0
    if (threads[i] != NULL) {
 80046c8:	f859 0b04 	ldr.w	r0, [r9], #4
 80046cc:	b118      	cbz	r0, 80046d6 <rt_test_005_002_execute.lto_priv.0+0xa6>
      chThdWait(threads[i]);
 80046ce:	f7fd f807 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 80046d2:	f849 8c04 	str.w	r8, [r9, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80046d6:	45b1      	cmp	r9, r6
 80046d8:	d1f6      	bne.n	80046c8 <rt_test_005_002_execute.lto_priv.0+0x98>
    test_assert_sequence("ABCDE", "invalid sequence");
 80046da:	4966      	ldr	r1, [pc, #408]	; (8004874 <rt_test_005_002_execute.lto_priv.0+0x244>)
 80046dc:	4866      	ldr	r0, [pc, #408]	; (8004878 <rt_test_005_002_execute.lto_priv.0+0x248>)
 80046de:	f7fc f997 	bl	8000a10 <__test_assert_sequence>
 80046e2:	4680      	mov	r8, r0
 80046e4:	b110      	cbz	r0, 80046ec <rt_test_005_002_execute.lto_priv.0+0xbc>
}
 80046e6:	b003      	add	sp, #12
 80046e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ec:	68eb      	ldr	r3, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80046ee:	4860      	ldr	r0, [pc, #384]	; (8004870 <rt_test_005_002_execute.lto_priv.0+0x240>)
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	4b5e      	ldr	r3, [pc, #376]	; (800486c <rt_test_005_002_execute.lto_priv.0+0x23c>)
 80046f4:	9300      	str	r3, [sp, #0]
  test_set_step(2);
 80046f6:	f04f 0c02 	mov.w	ip, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80046fa:	4b53      	ldr	r3, [pc, #332]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
  test_set_step(2);
 80046fc:	f8ca c000 	str.w	ip, [sl]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004700:	3a01      	subs	r2, #1
 8004702:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004706:	f7ff ff3b 	bl	8004580 <chThdCreateStatic>
 800470a:	68eb      	ldr	r3, [r5, #12]
 800470c:	6138      	str	r0, [r7, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	4b54      	ldr	r3, [pc, #336]	; (8004864 <rt_test_005_002_execute.lto_priv.0+0x234>)
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	3a02      	subs	r2, #2
 8004716:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004718:	4853      	ldr	r0, [pc, #332]	; (8004868 <rt_test_005_002_execute.lto_priv.0+0x238>)
 800471a:	f8df b160 	ldr.w	fp, [pc, #352]	; 800487c <rt_test_005_002_execute.lto_priv.0+0x24c>
 800471e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004722:	f7ff ff2d 	bl	8004580 <chThdCreateStatic>
 8004726:	68eb      	ldr	r3, [r5, #12]
 8004728:	60f8      	str	r0, [r7, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	4b4b      	ldr	r3, [pc, #300]	; (800485c <rt_test_005_002_execute.lto_priv.0+0x22c>)
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	3a03      	subs	r2, #3
 8004732:	4b45      	ldr	r3, [pc, #276]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004734:	484a      	ldr	r0, [pc, #296]	; (8004860 <rt_test_005_002_execute.lto_priv.0+0x230>)
 8004736:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800473a:	f7ff ff21 	bl	8004580 <chThdCreateStatic>
 800473e:	68eb      	ldr	r3, [r5, #12]
 8004740:	60b8      	str	r0, [r7, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	4b43      	ldr	r3, [pc, #268]	; (8004854 <rt_test_005_002_execute.lto_priv.0+0x224>)
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	3a04      	subs	r2, #4
 800474a:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 800474c:	4842      	ldr	r0, [pc, #264]	; (8004858 <rt_test_005_002_execute.lto_priv.0+0x228>)
 800474e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004752:	f7ff ff15 	bl	8004580 <chThdCreateStatic>
 8004756:	68eb      	ldr	r3, [r5, #12]
 8004758:	6078      	str	r0, [r7, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	4b3c      	ldr	r3, [pc, #240]	; (8004850 <rt_test_005_002_execute.lto_priv.0+0x220>)
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4838      	ldr	r0, [pc, #224]	; (8004844 <rt_test_005_002_execute.lto_priv.0+0x214>)
 8004762:	4b39      	ldr	r3, [pc, #228]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004764:	3a05      	subs	r2, #5
 8004766:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800476a:	f7ff ff09 	bl	8004580 <chThdCreateStatic>
 800476e:	6038      	str	r0, [r7, #0]
 8004770:	f1ab 0710 	sub.w	r7, fp, #16
 8004774:	46b9      	mov	r9, r7
    if (threads[i] != NULL) {
 8004776:	b118      	cbz	r0, 8004780 <rt_test_005_002_execute.lto_priv.0+0x150>
      chThdWait(threads[i]);
 8004778:	f7fc ffb2 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 800477c:	f8c9 8000 	str.w	r8, [r9]
  for (i = 0; i < MAX_THREADS; i++)
 8004780:	45d9      	cmp	r9, fp
 8004782:	d002      	beq.n	800478a <rt_test_005_002_execute.lto_priv.0+0x15a>
    if (threads[i] != NULL) {
 8004784:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8004788:	e7f5      	b.n	8004776 <rt_test_005_002_execute.lto_priv.0+0x146>
    test_assert_sequence("ABCDE", "invalid sequence");
 800478a:	493a      	ldr	r1, [pc, #232]	; (8004874 <rt_test_005_002_execute.lto_priv.0+0x244>)
 800478c:	483a      	ldr	r0, [pc, #232]	; (8004878 <rt_test_005_002_execute.lto_priv.0+0x248>)
 800478e:	f7fc f93f 	bl	8000a10 <__test_assert_sequence>
 8004792:	4680      	mov	r8, r0
 8004794:	2800      	cmp	r0, #0
 8004796:	d1a6      	bne.n	80046e6 <rt_test_005_002_execute.lto_priv.0+0xb6>
 8004798:	68eb      	ldr	r3, [r5, #12]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800479a:	482f      	ldr	r0, [pc, #188]	; (8004858 <rt_test_005_002_execute.lto_priv.0+0x228>)
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <rt_test_005_002_execute.lto_priv.0+0x224>)
 80047a0:	9300      	str	r3, [sp, #0]
  test_set_step(3);
 80047a2:	f04f 0c03 	mov.w	ip, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80047a6:	4b28      	ldr	r3, [pc, #160]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
  test_set_step(3);
 80047a8:	f8ca c000 	str.w	ip, [sl]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80047ac:	3a04      	subs	r2, #4
 80047ae:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80047b2:	f7ff fee5 	bl	8004580 <chThdCreateStatic>
 80047b6:	68eb      	ldr	r3, [r5, #12]
 80047b8:	6078      	str	r0, [r7, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <rt_test_005_002_execute.lto_priv.0+0x220>)
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	3a05      	subs	r2, #5
 80047c2:	4b21      	ldr	r3, [pc, #132]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 80047c4:	481f      	ldr	r0, [pc, #124]	; (8004844 <rt_test_005_002_execute.lto_priv.0+0x214>)
 80047c6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80047ca:	f7ff fed9 	bl	8004580 <chThdCreateStatic>
 80047ce:	68eb      	ldr	r3, [r5, #12]
 80047d0:	6038      	str	r0, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	4b25      	ldr	r3, [pc, #148]	; (800486c <rt_test_005_002_execute.lto_priv.0+0x23c>)
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	3a01      	subs	r2, #1
 80047da:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 80047dc:	4824      	ldr	r0, [pc, #144]	; (8004870 <rt_test_005_002_execute.lto_priv.0+0x240>)
 80047de:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80047e2:	f7ff fecd 	bl	8004580 <chThdCreateStatic>
 80047e6:	68eb      	ldr	r3, [r5, #12]
 80047e8:	6138      	str	r0, [r7, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <rt_test_005_002_execute.lto_priv.0+0x234>)
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	3a02      	subs	r2, #2
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 80047f4:	481c      	ldr	r0, [pc, #112]	; (8004868 <rt_test_005_002_execute.lto_priv.0+0x238>)
 80047f6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80047fa:	f7ff fec1 	bl	8004580 <chThdCreateStatic>
 80047fe:	68eb      	ldr	r3, [r5, #12]
 8004800:	60f8      	str	r0, [r7, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	4b15      	ldr	r3, [pc, #84]	; (800485c <rt_test_005_002_execute.lto_priv.0+0x22c>)
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	4815      	ldr	r0, [pc, #84]	; (8004860 <rt_test_005_002_execute.lto_priv.0+0x230>)
 800480a:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <rt_test_005_002_execute.lto_priv.0+0x218>)
 800480c:	3a03      	subs	r2, #3
 800480e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004812:	f7ff feb5 	bl	8004580 <chThdCreateStatic>
 8004816:	4645      	mov	r5, r8
 8004818:	60b8      	str	r0, [r7, #8]
 800481a:	f854 0b04 	ldr.w	r0, [r4], #4
 800481e:	b118      	cbz	r0, 8004828 <rt_test_005_002_execute.lto_priv.0+0x1f8>
      chThdWait(threads[i]);
 8004820:	f7fc ff5e 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8004824:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004828:	42b4      	cmp	r4, r6
 800482a:	d1f6      	bne.n	800481a <rt_test_005_002_execute.lto_priv.0+0x1ea>
    test_assert_sequence("ABCDE", "invalid sequence");
 800482c:	4911      	ldr	r1, [pc, #68]	; (8004874 <rt_test_005_002_execute.lto_priv.0+0x244>)
 800482e:	4812      	ldr	r0, [pc, #72]	; (8004878 <rt_test_005_002_execute.lto_priv.0+0x248>)
}
 8004830:	b003      	add	sp, #12
 8004832:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8004836:	f7fc b8eb 	b.w	8000a10 <__test_assert_sequence>
 800483a:	bf00      	nop
 800483c:	200009b8 	.word	0x200009b8
 8004840:	20000ab4 	.word	0x20000ab4
 8004844:	20000d40 	.word	0x20000d40
 8004848:	08000be1 	.word	0x08000be1
 800484c:	20001744 	.word	0x20001744
 8004850:	0800bcb0 	.word	0x0800bcb0
 8004854:	0800ba3c 	.word	0x0800ba3c
 8004858:	20000f20 	.word	0x20000f20
 800485c:	0800ba30 	.word	0x0800ba30
 8004860:	20001100 	.word	0x20001100
 8004864:	0800ba24 	.word	0x0800ba24
 8004868:	200012e0 	.word	0x200012e0
 800486c:	0800ba18 	.word	0x0800ba18
 8004870:	200014c0 	.word	0x200014c0
 8004874:	0800b9c8 	.word	0x0800b9c8
 8004878:	0800bcac 	.word	0x0800bcac
 800487c:	20001754 	.word	0x20001754

08004880 <rt_test_006_001_execute.lto_priv.0>:

static void rt_test_006_001_execute(void) {
 8004880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8004884:	4d38      	ldr	r5, [pc, #224]	; (8004968 <rt_test_006_001_execute.lto_priv.0+0xe8>)
  msg_t msg;

  /* [6.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8004886:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800496c <rt_test_006_001_execute.lto_priv.0+0xec>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800488a:	68eb      	ldr	r3, [r5, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800488c:	4938      	ldr	r1, [pc, #224]	; (8004970 <rt_test_006_001_execute.lto_priv.0+0xf0>)
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	4838      	ldr	r0, [pc, #224]	; (8004974 <rt_test_006_001_execute.lto_priv.0+0xf4>)
 8004892:	4b39      	ldr	r3, [pc, #228]	; (8004978 <rt_test_006_001_execute.lto_priv.0+0xf8>)
 8004894:	4c39      	ldr	r4, [pc, #228]	; (800497c <rt_test_006_001_execute.lto_priv.0+0xfc>)
static void rt_test_006_001_execute(void) {
 8004896:	b083      	sub	sp, #12
  test_set_step(1);
 8004898:	f04f 0901 	mov.w	r9, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800489c:	9100      	str	r1, [sp, #0]
 800489e:	3a01      	subs	r2, #1
 80048a0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  test_set_step(1);
 80048a4:	f8c8 9000 	str.w	r9, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80048a8:	f7ff fe6a 	bl	8004580 <chThdCreateStatic>
 80048ac:	2330      	movs	r3, #48	; 0x30
 80048ae:	6020      	str	r0, [r4, #0]
 80048b0:	f383 8811 	msr	BASEPRI, r3
  return __sch_get_currthread();
 80048b4:	68ee      	ldr	r6, [r5, #12]
  ch_priority_queue_t *p = pqp->next;
 80048b6:	6828      	ldr	r0, [r5, #0]
  *trp = tp;
 80048b8:	4f31      	ldr	r7, [pc, #196]	; (8004980 <rt_test_006_001_execute.lto_priv.0+0x100>)
  otp->state = newstate;
 80048ba:	2303      	movs	r3, #3
 80048bc:	7733      	strb	r3, [r6, #28]
  pqp->next       = p->next;
 80048be:	6803      	ldr	r3, [r0, #0]
 80048c0:	602b      	str	r3, [r5, #0]
  tp->u.wttrp = trp;
 80048c2:	6377      	str	r7, [r6, #52]	; 0x34
  chSysSwitch(ntp, otp);
 80048c4:	4631      	mov	r1, r6
  pqp->next->prev = pqp;
 80048c6:	605d      	str	r5, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80048c8:	f880 901c 	strb.w	r9, [r0, #28]
  *trp = tp;
 80048cc:	603e      	str	r6, [r7, #0]
  __instance_set_currthread(oip, ntp);
 80048ce:	60e8      	str	r0, [r5, #12]
  chSysSwitch(ntp, otp);
 80048d0:	f7fb fcf6 	bl	80002c0 <__port_switch>
  return tp->u.rdymsg;
 80048d4:	6b76      	ldr	r6, [r6, #52]	; 0x34
 80048d6:	2300      	movs	r3, #0
 80048d8:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	bb8b      	cbnz	r3, 8004944 <rt_test_006_001_execute.lto_priv.0+0xc4>
 80048e0:	bb36      	cbnz	r6, 8004930 <rt_test_006_001_execute.lto_priv.0+0xb0>
 80048e2:	f104 0914 	add.w	r9, r4, #20
    if (threads[i] != NULL) {
 80048e6:	f854 0b04 	ldr.w	r0, [r4], #4
 80048ea:	b118      	cbz	r0, 80048f4 <rt_test_006_001_execute.lto_priv.0+0x74>
      chThdWait(threads[i]);
 80048ec:	f7fc fef8 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 80048f0:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80048f4:	45a1      	cmp	r9, r4
 80048f6:	d1f6      	bne.n	80048e6 <rt_test_006_001_execute.lto_priv.0+0x66>
  test_end_step(1);

  /* [6.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 80048f8:	2302      	movs	r3, #2
 80048fa:	f8c8 3000 	str.w	r3, [r8]
 80048fe:	2330      	movs	r3, #48	; 0x30
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8004908:	68ea      	ldr	r2, [r5, #12]
 800490a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  tp->u.wttrp = trp;
 800490c:	6357      	str	r7, [r2, #52]	; 0x34
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800490e:	2164      	movs	r1, #100	; 0x64
 8004910:	2003      	movs	r0, #3
  *trp = tp;
 8004912:	603a      	str	r2, [r7, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8004914:	f7fe fb64 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8004918:	2300      	movs	r3, #0
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004920:	3b64      	subs	r3, #100	; 0x64
 8004922:	1b5b      	subs	r3, r3, r5
 8004924:	2b02      	cmp	r3, #2
 8004926:	d817      	bhi.n	8004958 <rt_test_006_001_execute.lto_priv.0+0xd8>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	b95b      	cbnz	r3, 8004944 <rt_test_006_001_execute.lto_priv.0+0xc4>
 800492c:	3001      	adds	r0, #1
 800492e:	d010      	beq.n	8004952 <rt_test_006_001_execute.lto_priv.0+0xd2>
  chtest.failure_message = msg;
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <rt_test_006_001_execute.lto_priv.0+0x104>)
 8004932:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8004936:	f240 1201 	movw	r2, #257	; 0x101
 800493a:	f8a8 2004 	strh.w	r2, [r8, #4]
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 800493e:	b003      	add	sp, #12
 8004940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <rt_test_006_001_execute.lto_priv.0+0x108>)
 8004946:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 800494a:	f240 1201 	movw	r2, #257	; 0x101
 800494e:	f8a8 2004 	strh.w	r2, [r8, #4]
 8004952:	b003      	add	sp, #12
 8004954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <rt_test_006_001_execute.lto_priv.0+0x10c>)
 800495a:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 800495e:	f240 1201 	movw	r2, #257	; 0x101
 8004962:	f8a8 2004 	strh.w	r2, [r8, #4]
 8004966:	e7f4      	b.n	8004952 <rt_test_006_001_execute.lto_priv.0+0xd2>
 8004968:	200009b8 	.word	0x200009b8
 800496c:	20000ab4 	.word	0x20000ab4
 8004970:	0800ba18 	.word	0x0800ba18
 8004974:	20000d40 	.word	0x20000d40
 8004978:	08002861 	.word	0x08002861
 800497c:	20001744 	.word	0x20001744
 8004980:	20001758 	.word	0x20001758
 8004984:	0800bc2c 	.word	0x0800bc2c
 8004988:	0800bcb4 	.word	0x0800bcb4
 800498c:	0800bbf4 	.word	0x0800bbf4

08004990 <rt_test_007_002_execute.lto_priv.0>:
static void rt_test_007_002_execute(void) {
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4d59      	ldr	r5, [pc, #356]	; (8004af8 <rt_test_007_002_execute.lto_priv.0+0x168>)
  test_set_step(1);
 8004994:	4e59      	ldr	r6, [pc, #356]	; (8004afc <rt_test_007_002_execute.lto_priv.0+0x16c>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004996:	68eb      	ldr	r3, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004998:	4859      	ldr	r0, [pc, #356]	; (8004b00 <rt_test_007_002_execute.lto_priv.0+0x170>)
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	4b59      	ldr	r3, [pc, #356]	; (8004b04 <rt_test_007_002_execute.lto_priv.0+0x174>)
 800499e:	4c5a      	ldr	r4, [pc, #360]	; (8004b08 <rt_test_007_002_execute.lto_priv.0+0x178>)
static void rt_test_007_002_execute(void) {
 80049a0:	b082      	sub	sp, #8
  test_set_step(1);
 80049a2:	2101      	movs	r1, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80049a4:	9000      	str	r0, [sp, #0]
 80049a6:	3205      	adds	r2, #5
  test_set_step(1);
 80049a8:	6031      	str	r1, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80049aa:	4858      	ldr	r0, [pc, #352]	; (8004b0c <rt_test_007_002_execute.lto_priv.0+0x17c>)
 80049ac:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80049b0:	f7ff fde6 	bl	8004580 <chThdCreateStatic>
 80049b4:	68eb      	ldr	r3, [r5, #12]
 80049b6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	4b55      	ldr	r3, [pc, #340]	; (8004b10 <rt_test_007_002_execute.lto_priv.0+0x180>)
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	3201      	adds	r2, #1
 80049c0:	4b50      	ldr	r3, [pc, #320]	; (8004b04 <rt_test_007_002_execute.lto_priv.0+0x174>)
 80049c2:	4854      	ldr	r0, [pc, #336]	; (8004b14 <rt_test_007_002_execute.lto_priv.0+0x184>)
 80049c4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80049c8:	f7ff fdda 	bl	8004580 <chThdCreateStatic>
 80049cc:	68eb      	ldr	r3, [r5, #12]
 80049ce:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	4b51      	ldr	r3, [pc, #324]	; (8004b18 <rt_test_007_002_execute.lto_priv.0+0x188>)
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	3203      	adds	r2, #3
 80049d8:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <rt_test_007_002_execute.lto_priv.0+0x174>)
 80049da:	4850      	ldr	r0, [pc, #320]	; (8004b1c <rt_test_007_002_execute.lto_priv.0+0x18c>)
 80049dc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80049e0:	f7ff fdce 	bl	8004580 <chThdCreateStatic>
 80049e4:	68eb      	ldr	r3, [r5, #12]
 80049e6:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	4b4d      	ldr	r3, [pc, #308]	; (8004b20 <rt_test_007_002_execute.lto_priv.0+0x190>)
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	3204      	adds	r2, #4
 80049f0:	4b44      	ldr	r3, [pc, #272]	; (8004b04 <rt_test_007_002_execute.lto_priv.0+0x174>)
 80049f2:	484c      	ldr	r0, [pc, #304]	; (8004b24 <rt_test_007_002_execute.lto_priv.0+0x194>)
 80049f4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80049f8:	f7ff fdc2 	bl	8004580 <chThdCreateStatic>
 80049fc:	68ea      	ldr	r2, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80049fe:	4b4a      	ldr	r3, [pc, #296]	; (8004b28 <rt_test_007_002_execute.lto_priv.0+0x198>)
 8004a00:	6892      	ldr	r2, [r2, #8]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	3202      	adds	r2, #2
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8004a06:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8004a08:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <rt_test_007_002_execute.lto_priv.0+0x174>)
 8004a0a:	4848      	ldr	r0, [pc, #288]	; (8004b2c <rt_test_007_002_execute.lto_priv.0+0x19c>)
 8004a0c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004a10:	f7ff fdb6 	bl	8004580 <chThdCreateStatic>
  test_set_step(2);
 8004a14:	2302      	movs	r3, #2
 8004a16:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8004a18:	6120      	str	r0, [r4, #16]
 8004a1a:	2330      	movs	r3, #48	; 0x30
 8004a1c:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8004a20:	4c43      	ldr	r4, [pc, #268]	; (8004b30 <rt_test_007_002_execute.lto_priv.0+0x1a0>)
 8004a22:	68a3      	ldr	r3, [r4, #8]
 8004a24:	3301      	adds	r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	60a3      	str	r3, [r4, #8]
 8004a2a:	dd41      	ble.n	8004ab0 <rt_test_007_002_execute.lto_priv.0+0x120>
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	f381 8811 	msr	BASEPRI, r1
 8004a32:	2330      	movs	r3, #48	; 0x30
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	68a3      	ldr	r3, [r4, #8]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	60a3      	str	r3, [r4, #8]
 8004a40:	dd53      	ble.n	8004aea <rt_test_007_002_execute.lto_priv.0+0x15a>
 8004a42:	2100      	movs	r1, #0
 8004a44:	f381 8811 	msr	BASEPRI, r1
 8004a48:	2330      	movs	r3, #48	; 0x30
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	3301      	adds	r3, #1
 8004a52:	428b      	cmp	r3, r1
 8004a54:	60a3      	str	r3, [r4, #8]
 8004a56:	dd41      	ble.n	8004adc <rt_test_007_002_execute.lto_priv.0+0x14c>
 8004a58:	2100      	movs	r1, #0
 8004a5a:	f381 8811 	msr	BASEPRI, r1
 8004a5e:	2330      	movs	r3, #48	; 0x30
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	68a3      	ldr	r3, [r4, #8]
 8004a66:	3301      	adds	r3, #1
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	60a3      	str	r3, [r4, #8]
 8004a6c:	dd2f      	ble.n	8004ace <rt_test_007_002_execute.lto_priv.0+0x13e>
 8004a6e:	2100      	movs	r1, #0
 8004a70:	f381 8811 	msr	BASEPRI, r1
 8004a74:	2330      	movs	r3, #48	; 0x30
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	428b      	cmp	r3, r1
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	dd1d      	ble.n	8004ac0 <rt_test_007_002_execute.lto_priv.0+0x130>
 8004a84:	2600      	movs	r6, #0
 8004a86:	f386 8811 	msr	BASEPRI, r6
 8004a8a:	4c1f      	ldr	r4, [pc, #124]	; (8004b08 <rt_test_007_002_execute.lto_priv.0+0x178>)
 8004a8c:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8004a90:	f854 0b04 	ldr.w	r0, [r4], #4
 8004a94:	b118      	cbz	r0, 8004a9e <rt_test_007_002_execute.lto_priv.0+0x10e>
      chThdWait(threads[i]);
 8004a96:	f7fc fe23 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8004a9a:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004a9e:	42a5      	cmp	r5, r4
 8004aa0:	d1f6      	bne.n	8004a90 <rt_test_007_002_execute.lto_priv.0+0x100>
    test_assert_sequence("ABCDE", "invalid sequence");
 8004aa2:	4924      	ldr	r1, [pc, #144]	; (8004b34 <rt_test_007_002_execute.lto_priv.0+0x1a4>)
 8004aa4:	4824      	ldr	r0, [pc, #144]	; (8004b38 <rt_test_007_002_execute.lto_priv.0+0x1a8>)
}
 8004aa6:	b002      	add	sp, #8
 8004aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8004aac:	f7fb bfb0 	b.w	8000a10 <__test_assert_sequence>
  ch_queue_t *p = qp->next;
 8004ab0:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004ab2:	6803      	ldr	r3, [r0, #0]
 8004ab4:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 8004ab6:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8004ab8:	605c      	str	r4, [r3, #4]
 8004aba:	f7ff fa49 	bl	8003f50 <chSchWakeupS>
 8004abe:	e7b5      	b.n	8004a2c <rt_test_007_002_execute.lto_priv.0+0x9c>
  ch_queue_t *p = qp->next;
 8004ac0:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004ac2:	6803      	ldr	r3, [r0, #0]
 8004ac4:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8004ac6:	605c      	str	r4, [r3, #4]
 8004ac8:	f7ff fa42 	bl	8003f50 <chSchWakeupS>
 8004acc:	e7da      	b.n	8004a84 <rt_test_007_002_execute.lto_priv.0+0xf4>
  ch_queue_t *p = qp->next;
 8004ace:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004ad0:	6803      	ldr	r3, [r0, #0]
 8004ad2:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8004ad4:	605c      	str	r4, [r3, #4]
 8004ad6:	f7ff fa3b 	bl	8003f50 <chSchWakeupS>
 8004ada:	e7c8      	b.n	8004a6e <rt_test_007_002_execute.lto_priv.0+0xde>
  ch_queue_t *p = qp->next;
 8004adc:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004ade:	6803      	ldr	r3, [r0, #0]
 8004ae0:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8004ae2:	605c      	str	r4, [r3, #4]
 8004ae4:	f7ff fa34 	bl	8003f50 <chSchWakeupS>
 8004ae8:	e7b6      	b.n	8004a58 <rt_test_007_002_execute.lto_priv.0+0xc8>
  ch_queue_t *p = qp->next;
 8004aea:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004aec:	6803      	ldr	r3, [r0, #0]
 8004aee:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8004af0:	605c      	str	r4, [r3, #4]
 8004af2:	f7ff fa2d 	bl	8003f50 <chSchWakeupS>
 8004af6:	e7a4      	b.n	8004a42 <rt_test_007_002_execute.lto_priv.0+0xb2>
 8004af8:	200009b8 	.word	0x200009b8
 8004afc:	20000ab4 	.word	0x20000ab4
 8004b00:	0800ba18 	.word	0x0800ba18
 8004b04:	080018e1 	.word	0x080018e1
 8004b08:	20001744 	.word	0x20001744
 8004b0c:	20000d40 	.word	0x20000d40
 8004b10:	0800ba24 	.word	0x0800ba24
 8004b14:	20000f20 	.word	0x20000f20
 8004b18:	0800ba30 	.word	0x0800ba30
 8004b1c:	20001100 	.word	0x20001100
 8004b20:	0800ba3c 	.word	0x0800ba3c
 8004b24:	200012e0 	.word	0x200012e0
 8004b28:	0800bcb0 	.word	0x0800bcb0
 8004b2c:	200014c0 	.word	0x200014c0
 8004b30:	20000d0c 	.word	0x20000d0c
 8004b34:	0800b9c8 	.word	0x0800b9c8
 8004b38:	0800bcac 	.word	0x0800bcac
 8004b3c:	00000000 	.word	0x00000000

08004b40 <rt_test_007_003_execute.lto_priv.0>:
static void rt_test_007_003_execute(void) {
 8004b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8004b44:	4d60      	ldr	r5, [pc, #384]	; (8004cc8 <rt_test_007_003_execute.lto_priv.0+0x188>)
 8004b46:	2301      	movs	r3, #1
static void rt_test_007_003_execute(void) {
 8004b48:	b082      	sub	sp, #8
  test_set_step(1);
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	2630      	movs	r6, #48	; 0x30
 8004b4e:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8004b52:	4c5e      	ldr	r4, [pc, #376]	; (8004ccc <rt_test_007_003_execute.lto_priv.0+0x18c>)
 8004b54:	68a2      	ldr	r2, [r4, #8]
 8004b56:	1e53      	subs	r3, r2, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	60a3      	str	r3, [r4, #8]
 8004b5c:	db0a      	blt.n	8004b74 <rt_test_007_003_execute.lto_priv.0+0x34>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8004b64:	4b5a      	ldr	r3, [pc, #360]	; (8004cd0 <rt_test_007_003_execute.lto_priv.0+0x190>)
 8004b66:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004b68:	f240 1201 	movw	r2, #257	; 0x101
 8004b6c:	80aa      	strh	r2, [r5, #4]
}
 8004b6e:	b002      	add	sp, #8
 8004b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sp->cnt++;
 8004b74:	60a2      	str	r2, [r4, #8]
 8004b76:	2300      	movs	r3, #0
 8004b78:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	42a3      	cmp	r3, r4
 8004b80:	d150      	bne.n	8004c24 <rt_test_007_003_execute.lto_priv.0+0xe4>
    test_assert(sem1.cnt == 0, "counter not zero");
 8004b82:	68a7      	ldr	r7, [r4, #8]
 8004b84:	2f00      	cmp	r7, #0
 8004b86:	d155      	bne.n	8004c34 <rt_test_007_003_execute.lto_priv.0+0xf4>
  return __sch_get_currthread();
 8004b88:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8004cd4 <rt_test_007_003_execute.lto_priv.0+0x194>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004b8c:	4852      	ldr	r0, [pc, #328]	; (8004cd8 <rt_test_007_003_execute.lto_priv.0+0x198>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004b8e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8004b92:	6892      	ldr	r2, [r2, #8]
 8004b94:	9700      	str	r7, [sp, #0]
  test_set_step(2);
 8004b96:	2302      	movs	r3, #2
 8004b98:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004b9a:	3a01      	subs	r2, #1
 8004b9c:	4b4f      	ldr	r3, [pc, #316]	; (8004cdc <rt_test_007_003_execute.lto_priv.0+0x19c>)
 8004b9e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004ba2:	f7ff fced 	bl	8004580 <chThdCreateStatic>
 8004ba6:	4b4e      	ldr	r3, [pc, #312]	; (8004ce0 <rt_test_007_003_execute.lto_priv.0+0x1a0>)
 8004ba8:	6018      	str	r0, [r3, #0]
 8004baa:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8004bae:	68a3      	ldr	r3, [r4, #8]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	60a3      	str	r3, [r4, #8]
 8004bb6:	db45      	blt.n	8004c44 <rt_test_007_003_execute.lto_priv.0+0x104>
 8004bb8:	f04f 0a00 	mov.w	sl, #0
 8004bbc:	f38a 8811 	msr	BASEPRI, sl
 8004bc0:	4e47      	ldr	r6, [pc, #284]	; (8004ce0 <rt_test_007_003_execute.lto_priv.0+0x1a0>)
 8004bc2:	f106 0914 	add.w	r9, r6, #20
    if (threads[i] != NULL) {
 8004bc6:	f856 0b04 	ldr.w	r0, [r6], #4
 8004bca:	b118      	cbz	r0, 8004bd4 <rt_test_007_003_execute.lto_priv.0+0x94>
      chThdWait(threads[i]);
 8004bcc:	f7fc fd88 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8004bd0:	f846 ac04 	str.w	sl, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004bd4:	45b1      	cmp	r9, r6
 8004bd6:	d1f6      	bne.n	8004bc6 <rt_test_007_003_execute.lto_priv.0+0x86>
 8004bd8:	b9f7      	cbnz	r7, 8004c18 <rt_test_007_003_execute.lto_priv.0+0xd8>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	d121      	bne.n	8004c24 <rt_test_007_003_execute.lto_priv.0+0xe4>
 8004be0:	68a3      	ldr	r3, [r4, #8]
 8004be2:	bb3b      	cbnz	r3, 8004c34 <rt_test_007_003_execute.lto_priv.0+0xf4>
  test_set_step(3);
 8004be4:	2303      	movs	r3, #3
 8004be6:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8004be8:	f7fd fc9a 	bl	8002520 <test_wait_tick>
 8004bec:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8004ce4 <rt_test_007_003_execute.lto_priv.0+0x1a4>
 8004bf0:	4607      	mov	r7, r0
 8004bf2:	2641      	movs	r6, #65	; 0x41
 8004bf4:	f04f 0930 	mov.w	r9, #48	; 0x30
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004bf8:	68eb      	ldr	r3, [r5, #12]
 8004bfa:	4553      	cmp	r3, sl
 8004bfc:	d202      	bcs.n	8004c04 <rt_test_007_003_execute.lto_priv.0+0xc4>
    *chtest.tokp++ = token;
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	60ea      	str	r2, [r5, #12]
 8004c02:	701e      	strb	r6, [r3, #0]
 8004c04:	f389 8811 	msr	BASEPRI, r9
 8004c08:	68a3      	ldr	r3, [r4, #8]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	60a3      	str	r3, [r4, #8]
 8004c10:	db27      	blt.n	8004c62 <rt_test_007_003_execute.lto_priv.0+0x122>
 8004c12:	2300      	movs	r3, #0
 8004c14:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8004c18:	4b2d      	ldr	r3, [pc, #180]	; (8004cd0 <rt_test_007_003_execute.lto_priv.0+0x190>)
 8004c1a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004c1c:	f240 1201 	movw	r2, #257	; 0x101
 8004c20:	80aa      	strh	r2, [r5, #4]
  return true;
 8004c22:	e7a4      	b.n	8004b6e <rt_test_007_003_execute.lto_priv.0+0x2e>
  chtest.failure_message = msg;
 8004c24:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <rt_test_007_003_execute.lto_priv.0+0x1a8>)
 8004c26:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004c28:	f240 1201 	movw	r2, #257	; 0x101
 8004c2c:	80aa      	strh	r2, [r5, #4]
}
 8004c2e:	b002      	add	sp, #8
 8004c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <rt_test_007_003_execute.lto_priv.0+0x1ac>)
 8004c36:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004c38:	f240 1201 	movw	r2, #257	; 0x101
 8004c3c:	80aa      	strh	r2, [r5, #4]
 8004c3e:	b002      	add	sp, #8
 8004c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return __sch_get_currthread();
 8004c44:	f8d8 300c 	ldr.w	r3, [r8, #12]
  p->prev       = qp->prev;
 8004c48:	6862      	ldr	r2, [r4, #4]
    currtp->u.wtsemp = sp;
 8004c4a:	635c      	str	r4, [r3, #52]	; 0x34
 8004c4c:	e9c3 4200 	strd	r4, r2, [r3]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8004c50:	f241 3188 	movw	r1, #5000	; 0x1388
  p->prev->next = p;
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	2005      	movs	r0, #5
  qp->prev      = p;
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	f7fe f9c1 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8004c5e:	4607      	mov	r7, r0
 8004c60:	e7aa      	b.n	8004bb8 <rt_test_007_003_execute.lto_priv.0+0x78>
 8004c62:	f8d8 300c 	ldr.w	r3, [r8, #12]
  p->prev       = qp->prev;
 8004c66:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 8004c68:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 8004c6a:	605a      	str	r2, [r3, #4]
    currtp->u.wtsemp = sp;
 8004c6c:	635c      	str	r4, [r3, #52]	; 0x34
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8004c6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  p->prev->next = p;
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	2005      	movs	r0, #5
  qp->prev      = p;
 8004c76:	6063      	str	r3, [r4, #4]
 8004c78:	f7fe f9b2 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8004c82:	3001      	adds	r0, #1
 8004c84:	d1c8      	bne.n	8004c18 <rt_test_007_003_execute.lto_priv.0+0xd8>
 8004c86:	6823      	ldr	r3, [r4, #0]
    for (i = 0; i < 5; i++) {
 8004c88:	3601      	adds	r6, #1
 8004c8a:	42a3      	cmp	r3, r4
 8004c8c:	b2f6      	uxtb	r6, r6
 8004c8e:	d1c9      	bne.n	8004c24 <rt_test_007_003_execute.lto_priv.0+0xe4>
 8004c90:	68a3      	ldr	r3, [r4, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1ce      	bne.n	8004c34 <rt_test_007_003_execute.lto_priv.0+0xf4>
 8004c96:	2e46      	cmp	r6, #70	; 0x46
 8004c98:	d1ae      	bne.n	8004bf8 <rt_test_007_003_execute.lto_priv.0+0xb8>
    test_assert_sequence("ABCDE", "invalid sequence");
 8004c9a:	4915      	ldr	r1, [pc, #84]	; (8004cf0 <rt_test_007_003_execute.lto_priv.0+0x1b0>)
 8004c9c:	4815      	ldr	r0, [pc, #84]	; (8004cf4 <rt_test_007_003_execute.lto_priv.0+0x1b4>)
 8004c9e:	f7fb feb7 	bl	8000a10 <__test_assert_sequence>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f47f af63 	bne.w	8004b6e <rt_test_007_003_execute.lto_priv.0+0x2e>
 8004ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8004cb2:	1bdf      	subs	r7, r3, r7
 8004cb4:	2f13      	cmp	r7, #19
 8004cb6:	f67f af5a 	bls.w	8004b6e <rt_test_007_003_execute.lto_priv.0+0x2e>
  chtest.failure_message = msg;
 8004cba:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <rt_test_007_003_execute.lto_priv.0+0x1b8>)
 8004cbc:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004cbe:	f240 1201 	movw	r2, #257	; 0x101
 8004cc2:	80aa      	strh	r2, [r5, #4]
    return __test_fail(msg);
 8004cc4:	e753      	b.n	8004b6e <rt_test_007_003_execute.lto_priv.0+0x2e>
 8004cc6:	bf00      	nop
 8004cc8:	20000ab4 	.word	0x20000ab4
 8004ccc:	20000d0c 	.word	0x20000d0c
 8004cd0:	0800bbb8 	.word	0x0800bbb8
 8004cd4:	200009b8 	.word	0x200009b8
 8004cd8:	20000d40 	.word	0x20000d40
 8004cdc:	08003c01 	.word	0x08003c01
 8004ce0:	20001744 	.word	0x20001744
 8004ce4:	20000ad4 	.word	0x20000ad4
 8004ce8:	0800bcc0 	.word	0x0800bcc0
 8004cec:	0800bcd0 	.word	0x0800bcd0
 8004cf0:	0800b9c8 	.word	0x0800b9c8
 8004cf4:	0800bcac 	.word	0x0800bcac
 8004cf8:	0800bbf4 	.word	0x0800bbf4
 8004cfc:	00000000 	.word	0x00000000

08004d00 <rt_test_007_004_execute.lto_priv.0>:
static void rt_test_007_004_execute(void) {
 8004d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d04:	4f35      	ldr	r7, [pc, #212]	; (8004ddc <rt_test_007_004_execute.lto_priv.0+0xdc>)
  test_set_step(1);
 8004d06:	4e36      	ldr	r6, [pc, #216]	; (8004de0 <rt_test_007_004_execute.lto_priv.0+0xe0>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004d08:	68fb      	ldr	r3, [r7, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8004d0a:	4836      	ldr	r0, [pc, #216]	; (8004de4 <rt_test_007_004_execute.lto_priv.0+0xe4>)
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <rt_test_007_004_execute.lto_priv.0+0xe8>)
static void rt_test_007_004_execute(void) {
 8004d10:	b082      	sub	sp, #8
  test_set_step(1);
 8004d12:	2101      	movs	r1, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8004d14:	9000      	str	r0, [sp, #0]
  test_set_step(1);
 8004d16:	6031      	str	r1, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8004d18:	440a      	add	r2, r1
 8004d1a:	4834      	ldr	r0, [pc, #208]	; (8004dec <rt_test_007_004_execute.lto_priv.0+0xec>)
 8004d1c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004d20:	f7ff fc2e 	bl	8004580 <chThdCreateStatic>
 8004d24:	4a32      	ldr	r2, [pc, #200]	; (8004df0 <rt_test_007_004_execute.lto_priv.0+0xf0>)
  test_set_step(2);
 8004d26:	2302      	movs	r3, #2
 8004d28:	6033      	str	r3, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	2330      	movs	r3, #48	; 0x30
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 * @param[in] n         value to be added to the semaphore counter. The value
 *                      must be positive.
 *
 * @iclass
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8004d32:	4d30      	ldr	r5, [pc, #192]	; (8004df4 <rt_test_007_004_execute.lto_priv.0+0xf4>)
 8004d34:	68ab      	ldr	r3, [r5, #8]
  tp->state = CH_STATE_READY;
 8004d36:	f04f 0c00 	mov.w	ip, #0
 8004d3a:	1c98      	adds	r0, r3, #2
 8004d3c:	e001      	b.n	8004d42 <rt_test_007_004_execute.lto_priv.0+0x42>
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8004d3e:	4283      	cmp	r3, r0
 8004d40:	d018      	beq.n	8004d74 <rt_test_007_004_execute.lto_priv.0+0x74>
    if (++sp->cnt <= (cnt_t)0) {
 8004d42:	3301      	adds	r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	dcfa      	bgt.n	8004d3e <rt_test_007_004_execute.lto_priv.0+0x3e>
  ch_queue_t *p = qp->next;
 8004d48:	682a      	ldr	r2, [r5, #0]
  qp->next       = p->next;
 8004d4a:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004d4c:	6911      	ldr	r1, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8004d4e:	f8d2 e008 	ldr.w	lr, [r2, #8]
  qp->next       = p->next;
 8004d52:	602c      	str	r4, [r5, #0]
  qp->next->prev = qp;
 8004d54:	6065      	str	r5, [r4, #4]
  tp->state = CH_STATE_READY;
 8004d56:	f882 c01c 	strb.w	ip, [r2, #28]
    pqp = pqp->next;
 8004d5a:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004d5c:	688c      	ldr	r4, [r1, #8]
 8004d5e:	4574      	cmp	r4, lr
 8004d60:	d2fb      	bcs.n	8004d5a <rt_test_007_004_execute.lto_priv.0+0x5a>
  p->prev       = pqp->prev;
 8004d62:	684c      	ldr	r4, [r1, #4]
  while (n > (cnt_t)0) {
 8004d64:	4283      	cmp	r3, r0
 8004d66:	e9c2 1400 	strd	r1, r4, [r2]
  p->prev->next = p;
 8004d6a:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 8004d6c:	604a      	str	r2, [r1, #4]
      chSchReadyI(threadref(ch_queue_fifo_remove(&sp->queue)))->u.rdymsg = MSG_OK;
 8004d6e:	f8c2 c034 	str.w	ip, [r2, #52]	; 0x34
  while (n > (cnt_t)0) {
 8004d72:	d1e6      	bne.n	8004d42 <rt_test_007_004_execute.lto_priv.0+0x42>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	6889      	ldr	r1, [r1, #8]
 8004d7a:	6892      	ldr	r2, [r2, #8]
 8004d7c:	60ab      	str	r3, [r5, #8]
 8004d7e:	4291      	cmp	r1, r2
 8004d80:	d901      	bls.n	8004d86 <rt_test_007_004_execute.lto_priv.0+0x86>
    __sch_reschedule_ahead();
 8004d82:	f7fd fc3d 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8004d86:	f04f 0800 	mov.w	r8, #0
 8004d8a:	f388 8811 	msr	BASEPRI, r8
 8004d8e:	4c18      	ldr	r4, [pc, #96]	; (8004df0 <rt_test_007_004_execute.lto_priv.0+0xf0>)
 8004d90:	f104 0714 	add.w	r7, r4, #20
    if (threads[i] != NULL) {
 8004d94:	f854 0b04 	ldr.w	r0, [r4], #4
 8004d98:	b118      	cbz	r0, 8004da2 <rt_test_007_004_execute.lto_priv.0+0xa2>
      chThdWait(threads[i]);
 8004d9a:	f7fc fca1 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8004d9e:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004da2:	42bc      	cmp	r4, r7
 8004da4:	d1f6      	bne.n	8004d94 <rt_test_007_004_execute.lto_priv.0+0x94>
 8004da6:	2330      	movs	r3, #48	; 0x30
 8004da8:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8004dac:	68ab      	ldr	r3, [r5, #8]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d109      	bne.n	8004dc6 <rt_test_007_004_execute.lto_priv.0+0xc6>
 8004db2:	2300      	movs	r3, #0
 8004db4:	f383 8811 	msr	BASEPRI, r3
    test_assert_sequence("A", "invalid sequence");
 8004db8:	490f      	ldr	r1, [pc, #60]	; (8004df8 <rt_test_007_004_execute.lto_priv.0+0xf8>)
 8004dba:	480a      	ldr	r0, [pc, #40]	; (8004de4 <rt_test_007_004_execute.lto_priv.0+0xe4>)
}
 8004dbc:	b002      	add	sp, #8
 8004dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("A", "invalid sequence");
 8004dc2:	f7fb be25 	b.w	8000a10 <__test_assert_sequence>
  chtest.failure_message = msg;
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <rt_test_007_004_execute.lto_priv.0+0xfc>)
 8004dc8:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 8004dca:	f240 1201 	movw	r2, #257	; 0x101
 8004dce:	80b2      	strh	r2, [r6, #4]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f383 8811 	msr	BASEPRI, r3
}
 8004dd6:	b002      	add	sp, #8
 8004dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ddc:	200009b8 	.word	0x200009b8
 8004de0:	20000ab4 	.word	0x20000ab4
 8004de4:	0800ba18 	.word	0x0800ba18
 8004de8:	080018e1 	.word	0x080018e1
 8004dec:	20000d40 	.word	0x20000d40
 8004df0:	20001744 	.word	0x20001744
 8004df4:	20000d0c 	.word	0x20000d0c
 8004df8:	0800b9c8 	.word	0x0800b9c8
 8004dfc:	0800bce4 	.word	0x0800bce4

08004e00 <rt_test_007_005_execute.lto_priv.0>:
static void rt_test_007_005_execute(void) {
 8004e00:	b530      	push	{r4, r5, lr}
  return __sch_get_currthread();
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <rt_test_007_005_execute.lto_priv.0+0x68>)
  test_set_step(1);
 8004e04:	4c19      	ldr	r4, [pc, #100]	; (8004e6c <rt_test_007_005_execute.lto_priv.0+0x6c>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004e06:	68db      	ldr	r3, [r3, #12]
static void rt_test_007_005_execute(void) {
 8004e08:	b083      	sub	sp, #12
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <rt_test_007_005_execute.lto_priv.0+0x70>)
 8004e0e:	2500      	movs	r5, #0
  test_set_step(1);
 8004e10:	2001      	movs	r0, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004e12:	3201      	adds	r2, #1
 8004e14:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004e18:	9500      	str	r5, [sp, #0]
  test_set_step(1);
 8004e1a:	6020      	str	r0, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004e1c:	4815      	ldr	r0, [pc, #84]	; (8004e74 <rt_test_007_005_execute.lto_priv.0+0x74>)
 8004e1e:	f7ff fbaf 	bl	8004580 <chThdCreateStatic>
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <rt_test_007_005_execute.lto_priv.0+0x78>)
  test_set_step(2);
 8004e24:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004e26:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8004e28:	6023      	str	r3, [r4, #0]
    chSemSignalWait(&sem1, &sem1);
 8004e2a:	f006 fd49 	bl	800b8c0 <chSemSignalWait.constprop.0.isra.0>
  return (bool)(qp->next == qp);
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <rt_test_007_005_execute.lto_priv.0+0x7c>)
  if (!condition) {
 8004e30:	681d      	ldr	r5, [r3, #0]
 8004e32:	429d      	cmp	r5, r3
 8004e34:	d111      	bne.n	8004e5a <rt_test_007_005_execute.lto_priv.0+0x5a>
 8004e36:	68ab      	ldr	r3, [r5, #8]
 8004e38:	b943      	cbnz	r3, 8004e4c <rt_test_007_005_execute.lto_priv.0+0x4c>
  test_set_step(3);
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	6023      	str	r3, [r4, #0]
    chSemSignalWait(&sem1, &sem1);
 8004e3e:	f006 fd3f 	bl	800b8c0 <chSemSignalWait.constprop.0.isra.0>
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	d108      	bne.n	8004e5a <rt_test_007_005_execute.lto_priv.0+0x5a>
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	b123      	cbz	r3, 8004e56 <rt_test_007_005_execute.lto_priv.0+0x56>
  chtest.failure_message = msg;
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <rt_test_007_005_execute.lto_priv.0+0x80>)
 8004e4e:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8004e50:	f240 1201 	movw	r2, #257	; 0x101
 8004e54:	80a2      	strh	r2, [r4, #4]
}
 8004e56:	b003      	add	sp, #12
 8004e58:	bd30      	pop	{r4, r5, pc}
  chtest.failure_message = msg;
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <rt_test_007_005_execute.lto_priv.0+0x84>)
 8004e5c:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8004e5e:	f240 1201 	movw	r2, #257	; 0x101
 8004e62:	80a2      	strh	r2, [r4, #4]
 8004e64:	b003      	add	sp, #12
 8004e66:	bd30      	pop	{r4, r5, pc}
 8004e68:	200009b8 	.word	0x200009b8
 8004e6c:	20000ab4 	.word	0x20000ab4
 8004e70:	080040c1 	.word	0x080040c1
 8004e74:	20000d40 	.word	0x20000d40
 8004e78:	20001744 	.word	0x20001744
 8004e7c:	20000d0c 	.word	0x20000d0c
 8004e80:	0800bcd0 	.word	0x0800bcd0
 8004e84:	0800bcc0 	.word	0x0800bcc0
	...

08004e90 <rt_test_007_006_execute.lto_priv.0>:

static void rt_test_007_006_execute(void) {
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [7.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8004e94:	4c79      	ldr	r4, [pc, #484]	; (800507c <rt_test_007_006_execute.lto_priv.0+0x1ec>)
static void rt_test_007_006_execute(void) {
 8004e96:	b086      	sub	sp, #24
  qp->next = qp;
 8004e98:	ae03      	add	r6, sp, #12
  test_set_step(1);
 8004e9a:	f04f 0801 	mov.w	r8, #1
  sp->cnt = n;
 8004e9e:	2500      	movs	r5, #0
  qp->prev = qp;
 8004ea0:	e9cd 6603 	strd	r6, r6, [sp, #12]
 8004ea4:	f8c4 8000 	str.w	r8, [r4]
 8004ea8:	9505      	str	r5, [sp, #20]
 8004eaa:	2730      	movs	r7, #48	; 0x30
 8004eac:	f387 8811 	msr	BASEPRI, r7
  if (!condition) {
 8004eb0:	9b05      	ldr	r3, [sp, #20]
 8004eb2:	42ab      	cmp	r3, r5
 8004eb4:	dc7a      	bgt.n	8004fac <rt_test_007_006_execute.lto_priv.0+0x11c>
 8004eb6:	f385 8811 	msr	BASEPRI, r5
  }
  test_end_step(1);

  /* [7.6.2] Resetting the binary semaphore in "taken" state, the state
     must not change.*/
  test_set_step(2);
 8004eba:	2302      	movs	r3, #2
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	f005 ff1d 	bl	800ad00 <chSemResetWithMessage.constprop.0>
 8004ec6:	f387 8811 	msr	BASEPRI, r7
 8004eca:	9b05      	ldr	r3, [sp, #20]
 8004ecc:	42ab      	cmp	r3, r5
 8004ece:	dc6d      	bgt.n	8004fac <rt_test_007_006_execute.lto_priv.0+0x11c>
 8004ed0:	f385 8811 	msr	BASEPRI, r5
  return __sch_get_currthread();
 8004ed4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8005080 <rt_test_007_006_execute.lto_priv.0+0x1f0>
  test_end_step(2);

  /* [7.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	; (8005084 <rt_test_007_006_execute.lto_priv.0+0x1f4>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004eda:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8004ede:	486a      	ldr	r0, [pc, #424]	; (8005088 <rt_test_007_006_execute.lto_priv.0+0x1f8>)
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	9600      	str	r6, [sp, #0]
  test_set_step(3);
 8004ee4:	2103      	movs	r1, #3
 8004ee6:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8004ee8:	3a01      	subs	r2, #1
 8004eea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004eee:	f7ff fb47 	bl	8004580 <chThdCreateStatic>
 8004ef2:	4b66      	ldr	r3, [pc, #408]	; (800508c <rt_test_007_006_execute.lto_priv.0+0x1fc>)
 8004ef4:	6018      	str	r0, [r3, #0]
  }
  test_end_step(3);

  /* [7.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	f387 8811 	msr	BASEPRI, r7
  if (--sp->cnt < (cnt_t)0) {
 8004efe:	9b05      	ldr	r3, [sp, #20]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	db6e      	blt.n	8004fe6 <rt_test_007_006_execute.lto_priv.0+0x156>
 8004f08:	f385 8811 	msr	BASEPRI, r5
 8004f0c:	f387 8811 	msr	BASEPRI, r7
 8004f10:	9b05      	ldr	r3, [sp, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc54      	bgt.n	8004fc0 <rt_test_007_006_execute.lto_priv.0+0x130>
 8004f16:	f385 8811 	msr	BASEPRI, r5
  test_end_step(4);

  /* [7.6.5] Signaling the binary semaphore, checking the binary
     semaphore state to be "not taken" and the underlying counter
     semaphore counter to be one.*/
  test_set_step(5);
 8004f1a:	2305      	movs	r3, #5
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	2330      	movs	r3, #48	; 0x30
 8004f20:	f383 8811 	msr	BASEPRI, r3
  if (bsp->sem.cnt < (cnt_t)1) {
 8004f24:	9b05      	ldr	r3, [sp, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f340 8097 	ble.w	800505a <rt_test_007_006_execute.lto_priv.0+0x1ca>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004f2c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f30:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004f34:	6892      	ldr	r2, [r2, #8]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d901      	bls.n	8004f40 <rt_test_007_006_execute.lto_priv.0+0xb0>
    __sch_reschedule_ahead();
 8004f3c:	f7fd fb60 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8004f40:	2300      	movs	r3, #0
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	2230      	movs	r2, #48	; 0x30
 8004f48:	f382 8811 	msr	BASEPRI, r2
 8004f4c:	9905      	ldr	r1, [sp, #20]
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	dd41      	ble.n	8004fd6 <rt_test_007_006_execute.lto_priv.0+0x146>
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f382 8811 	msr	BASEPRI, r2
 8004f5a:	9905      	ldr	r1, [sp, #20]
 8004f5c:	2901      	cmp	r1, #1
 8004f5e:	d174      	bne.n	800504a <rt_test_007_006_execute.lto_priv.0+0x1ba>
 8004f60:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(5);

  /* [7.6.6] Signaling the binary semaphore again, the internal state
     must not change from "not taken".*/
  test_set_step(6);
 8004f64:	2306      	movs	r3, #6
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	f382 8811 	msr	BASEPRI, r2
 8004f6c:	9b05      	ldr	r3, [sp, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	dd7f      	ble.n	8005072 <rt_test_007_006_execute.lto_priv.0+0x1e2>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004f72:	f8d9 2000 	ldr.w	r2, [r9]
 8004f76:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004f7a:	6892      	ldr	r2, [r2, #8]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d901      	bls.n	8004f86 <rt_test_007_006_execute.lto_priv.0+0xf6>
    __sch_reschedule_ahead();
 8004f82:	f7fd fb3d 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8004f86:	2300      	movs	r3, #0
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	2230      	movs	r2, #48	; 0x30
 8004f8e:	f382 8811 	msr	BASEPRI, r2
 8004f92:	9905      	ldr	r1, [sp, #20]
 8004f94:	4299      	cmp	r1, r3
 8004f96:	dd64      	ble.n	8005062 <rt_test_007_006_execute.lto_priv.0+0x1d2>
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f382 8811 	msr	BASEPRI, r2
 8004fa0:	9a05      	ldr	r2, [sp, #20]
 8004fa2:	2a01      	cmp	r2, #1
 8004fa4:	d151      	bne.n	800504a <rt_test_007_006_execute.lto_priv.0+0x1ba>
 8004fa6:	f383 8811 	msr	BASEPRI, r3
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
 8004faa:	e006      	b.n	8004fba <rt_test_007_006_execute.lto_priv.0+0x12a>
  chtest.failure_message = msg;
 8004fac:	4b38      	ldr	r3, [pc, #224]	; (8005090 <rt_test_007_006_execute.lto_priv.0+0x200>)
 8004fae:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8004fb0:	f240 1201 	movw	r2, #257	; 0x101
 8004fb4:	80a2      	strh	r2, [r4, #4]
 8004fb6:	f385 8811 	msr	BASEPRI, r5
}
 8004fba:	b006      	add	sp, #24
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8004fc0:	4b33      	ldr	r3, [pc, #204]	; (8005090 <rt_test_007_006_execute.lto_priv.0+0x200>)
 8004fc2:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8004fc4:	f240 1201 	movw	r2, #257	; 0x101
 8004fc8:	80a2      	strh	r2, [r4, #4]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	b006      	add	sp, #24
 8004fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8004fd6:	4a2f      	ldr	r2, [pc, #188]	; (8005094 <rt_test_007_006_execute.lto_priv.0+0x204>)
 8004fd8:	60a2      	str	r2, [r4, #8]
  chtest.global_fail     = true;
 8004fda:	f240 1101 	movw	r1, #257	; 0x101
 8004fde:	80a1      	strh	r1, [r4, #4]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8004fe4:	e7e9      	b.n	8004fba <rt_test_007_006_execute.lto_priv.0+0x12a>
  return __sch_get_currthread();
 8004fe6:	f8d9 a00c 	ldr.w	sl, [r9, #12]
  p->prev       = qp->prev;
 8004fea:	9b04      	ldr	r3, [sp, #16]
  p->next       = qp;
 8004fec:	f8ca 6000 	str.w	r6, [sl]
  p->prev       = qp->prev;
 8004ff0:	f8ca 3004 	str.w	r3, [sl, #4]
  ch_priority_queue_t *p = pqp->next;
 8004ff4:	f8d9 0000 	ldr.w	r0, [r9]
    currtp->u.wtsemp = sp;
 8004ff8:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
  p->prev->next = p;
 8004ffc:	f8c3 a000 	str.w	sl, [r3]
  otp->state = newstate;
 8005000:	2305      	movs	r3, #5
 8005002:	f88a 301c 	strb.w	r3, [sl, #28]
  pqp->next       = p->next;
 8005006:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8005008:	f8cd a010 	str.w	sl, [sp, #16]
  chSysSwitch(ntp, otp);
 800500c:	4651      	mov	r1, sl
  pqp->next->prev = pqp;
 800500e:	f8c3 9004 	str.w	r9, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005012:	f880 801c 	strb.w	r8, [r0, #28]
  pqp->next       = p->next;
 8005016:	f8c9 3000 	str.w	r3, [r9]
  __instance_set_currthread(oip, ntp);
 800501a:	f8c9 000c 	str.w	r0, [r9, #12]
  chSysSwitch(ntp, otp);
 800501e:	f7fb f94f 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8005022:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 8005026:	f385 8811 	msr	BASEPRI, r5
 800502a:	f387 8811 	msr	BASEPRI, r7
  if (!condition) {
 800502e:	9b05      	ldr	r3, [sp, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	dcc5      	bgt.n	8004fc0 <rt_test_007_006_execute.lto_priv.0+0x130>
 8005034:	f385 8811 	msr	BASEPRI, r5
 8005038:	2a00      	cmp	r2, #0
 800503a:	f43f af6e 	beq.w	8004f1a <rt_test_007_006_execute.lto_priv.0+0x8a>
  chtest.failure_message = msg;
 800503e:	4b16      	ldr	r3, [pc, #88]	; (8005098 <rt_test_007_006_execute.lto_priv.0+0x208>)
 8005040:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8005042:	f240 1201 	movw	r2, #257	; 0x101
 8005046:	80a2      	strh	r2, [r4, #4]
  return true;
 8005048:	e7b7      	b.n	8004fba <rt_test_007_006_execute.lto_priv.0+0x12a>
  chtest.failure_message = msg;
 800504a:	4a14      	ldr	r2, [pc, #80]	; (800509c <rt_test_007_006_execute.lto_priv.0+0x20c>)
 800504c:	60a2      	str	r2, [r4, #8]
  chtest.global_fail     = true;
 800504e:	f240 1101 	movw	r1, #257	; 0x101
 8005052:	80a1      	strh	r1, [r4, #4]
 8005054:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8005058:	e7af      	b.n	8004fba <rt_test_007_006_execute.lto_priv.0+0x12a>
    chSemSignalI(&bsp->sem);
 800505a:	4630      	mov	r0, r6
 800505c:	f7fc fab0 	bl	80015c0 <chSemSignalI>
 8005060:	e764      	b.n	8004f2c <rt_test_007_006_execute.lto_priv.0+0x9c>
  chtest.failure_message = msg;
 8005062:	4a0f      	ldr	r2, [pc, #60]	; (80050a0 <rt_test_007_006_execute.lto_priv.0+0x210>)
 8005064:	60a2      	str	r2, [r4, #8]
  chtest.global_fail     = true;
 8005066:	f240 1101 	movw	r1, #257	; 0x101
 800506a:	80a1      	strh	r1, [r4, #4]
 800506c:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8005070:	e7a3      	b.n	8004fba <rt_test_007_006_execute.lto_priv.0+0x12a>
 8005072:	4630      	mov	r0, r6
 8005074:	f7fc faa4 	bl	80015c0 <chSemSignalI>
 8005078:	e77b      	b.n	8004f72 <rt_test_007_006_execute.lto_priv.0+0xe2>
 800507a:	bf00      	nop
 800507c:	20000ab4 	.word	0x20000ab4
 8005080:	200009b8 	.word	0x200009b8
 8005084:	080028d1 	.word	0x080028d1
 8005088:	20000d40 	.word	0x20000d40
 800508c:	20001744 	.word	0x20001744
 8005090:	0800bcf4 	.word	0x0800bcf4
 8005094:	0800bd14 	.word	0x0800bd14
 8005098:	0800bd00 	.word	0x0800bd00
 800509c:	0800bd20 	.word	0x0800bd20
 80050a0:	0800bcf8 	.word	0x0800bcf8
	...

080050b0 <rt_test_008_007_execute.lto_priv.0>:
static void rt_test_008_007_execute(void) {
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	4d5f      	ldr	r5, [pc, #380]	; (8005230 <rt_test_008_007_execute.lto_priv.0+0x180>)
  test_set_step(1);
 80050b4:	4f5f      	ldr	r7, [pc, #380]	; (8005234 <rt_test_008_007_execute.lto_priv.0+0x184>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80050b6:	68eb      	ldr	r3, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80050b8:	495f      	ldr	r1, [pc, #380]	; (8005238 <rt_test_008_007_execute.lto_priv.0+0x188>)
 80050ba:	689e      	ldr	r6, [r3, #8]
 80050bc:	485f      	ldr	r0, [pc, #380]	; (800523c <rt_test_008_007_execute.lto_priv.0+0x18c>)
 80050be:	4b60      	ldr	r3, [pc, #384]	; (8005240 <rt_test_008_007_execute.lto_priv.0+0x190>)
 80050c0:	4c60      	ldr	r4, [pc, #384]	; (8005244 <rt_test_008_007_execute.lto_priv.0+0x194>)
static void rt_test_008_007_execute(void) {
 80050c2:	b083      	sub	sp, #12
  test_set_step(1);
 80050c4:	2201      	movs	r2, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80050c6:	9100      	str	r1, [sp, #0]
  test_set_step(1);
 80050c8:	603a      	str	r2, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80050ca:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80050ce:	18b2      	adds	r2, r6, r2
 80050d0:	f7ff fa56 	bl	8004580 <chThdCreateStatic>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80050d4:	4b5c      	ldr	r3, [pc, #368]	; (8005248 <rt_test_008_007_execute.lto_priv.0+0x198>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80050d6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80050d8:	1cb2      	adds	r2, r6, #2
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80050e0:	4b57      	ldr	r3, [pc, #348]	; (8005240 <rt_test_008_007_execute.lto_priv.0+0x190>)
 80050e2:	485a      	ldr	r0, [pc, #360]	; (800524c <rt_test_008_007_execute.lto_priv.0+0x19c>)
 80050e4:	f7ff fa4c 	bl	8004580 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80050e8:	4b59      	ldr	r3, [pc, #356]	; (8005250 <rt_test_008_007_execute.lto_priv.0+0x1a0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80050ea:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80050ec:	1cf2      	adds	r2, r6, #3
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80050f4:	4b52      	ldr	r3, [pc, #328]	; (8005240 <rt_test_008_007_execute.lto_priv.0+0x190>)
 80050f6:	4857      	ldr	r0, [pc, #348]	; (8005254 <rt_test_008_007_execute.lto_priv.0+0x1a4>)
 80050f8:	f7ff fa42 	bl	8004580 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80050fc:	4b56      	ldr	r3, [pc, #344]	; (8005258 <rt_test_008_007_execute.lto_priv.0+0x1a8>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80050fe:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8005100:	1d32      	adds	r2, r6, #4
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005108:	4b4d      	ldr	r3, [pc, #308]	; (8005240 <rt_test_008_007_execute.lto_priv.0+0x190>)
 800510a:	4854      	ldr	r0, [pc, #336]	; (800525c <rt_test_008_007_execute.lto_priv.0+0x1ac>)
 800510c:	f7ff fa38 	bl	8004580 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8005110:	4b53      	ldr	r3, [pc, #332]	; (8005260 <rt_test_008_007_execute.lto_priv.0+0x1b0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8005112:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8005114:	1d72      	adds	r2, r6, #5
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800511c:	4b48      	ldr	r3, [pc, #288]	; (8005240 <rt_test_008_007_execute.lto_priv.0+0x190>)
 800511e:	4851      	ldr	r0, [pc, #324]	; (8005264 <rt_test_008_007_execute.lto_priv.0+0x1b4>)
 8005120:	f7ff fa2e 	bl	8004580 <chThdCreateStatic>
  test_set_step(2);
 8005124:	2302      	movs	r3, #2
 8005126:	603b      	str	r3, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8005128:	6120      	str	r0, [r4, #16]
 800512a:	2330      	movs	r3, #48	; 0x30
 800512c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8005130:	4b4d      	ldr	r3, [pc, #308]	; (8005268 <rt_test_008_007_execute.lto_priv.0+0x1b8>)
 8005132:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (ch_queue_notempty(&cp->queue)) {
 8005134:	429a      	cmp	r2, r3
 8005136:	d05c      	beq.n	80051f2 <rt_test_008_007_execute.lto_priv.0+0x142>
  qp->next       = p->next;
 8005138:	6811      	ldr	r1, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800513a:	6896      	ldr	r6, [r2, #8]
  qp->next->prev = qp;
 800513c:	604b      	str	r3, [r1, #4]
    thread_t *tp = threadref(ch_queue_fifo_remove(&cp->queue));
    tp->u.rdymsg = MSG_OK;
 800513e:	2000      	movs	r0, #0
 8005140:	6350      	str	r0, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8005142:	7710      	strb	r0, [r2, #28]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005144:	6910      	ldr	r0, [r2, #16]
  qp->next       = p->next;
 8005146:	6019      	str	r1, [r3, #0]
    pqp = pqp->next;
 8005148:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800514a:	6884      	ldr	r4, [r0, #8]
 800514c:	42b4      	cmp	r4, r6
 800514e:	d2fb      	bcs.n	8005148 <rt_test_008_007_execute.lto_priv.0+0x98>
  p->prev       = pqp->prev;
 8005150:	6844      	ldr	r4, [r0, #4]
  p->next       = pqp;
 8005152:	6010      	str	r0, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8005154:	4299      	cmp	r1, r3
  p->prev       = pqp->prev;
 8005156:	6054      	str	r4, [r2, #4]
  p->prev->next = p;
 8005158:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 800515a:	6042      	str	r2, [r0, #4]
 800515c:	d049      	beq.n	80051f2 <rt_test_008_007_execute.lto_priv.0+0x142>
  qp->next       = p->next;
 800515e:	680a      	ldr	r2, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005160:	688e      	ldr	r6, [r1, #8]
  qp->next->prev = qp;
 8005162:	6053      	str	r3, [r2, #4]
    tp->u.rdymsg = MSG_OK;
 8005164:	2000      	movs	r0, #0
 8005166:	6348      	str	r0, [r1, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8005168:	7708      	strb	r0, [r1, #28]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800516a:	6908      	ldr	r0, [r1, #16]
  qp->next       = p->next;
 800516c:	601a      	str	r2, [r3, #0]
    pqp = pqp->next;
 800516e:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005170:	6884      	ldr	r4, [r0, #8]
 8005172:	42b4      	cmp	r4, r6
 8005174:	d2fb      	bcs.n	800516e <rt_test_008_007_execute.lto_priv.0+0xbe>
  p->prev       = pqp->prev;
 8005176:	6844      	ldr	r4, [r0, #4]
  p->next       = pqp;
 8005178:	6008      	str	r0, [r1, #0]
  if (ch_queue_notempty(&cp->queue)) {
 800517a:	429a      	cmp	r2, r3
  p->prev       = pqp->prev;
 800517c:	604c      	str	r4, [r1, #4]
  p->prev->next = p;
 800517e:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 8005180:	6041      	str	r1, [r0, #4]
 8005182:	d036      	beq.n	80051f2 <rt_test_008_007_execute.lto_priv.0+0x142>
  qp->next       = p->next;
 8005184:	6811      	ldr	r1, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005186:	6896      	ldr	r6, [r2, #8]
  qp->next->prev = qp;
 8005188:	604b      	str	r3, [r1, #4]
    tp->u.rdymsg = MSG_OK;
 800518a:	2000      	movs	r0, #0
 800518c:	6350      	str	r0, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 800518e:	7710      	strb	r0, [r2, #28]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005190:	6910      	ldr	r0, [r2, #16]
  qp->next       = p->next;
 8005192:	6019      	str	r1, [r3, #0]
    pqp = pqp->next;
 8005194:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005196:	6884      	ldr	r4, [r0, #8]
 8005198:	42b4      	cmp	r4, r6
 800519a:	d2fb      	bcs.n	8005194 <rt_test_008_007_execute.lto_priv.0+0xe4>
  p->prev       = pqp->prev;
 800519c:	6844      	ldr	r4, [r0, #4]
  p->next       = pqp;
 800519e:	6010      	str	r0, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 80051a0:	4299      	cmp	r1, r3
  p->prev       = pqp->prev;
 80051a2:	6054      	str	r4, [r2, #4]
  p->prev->next = p;
 80051a4:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 80051a6:	6042      	str	r2, [r0, #4]
 80051a8:	d023      	beq.n	80051f2 <rt_test_008_007_execute.lto_priv.0+0x142>
  qp->next       = p->next;
 80051aa:	680a      	ldr	r2, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80051ac:	688e      	ldr	r6, [r1, #8]
  qp->next->prev = qp;
 80051ae:	6053      	str	r3, [r2, #4]
    tp->u.rdymsg = MSG_OK;
 80051b0:	2000      	movs	r0, #0
 80051b2:	6348      	str	r0, [r1, #52]	; 0x34
  tp->state = CH_STATE_READY;
 80051b4:	7708      	strb	r0, [r1, #28]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80051b6:	6908      	ldr	r0, [r1, #16]
  qp->next       = p->next;
 80051b8:	601a      	str	r2, [r3, #0]
    pqp = pqp->next;
 80051ba:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80051bc:	6884      	ldr	r4, [r0, #8]
 80051be:	42b4      	cmp	r4, r6
 80051c0:	d2fb      	bcs.n	80051ba <rt_test_008_007_execute.lto_priv.0+0x10a>
  p->prev       = pqp->prev;
 80051c2:	6844      	ldr	r4, [r0, #4]
  p->next       = pqp;
 80051c4:	6008      	str	r0, [r1, #0]
  if (ch_queue_notempty(&cp->queue)) {
 80051c6:	429a      	cmp	r2, r3
  p->prev       = pqp->prev;
 80051c8:	604c      	str	r4, [r1, #4]
  p->prev->next = p;
 80051ca:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 80051cc:	6041      	str	r1, [r0, #4]
 80051ce:	d010      	beq.n	80051f2 <rt_test_008_007_execute.lto_priv.0+0x142>
  qp->next       = p->next;
 80051d0:	6810      	ldr	r0, [r2, #0]
 80051d2:	6018      	str	r0, [r3, #0]
  qp->next->prev = qp;
 80051d4:	6043      	str	r3, [r0, #4]
    tp->u.rdymsg = MSG_OK;
 80051d6:	2100      	movs	r1, #0
 80051d8:	6913      	ldr	r3, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 80051da:	6890      	ldr	r0, [r2, #8]
 80051dc:	6351      	str	r1, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 80051de:	7711      	strb	r1, [r2, #28]
    pqp = pqp->next;
 80051e0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80051e2:	6899      	ldr	r1, [r3, #8]
 80051e4:	4281      	cmp	r1, r0
 80051e6:	d2fb      	bcs.n	80051e0 <rt_test_008_007_execute.lto_priv.0+0x130>
  p->prev       = pqp->prev;
 80051e8:	6859      	ldr	r1, [r3, #4]
 80051ea:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 80051ee:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 80051f0:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80051f2:	682a      	ldr	r2, [r5, #0]
 80051f4:	68eb      	ldr	r3, [r5, #12]
 80051f6:	6892      	ldr	r2, [r2, #8]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d901      	bls.n	8005202 <rt_test_008_007_execute.lto_priv.0+0x152>
    __sch_reschedule_ahead();
 80051fe:	f7fd f9ff 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8005202:	2600      	movs	r6, #0
 8005204:	f386 8811 	msr	BASEPRI, r6
 8005208:	4c0e      	ldr	r4, [pc, #56]	; (8005244 <rt_test_008_007_execute.lto_priv.0+0x194>)
 800520a:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800520e:	f854 0b04 	ldr.w	r0, [r4], #4
 8005212:	b118      	cbz	r0, 800521c <rt_test_008_007_execute.lto_priv.0+0x16c>
      chThdWait(threads[i]);
 8005214:	f7fc fa64 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8005218:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800521c:	42a5      	cmp	r5, r4
 800521e:	d1f6      	bne.n	800520e <rt_test_008_007_execute.lto_priv.0+0x15e>
    test_assert_sequence("ABCDE", "invalid sequence");
 8005220:	4912      	ldr	r1, [pc, #72]	; (800526c <rt_test_008_007_execute.lto_priv.0+0x1bc>)
 8005222:	4813      	ldr	r0, [pc, #76]	; (8005270 <rt_test_008_007_execute.lto_priv.0+0x1c0>)
}
 8005224:	b003      	add	sp, #12
 8005226:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800522a:	f7fb bbf1 	b.w	8000a10 <__test_assert_sequence>
 800522e:	bf00      	nop
 8005230:	200009b8 	.word	0x200009b8
 8005234:	20000ab4 	.word	0x20000ab4
 8005238:	0800bcb0 	.word	0x0800bcb0
 800523c:	20000d40 	.word	0x20000d40
 8005240:	08006021 	.word	0x08006021
 8005244:	20001744 	.word	0x20001744
 8005248:	0800ba3c 	.word	0x0800ba3c
 800524c:	20000f20 	.word	0x20000f20
 8005250:	0800ba30 	.word	0x0800ba30
 8005254:	20001100 	.word	0x20001100
 8005258:	0800ba24 	.word	0x0800ba24
 800525c:	200012e0 	.word	0x200012e0
 8005260:	0800ba18 	.word	0x0800ba18
 8005264:	200014c0 	.word	0x200014c0
 8005268:	20000800 	.word	0x20000800
 800526c:	0800b9c8 	.word	0x0800b9c8
 8005270:	0800bcac 	.word	0x0800bcac
	...

08005280 <rt_test_008_008_execute.lto_priv.0>:
static void rt_test_008_008_execute(void) {
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
  return __sch_get_currthread();
 8005282:	4e3c      	ldr	r6, [pc, #240]	; (8005374 <rt_test_008_008_execute.lto_priv.0+0xf4>)
  test_set_step(1);
 8005284:	4f3c      	ldr	r7, [pc, #240]	; (8005378 <rt_test_008_008_execute.lto_priv.0+0xf8>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005286:	68f3      	ldr	r3, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8005288:	493c      	ldr	r1, [pc, #240]	; (800537c <rt_test_008_008_execute.lto_priv.0+0xfc>)
 800528a:	689d      	ldr	r5, [r3, #8]
 800528c:	483c      	ldr	r0, [pc, #240]	; (8005380 <rt_test_008_008_execute.lto_priv.0+0x100>)
 800528e:	4b3d      	ldr	r3, [pc, #244]	; (8005384 <rt_test_008_008_execute.lto_priv.0+0x104>)
 8005290:	4c3d      	ldr	r4, [pc, #244]	; (8005388 <rt_test_008_008_execute.lto_priv.0+0x108>)
static void rt_test_008_008_execute(void) {
 8005292:	b083      	sub	sp, #12
  test_set_step(1);
 8005294:	2201      	movs	r2, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8005296:	9100      	str	r1, [sp, #0]
  test_set_step(1);
 8005298:	603a      	str	r2, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800529a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800529e:	18aa      	adds	r2, r5, r2
 80052a0:	f7ff f96e 	bl	8004580 <chThdCreateStatic>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80052a4:	4b39      	ldr	r3, [pc, #228]	; (800538c <rt_test_008_008_execute.lto_priv.0+0x10c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80052a6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80052a8:	1caa      	adds	r2, r5, #2
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80052b0:	4b34      	ldr	r3, [pc, #208]	; (8005384 <rt_test_008_008_execute.lto_priv.0+0x104>)
 80052b2:	4837      	ldr	r0, [pc, #220]	; (8005390 <rt_test_008_008_execute.lto_priv.0+0x110>)
 80052b4:	f7ff f964 	bl	8004580 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80052b8:	4b36      	ldr	r3, [pc, #216]	; (8005394 <rt_test_008_008_execute.lto_priv.0+0x114>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80052ba:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80052bc:	1cea      	adds	r2, r5, #3
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80052c4:	4b2f      	ldr	r3, [pc, #188]	; (8005384 <rt_test_008_008_execute.lto_priv.0+0x104>)
 80052c6:	4834      	ldr	r0, [pc, #208]	; (8005398 <rt_test_008_008_execute.lto_priv.0+0x118>)
 80052c8:	f7ff f95a 	bl	8004580 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80052cc:	4b33      	ldr	r3, [pc, #204]	; (800539c <rt_test_008_008_execute.lto_priv.0+0x11c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80052ce:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80052d0:	1d2a      	adds	r2, r5, #4
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80052d8:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <rt_test_008_008_execute.lto_priv.0+0x104>)
 80052da:	4831      	ldr	r0, [pc, #196]	; (80053a0 <rt_test_008_008_execute.lto_priv.0+0x120>)
 80052dc:	f7ff f950 	bl	8004580 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80052e0:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <rt_test_008_008_execute.lto_priv.0+0x124>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80052e2:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80052e4:	1d6a      	adds	r2, r5, #5
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80052ec:	4b25      	ldr	r3, [pc, #148]	; (8005384 <rt_test_008_008_execute.lto_priv.0+0x104>)
 80052ee:	482e      	ldr	r0, [pc, #184]	; (80053a8 <rt_test_008_008_execute.lto_priv.0+0x128>)
 80052f0:	f7ff f946 	bl	8004580 <chThdCreateStatic>
  test_set_step(2);
 80052f4:	2302      	movs	r3, #2
 80052f6:	603b      	str	r3, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80052f8:	6120      	str	r0, [r4, #16]
 80052fa:	2330      	movs	r3, #48	; 0x30
 80052fc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8005300:	482a      	ldr	r0, [pc, #168]	; (80053ac <rt_test_008_008_execute.lto_priv.0+0x12c>)
 8005302:	6801      	ldr	r1, [r0, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (ch_queue_notempty(&cp->queue)) {
 8005304:	4281      	cmp	r1, r0
 8005306:	d017      	beq.n	8005338 <rt_test_008_008_execute.lto_priv.0+0xb8>
  tp->state = CH_STATE_READY;
 8005308:	f04f 0c00 	mov.w	ip, #0
    chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 800530c:	f06f 0701 	mvn.w	r7, #1
 8005310:	460b      	mov	r3, r1
  qp->next       = p->next;
 8005312:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005314:	691a      	ldr	r2, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8005316:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 8005318:	6001      	str	r1, [r0, #0]
  qp->next->prev = qp;
 800531a:	6048      	str	r0, [r1, #4]
  tp->state = CH_STATE_READY;
 800531c:	f883 c01c 	strb.w	ip, [r3, #28]
    pqp = pqp->next;
 8005320:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005322:	6894      	ldr	r4, [r2, #8]
 8005324:	42ac      	cmp	r4, r5
 8005326:	d2fb      	bcs.n	8005320 <rt_test_008_008_execute.lto_priv.0+0xa0>
  p->prev       = pqp->prev;
 8005328:	6854      	ldr	r4, [r2, #4]
  while (ch_queue_notempty(&cp->queue)) {
 800532a:	4281      	cmp	r1, r0
 800532c:	e9c3 2400 	strd	r2, r4, [r3]
  p->prev->next = p;
 8005330:	6023      	str	r3, [r4, #0]
  pqp->prev     = p;
 8005332:	6053      	str	r3, [r2, #4]
    chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 8005334:	635f      	str	r7, [r3, #52]	; 0x34
  while (ch_queue_notempty(&cp->queue)) {
 8005336:	d1eb      	bne.n	8005310 <rt_test_008_008_execute.lto_priv.0+0x90>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005338:	6832      	ldr	r2, [r6, #0]
 800533a:	68f3      	ldr	r3, [r6, #12]
 800533c:	6892      	ldr	r2, [r2, #8]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	d901      	bls.n	8005348 <rt_test_008_008_execute.lto_priv.0+0xc8>
    __sch_reschedule_ahead();
 8005344:	f7fd f95c 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8005348:	2600      	movs	r6, #0
 800534a:	f386 8811 	msr	BASEPRI, r6
 800534e:	4c0e      	ldr	r4, [pc, #56]	; (8005388 <rt_test_008_008_execute.lto_priv.0+0x108>)
 8005350:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005354:	f854 0b04 	ldr.w	r0, [r4], #4
 8005358:	b118      	cbz	r0, 8005362 <rt_test_008_008_execute.lto_priv.0+0xe2>
      chThdWait(threads[i]);
 800535a:	f7fc f9c1 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 800535e:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005362:	42a5      	cmp	r5, r4
 8005364:	d1f6      	bne.n	8005354 <rt_test_008_008_execute.lto_priv.0+0xd4>
    test_assert_sequence("ABCDE", "invalid sequence");
 8005366:	4912      	ldr	r1, [pc, #72]	; (80053b0 <rt_test_008_008_execute.lto_priv.0+0x130>)
 8005368:	4812      	ldr	r0, [pc, #72]	; (80053b4 <rt_test_008_008_execute.lto_priv.0+0x134>)
}
 800536a:	b003      	add	sp, #12
 800536c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8005370:	f7fb bb4e 	b.w	8000a10 <__test_assert_sequence>
 8005374:	200009b8 	.word	0x200009b8
 8005378:	20000ab4 	.word	0x20000ab4
 800537c:	0800bcb0 	.word	0x0800bcb0
 8005380:	20000d40 	.word	0x20000d40
 8005384:	08006021 	.word	0x08006021
 8005388:	20001744 	.word	0x20001744
 800538c:	0800ba3c 	.word	0x0800ba3c
 8005390:	20000f20 	.word	0x20000f20
 8005394:	0800ba30 	.word	0x0800ba30
 8005398:	20001100 	.word	0x20001100
 800539c:	0800ba24 	.word	0x0800ba24
 80053a0:	200012e0 	.word	0x200012e0
 80053a4:	0800ba18 	.word	0x0800ba18
 80053a8:	200014c0 	.word	0x200014c0
 80053ac:	20000800 	.word	0x20000800
 80053b0:	0800b9c8 	.word	0x0800b9c8
 80053b4:	0800bcac 	.word	0x0800bcac
	...

080053c0 <rt_test_008_009_execute.lto_priv.0>:

static void rt_test_008_009_execute(void) {
 80053c0:	b570      	push	{r4, r5, r6, lr}
  return __sch_get_currthread();
 80053c2:	4b30      	ldr	r3, [pc, #192]	; (8005484 <rt_test_008_009_execute.lto_priv.0+0xc4>)
  }
  test_end_step(1);

  /* [8.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 80053c4:	4d30      	ldr	r5, [pc, #192]	; (8005488 <rt_test_008_009_execute.lto_priv.0+0xc8>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80053c6:	68db      	ldr	r3, [r3, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80053c8:	4830      	ldr	r0, [pc, #192]	; (800548c <rt_test_008_009_execute.lto_priv.0+0xcc>)
 80053ca:	689e      	ldr	r6, [r3, #8]
 80053cc:	4b30      	ldr	r3, [pc, #192]	; (8005490 <rt_test_008_009_execute.lto_priv.0+0xd0>)
 80053ce:	4c31      	ldr	r4, [pc, #196]	; (8005494 <rt_test_008_009_execute.lto_priv.0+0xd4>)
static void rt_test_008_009_execute(void) {
 80053d0:	b082      	sub	sp, #8
  test_set_step(2);
 80053d2:	2102      	movs	r1, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80053d4:	9000      	str	r0, [sp, #0]
 80053d6:	1c72      	adds	r2, r6, #1
  test_set_step(2);
 80053d8:	6029      	str	r1, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80053da:	482f      	ldr	r0, [pc, #188]	; (8005498 <rt_test_008_009_execute.lto_priv.0+0xd8>)
 80053dc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80053e0:	f7ff f8ce 	bl	8004580 <chThdCreateStatic>

  /* [8.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80053e4:	4a2d      	ldr	r2, [pc, #180]	; (800549c <rt_test_008_009_execute.lto_priv.0+0xdc>)
 80053e6:	9200      	str	r2, [sp, #0]
  test_set_step(3);
 80053e8:	2303      	movs	r3, #3
 80053ea:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80053ec:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80053ee:	1cb2      	adds	r2, r6, #2
 80053f0:	4b2b      	ldr	r3, [pc, #172]	; (80054a0 <rt_test_008_009_execute.lto_priv.0+0xe0>)
 80053f2:	482c      	ldr	r0, [pc, #176]	; (80054a4 <rt_test_008_009_execute.lto_priv.0+0xe4>)
 80053f4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80053f8:	f7ff f8c2 	bl	8004580 <chThdCreateStatic>

  /* [8.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 80053fc:	4a2a      	ldr	r2, [pc, #168]	; (80054a8 <rt_test_008_009_execute.lto_priv.0+0xe8>)
 80053fe:	9200      	str	r2, [sp, #0]
  test_set_step(4);
 8005400:	2304      	movs	r3, #4
 8005402:	602b      	str	r3, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8005404:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8005406:	4b29      	ldr	r3, [pc, #164]	; (80054ac <rt_test_008_009_execute.lto_priv.0+0xec>)
 8005408:	4829      	ldr	r0, [pc, #164]	; (80054b0 <rt_test_008_009_execute.lto_priv.0+0xf0>)
 800540a:	1cf2      	adds	r2, r6, #3
 800540c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005410:	f7ff f8b6 	bl	8004580 <chThdCreateStatic>
  test_end_step(4);

  /* [8.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8005414:	2305      	movs	r3, #5
 8005416:	602b      	str	r3, [r5, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8005418:	60a0      	str	r0, [r4, #8]
 800541a:	2330      	movs	r3, #48	; 0x30
 800541c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8005420:	4c24      	ldr	r4, [pc, #144]	; (80054b4 <rt_test_008_009_execute.lto_priv.0+0xf4>)
 8005422:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8005424:	42a0      	cmp	r0, r4
 8005426:	d005      	beq.n	8005434 <rt_test_008_009_execute.lto_priv.0+0x74>
  qp->next       = p->next;
 8005428:	6803      	ldr	r3, [r0, #0]
 800542a:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&cp->queue)), MSG_OK);
 800542c:	2100      	movs	r1, #0
  qp->next->prev = qp;
 800542e:	605c      	str	r4, [r3, #4]
 8005430:	f7fe fd8e 	bl	8003f50 <chSchWakeupS>
 8005434:	2100      	movs	r1, #0
 8005436:	f381 8811 	msr	BASEPRI, r1
    chCondSignal(&c1);
  }
  test_end_step(5);

  /* [8.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 800543a:	2306      	movs	r3, #6
 800543c:	602b      	str	r3, [r5, #0]
 800543e:	2330      	movs	r3, #48	; 0x30
 8005440:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8005444:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8005446:	42a0      	cmp	r0, r4
 8005448:	d004      	beq.n	8005454 <rt_test_008_009_execute.lto_priv.0+0x94>
  qp->next       = p->next;
 800544a:	6803      	ldr	r3, [r0, #0]
 800544c:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 800544e:	605c      	str	r4, [r3, #4]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&cp->queue)), MSG_OK);
 8005450:	f7fe fd7e 	bl	8003f50 <chSchWakeupS>
 8005454:	2600      	movs	r6, #0
 8005456:	f386 8811 	msr	BASEPRI, r6
    chCondSignal(&c1);
  }
  test_end_step(6);

  /* [8.9.7] Checking the order of operations.*/
  test_set_step(7);
 800545a:	4c0e      	ldr	r4, [pc, #56]	; (8005494 <rt_test_008_009_execute.lto_priv.0+0xd4>)
 800545c:	2307      	movs	r3, #7
 800545e:	602b      	str	r3, [r5, #0]
 8005460:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005464:	f854 0b04 	ldr.w	r0, [r4], #4
 8005468:	b118      	cbz	r0, 8005472 <rt_test_008_009_execute.lto_priv.0+0xb2>
      chThdWait(threads[i]);
 800546a:	f7fc f939 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 800546e:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005472:	42a5      	cmp	r5, r4
 8005474:	d1f6      	bne.n	8005464 <rt_test_008_009_execute.lto_priv.0+0xa4>
  {
    test_wait_threads();
    test_assert_sequence("ABC", "invalid sequence");
 8005476:	4910      	ldr	r1, [pc, #64]	; (80054b8 <rt_test_008_009_execute.lto_priv.0+0xf8>)
 8005478:	4810      	ldr	r0, [pc, #64]	; (80054bc <rt_test_008_009_execute.lto_priv.0+0xfc>)
  }
  test_end_step(7);
}
 800547a:	b002      	add	sp, #8
 800547c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8005480:	f7fb bac6 	b.w	8000a10 <__test_assert_sequence>
 8005484:	200009b8 	.word	0x200009b8
 8005488:	20000ab4 	.word	0x20000ab4
 800548c:	0800ba18 	.word	0x0800ba18
 8005490:	080060c1 	.word	0x080060c1
 8005494:	20001744 	.word	0x20001744
 8005498:	20000d40 	.word	0x20000d40
 800549c:	0800ba30 	.word	0x0800ba30
 80054a0:	08006021 	.word	0x08006021
 80054a4:	20000f20 	.word	0x20000f20
 80054a8:	0800ba24 	.word	0x0800ba24
 80054ac:	08006181 	.word	0x08006181
 80054b0:	20001100 	.word	0x20001100
 80054b4:	20000800 	.word	0x20000800
 80054b8:	0800b9c8 	.word	0x0800b9c8
 80054bc:	0800b9dc 	.word	0x0800b9dc

080054c0 <rt_test_009_001_execute.lto_priv.0>:
 * - [9.1.1] Starting the messenger thread.
 * - [9.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_009_001_execute(void) {
 80054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return __sch_get_currthread();
 80054c4:	4f30      	ldr	r7, [pc, #192]	; (8005588 <rt_test_009_001_execute.lto_priv.0+0xc8>)
  thread_t *tp;
  msg_t msg;

  /* [9.1.1] Starting the messenger thread.*/
  test_set_step(1);
 80054c6:	4e31      	ldr	r6, [pc, #196]	; (800558c <rt_test_009_001_execute.lto_priv.0+0xcc>)
 80054c8:	68f9      	ldr	r1, [r7, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80054ca:	4b31      	ldr	r3, [pc, #196]	; (8005590 <rt_test_009_001_execute.lto_priv.0+0xd0>)
 80054cc:	688a      	ldr	r2, [r1, #8]
 80054ce:	4831      	ldr	r0, [pc, #196]	; (8005594 <rt_test_009_001_execute.lto_priv.0+0xd4>)
static void rt_test_009_001_execute(void) {
 80054d0:	b085      	sub	sp, #20
  test_set_step(1);
 80054d2:	f04f 0901 	mov.w	r9, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80054d6:	9100      	str	r1, [sp, #0]
 80054d8:	444a      	add	r2, r9
  test_set_step(1);
 80054da:	f8c6 9000 	str.w	r9, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80054de:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80054e2:	f7ff f84d 	bl	8004580 <chThdCreateStatic>
 80054e6:	4b2c      	ldr	r3, [pc, #176]	; (8005598 <rt_test_009_001_execute.lto_priv.0+0xd8>)
  }
  test_end_step(1);

  /* [9.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 80054e8:	46b0      	mov	r8, r6
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80054ea:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 80054ec:	2302      	movs	r3, #2
 80054ee:	f848 3b20 	str.w	r3, [r8], #32
 80054f2:	f04f 0b04 	mov.w	fp, #4
 80054f6:	2530      	movs	r5, #48	; 0x30
 80054f8:	f385 8811 	msr	BASEPRI, r5
 80054fc:	68f9      	ldr	r1, [r7, #12]
 80054fe:	460c      	mov	r4, r1
 8005500:	f04f 0a00 	mov.w	sl, #0
 8005504:	f854 0f3c 	ldr.w	r0, [r4, #60]!
 8005508:	42a0      	cmp	r0, r4
 800550a:	d02d      	beq.n	8005568 <rt_test_009_001_execute.lto_priv.0+0xa8>
  qp->next       = p->next;
 800550c:	6802      	ldr	r2, [r0, #0]
 800550e:	63ca      	str	r2, [r1, #60]	; 0x3c
  tp->state = CH_STATE_SNDMSG;
 8005510:	f04f 0c0d 	mov.w	ip, #13
  qp->next->prev = qp;
 8005514:	6054      	str	r4, [r2, #4]
 8005516:	f880 c01c 	strb.w	ip, [r0, #28]
 800551a:	f38a 8811 	msr	BASEPRI, sl
  return tp->u.sentmsg;
 800551e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005520:	f385 8811 	msr	BASEPRI, r5
  chSchWakeupS(tp, msg);
 8005524:	4621      	mov	r1, r4
 8005526:	f7fe fd13 	bl	8003f50 <chSchWakeupS>
 800552a:	f38a 8811 	msr	BASEPRI, sl
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800552e:	68f3      	ldr	r3, [r6, #12]
 8005530:	4543      	cmp	r3, r8
 8005532:	d202      	bcs.n	800553a <rt_test_009_001_execute.lto_priv.0+0x7a>
    *chtest.tokp++ = token;
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	60f2      	str	r2, [r6, #12]

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8005538:	701c      	strb	r4, [r3, #0]
    for (i = 0; i < 4; i++) {
 800553a:	f1bb 0b01 	subs.w	fp, fp, #1
 800553e:	d1db      	bne.n	80054f8 <rt_test_009_001_execute.lto_priv.0+0x38>
 8005540:	4c15      	ldr	r4, [pc, #84]	; (8005598 <rt_test_009_001_execute.lto_priv.0+0xd8>)
      threads[i] = NULL;
 8005542:	465d      	mov	r5, fp
 8005544:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 8005548:	f854 0b04 	ldr.w	r0, [r4], #4
 800554c:	b118      	cbz	r0, 8005556 <rt_test_009_001_execute.lto_priv.0+0x96>
      chThdWait(threads[i]);
 800554e:	f7fc f8c7 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8005552:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005556:	42a6      	cmp	r6, r4
 8005558:	d1f6      	bne.n	8005548 <rt_test_009_001_execute.lto_priv.0+0x88>
    }
    test_wait_threads();
    test_assert_sequence("ABCD", "invalid sequence");
 800555a:	4910      	ldr	r1, [pc, #64]	; (800559c <rt_test_009_001_execute.lto_priv.0+0xdc>)
 800555c:	4810      	ldr	r0, [pc, #64]	; (80055a0 <rt_test_009_001_execute.lto_priv.0+0xe0>)
  }
  test_end_step(2);
}
 800555e:	b005      	add	sp, #20
 8005560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8005564:	f7fb ba54 	b.w	8000a10 <__test_assert_sequence>
  ch_priority_queue_t *p = pqp->next;
 8005568:	6838      	ldr	r0, [r7, #0]
  chSysSwitch(ntp, otp);
 800556a:	9103      	str	r1, [sp, #12]
  otp->state = newstate;
 800556c:	f04f 030e 	mov.w	r3, #14
 8005570:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8005572:	6802      	ldr	r2, [r0, #0]
 8005574:	603a      	str	r2, [r7, #0]
  pqp->next->prev = pqp;
 8005576:	6057      	str	r7, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8005578:	f880 901c 	strb.w	r9, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800557c:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800557e:	f7fa fe9f 	bl	80002c0 <__port_switch>
  ch_queue_t *p = qp->next;
 8005582:	9903      	ldr	r1, [sp, #12]
 8005584:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
}
 8005586:	e7c1      	b.n	800550c <rt_test_009_001_execute.lto_priv.0+0x4c>
 8005588:	200009b8 	.word	0x200009b8
 800558c:	20000ab4 	.word	0x20000ab4
 8005590:	080018b1 	.word	0x080018b1
 8005594:	20000d40 	.word	0x20000d40
 8005598:	20001744 	.word	0x20001744
 800559c:	0800b9c8 	.word	0x0800b9c8
 80055a0:	0800ba6c 	.word	0x0800ba6c
	...

080055b0 <rt_test_010_003_execute.lto_priv.0>:
static void rt_test_010_003_execute(void) {
 80055b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80055b4:	4c3c      	ldr	r4, [pc, #240]	; (80056a8 <rt_test_010_003_execute.lto_priv.0+0xf8>)
 80055b6:	2301      	movs	r3, #1
static void rt_test_010_003_execute(void) {
 80055b8:	b083      	sub	sp, #12
  test_set_step(1);
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	2730      	movs	r7, #48	; 0x30
 80055be:	f387 8811 	msr	BASEPRI, r7
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return __sch_get_currthread()->epending |= events;
 80055c2:	4e3a      	ldr	r6, [pc, #232]	; (80056ac <rt_test_010_003_execute.lto_priv.0+0xfc>)
 80055c4:	68f2      	ldr	r2, [r6, #12]
 80055c6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	6453      	str	r3, [r2, #68]	; 0x44
 80055ce:	2500      	movs	r5, #0
 80055d0:	f385 8811 	msr	BASEPRI, r5
  test_set_step(2);
 80055d4:	2302      	movs	r3, #2
 80055d6:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 80055d8:	f005 fb6a 	bl	800acb0 <chEvtWaitOne.constprop.0>
  if (!condition) {
 80055dc:	2801      	cmp	r0, #1
 80055de:	d149      	bne.n	8005674 <rt_test_010_003_execute.lto_priv.0+0xc4>
    m = chEvtWaitOne(ALL_EVENTS);
 80055e0:	f005 fb66 	bl	800acb0 <chEvtWaitOne.constprop.0>
 80055e4:	2802      	cmp	r0, #2
 80055e6:	d145      	bne.n	8005674 <rt_test_010_003_execute.lto_priv.0+0xc4>
    m = chEvtWaitOne(ALL_EVENTS);
 80055e8:	f005 fb62 	bl	800acb0 <chEvtWaitOne.constprop.0>
 80055ec:	2804      	cmp	r0, #4
 80055ee:	4680      	mov	r8, r0
 80055f0:	d140      	bne.n	8005674 <rt_test_010_003_execute.lto_priv.0+0xc4>
 80055f2:	f387 8811 	msr	BASEPRI, r7
 80055f6:	68f3      	ldr	r3, [r6, #12]
  m = currtp->epending & events;
 80055f8:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
  currtp->epending &= ~events;
 80055fc:	645d      	str	r5, [r3, #68]	; 0x44
 80055fe:	f385 8811 	msr	BASEPRI, r5
 8005602:	f1b9 0f00 	cmp.w	r9, #0
 8005606:	d13d      	bne.n	8005684 <rt_test_010_003_execute.lto_priv.0+0xd4>
  test_set_step(3);
 8005608:	2303      	movs	r3, #3
 800560a:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800560c:	f7fc ff88 	bl	8002520 <test_wait_tick>
 8005610:	68f1      	ldr	r1, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005612:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <rt_test_010_003_execute.lto_priv.0+0x100>)
 8005614:	688a      	ldr	r2, [r1, #8]
 8005616:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005618:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800561a:	3a01      	subs	r2, #1
 800561c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005620:	4824      	ldr	r0, [pc, #144]	; (80056b4 <rt_test_010_003_execute.lto_priv.0+0x104>)
 8005622:	f7fe ffad 	bl	8004580 <chThdCreateStatic>
  test_set_step(4);
 8005626:	f8c4 8000 	str.w	r8, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800562a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80056b8 <rt_test_010_003_execute.lto_priv.0+0x108>
 800562e:	f8c8 0000 	str.w	r0, [r8]
    m = chEvtWaitOne(ALL_EVENTS);
 8005632:	f005 fb3d 	bl	800acb0 <chEvtWaitOne.constprop.0>
 8005636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8005640:	1b5b      	subs	r3, r3, r5
 8005642:	2b13      	cmp	r3, #19
 8005644:	d82a      	bhi.n	800569c <rt_test_010_003_execute.lto_priv.0+0xec>
 8005646:	2801      	cmp	r0, #1
 8005648:	d122      	bne.n	8005690 <rt_test_010_003_execute.lto_priv.0+0xe0>
 800564a:	f387 8811 	msr	BASEPRI, r7
 800564e:	68f3      	ldr	r3, [r6, #12]
  m = currtp->epending & events;
 8005650:	6c5d      	ldr	r5, [r3, #68]	; 0x44
  currtp->epending &= ~events;
 8005652:	f8c3 9044 	str.w	r9, [r3, #68]	; 0x44
 8005656:	f389 8811 	msr	BASEPRI, r9
 800565a:	b99d      	cbnz	r5, 8005684 <rt_test_010_003_execute.lto_priv.0+0xd4>
 800565c:	f108 0414 	add.w	r4, r8, #20
    if (threads[i] != NULL) {
 8005660:	f858 0b04 	ldr.w	r0, [r8], #4
 8005664:	b118      	cbz	r0, 800566e <rt_test_010_003_execute.lto_priv.0+0xbe>
      chThdWait(threads[i]);
 8005666:	f7fc f83b 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 800566a:	f848 5c04 	str.w	r5, [r8, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800566e:	4544      	cmp	r4, r8
 8005670:	d1f6      	bne.n	8005660 <rt_test_010_003_execute.lto_priv.0+0xb0>
 8005672:	e004      	b.n	800567e <rt_test_010_003_execute.lto_priv.0+0xce>
  chtest.failure_message = msg;
 8005674:	4b11      	ldr	r3, [pc, #68]	; (80056bc <rt_test_010_003_execute.lto_priv.0+0x10c>)
 8005676:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8005678:	f240 1201 	movw	r2, #257	; 0x101
 800567c:	80a2      	strh	r2, [r4, #4]
}
 800567e:	b003      	add	sp, #12
 8005680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8005684:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <rt_test_010_003_execute.lto_priv.0+0x110>)
 8005686:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8005688:	f240 1201 	movw	r2, #257	; 0x101
 800568c:	80a2      	strh	r2, [r4, #4]
  return true;
 800568e:	e7f6      	b.n	800567e <rt_test_010_003_execute.lto_priv.0+0xce>
  chtest.failure_message = msg;
 8005690:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <rt_test_010_003_execute.lto_priv.0+0x114>)
 8005692:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8005694:	f240 1201 	movw	r2, #257	; 0x101
 8005698:	80a2      	strh	r2, [r4, #4]
  return true;
 800569a:	e7f0      	b.n	800567e <rt_test_010_003_execute.lto_priv.0+0xce>
  chtest.failure_message = msg;
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <rt_test_010_003_execute.lto_priv.0+0x118>)
 800569e:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 80056a0:	f240 1201 	movw	r2, #257	; 0x101
 80056a4:	80a2      	strh	r2, [r4, #4]
 80056a6:	e7ea      	b.n	800567e <rt_test_010_003_execute.lto_priv.0+0xce>
 80056a8:	20000ab4 	.word	0x20000ab4
 80056ac:	200009b8 	.word	0x200009b8
 80056b0:	08003c71 	.word	0x08003c71
 80056b4:	20000d40 	.word	0x20000d40
 80056b8:	20001744 	.word	0x20001744
 80056bc:	0800bd34 	.word	0x0800bd34
 80056c0:	0800bd48 	.word	0x0800bd48
 80056c4:	0800bd54 	.word	0x0800bd54
 80056c8:	0800bbf4 	.word	0x0800bbf4
 80056cc:	00000000 	.word	0x00000000

080056d0 <rt_test_010_004_execute.lto_priv.0>:
static void rt_test_010_004_execute(void) {
 80056d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80056d4:	4d53      	ldr	r5, [pc, #332]	; (8005824 <rt_test_010_004_execute.lto_priv.0+0x154>)
 80056d6:	2701      	movs	r7, #1
static void rt_test_010_004_execute(void) {
 80056d8:	b082      	sub	sp, #8
  test_set_step(1);
 80056da:	602f      	str	r7, [r5, #0]
 80056dc:	2230      	movs	r2, #48	; 0x30
 80056de:	f382 8811 	msr	BASEPRI, r2
 80056e2:	4c51      	ldr	r4, [pc, #324]	; (8005828 <rt_test_010_004_execute.lto_priv.0+0x158>)
 80056e4:	68e1      	ldr	r1, [r4, #12]
 80056e6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80056e8:	f043 0305 	orr.w	r3, r3, #5
 80056ec:	2000      	movs	r0, #0
 80056ee:	644b      	str	r3, [r1, #68]	; 0x44
 80056f0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80056f4:	2302      	movs	r3, #2
 80056f6:	68e6      	ldr	r6, [r4, #12]
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 80056fe:	6c72      	ldr	r2, [r6, #68]	; 0x44
  if (m == (eventmask_t)0) {
 8005700:	2a00      	cmp	r2, #0
 8005702:	d057      	beq.n	80057b4 <rt_test_010_004_execute.lto_priv.0+0xe4>
  currtp->epending &= ~m;
 8005704:	2300      	movs	r3, #0
 8005706:	6473      	str	r3, [r6, #68]	; 0x44
 8005708:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 800570c:	2a05      	cmp	r2, #5
 800570e:	d149      	bne.n	80057a4 <rt_test_010_004_execute.lto_priv.0+0xd4>
 8005710:	2630      	movs	r6, #48	; 0x30
 8005712:	f386 8811 	msr	BASEPRI, r6
 8005716:	68e2      	ldr	r2, [r4, #12]
  m = currtp->epending & events;
 8005718:	6c51      	ldr	r1, [r2, #68]	; 0x44
  currtp->epending &= ~events;
 800571a:	6453      	str	r3, [r2, #68]	; 0x44
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	2900      	cmp	r1, #0
 8005722:	d157      	bne.n	80057d4 <rt_test_010_004_execute.lto_priv.0+0x104>
  test_set_step(3);
 8005724:	2303      	movs	r3, #3
 8005726:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005728:	f7fc fefa 	bl	8002520 <test_wait_tick>
 800572c:	68e3      	ldr	r3, [r4, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	9300      	str	r3, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005732:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005734:	4b3d      	ldr	r3, [pc, #244]	; (800582c <rt_test_010_004_execute.lto_priv.0+0x15c>)
 8005736:	483e      	ldr	r0, [pc, #248]	; (8005830 <rt_test_010_004_execute.lto_priv.0+0x160>)
 8005738:	3a01      	subs	r2, #1
 800573a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800573e:	f7fe ff1f 	bl	8004580 <chThdCreateStatic>
 8005742:	4b3c      	ldr	r3, [pc, #240]	; (8005834 <rt_test_010_004_execute.lto_priv.0+0x164>)
 8005744:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005748:	6018      	str	r0, [r3, #0]
  test_set_step(4);
 800574a:	2304      	movs	r3, #4
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	f386 8811 	msr	BASEPRI, r6
  m = currtp->epending & events;
 8005752:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
  if (m == (eventmask_t)0) {
 8005756:	2a00      	cmp	r2, #0
 8005758:	d04a      	beq.n	80057f0 <rt_test_010_004_execute.lto_priv.0+0x120>
  currtp->epending &= ~m;
 800575a:	2100      	movs	r1, #0
 800575c:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
 8005760:	f381 8811 	msr	BASEPRI, r1
 8005764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800576e:	1bd8      	subs	r0, r3, r7
 8005770:	2813      	cmp	r0, #19
 8005772:	d837      	bhi.n	80057e4 <rt_test_010_004_execute.lto_priv.0+0x114>
 8005774:	2a01      	cmp	r2, #1
 8005776:	d14e      	bne.n	8005816 <rt_test_010_004_execute.lto_priv.0+0x146>
 8005778:	2330      	movs	r3, #48	; 0x30
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005780:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  currtp->epending &= ~events;
 8005782:	6459      	str	r1, [r3, #68]	; 0x44
 8005784:	f381 8811 	msr	BASEPRI, r1
 8005788:	bb26      	cbnz	r6, 80057d4 <rt_test_010_004_execute.lto_priv.0+0x104>
 800578a:	4c2a      	ldr	r4, [pc, #168]	; (8005834 <rt_test_010_004_execute.lto_priv.0+0x164>)
 800578c:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005790:	f854 0b04 	ldr.w	r0, [r4], #4
 8005794:	b118      	cbz	r0, 800579e <rt_test_010_004_execute.lto_priv.0+0xce>
      chThdWait(threads[i]);
 8005796:	f7fb ffa3 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 800579a:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800579e:	42a5      	cmp	r5, r4
 80057a0:	d1f6      	bne.n	8005790 <rt_test_010_004_execute.lto_priv.0+0xc0>
 80057a2:	e004      	b.n	80057ae <rt_test_010_004_execute.lto_priv.0+0xde>
  chtest.failure_message = msg;
 80057a4:	4b24      	ldr	r3, [pc, #144]	; (8005838 <rt_test_010_004_execute.lto_priv.0+0x168>)
 80057a6:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80057a8:	f240 1201 	movw	r2, #257	; 0x101
 80057ac:	80aa      	strh	r2, [r5, #4]
}
 80057ae:	b002      	add	sp, #8
 80057b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  thread_t *otp = __instance_get_currthread(oip);
 80057b4:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80057b6:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057bc:	6373      	str	r3, [r6, #52]	; 0x34
  otp->state = newstate;
 80057be:	230a      	movs	r3, #10
 80057c0:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 80057c2:	6803      	ldr	r3, [r0, #0]
 80057c4:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 80057c6:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80057c8:	7707      	strb	r7, [r0, #28]
  __instance_set_currthread(oip, ntp);
 80057ca:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80057cc:	f7fa fd78 	bl	80002c0 <__port_switch>
    m = currtp->epending & events;
 80057d0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80057d2:	e797      	b.n	8005704 <rt_test_010_004_execute.lto_priv.0+0x34>
  chtest.failure_message = msg;
 80057d4:	4b19      	ldr	r3, [pc, #100]	; (800583c <rt_test_010_004_execute.lto_priv.0+0x16c>)
 80057d6:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80057d8:	f240 1201 	movw	r2, #257	; 0x101
 80057dc:	80aa      	strh	r2, [r5, #4]
 80057de:	b002      	add	sp, #8
 80057e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.failure_message = msg;
 80057e4:	4b16      	ldr	r3, [pc, #88]	; (8005840 <rt_test_010_004_execute.lto_priv.0+0x170>)
 80057e6:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80057e8:	f240 1201 	movw	r2, #257	; 0x101
 80057ec:	80aa      	strh	r2, [r5, #4]
 80057ee:	e7de      	b.n	80057ae <rt_test_010_004_execute.lto_priv.0+0xde>
  thread_t *otp = __instance_get_currthread(oip);
 80057f0:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80057f2:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f8:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  otp->state = newstate;
 80057fc:	230a      	movs	r3, #10
 80057fe:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8005800:	6803      	ldr	r3, [r0, #0]
 8005802:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8005804:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005806:	2301      	movs	r3, #1
 8005808:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800580a:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800580c:	f7fa fd58 	bl	80002c0 <__port_switch>
    m = currtp->epending & events;
 8005810:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8005814:	e7a1      	b.n	800575a <rt_test_010_004_execute.lto_priv.0+0x8a>
  chtest.failure_message = msg;
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <rt_test_010_004_execute.lto_priv.0+0x174>)
 8005818:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800581a:	f240 1201 	movw	r2, #257	; 0x101
 800581e:	80aa      	strh	r2, [r5, #4]
  return true;
 8005820:	e7c5      	b.n	80057ae <rt_test_010_004_execute.lto_priv.0+0xde>
 8005822:	bf00      	nop
 8005824:	20000ab4 	.word	0x20000ab4
 8005828:	200009b8 	.word	0x200009b8
 800582c:	08003c71 	.word	0x08003c71
 8005830:	20000d40 	.word	0x20000d40
 8005834:	20001744 	.word	0x20001744
 8005838:	0800bd68 	.word	0x0800bd68
 800583c:	0800bd48 	.word	0x0800bd48
 8005840:	0800bbf4 	.word	0x0800bbf4
 8005844:	0800bd54 	.word	0x0800bd54
	...

08005850 <rt_test_010_005_execute.lto_priv.0>:
static void rt_test_010_005_execute(void) {
 8005850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005854:	4d52      	ldr	r5, [pc, #328]	; (80059a0 <rt_test_010_005_execute.lto_priv.0+0x150>)
 8005856:	2701      	movs	r7, #1
static void rt_test_010_005_execute(void) {
 8005858:	b082      	sub	sp, #8
  test_set_step(1);
 800585a:	602f      	str	r7, [r5, #0]
 800585c:	2230      	movs	r2, #48	; 0x30
 800585e:	f382 8811 	msr	BASEPRI, r2
 8005862:	4c50      	ldr	r4, [pc, #320]	; (80059a4 <rt_test_010_005_execute.lto_priv.0+0x154>)
 8005864:	68e1      	ldr	r1, [r4, #12]
 8005866:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8005868:	f043 0305 	orr.w	r3, r3, #5
 800586c:	2000      	movs	r0, #0
 800586e:	644b      	str	r3, [r1, #68]	; 0x44
 8005870:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8005874:	2302      	movs	r3, #2
 8005876:	68e6      	ldr	r6, [r4, #12]
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	f382 8811 	msr	BASEPRI, r2
  if ((currtp->epending & events) != events) {
 800587e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005880:	f003 0205 	and.w	r2, r3, #5
 8005884:	2a05      	cmp	r2, #5
 8005886:	d00d      	beq.n	80058a4 <rt_test_010_005_execute.lto_priv.0+0x54>
  thread_t *otp = __instance_get_currthread(oip);
 8005888:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 800588a:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 800588c:	2305      	movs	r3, #5
 800588e:	6373      	str	r3, [r6, #52]	; 0x34
  otp->state = newstate;
 8005890:	230b      	movs	r3, #11
 8005892:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8005894:	6803      	ldr	r3, [r0, #0]
 8005896:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8005898:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800589a:	7707      	strb	r7, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800589c:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800589e:	f7fa fd0f 	bl	80002c0 <__port_switch>
  currtp->epending &= ~events;
 80058a2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80058a4:	f023 0305 	bic.w	r3, r3, #5
 80058a8:	6473      	str	r3, [r6, #68]	; 0x44
 80058aa:	2300      	movs	r3, #0
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	2630      	movs	r6, #48	; 0x30
 80058b2:	f386 8811 	msr	BASEPRI, r6
 80058b6:	68e2      	ldr	r2, [r4, #12]
  m = currtp->epending & events;
 80058b8:	6c51      	ldr	r1, [r2, #68]	; 0x44
  currtp->epending &= ~events;
 80058ba:	6453      	str	r3, [r2, #68]	; 0x44
 80058bc:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d165      	bne.n	8005990 <rt_test_010_005_execute.lto_priv.0+0x140>
  test_set_step(3);
 80058c4:	2303      	movs	r3, #3
 80058c6:	602b      	str	r3, [r5, #0]
 80058c8:	f386 8811 	msr	BASEPRI, r6
 80058cc:	68e2      	ldr	r2, [r4, #12]
 80058ce:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80058d0:	f043 0304 	orr.w	r3, r3, #4
 80058d4:	6453      	str	r3, [r2, #68]	; 0x44
 80058d6:	f381 8811 	msr	BASEPRI, r1
  test_set_step(4);
 80058da:	2304      	movs	r3, #4
 80058dc:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80058de:	f7fc fe1f 	bl	8002520 <test_wait_tick>
 80058e2:	68e3      	ldr	r3, [r4, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	9300      	str	r3, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80058e8:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80058ea:	4b2f      	ldr	r3, [pc, #188]	; (80059a8 <rt_test_010_005_execute.lto_priv.0+0x158>)
 80058ec:	482f      	ldr	r0, [pc, #188]	; (80059ac <rt_test_010_005_execute.lto_priv.0+0x15c>)
 80058ee:	3a01      	subs	r2, #1
 80058f0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80058f4:	f7fe fe44 	bl	8004580 <chThdCreateStatic>
 80058f8:	4b2d      	ldr	r3, [pc, #180]	; (80059b0 <rt_test_010_005_execute.lto_priv.0+0x160>)
 80058fa:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80058fe:	6018      	str	r0, [r3, #0]
  test_set_step(5);
 8005900:	2205      	movs	r2, #5
 8005902:	602a      	str	r2, [r5, #0]
 8005904:	f386 8811 	msr	BASEPRI, r6
  if ((currtp->epending & events) != events) {
 8005908:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800590c:	ea03 0102 	and.w	r1, r3, r2
 8005910:	4291      	cmp	r1, r2
 8005912:	d124      	bne.n	800595e <rt_test_010_005_execute.lto_priv.0+0x10e>
  currtp->epending &= ~events;
 8005914:	f023 0305 	bic.w	r3, r3, #5
 8005918:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 800591c:	2300      	movs	r3, #0
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005926:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8005928:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
 800592c:	1bc7      	subs	r7, r0, r7
 800592e:	2f13      	cmp	r7, #19
 8005930:	d826      	bhi.n	8005980 <rt_test_010_005_execute.lto_priv.0+0x130>
 8005932:	2230      	movs	r2, #48	; 0x30
 8005934:	f382 8811 	msr	BASEPRI, r2
 8005938:	68e2      	ldr	r2, [r4, #12]
  m = currtp->epending & events;
 800593a:	6c56      	ldr	r6, [r2, #68]	; 0x44
  currtp->epending &= ~events;
 800593c:	6453      	str	r3, [r2, #68]	; 0x44
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	bb2e      	cbnz	r6, 8005990 <rt_test_010_005_execute.lto_priv.0+0x140>
 8005944:	4c1a      	ldr	r4, [pc, #104]	; (80059b0 <rt_test_010_005_execute.lto_priv.0+0x160>)
 8005946:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800594a:	f854 0b04 	ldr.w	r0, [r4], #4
 800594e:	b118      	cbz	r0, 8005958 <rt_test_010_005_execute.lto_priv.0+0x108>
      chThdWait(threads[i]);
 8005950:	f7fb fec6 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8005954:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005958:	42a5      	cmp	r5, r4
 800595a:	d1f6      	bne.n	800594a <rt_test_010_005_execute.lto_priv.0+0xfa>
 800595c:	e015      	b.n	800598a <rt_test_010_005_execute.lto_priv.0+0x13a>
  thread_t *otp = __instance_get_currthread(oip);
 800595e:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005960:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 8005962:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
  otp->state = newstate;
 8005966:	230b      	movs	r3, #11
 8005968:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 800596a:	6803      	ldr	r3, [r0, #0]
 800596c:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 800596e:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005970:	2301      	movs	r3, #1
 8005972:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8005974:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005976:	f7fa fca3 	bl	80002c0 <__port_switch>
  currtp->epending &= ~events;
 800597a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
}
 800597e:	e7c9      	b.n	8005914 <rt_test_010_005_execute.lto_priv.0+0xc4>
  chtest.failure_message = msg;
 8005980:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <rt_test_010_005_execute.lto_priv.0+0x164>)
 8005982:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005984:	f240 1201 	movw	r2, #257	; 0x101
 8005988:	80aa      	strh	r2, [r5, #4]
}
 800598a:	b002      	add	sp, #8
 800598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.failure_message = msg;
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <rt_test_010_005_execute.lto_priv.0+0x168>)
 8005992:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005994:	f240 1201 	movw	r2, #257	; 0x101
 8005998:	80aa      	strh	r2, [r5, #4]
 800599a:	b002      	add	sp, #8
 800599c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a0:	20000ab4 	.word	0x20000ab4
 80059a4:	200009b8 	.word	0x200009b8
 80059a8:	08003c71 	.word	0x08003c71
 80059ac:	20000d40 	.word	0x20000d40
 80059b0:	20001744 	.word	0x20001744
 80059b4:	0800bbf4 	.word	0x0800bbf4
 80059b8:	0800bd48 	.word	0x0800bd48
 80059bc:	00000000 	.word	0x00000000

080059c0 <rt_test_010_007_execute.lto_priv.0>:

static void rt_test_010_007_execute(void) {
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [10.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 80059c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005b84 <rt_test_010_007_execute.lto_priv.0+0x1c4>
 80059c8:	f04f 0901 	mov.w	r9, #1
static void rt_test_010_007_execute(void) {
 80059cc:	b08f      	sub	sp, #60	; 0x3c
  test_set_step(1);
 80059ce:	f8c8 9000 	str.w	r9, [r8]
 80059d2:	2530      	movs	r5, #48	; 0x30
 80059d4:	f385 8811 	msr	BASEPRI, r5
  elp->next     = esp->next;
 80059d8:	4e6b      	ldr	r6, [pc, #428]	; (8005b88 <rt_test_010_007_execute.lto_priv.0+0x1c8>)
 80059da:	4c6c      	ldr	r4, [pc, #432]	; (8005b8c <rt_test_010_007_execute.lto_priv.0+0x1cc>)
 80059dc:	6832      	ldr	r2, [r6, #0]
 80059de:	68e3      	ldr	r3, [r4, #12]
  elp->listener = currtp;
 80059e0:	930a      	str	r3, [sp, #40]	; 0x28
  esp->next     = elp;
 80059e2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
  elp->flags    = (eventflags_t)0;
 80059e6:	2300      	movs	r3, #0
  elp->next     = esp->next;
 80059e8:	9209      	str	r2, [sp, #36]	; 0x24
  elp->wflags   = wflags;
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  elp->events   = events;
 80059ee:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  elp->flags    = (eventflags_t)0;
 80059f2:	930c      	str	r3, [sp, #48]	; 0x30
  esp->next     = elp;
 80059f4:	f8c6 b000 	str.w	fp, [r6]
  elp->wflags   = wflags;
 80059f8:	920d      	str	r2, [sp, #52]	; 0x34
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f385 8811 	msr	BASEPRI, r5
  elp->next     = esp->next;
 8005a02:	4f63      	ldr	r7, [pc, #396]	; (8005b90 <rt_test_010_007_execute.lto_priv.0+0x1d0>)
  elp->flags    = (eventflags_t)0;
 8005a04:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8005a08:	68e2      	ldr	r2, [r4, #12]
  elp->listener = currtp;
 8005a0a:	9205      	str	r2, [sp, #20]
  elp->next     = esp->next;
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	9204      	str	r2, [sp, #16]
  esp->next     = elp;
 8005a10:	f10d 0a10 	add.w	sl, sp, #16
  elp->events   = events;
 8005a14:	2204      	movs	r2, #4
  esp->next     = elp;
 8005a16:	f8c7 a000 	str.w	sl, [r7]
  elp->events   = events;
 8005a1a:	9206      	str	r2, [sp, #24]
 8005a1c:	f383 8811 	msr	BASEPRI, r3
  test_end_step(1);

  /* [10.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8005a20:	2202      	movs	r2, #2
 8005a22:	f8c8 2000 	str.w	r2, [r8]
 8005a26:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005a2a:	2008      	movs	r0, #8
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	f7fd fad7 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8005a32:	2300      	movs	r3, #0
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f385 8811 	msr	BASEPRI, r5
 8005a3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a42:	9202      	str	r2, [sp, #8]
 8005a44:	f383 8811 	msr	BASEPRI, r3
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005a48:	68e3      	ldr	r3, [r4, #12]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005a4a:	4852      	ldr	r0, [pc, #328]	; (8005b94 <rt_test_010_007_execute.lto_priv.0+0x1d4>)
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	4b52      	ldr	r3, [pc, #328]	; (8005b98 <rt_test_010_007_execute.lto_priv.0+0x1d8>)
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	3a01      	subs	r2, #1
 8005a54:	4b51      	ldr	r3, [pc, #324]	; (8005b9c <rt_test_010_007_execute.lto_priv.0+0x1dc>)
 8005a56:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005a5a:	f7fe fd91 	bl	8004580 <chThdCreateStatic>
 8005a5e:	4b50      	ldr	r3, [pc, #320]	; (8005ba0 <rt_test_010_007_execute.lto_priv.0+0x1e0>)
  return __sch_get_currthread();
 8005a60:	68e2      	ldr	r2, [r4, #12]
 8005a62:	6018      	str	r0, [r3, #0]
  test_end_step(2);

  /* [10.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8005a64:	2303      	movs	r3, #3
 8005a66:	f8c8 3000 	str.w	r3, [r8]
 8005a6a:	f385 8811 	msr	BASEPRI, r5
  if ((currtp->epending & events) != events) {
 8005a6e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005a70:	f003 0105 	and.w	r1, r3, #5
 8005a74:	2905      	cmp	r1, #5
 8005a76:	d010      	beq.n	8005a9a <rt_test_010_007_execute.lto_priv.0+0xda>
  thread_t *otp = __instance_get_currthread(oip);
 8005a78:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005a7a:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 8005a7c:	9203      	str	r2, [sp, #12]
 8005a7e:	2305      	movs	r3, #5
 8005a80:	6353      	str	r3, [r2, #52]	; 0x34
  otp->state = newstate;
 8005a82:	230b      	movs	r3, #11
 8005a84:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8005a86:	6803      	ldr	r3, [r0, #0]
 8005a88:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8005a8a:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005a8c:	f880 901c 	strb.w	r9, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8005a90:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005a92:	f7fa fc15 	bl	80002c0 <__port_switch>
  currtp->epending &= ~events;
 8005a96:	9a03      	ldr	r2, [sp, #12]
 8005a98:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005a9a:	f023 0305 	bic.w	r3, r3, #5
 8005a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f382 8811 	msr	BASEPRI, r2
 8005aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aaa:	9902      	ldr	r1, [sp, #8]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8005ab2:	1a5b      	subs	r3, r3, r1
  if (!condition) {
 8005ab4:	2b13      	cmp	r3, #19
 8005ab6:	d844      	bhi.n	8005b42 <rt_test_010_007_execute.lto_priv.0+0x182>
 8005ab8:	2330      	movs	r3, #48	; 0x30
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005ac0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
  currtp->epending &= ~events;
 8005ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8005ac4:	f382 8811 	msr	BASEPRI, r2
 8005ac8:	2d00      	cmp	r5, #0
 8005aca:	d144      	bne.n	8005b56 <rt_test_010_007_execute.lto_priv.0+0x196>
 8005acc:	4c34      	ldr	r4, [pc, #208]	; (8005ba0 <rt_test_010_007_execute.lto_priv.0+0x1e0>)
 8005ace:	f104 0914 	add.w	r9, r4, #20
    if (threads[i] != NULL) {
 8005ad2:	f854 0b04 	ldr.w	r0, [r4], #4
 8005ad6:	b118      	cbz	r0, 8005ae0 <rt_test_010_007_execute.lto_priv.0+0x120>
      chThdWait(threads[i]);
 8005ad8:	f7fb fe02 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8005adc:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005ae0:	454c      	cmp	r4, r9
 8005ae2:	d1f6      	bne.n	8005ad2 <rt_test_010_007_execute.lto_priv.0+0x112>
    test_wait_threads();
  }
  test_end_step(3);

  /* [10.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	f8c8 3000 	str.w	r3, [r8]
 8005aea:	2330      	movs	r3, #48	; 0x30
 8005aec:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8005af0:	4b25      	ldr	r3, [pc, #148]	; (8005b88 <rt_test_010_007_execute.lto_priv.0+0x1c8>)
}
 8005af2:	e001      	b.n	8005af8 <rt_test_010_007_execute.lto_priv.0+0x138>
    if (p->next == elp) {
 8005af4:	455b      	cmp	r3, fp
 8005af6:	d038      	beq.n	8005b6a <rt_test_010_007_execute.lto_priv.0+0x1aa>
  while (p->next != (event_listener_t *)esp) {
 8005af8:	461a      	mov	r2, r3
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	42b3      	cmp	r3, r6
 8005afe:	d1f9      	bne.n	8005af4 <rt_test_010_007_execute.lto_priv.0+0x134>
 8005b00:	2300      	movs	r3, #0
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	2330      	movs	r3, #48	; 0x30
 8005b08:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8005b0c:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <rt_test_010_007_execute.lto_priv.0+0x1d0>)
 8005b0e:	e001      	b.n	8005b14 <rt_test_010_007_execute.lto_priv.0+0x154>
    if (p->next == elp) {
 8005b10:	4553      	cmp	r3, sl
 8005b12:	d02d      	beq.n	8005b70 <rt_test_010_007_execute.lto_priv.0+0x1b0>
  while (p->next != (event_listener_t *)esp) {
 8005b14:	461a      	mov	r2, r3
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	42bb      	cmp	r3, r7
 8005b1a:	d1f9      	bne.n	8005b10 <rt_test_010_007_execute.lto_priv.0+0x150>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	6833      	ldr	r3, [r6, #0]
 8005b24:	42b3      	cmp	r3, r6
 8005b26:	d102      	bne.n	8005b2e <rt_test_010_007_execute.lto_priv.0+0x16e>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	42bb      	cmp	r3, r7
 8005b2c:	d010      	beq.n	8005b50 <rt_test_010_007_execute.lto_priv.0+0x190>
  chtest.failure_message = msg;
 8005b2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <rt_test_010_007_execute.lto_priv.0+0x1e4>)
 8005b30:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005b34:	f240 1201 	movw	r2, #257	; 0x101
 8005b38:	f8a8 2004 	strh.w	r2, [r8, #4]
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 8005b3c:	b00f      	add	sp, #60	; 0x3c
 8005b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.failure_message = msg;
 8005b42:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <rt_test_010_007_execute.lto_priv.0+0x1e8>)
 8005b44:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005b48:	f240 1201 	movw	r2, #257	; 0x101
 8005b4c:	f8a8 2004 	strh.w	r2, [r8, #4]
 8005b50:	b00f      	add	sp, #60	; 0x3c
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.failure_message = msg;
 8005b56:	4b15      	ldr	r3, [pc, #84]	; (8005bac <rt_test_010_007_execute.lto_priv.0+0x1ec>)
 8005b58:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005b5c:	f240 1201 	movw	r2, #257	; 0x101
 8005b60:	f8a8 2004 	strh.w	r2, [r8, #4]
 8005b64:	b00f      	add	sp, #60	; 0x3c
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p->next = elp->next;
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	6013      	str	r3, [r2, #0]
      break;
 8005b6e:	e7c7      	b.n	8005b00 <rt_test_010_007_execute.lto_priv.0+0x140>
      p->next = elp->next;
 8005b70:	9b04      	ldr	r3, [sp, #16]
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8005b7a:	6833      	ldr	r3, [r6, #0]
 8005b7c:	42b3      	cmp	r3, r6
 8005b7e:	d0d3      	beq.n	8005b28 <rt_test_010_007_execute.lto_priv.0+0x168>
 8005b80:	e7d5      	b.n	8005b2e <rt_test_010_007_execute.lto_priv.0+0x16e>
 8005b82:	bf00      	nop
 8005b84:	20000ab4 	.word	0x20000ab4
 8005b88:	20000808 	.word	0x20000808
 8005b8c:	200009b8 	.word	0x200009b8
 8005b90:	2000080c 	.word	0x2000080c
 8005b94:	20000d40 	.word	0x20000d40
 8005b98:	0800ba18 	.word	0x0800ba18
 8005b9c:	08003cf1 	.word	0x08003cf1
 8005ba0:	20001744 	.word	0x20001744
 8005ba4:	0800b9b8 	.word	0x0800b9b8
 8005ba8:	0800bbf4 	.word	0x0800bbf4
 8005bac:	0800bd48 	.word	0x0800bd48

08005bb0 <chThdExit>:
void chThdExit(msg_t msg) {
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	2330      	movs	r3, #48	; 0x30
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <chThdExit+0x7c>)
 8005bba:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 8005bbc:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  currtp->u.exitcode = msg;
 8005bbe:	6348      	str	r0, [r1, #52]	; 0x34
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8005bc0:	f101 0c38 	add.w	ip, r1, #56	; 0x38
 8005bc4:	4594      	cmp	ip, r2
  tp->state = CH_STATE_READY;
 8005bc6:	bf18      	it	ne
 8005bc8:	f04f 0e00 	movne.w	lr, #0
 8005bcc:	d111      	bne.n	8005bf2 <chThdExit+0x42>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8005bce:	7f8a      	ldrb	r2, [r1, #30]
 8005bd0:	b31a      	cbz	r2, 8005c1a <chThdExit+0x6a>
  ch_priority_queue_t *p = pqp->next;
 8005bd2:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8005bd4:	220f      	movs	r2, #15
 8005bd6:	770a      	strb	r2, [r1, #28]
  pqp->next       = p->next;
 8005bd8:	6802      	ldr	r2, [r0, #0]
 8005bda:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 8005bdc:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8005be0:	6053      	str	r3, [r2, #4]
 8005be2:	f880 c01c 	strb.w	ip, [r0, #28]
}
 8005be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 8005bea:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8005bec:	f7fa bb68 	b.w	80002c0 <__port_switch>
 8005bf0:	4622      	mov	r2, r4
  lp->next = p->next;
 8005bf2:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005bf4:	6910      	ldr	r0, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8005bf6:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 8005bf8:	638c      	str	r4, [r1, #56]	; 0x38
  tp->state = CH_STATE_READY;
 8005bfa:	f882 e01c 	strb.w	lr, [r2, #28]
    pqp = pqp->next;
 8005bfe:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005c00:	6885      	ldr	r5, [r0, #8]
 8005c02:	42b5      	cmp	r5, r6
 8005c04:	d2fb      	bcs.n	8005bfe <chThdExit+0x4e>
  p->prev       = pqp->prev;
 8005c06:	6845      	ldr	r5, [r0, #4]
  p->next       = pqp;
 8005c08:	6010      	str	r0, [r2, #0]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8005c0a:	4564      	cmp	r4, ip
  p->prev       = pqp->prev;
 8005c0c:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 8005c0e:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8005c10:	6042      	str	r2, [r0, #4]
 8005c12:	d1ed      	bne.n	8005bf0 <chThdExit+0x40>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8005c14:	7f8a      	ldrb	r2, [r1, #30]
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	d1db      	bne.n	8005bd2 <chThdExit+0x22>
    if (currtp->dispose == NULL) {
 8005c1a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	d1d8      	bne.n	8005bd2 <chThdExit+0x22>
  p->prev->next = p->next;
 8005c20:	e9d1 2009 	ldrd	r2, r0, [r1, #36]	; 0x24
 8005c24:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 8005c26:	6050      	str	r0, [r2, #4]
  return p;
 8005c28:	e7d3      	b.n	8005bd2 <chThdExit+0x22>
 8005c2a:	bf00      	nop
 8005c2c:	200009b8 	.word	0x200009b8

08005c30 <Thread1.lto_priv.1>:
static THD_FUNCTION(Thread1, arg) {
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  exit_flag = false;
 8005c34:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8005cbc <Thread1.lto_priv.1+0x8c>
 8005c38:	4f21      	ldr	r7, [pc, #132]	; (8005cc0 <Thread1.lto_priv.1+0x90>)
 8005c3a:	2300      	movs	r3, #0
static THD_FUNCTION(Thread1, arg) {
 8005c3c:	b083      	sub	sp, #12
  exit_flag = false;
 8005c3e:	f888 3000 	strb.w	r3, [r8]
 8005c42:	2630      	movs	r6, #48	; 0x30
  otp->state = newstate;
 8005c44:	f04f 0a0e 	mov.w	sl, #14
  ntp->state = CH_STATE_CURRENT;
 8005c48:	f04f 0901 	mov.w	r9, #1
 8005c4c:	e015      	b.n	8005c7a <Thread1.lto_priv.1+0x4a>
  qp->next       = p->next;
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	63cb      	str	r3, [r1, #60]	; 0x3c
 8005c52:	220d      	movs	r2, #13
  qp->next->prev = qp;
 8005c54:	605d      	str	r5, [r3, #4]
 8005c56:	7722      	strb	r2, [r4, #28]
 8005c58:	f38b 8811 	msr	BASEPRI, fp
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 8005c5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  ret = cmp->veneer(cmp->argsp);
 8005c5e:	e9d3 2000 	ldrd	r2, r0, [r3]
 8005c62:	4790      	blx	r2
 8005c64:	4601      	mov	r1, r0
 8005c66:	f386 8811 	msr	BASEPRI, r6
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f7fe f970 	bl	8003f50 <chSchWakeupS>
 8005c70:	f38b 8811 	msr	BASEPRI, fp
  } while (!exit_flag);
 8005c74:	f898 3000 	ldrb.w	r3, [r8]
 8005c78:	b9c3      	cbnz	r3, 8005cac <Thread1.lto_priv.1+0x7c>
 8005c7a:	f386 8811 	msr	BASEPRI, r6
 8005c7e:	68f9      	ldr	r1, [r7, #12]
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 8005c80:	460d      	mov	r5, r1
 8005c82:	f04f 0b00 	mov.w	fp, #0
 8005c86:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  if (!chMsgIsPendingI(currtp)) {
 8005c8a:	42ac      	cmp	r4, r5
 8005c8c:	d1df      	bne.n	8005c4e <Thread1.lto_priv.1+0x1e>
  ch_priority_queue_t *p = pqp->next;
 8005c8e:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 8005c90:	f881 a01c 	strb.w	sl, [r1, #28]
  pqp->next       = p->next;
 8005c94:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 8005c96:	9101      	str	r1, [sp, #4]
  pqp->next->prev = pqp;
 8005c98:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005c9a:	f880 901c 	strb.w	r9, [r0, #28]
  pqp->next       = p->next;
 8005c9e:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8005ca0:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8005ca2:	f7fa fb0d 	bl	80002c0 <__port_switch>
  ch_queue_t *p = qp->next;
 8005ca6:	9901      	ldr	r1, [sp, #4]
 8005ca8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
}
 8005caa:	e7d0      	b.n	8005c4e <Thread1.lto_priv.1+0x1e>
  chThdExit(0x0FA5);
 8005cac:	f640 70a5 	movw	r0, #4005	; 0xfa5
}
 8005cb0:	b003      	add	sp, #12
 8005cb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chThdExit(0x0FA5);
 8005cb6:	f7ff bf7b 	b.w	8005bb0 <chThdExit>
 8005cba:	bf00      	nop
 8005cbc:	20000b00 	.word	0x20000b00
 8005cc0:	200009b8 	.word	0x200009b8
	...

08005cd0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8005cd0:	4b01      	ldr	r3, [pc, #4]	; (8005cd8 <chTMStartMeasurementX+0x8>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8005cd4:	6083      	str	r3, [r0, #8]
}
 8005cd6:	4770      	bx	lr
 8005cd8:	e0001000 	.word	0xe0001000
 8005cdc:	00000000 	.word	0x00000000

08005ce0 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8005ce0:	4a0e      	ldr	r2, [pc, #56]	; (8005d1c <chTMStopMeasurementX+0x3c>)
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8005ce4:	6881      	ldr	r1, [r0, #8]
 8005ce6:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8005ce8:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8005cea:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8005cec:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8005cee:	1b1b      	subs	r3, r3, r4
 8005cf0:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8005cf2:	18d2      	adds	r2, r2, r3
 8005cf4:	6941      	ldr	r1, [r0, #20]
 8005cf6:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8005cf8:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 8005cfa:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8005cfc:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8005d00:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8005d02:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8005d04:	bf88      	it	hi
 8005d06:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8005d08:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 8005d0a:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 8005d0c:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8005d10:	6141      	str	r1, [r0, #20]
}
 8005d12:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 8005d14:	bf38      	it	cc
 8005d16:	6003      	strcc	r3, [r0, #0]
}
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000aa8 	.word	0x20000aa8
 8005d20:	e0001000 	.word	0xe0001000
	...

08005d30 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8005d30:	b4f0      	push	{r4, r5, r6, r7}
  if (mp->owner != NULL) {
 8005d32:	6883      	ldr	r3, [r0, #8]
 8005d34:	4c34      	ldr	r4, [pc, #208]	; (8005e08 <chMtxLockS+0xd8>)
void chMtxLockS(mutex_t *mp) {
 8005d36:	4602      	mov	r2, r0
 8005d38:	68e1      	ldr	r1, [r4, #12]
  if (mp->owner != NULL) {
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d035      	beq.n	8005daa <chMtxLockS+0x7a>
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8005d3e:	688d      	ldr	r5, [r1, #8]
 8005d40:	6898      	ldr	r0, [r3, #8]
 8005d42:	4285      	cmp	r5, r0
 8005d44:	d906      	bls.n	8005d54 <chMtxLockS+0x24>
        switch (tp->state) {
 8005d46:	7f18      	ldrb	r0, [r3, #28]
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 8005d48:	609d      	str	r5, [r3, #8]
        switch (tp->state) {
 8005d4a:	2806      	cmp	r0, #6
 8005d4c:	d042      	beq.n	8005dd4 <chMtxLockS+0xa4>
 8005d4e:	2807      	cmp	r0, #7
 8005d50:	d031      	beq.n	8005db6 <chMtxLockS+0x86>
 8005d52:	b1d0      	cbz	r0, 8005d8a <chMtxLockS+0x5a>
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 8005d54:	4613      	mov	r3, r2
 8005d56:	e003      	b.n	8005d60 <chMtxLockS+0x30>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 8005d58:	6888      	ldr	r0, [r1, #8]
 8005d5a:	689d      	ldr	r5, [r3, #8]
 8005d5c:	4285      	cmp	r5, r0
 8005d5e:	d302      	bcc.n	8005d66 <chMtxLockS+0x36>
    cp = cp->next;
 8005d60:	681b      	ldr	r3, [r3, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d1f8      	bne.n	8005d58 <chMtxLockS+0x28>
  tp->next       = cp;
  tp->prev       = cp->prev;
 8005d66:	6858      	ldr	r0, [r3, #4]
  otp->state = newstate;
 8005d68:	2506      	movs	r5, #6
 8005d6a:	e9c1 3000 	strd	r3, r0, [r1]
  tp->prev->next = tp;
 8005d6e:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 8005d70:	6820      	ldr	r0, [r4, #0]
  cp->prev       = tp;
 8005d72:	6059      	str	r1, [r3, #4]
 8005d74:	770d      	strb	r5, [r1, #28]
  pqp->next       = p->next;
 8005d76:	6803      	ldr	r3, [r0, #0]
 8005d78:	6023      	str	r3, [r4, #0]
      currtp->u.wtmtxp = mp;
 8005d7a:	634a      	str	r2, [r1, #52]	; 0x34
  pqp->next->prev = pqp;
 8005d7c:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8005d82:	60e0      	str	r0, [r4, #12]
}
 8005d84:	bcf0      	pop	{r4, r5, r6, r7}
  chSysSwitch(ntp, otp);
 8005d86:	f7fa ba9b 	b.w	80002c0 <__port_switch>
  p->prev->next = p->next;
 8005d8a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005d8e:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 8005d90:	6077      	str	r7, [r6, #4]
  tp->state = CH_STATE_READY;
 8005d92:	7718      	strb	r0, [r3, #28]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005d94:	6918      	ldr	r0, [r3, #16]
    pqp = pqp->next;
 8005d96:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005d98:	6886      	ldr	r6, [r0, #8]
 8005d9a:	42ae      	cmp	r6, r5
 8005d9c:	d2fb      	bcs.n	8005d96 <chMtxLockS+0x66>
  p->next       = pqp;
 8005d9e:	6018      	str	r0, [r3, #0]
  p->prev       = pqp->prev;
 8005da0:	6845      	ldr	r5, [r0, #4]
 8005da2:	605d      	str	r5, [r3, #4]
  p->prev->next = p;
 8005da4:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 8005da6:	6043      	str	r3, [r0, #4]
  return __sch_ready_behind(tp);
 8005da8:	e7d4      	b.n	8005d54 <chMtxLockS+0x24>
    mp->next = currtp->mtxlist;
 8005daa:	6c8b      	ldr	r3, [r1, #72]	; 0x48
}
 8005dac:	bcf0      	pop	{r4, r5, r6, r7}
    mp->next = currtp->mtxlist;
 8005dae:	e9c0 1302 	strd	r1, r3, [r0, #8]
    currtp->mtxlist = mp;
 8005db2:	6488      	str	r0, [r1, #72]	; 0x48
}
 8005db4:	4770      	bx	lr
  p->prev->next = p->next;
 8005db6:	e9d3 0600 	ldrd	r0, r6, [r3]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8005dba:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8005dbc:	6030      	str	r0, [r6, #0]
  p->next->prev = p->prev;
 8005dbe:	6046      	str	r6, [r0, #4]
  ch_queue_t *cp = qp;
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	e003      	b.n	8005dcc <chMtxLockS+0x9c>
  } while ((cp != qp) &&
 8005dc4:	6886      	ldr	r6, [r0, #8]
 8005dc6:	689f      	ldr	r7, [r3, #8]
 8005dc8:	42be      	cmp	r6, r7
 8005dca:	d3e8      	bcc.n	8005d9e <chMtxLockS+0x6e>
    cp = cp->next;
 8005dcc:	6800      	ldr	r0, [r0, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8005dce:	4285      	cmp	r5, r0
 8005dd0:	d1f8      	bne.n	8005dc4 <chMtxLockS+0x94>
 8005dd2:	e7e4      	b.n	8005d9e <chMtxLockS+0x6e>
  p->prev->next = p->next;
 8005dd4:	e9d3 0600 	ldrd	r0, r6, [r3]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8005dd8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8005dda:	6030      	str	r0, [r6, #0]
  p->next->prev = p->prev;
 8005ddc:	6046      	str	r6, [r0, #4]
  ch_queue_t *cp = qp;
 8005dde:	4628      	mov	r0, r5
 8005de0:	e003      	b.n	8005dea <chMtxLockS+0xba>
  } while ((cp != qp) &&
 8005de2:	6886      	ldr	r6, [r0, #8]
 8005de4:	689f      	ldr	r7, [r3, #8]
 8005de6:	42be      	cmp	r6, r7
 8005de8:	d302      	bcc.n	8005df0 <chMtxLockS+0xc0>
    cp = cp->next;
 8005dea:	6800      	ldr	r0, [r0, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8005dec:	4285      	cmp	r5, r0
 8005dee:	d1f8      	bne.n	8005de2 <chMtxLockS+0xb2>
  tp->prev       = cp->prev;
 8005df0:	6846      	ldr	r6, [r0, #4]
  tp->next       = cp;
 8005df2:	6018      	str	r0, [r3, #0]
  tp->prev       = cp->prev;
 8005df4:	605e      	str	r6, [r3, #4]
  tp->prev->next = tp;
 8005df6:	6033      	str	r3, [r6, #0]
  cp->prev       = tp;
 8005df8:	6043      	str	r3, [r0, #4]
          tp = tp->u.wtmtxp->owner;
 8005dfa:	68ab      	ldr	r3, [r5, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8005dfc:	688d      	ldr	r5, [r1, #8]
 8005dfe:	6898      	ldr	r0, [r3, #8]
 8005e00:	42a8      	cmp	r0, r5
 8005e02:	d3a0      	bcc.n	8005d46 <chMtxLockS+0x16>
 8005e04:	e7a6      	b.n	8005d54 <chMtxLockS+0x24>
 8005e06:	bf00      	nop
 8005e08:	200009b8 	.word	0x200009b8
 8005e0c:	00000000 	.word	0x00000000

08005e10 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8005e10:	b510      	push	{r4, lr}
 8005e12:	2430      	movs	r4, #48	; 0x30
 8005e14:	f384 8811 	msr	BASEPRI, r4
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005e18:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8005e1c:	2008      	movs	r0, #8
 8005e1e:	f7fd f8df 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8005e22:	2300      	movs	r3, #0
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f384 8811 	msr	BASEPRI, r4
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8005e2c:	4809      	ldr	r0, [pc, #36]	; (8005e54 <thread4B+0x44>)
 8005e2e:	f7ff ff7f 	bl	8005d30 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8005e32:	4808      	ldr	r0, [pc, #32]	; (8005e54 <thread4B+0x44>)
 8005e34:	f7fb fbe4 	bl	8001600 <chMtxUnlockS>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <thread4B+0x48>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	6892      	ldr	r2, [r2, #8]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d901      	bls.n	8005e4a <thread4B+0x3a>
    __sch_reschedule_ahead();
 8005e46:	f7fc fbdb 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f383 8811 	msr	BASEPRI, r3
}
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	bf00      	nop
 8005e54:	2000083c 	.word	0x2000083c
 8005e58:	200009b8 	.word	0x200009b8
 8005e5c:	00000000 	.word	0x00000000

08005e60 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8005e60:	b538      	push	{r3, r4, r5, lr}
  return __sch_get_currthread();
 8005e62:	4c1f      	ldr	r4, [pc, #124]	; (8005ee0 <chMtxUnlock+0x80>)
 8005e64:	2330      	movs	r3, #48	; 0x30
 8005e66:	68e5      	ldr	r5, [r4, #12]
 8005e68:	f383 8811 	msr	BASEPRI, r3
    if (chMtxQueueNotEmptyS(mp)) {
 8005e6c:	6802      	ldr	r2, [r0, #0]
    currtp->mtxlist = mp->next;
 8005e6e:	68c3      	ldr	r3, [r0, #12]
 8005e70:	64ab      	str	r3, [r5, #72]	; 0x48
    if (chMtxQueueNotEmptyS(mp)) {
 8005e72:	4282      	cmp	r2, r0
 8005e74:	d02d      	beq.n	8005ed2 <chMtxUnlock+0x72>
      tprio_t newprio = currtp->realprio;
 8005e76:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
      while (lmp != NULL) {
 8005e78:	b14b      	cbz	r3, 8005e8e <chMtxUnlock+0x2e>
  return (bool)(qp->next != qp);
 8005e7a:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <chMtxUnlock+0x28>
 8005e80:	6892      	ldr	r2, [r2, #8]
 8005e82:	4291      	cmp	r1, r2
 8005e84:	bf38      	it	cc
 8005e86:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8005e88:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f5      	bne.n	8005e7a <chMtxUnlock+0x1a>
      currtp->hdr.pqueue.prio = newprio;
 8005e8e:	60a9      	str	r1, [r5, #8]
  ch_queue_t *p = qp->next;
 8005e90:	6803      	ldr	r3, [r0, #0]
      mp->next = tp->mtxlist;
 8005e92:	6c99      	ldr	r1, [r3, #72]	; 0x48
  qp->next       = p->next;
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 8005e98:	6050      	str	r0, [r2, #4]
 8005e9a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005e9e:	691a      	ldr	r2, [r3, #16]
      tp->mtxlist = mp;
 8005ea0:	6498      	str	r0, [r3, #72]	; 0x48
  tp->state = CH_STATE_READY;
 8005ea2:	2100      	movs	r1, #0
  } while (unlikely(pqp->prio >= p->prio));
 8005ea4:	6898      	ldr	r0, [r3, #8]
 8005ea6:	7719      	strb	r1, [r3, #28]
    pqp = pqp->next;
 8005ea8:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005eaa:	6891      	ldr	r1, [r2, #8]
 8005eac:	4281      	cmp	r1, r0
 8005eae:	d2fb      	bcs.n	8005ea8 <chMtxUnlock+0x48>
  p->prev       = pqp->prev;
 8005eb0:	6851      	ldr	r1, [r2, #4]
 8005eb2:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8005eb6:	600b      	str	r3, [r1, #0]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005eb8:	6820      	ldr	r0, [r4, #0]
 8005eba:	68e1      	ldr	r1, [r4, #12]
  pqp->prev     = p;
 8005ebc:	6053      	str	r3, [r2, #4]
 8005ebe:	688b      	ldr	r3, [r1, #8]
 8005ec0:	6882      	ldr	r2, [r0, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d901      	bls.n	8005eca <chMtxUnlock+0x6a>
    __sch_reschedule_ahead();
 8005ec6:	f7fc fb9b 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f383 8811 	msr	BASEPRI, r3
}
 8005ed0:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6093      	str	r3, [r2, #8]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f383 8811 	msr	BASEPRI, r3
}
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	bf00      	nop
 8005ee0:	200009b8 	.word	0x200009b8
	...

08005ef0 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8005ef4:	4c18      	ldr	r4, [pc, #96]	; (8005f58 <chHeapStatus+0x68>)
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	bf18      	it	ne
 8005efa:	4604      	movne	r4, r0
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005efc:	460f      	mov	r7, r1
 8005efe:	4616      	mov	r6, r2
  }

  H_LOCK(heapp);
 8005f00:	f104 0814 	add.w	r8, r4, #20
 8005f04:	2330      	movs	r3, #48	; 0x30
 8005f06:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	f7ff ff10 	bl	8005d30 <chMtxLockS>
 8005f10:	f04f 0c00 	mov.w	ip, #0
 8005f14:	f38c 8811 	msr	BASEPRI, ip
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_FREE_NEXT(qp) != NULL) {
 8005f18:	68e3      	ldr	r3, [r4, #12]
 8005f1a:	b1cb      	cbz	r3, 8005f50 <chHeapStatus+0x60>
  tpages = 0U;
 8005f1c:	46e6      	mov	lr, ip
  n = 0U;
 8005f1e:	4665      	mov	r5, ip
  while (H_FREE_NEXT(qp) != NULL) {
 8005f20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f24:	45a4      	cmp	ip, r4
    size_t pages = H_FREE_PAGES(H_FREE_NEXT(qp));

    /* Updating counters.*/
    n++;
 8005f26:	f105 0501 	add.w	r5, r5, #1
    tpages += pages;
 8005f2a:	44a6      	add	lr, r4
    if (pages > lpages) {
 8005f2c:	bf38      	it	cc
 8005f2e:	46a4      	movcc	ip, r4
  while (H_FREE_NEXT(qp) != NULL) {
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f5      	bne.n	8005f20 <chHeapStatus+0x30>

    qp = H_FREE_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8005f34:	b117      	cbz	r7, 8005f3c <chHeapStatus+0x4c>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8005f36:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8005f3a:	603b      	str	r3, [r7, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8005f3c:	b116      	cbz	r6, 8005f44 <chHeapStatus+0x54>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8005f3e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8005f42:	6033      	str	r3, [r6, #0]
  }
  H_UNLOCK(heapp);
 8005f44:	4640      	mov	r0, r8
 8005f46:	f7ff ff8b 	bl	8005e60 <chMtxUnlock>

  return n;
}
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  lpages = 0U;
 8005f50:	469c      	mov	ip, r3
  tpages = 0U;
 8005f52:	469e      	mov	lr, r3
  n = 0U;
 8005f54:	461d      	mov	r5, r3
 8005f56:	e7ed      	b.n	8005f34 <chHeapStatus+0x44>
 8005f58:	20000adc 	.word	0x20000adc
 8005f5c:	00000000 	.word	0x00000000

08005f60 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8005f60:	b510      	push	{r4, lr}
 8005f62:	2330      	movs	r3, #48	; 0x30
 8005f64:	4604      	mov	r4, r0
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	480a      	ldr	r0, [pc, #40]	; (8005f94 <thread1.lto_priv.2+0x34>)
 8005f6c:	f7ff fee0 	bl	8005d30 <chMtxLockS>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8005f76:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <thread1.lto_priv.2+0x38>)
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	f103 0120 	add.w	r1, r3, #32
 8005f7e:	428a      	cmp	r2, r1
 8005f80:	d203      	bcs.n	8005f8a <thread1.lto_priv.2+0x2a>
  test_emit_token(*(char *)p);
 8005f82:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 8005f84:	1c50      	adds	r0, r2, #1
 8005f86:	60d8      	str	r0, [r3, #12]
 8005f88:	7011      	strb	r1, [r2, #0]
}
 8005f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8005f8e:	4801      	ldr	r0, [pc, #4]	; (8005f94 <thread1.lto_priv.2+0x34>)
 8005f90:	f7ff bf66 	b.w	8005e60 <chMtxUnlock>
 8005f94:	2000082c 	.word	0x2000082c
 8005f98:	20000ab4 	.word	0x20000ab4
 8005f9c:	00000000 	.word	0x00000000

08005fa0 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	2330      	movs	r3, #48	; 0x30
 8005fa4:	b086      	sub	sp, #24
 8005fa6:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = __instance_get_currthread(currcore);
 8005faa:	4c17      	ldr	r4, [pc, #92]	; (8006008 <thread4A+0x68>)
  vtp->func    = vtfunc;
 8005fac:	4a17      	ldr	r2, [pc, #92]	; (800600c <thread4A+0x6c>)
  vtp->par     = par;
 8005fae:	68e3      	ldr	r3, [r4, #12]
  vt_enqueue(vtlp, vtp, delay);
 8005fb0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  vtp->par     = par;
 8005fb4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 8005fb8:	4668      	mov	r0, sp
  vtp->reload  = (sysinterval_t)0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8005fbe:	f004 ff07 	bl	800add0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 8005fc2:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005fc4:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8005fca:	6803      	ldr	r3, [r0, #0]
 8005fcc:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8005fce:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8005fd4:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005fd6:	f7fa f973 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8005fda:	9b00      	ldr	r3, [sp, #0]
 8005fdc:	b113      	cbz	r3, 8005fe4 <thread4A+0x44>
      chVTDoResetI(&vt);
 8005fde:	4668      	mov	r0, sp
 8005fe0:	f7fc fa46 	bl	8002470 <chVTDoResetI>
 8005fe4:	2400      	movs	r4, #0
 8005fe6:	f384 8811 	msr	BASEPRI, r4
 8005fea:	2330      	movs	r3, #48	; 0x30
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	4807      	ldr	r0, [pc, #28]	; (8006010 <thread4A+0x70>)
 8005ff2:	f7ff fe9d 	bl	8005d30 <chMtxLockS>
 8005ff6:	f384 8811 	msr	BASEPRI, r4
  chMtxUnlock(&m1);
 8005ffa:	4805      	ldr	r0, [pc, #20]	; (8006010 <thread4A+0x70>)
}
 8005ffc:	b006      	add	sp, #24
 8005ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8006002:	f7ff bf2d 	b.w	8005e60 <chMtxUnlock>
 8006006:	bf00      	nop
 8006008:	200009b8 	.word	0x200009b8
 800600c:	08001551 	.word	0x08001551
 8006010:	2000082c 	.word	0x2000082c
	...

08006020 <thread6>:
static THD_FUNCTION(thread6, p) {
 8006020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006024:	4607      	mov	r7, r0
 8006026:	2430      	movs	r4, #48	; 0x30
 8006028:	f384 8811 	msr	BASEPRI, r4
 800602c:	481f      	ldr	r0, [pc, #124]	; (80060ac <thread6+0x8c>)
 800602e:	f7ff fe7f 	bl	8005d30 <chMtxLockS>
 8006032:	2300      	movs	r3, #0
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f384 8811 	msr	BASEPRI, r4
 800603c:	4e1c      	ldr	r6, [pc, #112]	; (80060b0 <thread6+0x90>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 800603e:	4d1d      	ldr	r5, [pc, #116]	; (80060b4 <thread6+0x94>)
 8006040:	68f4      	ldr	r4, [r6, #12]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8006042:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  chMtxUnlockS(mp);
 8006046:	4640      	mov	r0, r8
 8006048:	f7fb fada 	bl	8001600 <chMtxUnlockS>
  currtp->u.wtobjp = cp;
 800604c:	6365      	str	r5, [r4, #52]	; 0x34
  ch_queue_t *cp = qp;
 800604e:	462b      	mov	r3, r5
 8006050:	e003      	b.n	800605a <thread6+0x3a>
  } while ((cp != qp) &&
 8006052:	6899      	ldr	r1, [r3, #8]
 8006054:	68a2      	ldr	r2, [r4, #8]
 8006056:	4291      	cmp	r1, r2
 8006058:	d302      	bcc.n	8006060 <thread6+0x40>
    cp = cp->next;
 800605a:	681b      	ldr	r3, [r3, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 800605c:	42ab      	cmp	r3, r5
 800605e:	d1f8      	bne.n	8006052 <thread6+0x32>
  tp->prev       = cp->prev;
 8006060:	685a      	ldr	r2, [r3, #4]
  thread_t *otp = __instance_get_currthread(oip);
 8006062:	68f1      	ldr	r1, [r6, #12]
  tp->next       = cp;
 8006064:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 8006066:	6062      	str	r2, [r4, #4]
  ch_priority_queue_t *p = pqp->next;
 8006068:	6830      	ldr	r0, [r6, #0]
  tp->prev->next = tp;
 800606a:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 800606c:	605c      	str	r4, [r3, #4]
  otp->state = newstate;
 800606e:	2307      	movs	r3, #7
 8006070:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8006072:	6803      	ldr	r3, [r0, #0]
 8006074:	6033      	str	r3, [r6, #0]
  pqp->next->prev = pqp;
 8006076:	605e      	str	r6, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8006078:	2301      	movs	r3, #1
 800607a:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800607c:	60f0      	str	r0, [r6, #12]
  chSysSwitch(ntp, otp);
 800607e:	f7fa f91f 	bl	80002c0 <__port_switch>
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
  chSchGoSleepS(CH_STATE_WTCOND);
  msg = currtp->u.rdymsg;
  chMtxLockS(mp);
 8006082:	4640      	mov	r0, r8
 8006084:	f7ff fe54 	bl	8005d30 <chMtxLockS>
 8006088:	2300      	movs	r3, #0
 800608a:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800608e:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <thread6+0x98>)
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	f103 0120 	add.w	r1, r3, #32
 8006096:	428a      	cmp	r2, r1
 8006098:	d203      	bcs.n	80060a2 <thread6+0x82>
  test_emit_token(*(char *)p);
 800609a:	7839      	ldrb	r1, [r7, #0]
    *chtest.tokp++ = token;
 800609c:	1c50      	adds	r0, r2, #1
 800609e:	60d8      	str	r0, [r3, #12]
 80060a0:	7011      	strb	r1, [r2, #0]
}
 80060a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m1);
 80060a6:	4801      	ldr	r0, [pc, #4]	; (80060ac <thread6+0x8c>)
 80060a8:	f7ff beda 	b.w	8005e60 <chMtxUnlock>
 80060ac:	2000082c 	.word	0x2000082c
 80060b0:	200009b8 	.word	0x200009b8
 80060b4:	20000800 	.word	0x20000800
 80060b8:	20000ab4 	.word	0x20000ab4
 80060bc:	00000000 	.word	0x00000000

080060c0 <thread8>:
static THD_FUNCTION(thread8, p) {
 80060c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c4:	4607      	mov	r7, r0
 80060c6:	2430      	movs	r4, #48	; 0x30
 80060c8:	f384 8811 	msr	BASEPRI, r4
 80060cc:	4826      	ldr	r0, [pc, #152]	; (8006168 <thread8+0xa8>)
 80060ce:	f7ff fe2f 	bl	8005d30 <chMtxLockS>
 80060d2:	2500      	movs	r5, #0
 80060d4:	f385 8811 	msr	BASEPRI, r5
 80060d8:	f384 8811 	msr	BASEPRI, r4
 80060dc:	4823      	ldr	r0, [pc, #140]	; (800616c <thread8+0xac>)
 80060de:	f7ff fe27 	bl	8005d30 <chMtxLockS>
 80060e2:	f385 8811 	msr	BASEPRI, r5
 80060e6:	f384 8811 	msr	BASEPRI, r4
 80060ea:	4e21      	ldr	r6, [pc, #132]	; (8006170 <thread8+0xb0>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 80060ec:	4d21      	ldr	r5, [pc, #132]	; (8006174 <thread8+0xb4>)
 80060ee:	68f4      	ldr	r4, [r6, #12]
 80060f0:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  chMtxUnlockS(mp);
 80060f4:	4640      	mov	r0, r8
 80060f6:	f7fb fa83 	bl	8001600 <chMtxUnlockS>
  currtp->u.wtobjp = cp;
 80060fa:	6365      	str	r5, [r4, #52]	; 0x34
  ch_queue_t *cp = qp;
 80060fc:	462b      	mov	r3, r5
 80060fe:	e003      	b.n	8006108 <thread8+0x48>
  } while ((cp != qp) &&
 8006100:	6899      	ldr	r1, [r3, #8]
 8006102:	68a2      	ldr	r2, [r4, #8]
 8006104:	4291      	cmp	r1, r2
 8006106:	d302      	bcc.n	800610e <thread8+0x4e>
    cp = cp->next;
 8006108:	681b      	ldr	r3, [r3, #0]
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 800610a:	42ab      	cmp	r3, r5
 800610c:	d1f8      	bne.n	8006100 <thread8+0x40>
  tp->prev       = cp->prev;
 800610e:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 8006110:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 8006112:	6062      	str	r2, [r4, #4]
  tp->prev->next = tp;
 8006114:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 8006116:	605c      	str	r4, [r3, #4]
  thread_t *tp = __instance_get_currthread(currcore);
 8006118:	68f4      	ldr	r4, [r6, #12]
  ch_priority_queue_t *p = pqp->next;
 800611a:	6830      	ldr	r0, [r6, #0]
  otp->state = newstate;
 800611c:	2307      	movs	r3, #7
 800611e:	7723      	strb	r3, [r4, #28]
  pqp->next       = p->next;
 8006120:	6803      	ldr	r3, [r0, #0]
 8006122:	6033      	str	r3, [r6, #0]
  ntp->state = CH_STATE_CURRENT;
 8006124:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 8006126:	605e      	str	r6, [r3, #4]
  chSysSwitch(ntp, otp);
 8006128:	4621      	mov	r1, r4
  ntp->state = CH_STATE_CURRENT;
 800612a:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800612c:	60f0      	str	r0, [r6, #12]
  chSysSwitch(ntp, otp);
 800612e:	f7fa f8c7 	bl	80002c0 <__port_switch>
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 8006132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006134:	3301      	adds	r3, #1
 8006136:	d002      	beq.n	800613e <thread8+0x7e>
    chMtxLockS(mp);
 8006138:	4640      	mov	r0, r8
 800613a:	f7ff fdf9 	bl	8005d30 <chMtxLockS>
 800613e:	2300      	movs	r3, #0
 8006140:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <thread8+0xb8>)
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	f103 0120 	add.w	r1, r3, #32
 800614c:	428a      	cmp	r2, r1
 800614e:	d203      	bcs.n	8006158 <thread8+0x98>
  test_emit_token(*(char *)p);
 8006150:	7839      	ldrb	r1, [r7, #0]
    *chtest.tokp++ = token;
 8006152:	1c50      	adds	r0, r2, #1
 8006154:	60d8      	str	r0, [r3, #12]
 8006156:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m1);
 8006158:	4804      	ldr	r0, [pc, #16]	; (800616c <thread8+0xac>)
 800615a:	f7ff fe81 	bl	8005e60 <chMtxUnlock>
}
 800615e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m2);
 8006162:	4801      	ldr	r0, [pc, #4]	; (8006168 <thread8+0xa8>)
 8006164:	f7ff be7c 	b.w	8005e60 <chMtxUnlock>
 8006168:	2000083c 	.word	0x2000083c
 800616c:	2000082c 	.word	0x2000082c
 8006170:	200009b8 	.word	0x200009b8
 8006174:	20000800 	.word	0x20000800
 8006178:	20000ab4 	.word	0x20000ab4
 800617c:	00000000 	.word	0x00000000

08006180 <thread9>:
static THD_FUNCTION(thread9, p) {
 8006180:	b510      	push	{r4, lr}
 8006182:	2330      	movs	r3, #48	; 0x30
 8006184:	4604      	mov	r4, r0
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	480a      	ldr	r0, [pc, #40]	; (80061b4 <thread9+0x34>)
 800618c:	f7ff fdd0 	bl	8005d30 <chMtxLockS>
 8006190:	2300      	movs	r3, #0
 8006192:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8006196:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <thread9+0x38>)
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	f103 0120 	add.w	r1, r3, #32
 800619e:	428a      	cmp	r2, r1
 80061a0:	d203      	bcs.n	80061aa <thread9+0x2a>
  test_emit_token(*(char *)p);
 80061a2:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 80061a4:	1c50      	adds	r0, r2, #1
 80061a6:	60d8      	str	r0, [r3, #12]
 80061a8:	7011      	strb	r1, [r2, #0]
}
 80061aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m2);
 80061ae:	4801      	ldr	r0, [pc, #4]	; (80061b4 <thread9+0x34>)
 80061b0:	f7ff be56 	b.w	8005e60 <chMtxUnlock>
 80061b4:	2000083c 	.word	0x2000083c
 80061b8:	20000ab4 	.word	0x20000ab4
 80061bc:	00000000 	.word	0x00000000

080061c0 <rt_test_008_001_execute.lto_priv.0>:
static void rt_test_008_001_execute(void) {
 80061c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061c4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80062a8 <rt_test_008_001_execute.lto_priv.0+0xe8>
  test_set_step(2);
 80061c8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80062ac <rt_test_008_001_execute.lto_priv.0+0xec>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80061cc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80061d0:	2302      	movs	r3, #2
 80061d2:	f8c8 3000 	str.w	r3, [r8]
static void rt_test_008_001_execute(void) {
 80061d6:	b083      	sub	sp, #12
 80061d8:	6895      	ldr	r5, [r2, #8]
 80061da:	2330      	movs	r3, #48	; 0x30
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	4833      	ldr	r0, [pc, #204]	; (80062b0 <rt_test_008_001_execute.lto_priv.0+0xf0>)
 80061e2:	f7ff fda5 	bl	8005d30 <chMtxLockS>
 80061e6:	2700      	movs	r7, #0
 80061e8:	f387 8811 	msr	BASEPRI, r7
  test_set_step(3);
 80061ec:	2303      	movs	r3, #3
 80061ee:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80061f2:	4b30      	ldr	r3, [pc, #192]	; (80062b4 <rt_test_008_001_execute.lto_priv.0+0xf4>)
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	1c6a      	adds	r2, r5, #1
 80061f8:	4b2f      	ldr	r3, [pc, #188]	; (80062b8 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 80061fa:	4830      	ldr	r0, [pc, #192]	; (80062bc <rt_test_008_001_execute.lto_priv.0+0xfc>)
 80061fc:	4c30      	ldr	r4, [pc, #192]	; (80062c0 <rt_test_008_001_execute.lto_priv.0+0x100>)
 80061fe:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006202:	f7fe f9bd 	bl	8004580 <chThdCreateStatic>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8006206:	4b2f      	ldr	r3, [pc, #188]	; (80062c4 <rt_test_008_001_execute.lto_priv.0+0x104>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8006208:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	1caa      	adds	r2, r5, #2
 800620e:	4b2a      	ldr	r3, [pc, #168]	; (80062b8 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 8006210:	482d      	ldr	r0, [pc, #180]	; (80062c8 <rt_test_008_001_execute.lto_priv.0+0x108>)
 8006212:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006216:	f7fe f9b3 	bl	8004580 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800621a:	4b2c      	ldr	r3, [pc, #176]	; (80062cc <rt_test_008_001_execute.lto_priv.0+0x10c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800621c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	1cea      	adds	r2, r5, #3
 8006222:	4b25      	ldr	r3, [pc, #148]	; (80062b8 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 8006224:	482a      	ldr	r0, [pc, #168]	; (80062d0 <rt_test_008_001_execute.lto_priv.0+0x110>)
 8006226:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800622a:	f7fe f9a9 	bl	8004580 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800622e:	4b29      	ldr	r3, [pc, #164]	; (80062d4 <rt_test_008_001_execute.lto_priv.0+0x114>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8006230:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	1d2a      	adds	r2, r5, #4
 8006236:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 8006238:	4827      	ldr	r0, [pc, #156]	; (80062d8 <rt_test_008_001_execute.lto_priv.0+0x118>)
 800623a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800623e:	f7fe f99f 	bl	8004580 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8006242:	4b26      	ldr	r3, [pc, #152]	; (80062dc <rt_test_008_001_execute.lto_priv.0+0x11c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8006244:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	1d6a      	adds	r2, r5, #5
 800624a:	4b1b      	ldr	r3, [pc, #108]	; (80062b8 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 800624c:	4824      	ldr	r0, [pc, #144]	; (80062e0 <rt_test_008_001_execute.lto_priv.0+0x120>)
 800624e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006252:	f7fe f995 	bl	8004580 <chThdCreateStatic>
  test_set_step(4);
 8006256:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8006258:	6120      	str	r0, [r4, #16]
    chMtxUnlock(&m1);
 800625a:	4815      	ldr	r0, [pc, #84]	; (80062b0 <rt_test_008_001_execute.lto_priv.0+0xf0>)
  test_set_step(4);
 800625c:	f8c8 3000 	str.w	r3, [r8]
    chMtxUnlock(&m1);
 8006260:	f7ff fdfe 	bl	8005e60 <chMtxUnlock>
 8006264:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 8006268:	f854 0b04 	ldr.w	r0, [r4], #4
 800626c:	b118      	cbz	r0, 8006276 <rt_test_008_001_execute.lto_priv.0+0xb6>
      chThdWait(threads[i]);
 800626e:	f7fb fa37 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8006272:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8006276:	42b4      	cmp	r4, r6
 8006278:	d1f6      	bne.n	8006268 <rt_test_008_001_execute.lto_priv.0+0xa8>
 800627a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  if (!condition) {
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	42ab      	cmp	r3, r5
 8006282:	d106      	bne.n	8006292 <rt_test_008_001_execute.lto_priv.0+0xd2>
    test_assert_sequence("ABCDE", "invalid sequence");
 8006284:	4917      	ldr	r1, [pc, #92]	; (80062e4 <rt_test_008_001_execute.lto_priv.0+0x124>)
 8006286:	4818      	ldr	r0, [pc, #96]	; (80062e8 <rt_test_008_001_execute.lto_priv.0+0x128>)
}
 8006288:	b003      	add	sp, #12
 800628a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800628e:	f7fa bbbf 	b.w	8000a10 <__test_assert_sequence>
  chtest.failure_message = msg;
 8006292:	4b16      	ldr	r3, [pc, #88]	; (80062ec <rt_test_008_001_execute.lto_priv.0+0x12c>)
 8006294:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8006298:	f240 1201 	movw	r2, #257	; 0x101
 800629c:	f8a8 2004 	strh.w	r2, [r8, #4]
}
 80062a0:	b003      	add	sp, #12
 80062a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062a6:	bf00      	nop
 80062a8:	200009b8 	.word	0x200009b8
 80062ac:	20000ab4 	.word	0x20000ab4
 80062b0:	2000082c 	.word	0x2000082c
 80062b4:	0800bcb0 	.word	0x0800bcb0
 80062b8:	08005f61 	.word	0x08005f61
 80062bc:	20000d40 	.word	0x20000d40
 80062c0:	20001744 	.word	0x20001744
 80062c4:	0800ba3c 	.word	0x0800ba3c
 80062c8:	20000f20 	.word	0x20000f20
 80062cc:	0800ba30 	.word	0x0800ba30
 80062d0:	20001100 	.word	0x20001100
 80062d4:	0800ba24 	.word	0x0800ba24
 80062d8:	200012e0 	.word	0x200012e0
 80062dc:	0800ba18 	.word	0x0800ba18
 80062e0:	200014c0 	.word	0x200014c0
 80062e4:	0800b9c8 	.word	0x0800b9c8
 80062e8:	0800bcac 	.word	0x0800bcac
 80062ec:	0800bd80 	.word	0x0800bd80

080062f0 <rt_test_008_004_execute.lto_priv.0>:
static void rt_test_008_004_execute(void) {
 80062f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return __sch_get_currthread();
 80062f4:	4d3a      	ldr	r5, [pc, #232]	; (80063e0 <rt_test_008_004_execute.lto_priv.0+0xf0>)
  test_set_step(2);
 80062f6:	4c3b      	ldr	r4, [pc, #236]	; (80063e4 <rt_test_008_004_execute.lto_priv.0+0xf4>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80062f8:	68eb      	ldr	r3, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80062fa:	483b      	ldr	r0, [pc, #236]	; (80063e8 <rt_test_008_004_execute.lto_priv.0+0xf8>)
 80062fc:	689e      	ldr	r6, [r3, #8]
 80062fe:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <rt_test_008_004_execute.lto_priv.0+0xfc>)
 8006300:	4f3b      	ldr	r7, [pc, #236]	; (80063f0 <rt_test_008_004_execute.lto_priv.0+0x100>)
static void rt_test_008_004_execute(void) {
 8006302:	b082      	sub	sp, #8
    pa = p + 1;
 8006304:	f106 0901 	add.w	r9, r6, #1
  test_set_step(2);
 8006308:	2102      	movs	r1, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	464a      	mov	r2, r9
  test_set_step(2);
 800630e:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8006310:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <rt_test_008_004_execute.lto_priv.0+0x104>)
 8006312:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006316:	f7fe f933 	bl	8004580 <chThdCreateStatic>
    pb = p + 2;
 800631a:	f106 0a02 	add.w	sl, r6, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800631e:	4b36      	ldr	r3, [pc, #216]	; (80063f8 <rt_test_008_004_execute.lto_priv.0+0x108>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8006320:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8006322:	4652      	mov	r2, sl
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800632a:	4b34      	ldr	r3, [pc, #208]	; (80063fc <rt_test_008_004_execute.lto_priv.0+0x10c>)
 800632c:	4834      	ldr	r0, [pc, #208]	; (8006400 <rt_test_008_004_execute.lto_priv.0+0x110>)
 800632e:	f7fe f927 	bl	8004580 <chThdCreateStatic>
  test_set_step(3);
 8006332:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8006334:	6078      	str	r0, [r7, #4]
  test_set_step(3);
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	f04f 0830 	mov.w	r8, #48	; 0x30
 800633c:	f388 8811 	msr	BASEPRI, r8
 8006340:	4830      	ldr	r0, [pc, #192]	; (8006404 <rt_test_008_004_execute.lto_priv.0+0x114>)
 8006342:	f7ff fcf5 	bl	8005d30 <chMtxLockS>
 8006346:	2700      	movs	r7, #0
 8006348:	f387 8811 	msr	BASEPRI, r7
 800634c:	68eb      	ldr	r3, [r5, #12]
  if (!condition) {
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	429e      	cmp	r6, r3
 8006352:	d13c      	bne.n	80063ce <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(4);
 8006354:	2304      	movs	r3, #4
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800635c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006360:	2008      	movs	r0, #8
 8006362:	f7fc fe3d 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8006366:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->hdr.pqueue.prio;
 800636a:	68eb      	ldr	r3, [r5, #12]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	4599      	cmp	r9, r3
 8006370:	d12d      	bne.n	80063ce <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(5);
 8006372:	2305      	movs	r3, #5
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	f388 8811 	msr	BASEPRI, r8
 800637a:	4823      	ldr	r0, [pc, #140]	; (8006408 <rt_test_008_004_execute.lto_priv.0+0x118>)
 800637c:	f7ff fcd8 	bl	8005d30 <chMtxLockS>
 8006380:	f387 8811 	msr	BASEPRI, r7
 8006384:	68eb      	ldr	r3, [r5, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4599      	cmp	r9, r3
 800638a:	d120      	bne.n	80063ce <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(6);
 800638c:	2306      	movs	r3, #6
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8006394:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006398:	2008      	movs	r0, #8
 800639a:	f7fc fe21 	bl	8002fe0 <chSchGoSleepTimeoutS>
 800639e:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->hdr.pqueue.prio;
 80063a2:	68eb      	ldr	r3, [r5, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	459a      	cmp	sl, r3
 80063a8:	d111      	bne.n	80063ce <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(7);
 80063aa:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 80063ac:	4816      	ldr	r0, [pc, #88]	; (8006408 <rt_test_008_004_execute.lto_priv.0+0x118>)
  test_set_step(7);
 80063ae:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m2);
 80063b0:	f7ff fd56 	bl	8005e60 <chMtxUnlock>
 80063b4:	68eb      	ldr	r3, [r5, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	4599      	cmp	r9, r3
 80063ba:	d108      	bne.n	80063ce <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(8);
 80063bc:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 80063be:	4811      	ldr	r0, [pc, #68]	; (8006404 <rt_test_008_004_execute.lto_priv.0+0x114>)
  test_set_step(8);
 80063c0:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 80063c2:	f7ff fd4d 	bl	8005e60 <chMtxUnlock>
 80063c6:	68eb      	ldr	r3, [r5, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	429e      	cmp	r6, r3
 80063cc:	d004      	beq.n	80063d8 <rt_test_008_004_execute.lto_priv.0+0xe8>
  chtest.failure_message = msg;
 80063ce:	4b0f      	ldr	r3, [pc, #60]	; (800640c <rt_test_008_004_execute.lto_priv.0+0x11c>)
 80063d0:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 80063d2:	f240 1201 	movw	r2, #257	; 0x101
 80063d6:	80a2      	strh	r2, [r4, #4]
}
 80063d8:	b002      	add	sp, #8
 80063da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063de:	bf00      	nop
 80063e0:	200009b8 	.word	0x200009b8
 80063e4:	20000ab4 	.word	0x20000ab4
 80063e8:	20000d40 	.word	0x20000d40
 80063ec:	0800ba18 	.word	0x0800ba18
 80063f0:	20001744 	.word	0x20001744
 80063f4:	08005fa1 	.word	0x08005fa1
 80063f8:	0800ba24 	.word	0x0800ba24
 80063fc:	08005e11 	.word	0x08005e11
 8006400:	20000f20 	.word	0x20000f20
 8006404:	2000082c 	.word	0x2000082c
 8006408:	2000083c 	.word	0x2000083c
 800640c:	0800bd80 	.word	0x0800bd80

08006410 <rt_test_008_005_execute.lto_priv.0>:
static void rt_test_008_005_execute(void) {
 8006410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 8006414:	4e59      	ldr	r6, [pc, #356]	; (800657c <rt_test_008_005_execute.lto_priv.0+0x16c>)
  test_set_step(2);
 8006416:	4d5a      	ldr	r5, [pc, #360]	; (8006580 <rt_test_008_005_execute.lto_priv.0+0x170>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8006418:	68f2      	ldr	r2, [r6, #12]
 800641a:	2302      	movs	r3, #2
 800641c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	2730      	movs	r7, #48	; 0x30
 8006424:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8006428:	4c56      	ldr	r4, [pc, #344]	; (8006584 <rt_test_008_005_execute.lto_priv.0+0x174>)
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	b14b      	cbz	r3, 8006442 <rt_test_008_005_execute.lto_priv.0+0x32>
 800642e:	2300      	movs	r3, #0
 8006430:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8006434:	4b54      	ldr	r3, [pc, #336]	; (8006588 <rt_test_008_005_execute.lto_priv.0+0x178>)
 8006436:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006438:	f240 1201 	movw	r2, #257	; 0x101
 800643c:	80aa      	strh	r2, [r5, #4]
}
 800643e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return __sch_get_currthread();
 8006442:	68f2      	ldr	r2, [r6, #12]
  mp->owner = currtp;
 8006444:	60a2      	str	r2, [r4, #8]
  mp->next = currtp->mtxlist;
 8006446:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8006448:	60e1      	str	r1, [r4, #12]
  currtp->mtxlist = mp;
 800644a:	6494      	str	r4, [r2, #72]	; 0x48
 800644c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8006450:	2203      	movs	r2, #3
 8006452:	602a      	str	r2, [r5, #0]
 8006454:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8006458:	68a2      	ldr	r2, [r4, #8]
 800645a:	2a00      	cmp	r2, #0
 800645c:	d064      	beq.n	8006528 <rt_test_008_005_execute.lto_priv.0+0x118>
 800645e:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8006462:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8006464:	4620      	mov	r0, r4
  test_set_step(4);
 8006466:	602b      	str	r3, [r5, #0]
    chMtxUnlock(&m1);
 8006468:	f7ff fcfa 	bl	8005e60 <chMtxUnlock>
  if (!condition) {
 800646c:	68a3      	ldr	r3, [r4, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d168      	bne.n	8006544 <rt_test_008_005_execute.lto_priv.0+0x134>
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	42a2      	cmp	r2, r4
 8006476:	d16b      	bne.n	8006550 <rt_test_008_005_execute.lto_priv.0+0x140>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8006478:	68f1      	ldr	r1, [r6, #12]
 800647a:	6889      	ldr	r1, [r1, #8]
  test_set_step(5);
 800647c:	2005      	movs	r0, #5
 800647e:	4588      	cmp	r8, r1
 8006480:	6028      	str	r0, [r5, #0]
 8006482:	d14b      	bne.n	800651c <rt_test_008_005_execute.lto_priv.0+0x10c>
  test_set_step(6);
 8006484:	2106      	movs	r1, #6
 8006486:	6029      	str	r1, [r5, #0]
 8006488:	f387 8811 	msr	BASEPRI, r7
 800648c:	6891      	ldr	r1, [r2, #8]
 800648e:	2900      	cmp	r1, #0
 8006490:	d1ce      	bne.n	8006430 <rt_test_008_005_execute.lto_priv.0+0x20>
  return __sch_get_currthread();
 8006492:	68f0      	ldr	r0, [r6, #12]
  mp->owner = currtp;
 8006494:	6090      	str	r0, [r2, #8]
  mp->next = currtp->mtxlist;
 8006496:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006498:	60d3      	str	r3, [r2, #12]
  currtp->mtxlist = mp;
 800649a:	6482      	str	r2, [r0, #72]	; 0x48
 800649c:	f381 8811 	msr	BASEPRI, r1
 80064a0:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 80064a4:	6893      	ldr	r3, [r2, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d05b      	beq.n	8006562 <rt_test_008_005_execute.lto_priv.0+0x152>
 80064aa:	f381 8811 	msr	BASEPRI, r1
 80064ae:	f387 8811 	msr	BASEPRI, r7
 80064b2:	68f7      	ldr	r7, [r6, #12]
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *currtp = chThdGetSelfX();

  if (currtp->mtxlist != NULL) {
 80064b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b6:	b31b      	cbz	r3, 8006500 <rt_test_008_005_execute.lto_priv.0+0xf0>
  return (bool)(qp->next != qp);
 80064b8:	681a      	ldr	r2, [r3, #0]
    do {
      mutex_t *mp = currtp->mtxlist;
      currtp->mtxlist = mp->next;
 80064ba:	68d8      	ldr	r0, [r3, #12]
 80064bc:	64b8      	str	r0, [r7, #72]	; 0x48
      if (chMtxQueueNotEmptyS(mp)) {
 80064be:	4293      	cmp	r3, r2
 80064c0:	d04c      	beq.n	800655c <rt_test_008_005_execute.lto_priv.0+0x14c>
  qp->next       = p->next;
 80064c2:	6810      	ldr	r0, [r2, #0]
 80064c4:	6018      	str	r0, [r3, #0]
  qp->next->prev = qp;
 80064c6:	6043      	str	r3, [r0, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        tp = threadref(ch_queue_fifo_remove(&mp->queue));
        mp->owner   = tp;
        mp->next    = tp->mtxlist;
 80064c8:	6c90      	ldr	r0, [r2, #72]	; 0x48
 80064ca:	60d8      	str	r0, [r3, #12]
        mp->owner   = tp;
 80064cc:	609a      	str	r2, [r3, #8]
  } while (unlikely(pqp->prio >= p->prio));
 80064ce:	6890      	ldr	r0, [r2, #8]
        tp->mtxlist = mp;
 80064d0:	6493      	str	r3, [r2, #72]	; 0x48
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80064d2:	6913      	ldr	r3, [r2, #16]
  tp->state = CH_STATE_READY;
 80064d4:	7711      	strb	r1, [r2, #28]
    pqp = pqp->next;
 80064d6:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80064d8:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80064dc:	4584      	cmp	ip, r0
 80064de:	d2fa      	bcs.n	80064d6 <rt_test_008_005_execute.lto_priv.0+0xc6>
  p->prev       = pqp->prev;
 80064e0:	6858      	ldr	r0, [r3, #4]
  p->next       = pqp;
 80064e2:	6013      	str	r3, [r2, #0]
  p->prev       = pqp->prev;
 80064e4:	6050      	str	r0, [r2, #4]
  p->prev->next = p;
 80064e6:	6002      	str	r2, [r0, #0]
  pqp->prev     = p;
 80064e8:	605a      	str	r2, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (currtp->mtxlist != NULL);
 80064ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e3      	bne.n	80064b8 <rt_test_008_005_execute.lto_priv.0+0xa8>
    currtp->hdr.pqueue.prio = currtp->realprio;
 80064f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80064f2:	6832      	ldr	r2, [r6, #0]
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	6892      	ldr	r2, [r2, #8]
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d201      	bcs.n	8006500 <rt_test_008_005_execute.lto_priv.0+0xf0>
    __sch_reschedule_ahead();
 80064fc:	f7fc f880 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 8006500:	2300      	movs	r3, #0
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	68a3      	ldr	r3, [r4, #8]
 8006508:	b9e3      	cbnz	r3, 8006544 <rt_test_008_005_execute.lto_priv.0+0x134>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	42a3      	cmp	r3, r4
 800650e:	d11f      	bne.n	8006550 <rt_test_008_005_execute.lto_priv.0+0x140>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8006510:	68f3      	ldr	r3, [r6, #12]
 8006512:	689b      	ldr	r3, [r3, #8]
  test_set_step(7);
 8006514:	2207      	movs	r2, #7
 8006516:	4598      	cmp	r8, r3
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	d090      	beq.n	800643e <rt_test_008_005_execute.lto_priv.0+0x2e>
  chtest.failure_message = msg;
 800651c:	4b1b      	ldr	r3, [pc, #108]	; (800658c <rt_test_008_005_execute.lto_priv.0+0x17c>)
 800651e:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006520:	f240 1201 	movw	r2, #257	; 0x101
 8006524:	80aa      	strh	r2, [r5, #4]
  return true;
 8006526:	e78a      	b.n	800643e <rt_test_008_005_execute.lto_priv.0+0x2e>
  return __sch_get_currthread();
 8006528:	68f3      	ldr	r3, [r6, #12]
  mp->owner = currtp;
 800652a:	60a3      	str	r3, [r4, #8]
  mp->next = currtp->mtxlist;
 800652c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800652e:	60e1      	str	r1, [r4, #12]
  currtp->mtxlist = mp;
 8006530:	649c      	str	r4, [r3, #72]	; 0x48
 8006532:	f382 8811 	msr	BASEPRI, r2
  chtest.failure_message = msg;
 8006536:	4b16      	ldr	r3, [pc, #88]	; (8006590 <rt_test_008_005_execute.lto_priv.0+0x180>)
 8006538:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800653a:	f240 1201 	movw	r2, #257	; 0x101
 800653e:	80aa      	strh	r2, [r5, #4]
}
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.failure_message = msg;
 8006544:	4b13      	ldr	r3, [pc, #76]	; (8006594 <rt_test_008_005_execute.lto_priv.0+0x184>)
 8006546:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006548:	f240 1201 	movw	r2, #257	; 0x101
 800654c:	80aa      	strh	r2, [r5, #4]
  return true;
 800654e:	e776      	b.n	800643e <rt_test_008_005_execute.lto_priv.0+0x2e>
  chtest.failure_message = msg;
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <rt_test_008_005_execute.lto_priv.0+0x188>)
 8006552:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006554:	f240 1201 	movw	r2, #257	; 0x101
 8006558:	80aa      	strh	r2, [r5, #4]
  return true;
 800655a:	e770      	b.n	800643e <rt_test_008_005_execute.lto_priv.0+0x2e>
        mp->owner = NULL;
 800655c:	6099      	str	r1, [r3, #8]
 800655e:	4603      	mov	r3, r0
 8006560:	e7c4      	b.n	80064ec <rt_test_008_005_execute.lto_priv.0+0xdc>
 8006562:	68f1      	ldr	r1, [r6, #12]
  mp->owner = currtp;
 8006564:	6091      	str	r1, [r2, #8]
  mp->next = currtp->mtxlist;
 8006566:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8006568:	60d0      	str	r0, [r2, #12]
  currtp->mtxlist = mp;
 800656a:	648a      	str	r2, [r1, #72]	; 0x48
 800656c:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <rt_test_008_005_execute.lto_priv.0+0x180>)
 8006572:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006574:	f240 1201 	movw	r2, #257	; 0x101
 8006578:	80aa      	strh	r2, [r5, #4]
  return true;
 800657a:	e760      	b.n	800643e <rt_test_008_005_execute.lto_priv.0+0x2e>
 800657c:	200009b8 	.word	0x200009b8
 8006580:	20000ab4 	.word	0x20000ab4
 8006584:	2000082c 	.word	0x2000082c
 8006588:	0800bd98 	.word	0x0800bd98
 800658c:	0800bd80 	.word	0x0800bd80
 8006590:	0800bda8 	.word	0x0800bda8
 8006594:	0800bdb4 	.word	0x0800bdb4
 8006598:	0800bcc0 	.word	0x0800bcc0
 800659c:	00000000 	.word	0x00000000

080065a0 <rt_test_011_001_execute.lto_priv.0>:
 80065a0:	4b66      	ldr	r3, [pc, #408]	; (800673c <rt_test_011_001_execute.lto_priv.0+0x19c>)
static void rt_test_011_001_execute(void) {
 80065a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 80065a6:	68da      	ldr	r2, [r3, #12]
  test_set_step(2);
 80065a8:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8006740 <rt_test_011_001_execute.lto_priv.0+0x1a0>
 80065ac:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80065b0:	2302      	movs	r3, #2
 80065b2:	f8c8 3000 	str.w	r3, [r8]
 80065b6:	2330      	movs	r3, #48	; 0x30
 80065b8:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 80065bc:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8006744 <rt_test_011_001_execute.lto_priv.0+0x1a4>
 80065c0:	f109 0014 	add.w	r0, r9, #20
 80065c4:	f7ff fbb4 	bl	8005d30 <chMtxLockS>
 80065c8:	2500      	movs	r5, #0
 80065ca:	f385 8811 	msr	BASEPRI, r5
  while (H_FREE_NEXT(qp) != NULL) {
 80065ce:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80065d2:	2c00      	cmp	r4, #0
 80065d4:	f000 808a 	beq.w	80066ec <rt_test_011_001_execute.lto_priv.0+0x14c>
  tpages = 0U;
 80065d8:	462f      	mov	r7, r5
  n = 0U;
 80065da:	462e      	mov	r6, r5
  while (H_FREE_NEXT(qp) != NULL) {
 80065dc:	e9d4 4300 	ldrd	r4, r3, [r4]
 80065e0:	429d      	cmp	r5, r3
    n++;
 80065e2:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 80065e6:	441f      	add	r7, r3
 80065e8:	bf38      	it	cc
 80065ea:	461d      	movcc	r5, r3
  while (H_FREE_NEXT(qp) != NULL) {
 80065ec:	2c00      	cmp	r4, #0
 80065ee:	d1f5      	bne.n	80065dc <rt_test_011_001_execute.lto_priv.0+0x3c>
  H_UNLOCK(heapp);
 80065f0:	4855      	ldr	r0, [pc, #340]	; (8006748 <rt_test_011_001_execute.lto_priv.0+0x1a8>)
 80065f2:	f7ff fc35 	bl	8005e60 <chMtxUnlock>
  if (!condition) {
 80065f6:	2e01      	cmp	r6, #1
 80065f8:	d17c      	bne.n	80066f4 <rt_test_011_001_execute.lto_priv.0+0x154>
  test_set_step(3);
 80065fa:	2203      	movs	r2, #3
 80065fc:	f8c8 2000 	str.w	r2, [r8]
    threads[0] = chThdCreateFromHeap(&heap1,
 8006600:	4b52      	ldr	r3, [pc, #328]	; (800674c <rt_test_011_001_execute.lto_priv.0+0x1ac>)
 8006602:	4953      	ldr	r1, [pc, #332]	; (8006750 <rt_test_011_001_execute.lto_priv.0+0x1b0>)
 8006604:	4e53      	ldr	r6, [pc, #332]	; (8006754 <rt_test_011_001_execute.lto_priv.0+0x1b4>)
 8006606:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800660a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800660e:	f004 fb17 	bl	800ac40 <chThdCreateFromHeap.constprop.0>
 8006612:	6030      	str	r0, [r6, #0]
 8006614:	2800      	cmp	r0, #0
 8006616:	d060      	beq.n	80066da <rt_test_011_001_execute.lto_priv.0+0x13a>
  test_set_step(4);
 8006618:	2204      	movs	r2, #4
 800661a:	f8c8 2000 	str.w	r2, [r8]
    threads[1] = chThdCreateFromHeap(&heap1,
 800661e:	4b4e      	ldr	r3, [pc, #312]	; (8006758 <rt_test_011_001_execute.lto_priv.0+0x1b8>)
 8006620:	494e      	ldr	r1, [pc, #312]	; (800675c <rt_test_011_001_execute.lto_priv.0+0x1bc>)
 8006622:	f1aa 0202 	sub.w	r2, sl, #2
 8006626:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800662a:	f004 fb09 	bl	800ac40 <chThdCreateFromHeap.constprop.0>
 800662e:	6070      	str	r0, [r6, #4]
 8006630:	2800      	cmp	r0, #0
 8006632:	d052      	beq.n	80066da <rt_test_011_001_execute.lto_priv.0+0x13a>
  test_set_step(5);
 8006634:	2005      	movs	r0, #5
 8006636:	f8c8 0000 	str.w	r0, [r8]
    threads[2] = chThdCreateFromHeap(&heap1,
 800663a:	4b49      	ldr	r3, [pc, #292]	; (8006760 <rt_test_011_001_execute.lto_priv.0+0x1c0>)
 800663c:	4949      	ldr	r1, [pc, #292]	; (8006764 <rt_test_011_001_execute.lto_priv.0+0x1c4>)
 800663e:	f1aa 0203 	sub.w	r2, sl, #3
 8006642:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006646:	f004 fafb 	bl	800ac40 <chThdCreateFromHeap.constprop.0>
 800664a:	60b0      	str	r0, [r6, #8]
 800664c:	2800      	cmp	r0, #0
 800664e:	d15a      	bne.n	8006706 <rt_test_011_001_execute.lto_priv.0+0x166>
  test_set_step(6);
 8006650:	2306      	movs	r3, #6
 8006652:	f8c8 3000 	str.w	r3, [r8]
 8006656:	f106 0a14 	add.w	sl, r6, #20
    if (threads[i] != NULL) {
 800665a:	f856 0b04 	ldr.w	r0, [r6], #4
 800665e:	b118      	cbz	r0, 8006668 <rt_test_011_001_execute.lto_priv.0+0xc8>
      chThdWait(threads[i]);
 8006660:	f7fb f83e 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8006664:	f846 4c04 	str.w	r4, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8006668:	4556      	cmp	r6, sl
 800666a:	d1f6      	bne.n	800665a <rt_test_011_001_execute.lto_priv.0+0xba>
    test_assert_sequence("AB", "invalid sequence");
 800666c:	493e      	ldr	r1, [pc, #248]	; (8006768 <rt_test_011_001_execute.lto_priv.0+0x1c8>)
 800666e:	483f      	ldr	r0, [pc, #252]	; (800676c <rt_test_011_001_execute.lto_priv.0+0x1cc>)
 8006670:	f7fa f9ce 	bl	8000a10 <__test_assert_sequence>
 8006674:	4604      	mov	r4, r0
 8006676:	bbb8      	cbnz	r0, 80066e8 <rt_test_011_001_execute.lto_priv.0+0x148>
  test_set_step(7);
 8006678:	2307      	movs	r3, #7
 800667a:	f8c8 3000 	str.w	r3, [r8]
 800667e:	2330      	movs	r3, #48	; 0x30
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	4830      	ldr	r0, [pc, #192]	; (8006748 <rt_test_011_001_execute.lto_priv.0+0x1a8>)
 8006686:	f7ff fb53 	bl	8005d30 <chMtxLockS>
 800668a:	f384 8811 	msr	BASEPRI, r4
  while (H_FREE_NEXT(qp) != NULL) {
 800668e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d03f      	beq.n	8006716 <rt_test_011_001_execute.lto_priv.0+0x176>
  tpages = 0U;
 8006696:	4626      	mov	r6, r4
  n = 0U;
 8006698:	46a1      	mov	r9, r4
  while (H_FREE_NEXT(qp) != NULL) {
 800669a:	e9d3 3200 	ldrd	r3, r2, [r3]
 800669e:	4294      	cmp	r4, r2
    n++;
 80066a0:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 80066a4:	4416      	add	r6, r2
 80066a6:	bf38      	it	cc
 80066a8:	4614      	movcc	r4, r2
  while (H_FREE_NEXT(qp) != NULL) {
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f5      	bne.n	800669a <rt_test_011_001_execute.lto_priv.0+0xfa>
  H_UNLOCK(heapp);
 80066ae:	4826      	ldr	r0, [pc, #152]	; (8006748 <rt_test_011_001_execute.lto_priv.0+0x1a8>)
 80066b0:	f7ff fbd6 	bl	8005e60 <chMtxUnlock>
 80066b4:	f1b9 0f01 	cmp.w	r9, #1
 80066b8:	d130      	bne.n	800671c <rt_test_011_001_execute.lto_priv.0+0x17c>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80066ba:	00f6      	lsls	r6, r6, #3
 80066bc:	ebb6 0fc7 	cmp.w	r6, r7, lsl #3
 80066c0:	d134      	bne.n	800672c <rt_test_011_001_execute.lto_priv.0+0x18c>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 80066c2:	00e4      	lsls	r4, r4, #3
 80066c4:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 80066c8:	d00e      	beq.n	80066e8 <rt_test_011_001_execute.lto_priv.0+0x148>
  chtest.failure_message = msg;
 80066ca:	4b29      	ldr	r3, [pc, #164]	; (8006770 <rt_test_011_001_execute.lto_priv.0+0x1d0>)
 80066cc:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 80066d0:	f240 1201 	movw	r2, #257	; 0x101
 80066d4:	f8a8 2004 	strh.w	r2, [r8, #4]
    return __test_fail(msg);
 80066d8:	e006      	b.n	80066e8 <rt_test_011_001_execute.lto_priv.0+0x148>
  chtest.failure_message = msg;
 80066da:	4b26      	ldr	r3, [pc, #152]	; (8006774 <rt_test_011_001_execute.lto_priv.0+0x1d4>)
 80066dc:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 80066e0:	f240 1201 	movw	r2, #257	; 0x101
 80066e4:	f8a8 2004 	strh.w	r2, [r8, #4]
}
 80066e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  H_UNLOCK(heapp);
 80066ec:	f109 0014 	add.w	r0, r9, #20
 80066f0:	f7ff fbb6 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 80066f4:	4b20      	ldr	r3, [pc, #128]	; (8006778 <rt_test_011_001_execute.lto_priv.0+0x1d8>)
 80066f6:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 80066fa:	f240 1201 	movw	r2, #257	; 0x101
 80066fe:	f8a8 2004 	strh.w	r2, [r8, #4]
 8006702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8006706:	4b1d      	ldr	r3, [pc, #116]	; (800677c <rt_test_011_001_execute.lto_priv.0+0x1dc>)
 8006708:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 800670c:	f240 1201 	movw	r2, #257	; 0x101
 8006710:	f8a8 2004 	strh.w	r2, [r8, #4]
  return true;
 8006714:	e7e8      	b.n	80066e8 <rt_test_011_001_execute.lto_priv.0+0x148>
 8006716:	480c      	ldr	r0, [pc, #48]	; (8006748 <rt_test_011_001_execute.lto_priv.0+0x1a8>)
 8006718:	f7ff fba2 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 800671c:	4b18      	ldr	r3, [pc, #96]	; (8006780 <rt_test_011_001_execute.lto_priv.0+0x1e0>)
 800671e:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8006722:	f240 1201 	movw	r2, #257	; 0x101
 8006726:	f8a8 2004 	strh.w	r2, [r8, #4]
  return true;
 800672a:	e7dd      	b.n	80066e8 <rt_test_011_001_execute.lto_priv.0+0x148>
  chtest.failure_message = msg;
 800672c:	4b15      	ldr	r3, [pc, #84]	; (8006784 <rt_test_011_001_execute.lto_priv.0+0x1e4>)
 800672e:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8006732:	f240 1201 	movw	r2, #257	; 0x101
 8006736:	f8a8 2004 	strh.w	r2, [r8, #4]
  return true;
 800673a:	e7d5      	b.n	80066e8 <rt_test_011_001_execute.lto_priv.0+0x148>
 800673c:	200009b8 	.word	0x200009b8
 8006740:	20000ab4 	.word	0x20000ab4
 8006744:	20000b44 	.word	0x20000b44
 8006748:	20000b58 	.word	0x20000b58
 800674c:	0800ba18 	.word	0x0800ba18
 8006750:	0800ba1c 	.word	0x0800ba1c
 8006754:	20001744 	.word	0x20001744
 8006758:	0800ba24 	.word	0x0800ba24
 800675c:	0800ba28 	.word	0x0800ba28
 8006760:	0800ba30 	.word	0x0800ba30
 8006764:	0800ba34 	.word	0x0800ba34
 8006768:	0800b9c8 	.word	0x0800b9c8
 800676c:	0800bdd0 	.word	0x0800bdd0
 8006770:	0800be08 	.word	0x0800be08
 8006774:	0800ba98 	.word	0x0800ba98
 8006778:	0800bdc0 	.word	0x0800bdc0
 800677c:	0800ba50 	.word	0x0800ba50
 8006780:	0800bdd4 	.word	0x0800bdd4
 8006784:	0800bdec 	.word	0x0800bdec
	...

08006790 <chHeapAllocAligned>:
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8006790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    heapp = &default_heap;
 8006794:	4b44      	ldr	r3, [pc, #272]	; (80068a8 <chHeapAllocAligned+0x118>)
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8006796:	b083      	sub	sp, #12
    heapp = &default_heap;
 8006798:	2800      	cmp	r0, #0
 800679a:	bf14      	ite	ne
 800679c:	4681      	movne	r9, r0
 800679e:	4699      	moveq	r9, r3
  if (align < CH_HEAP_ALIGNMENT) {
 80067a0:	2a08      	cmp	r2, #8
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80067a2:	f101 0a07 	add.w	sl, r1, #7
 80067a6:	bf38      	it	cc
 80067a8:	2208      	movcc	r2, #8
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 80067aa:	9101      	str	r1, [sp, #4]
 80067ac:	4693      	mov	fp, r2
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80067ae:	ea4f 0ada 	mov.w	sl, sl, lsr #3
  H_LOCK(heapp);
 80067b2:	f109 0014 	add.w	r0, r9, #20
 80067b6:	2330      	movs	r3, #48	; 0x30
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	9000      	str	r0, [sp, #0]
 80067be:	f7ff fab7 	bl	8005d30 <chMtxLockS>
 80067c2:	2300      	movs	r3, #0
 80067c4:	f383 8811 	msr	BASEPRI, r3
  while (H_FREE_NEXT(qp) != NULL) {
 80067c8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80067cc:	9800      	ldr	r0, [sp, #0]
 80067ce:	b1f4      	cbz	r4, 800680e <chHeapAllocAligned+0x7e>
 80067d0:	f109 020c 	add.w	r2, r9, #12
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80067d4:	f1cb 0800 	rsb	r8, fp, #0
 80067d8:	f10b 0707 	add.w	r7, fp, #7
 80067dc:	e000      	b.n	80067e0 <chHeapAllocAligned+0x50>
 80067de:	461c      	mov	r4, r3
    if ((ahp < H_FREE_LIMIT(hp)) && (pages <= NPAGES(H_FREE_LIMIT(hp), ahp + 1U))) {
 80067e0:	6866      	ldr	r6, [r4, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80067e2:	19e3      	adds	r3, r4, r7
 80067e4:	ea03 0308 	and.w	r3, r3, r8
    if ((ahp < H_FREE_LIMIT(hp)) && (pages <= NPAGES(H_FREE_LIMIT(hp), ahp + 1U))) {
 80067e8:	f106 0c01 	add.w	ip, r6, #1
 80067ec:	461d      	mov	r5, r3
 80067ee:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80067f2:	3b08      	subs	r3, #8
    if ((ahp < H_FREE_LIMIT(hp)) && (pages <= NPAGES(H_FREE_LIMIT(hp), ahp + 1U))) {
 80067f4:	ebac 0e05 	sub.w	lr, ip, r5
 80067f8:	459c      	cmp	ip, r3
 80067fa:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80067fe:	d902      	bls.n	8006806 <chHeapAllocAligned+0x76>
 8006800:	ebba 0fee 	cmp.w	sl, lr, asr #3
 8006804:	d918      	bls.n	8006838 <chHeapAllocAligned+0xa8>
  while (H_FREE_NEXT(qp) != NULL) {
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	4622      	mov	r2, r4
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e7      	bne.n	80067de <chHeapAllocAligned+0x4e>
  H_UNLOCK(heapp);
 800680e:	f7ff fb27 	bl	8005e60 <chMtxUnlock>
  if (heapp->provider != NULL) {
 8006812:	f8d9 5000 	ldr.w	r5, [r9]
 8006816:	b15d      	cbz	r5, 8006830 <chHeapAllocAligned+0xa0>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8006818:	4659      	mov	r1, fp
 800681a:	ea4f 00ca 	mov.w	r0, sl, lsl #3
 800681e:	2208      	movs	r2, #8
 8006820:	47a8      	blx	r5
    if (ahp != NULL) {
 8006822:	4605      	mov	r5, r0
 8006824:	b120      	cbz	r0, 8006830 <chHeapAllocAligned+0xa0>
      H_USED_SIZE(hp) = size;
 8006826:	9b01      	ldr	r3, [sp, #4]
      H_USED_HEAP(hp) = heapp;
 8006828:	f840 9c08 	str.w	r9, [r0, #-8]
      H_USED_SIZE(hp) = size;
 800682c:	f840 3c04 	str.w	r3, [r0, #-4]
}
 8006830:	4628      	mov	r0, r5
 8006832:	b003      	add	sp, #12
 8006834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ahp > hp) {
 8006838:	429c      	cmp	r4, r3
 800683a:	d31b      	bcc.n	8006874 <chHeapAllocAligned+0xe4>
        if (H_FREE_PAGES(hp) == pages) {
 800683c:	4556      	cmp	r6, sl
 800683e:	d02d      	beq.n	800689c <chHeapAllocAligned+0x10c>
          fp = H_BLOCK(hp) + pages;
 8006840:	f10a 0a01 	add.w	sl, sl, #1
 8006844:	eb04 01ca 	add.w	r1, r4, sl, lsl #3
          H_FREE_PAGES(fp) = NPAGES(H_FREE_LIMIT(hp), H_BLOCK(fp));
 8006848:	f101 0308 	add.w	r3, r1, #8
 800684c:	ebac 0303 	sub.w	r3, ip, r3
          H_FREE_NEXT(fp) = H_FREE_NEXT(hp);
 8006850:	6825      	ldr	r5, [r4, #0]
 8006852:	f844 503a 	str.w	r5, [r4, sl, lsl #3]
          H_FREE_PAGES(fp) = NPAGES(H_FREE_LIMIT(hp), H_BLOCK(fp));
 8006856:	10db      	asrs	r3, r3, #3
 8006858:	604b      	str	r3, [r1, #4]
      return (void *)H_BLOCK(hp);
 800685a:	f104 0508 	add.w	r5, r4, #8
          H_FREE_NEXT(qp) = fp;
 800685e:	6011      	str	r1, [r2, #0]
      return (void *)H_BLOCK(hp);
 8006860:	4623      	mov	r3, r4
      H_USED_SIZE(hp) = size;
 8006862:	9a01      	ldr	r2, [sp, #4]
      H_USED_HEAP(hp) = heapp;
 8006864:	e9c3 9200 	strd	r9, r2, [r3]
      H_UNLOCK(heapp);
 8006868:	f7ff fafa 	bl	8005e60 <chMtxUnlock>
}
 800686c:	4628      	mov	r0, r5
 800686e:	b003      	add	sp, #12
 8006870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        H_FREE_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8006874:	f104 0208 	add.w	r2, r4, #8
 8006878:	1a9a      	subs	r2, r3, r2
 800687a:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 800687c:	4551      	cmp	r1, sl
        H_FREE_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800687e:	6062      	str	r2, [r4, #4]
        if (bpages > pages) {
 8006880:	d9ef      	bls.n	8006862 <chHeapAllocAligned+0xd2>
          fp = H_BLOCK(ahp) + pages;
 8006882:	f10a 0601 	add.w	r6, sl, #1
 8006886:	eb03 02c6 	add.w	r2, r3, r6, lsl #3
          H_FREE_PAGES(fp) = (bpages - pages) - 1U;
 800688a:	ea6f 0a0a 	mvn.w	sl, sl
 800688e:	4451      	add	r1, sl
 8006890:	6051      	str	r1, [r2, #4]
          H_FREE_NEXT(fp) = H_FREE_NEXT(hp);
 8006892:	6821      	ldr	r1, [r4, #0]
 8006894:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
          H_FREE_NEXT(hp) = fp;
 8006898:	6022      	str	r2, [r4, #0]
 800689a:	e7e2      	b.n	8006862 <chHeapAllocAligned+0xd2>
          H_FREE_NEXT(qp) = H_FREE_NEXT(hp);
 800689c:	4625      	mov	r5, r4
 800689e:	4623      	mov	r3, r4
 80068a0:	f855 1b08 	ldr.w	r1, [r5], #8
 80068a4:	6011      	str	r1, [r2, #0]
 80068a6:	e7dc      	b.n	8006862 <chHeapAllocAligned+0xd2>
 80068a8:	20000adc 	.word	0x20000adc
 80068ac:	00000000 	.word	0x00000000

080068b0 <chHeapFree>:
void chHeapFree(void *p) {
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_USED_HEAP(hp);
 80068b2:	e950 7302 	ldrd	r7, r3, [r0, #-8]
  H_FREE_PAGES(hp) = MEM_ALIGN_NEXT(H_USED_SIZE(hp),
 80068b6:	3307      	adds	r3, #7
                                    CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80068b8:	08db      	lsrs	r3, r3, #3
  qp = &heapp->header;
 80068ba:	f107 050c 	add.w	r5, r7, #12
  H_FREE_PAGES(hp) = MEM_ALIGN_NEXT(H_USED_SIZE(hp),
 80068be:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 80068c2:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 80068c4:	f1a0 0408 	sub.w	r4, r0, #8
  H_LOCK(heapp);
 80068c8:	3714      	adds	r7, #20
 80068ca:	2330      	movs	r3, #48	; 0x30
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	4638      	mov	r0, r7
 80068d2:	f7ff fa2d 	bl	8005d30 <chMtxLockS>
 80068d6:	2300      	movs	r3, #0
 80068d8:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 80068dc:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 80068de:	429d      	cmp	r5, r3
        ((H_FREE_NEXT(qp) == NULL) || (hp < H_FREE_NEXT(qp)))) {
 80068e0:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 80068e2:	d001      	beq.n	80068e8 <chHeapFree+0x38>
 80068e4:	42a3      	cmp	r3, r4
 80068e6:	d202      	bcs.n	80068ee <chHeapFree+0x3e>
 80068e8:	b11a      	cbz	r2, 80068f2 <chHeapFree+0x42>
        ((H_FREE_NEXT(qp) == NULL) || (hp < H_FREE_NEXT(qp)))) {
 80068ea:	4294      	cmp	r4, r2
 80068ec:	d301      	bcc.n	80068f2 <chHeapFree+0x42>
    qp = H_FREE_NEXT(qp);
 80068ee:	4613      	mov	r3, r2
    chDbgAssert((hp < qp) || (hp >= H_FREE_LIMIT(qp)), "within free block");
 80068f0:	e7f5      	b.n	80068de <chHeapFree+0x2e>
      H_FREE_NEXT(hp) = H_FREE_NEXT(qp);
 80068f2:	f846 2c08 	str.w	r2, [r6, #-8]
      if (H_FREE_LIMIT(hp) == H_FREE_NEXT(hp)) {
 80068f6:	f856 2c04 	ldr.w	r2, [r6, #-4]
      H_FREE_NEXT(qp) = hp;
 80068fa:	601c      	str	r4, [r3, #0]
      if (H_FREE_LIMIT(hp) == H_FREE_NEXT(hp)) {
 80068fc:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8006900:	3201      	adds	r2, #1
 8006902:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8006906:	4281      	cmp	r1, r0
 8006908:	d00a      	beq.n	8006920 <chHeapFree+0x70>
      if ((H_FREE_LIMIT(qp) == hp)) {
 800690a:	6859      	ldr	r1, [r3, #4]
 800690c:	1c4a      	adds	r2, r1, #1
 800690e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006912:	4294      	cmp	r4, r2
 8006914:	d011      	beq.n	800693a <chHeapFree+0x8a>
  H_UNLOCK(heapp);
 8006916:	4638      	mov	r0, r7
}
 8006918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 800691c:	f7ff baa0 	b.w	8005e60 <chMtxUnlock>
        H_FREE_PAGES(hp) += H_FREE_PAGES(H_FREE_NEXT(hp)) + 1U;
 8006920:	6848      	ldr	r0, [r1, #4]
 8006922:	4402      	add	r2, r0
 8006924:	f846 2c04 	str.w	r2, [r6, #-4]
        H_FREE_NEXT(hp) = H_FREE_NEXT(H_FREE_NEXT(hp));
 8006928:	680a      	ldr	r2, [r1, #0]
      if ((H_FREE_LIMIT(qp) == hp)) {
 800692a:	6859      	ldr	r1, [r3, #4]
        H_FREE_NEXT(hp) = H_FREE_NEXT(H_FREE_NEXT(hp));
 800692c:	f846 2c08 	str.w	r2, [r6, #-8]
      if ((H_FREE_LIMIT(qp) == hp)) {
 8006930:	1c4a      	adds	r2, r1, #1
 8006932:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006936:	4294      	cmp	r4, r2
 8006938:	d1ed      	bne.n	8006916 <chHeapFree+0x66>
        H_FREE_NEXT(qp) = H_FREE_NEXT(hp);
 800693a:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_FREE_PAGES(qp) += H_FREE_PAGES(hp) + 1U;
 800693e:	3201      	adds	r2, #1
 8006940:	4411      	add	r1, r2
        H_FREE_NEXT(qp) = H_FREE_NEXT(hp);
 8006942:	e9c3 0100 	strd	r0, r1, [r3]
  H_UNLOCK(heapp);
 8006946:	4638      	mov	r0, r7
}
 8006948:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 800694c:	f7ff ba88 	b.w	8005e60 <chMtxUnlock>

08006950 <thd_heapfree.lto_priv.0>:
  chHeapFree((void *)tp->wabase);
 8006950:	6940      	ldr	r0, [r0, #20]
 8006952:	f7ff bfad 	b.w	80068b0 <chHeapFree>
 8006956:	bf00      	nop
	...

08006960 <dyn_create_object_heap.lto_priv.0>:

#if CH_FACTORY_REQUIRES_HEAP || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_heap(const char *name,
                                             dyn_list_t *dlp,
                                             size_t size,
                                             unsigned align) {
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  dyn_element_t *p = dlp->next;
 8006964:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8006966:	42a1      	cmp	r1, r4
                                             unsigned align) {
 8006968:	460e      	mov	r6, r1
 800696a:	4605      	mov	r5, r0
 800696c:	4617      	mov	r7, r2
 800696e:	4698      	mov	r8, r3
  while (p != (dyn_element_t *)dlp) {
 8006970:	d103      	bne.n	800697a <dyn_create_object_heap.lto_priv.0+0x1a>
 8006972:	e00e      	b.n	8006992 <dyn_create_object_heap.lto_priv.0+0x32>
    p = p->next;
 8006974:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8006976:	42a6      	cmp	r6, r4
 8006978:	d00b      	beq.n	8006992 <dyn_create_object_heap.lto_priv.0+0x32>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800697a:	f104 0008 	add.w	r0, r4, #8
 800697e:	2208      	movs	r2, #8
 8006980:	4629      	mov	r1, r5
 8006982:	f7f9 ff4b 	bl	800081c <strncmp>
 8006986:	2800      	cmp	r0, #0
 8006988:	d1f4      	bne.n	8006974 <dyn_create_object_heap.lto_priv.0+0x14>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 800698a:	b114      	cbz	r4, 8006992 <dyn_create_object_heap.lto_priv.0+0x32>
    return NULL;
 800698c:	2000      	movs	r0, #0

  /* Updating factory list.*/
  dlp->next = dep;

  return dep;
}
 800698e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dep = (dyn_element_t *)chHeapAllocAligned(NULL, size, align);
 8006992:	4642      	mov	r2, r8
 8006994:	4639      	mov	r1, r7
 8006996:	2000      	movs	r0, #0
 8006998:	f7ff fefa 	bl	8006790 <chHeapAllocAligned>
  if (dep == NULL) {
 800699c:	2800      	cmp	r0, #0
 800699e:	d0f5      	beq.n	800698c <dyn_create_object_heap.lto_priv.0+0x2c>
  copy_name(name, dep->name);
 80069a0:	f100 0208 	add.w	r2, r0, #8
  i = CH_CFG_FACTORY_MAX_NAMES_LENGTH;
 80069a4:	f105 0108 	add.w	r1, r5, #8
    c = *sp++;
 80069a8:	f815 3b01 	ldrb.w	r3, [r5], #1
    *dp++ = c;
 80069ac:	f802 3b01 	strb.w	r3, [r2], #1
  } while ((c != (char)0) && (i > 0U));
 80069b0:	b10b      	cbz	r3, 80069b6 <dyn_create_object_heap.lto_priv.0+0x56>
 80069b2:	42a9      	cmp	r1, r5
 80069b4:	d1f8      	bne.n	80069a8 <dyn_create_object_heap.lto_priv.0+0x48>
  dep->next = dlp->next;
 80069b6:	6833      	ldr	r3, [r6, #0]
  dep->refs = (ucnt_t)1;
 80069b8:	2201      	movs	r2, #1
  dep->next = dlp->next;
 80069ba:	e9c0 3200 	strd	r3, r2, [r0]
  dlp->next = dep;
 80069be:	6030      	str	r0, [r6, #0]
}
 80069c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080069d0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80069d0:	f3ef 8309 	mrs	r3, PSP
  psp += sizeof (struct port_extctx);
 80069d4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80069d6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80069da:	2300      	movs	r3, #0
 80069dc:	f383 8811 	msr	BASEPRI, r3
}
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
	...

080069f0 <__test_assert>:
  if (!condition) {
 80069f0:	b108      	cbz	r0, 80069f6 <__test_assert+0x6>
  return false;
 80069f2:	2000      	movs	r0, #0
}
 80069f4:	4770      	bx	lr
  chtest.global_fail     = true;
 80069f6:	4b03      	ldr	r3, [pc, #12]	; (8006a04 <__test_assert+0x14>)
 80069f8:	f240 1201 	movw	r2, #257	; 0x101
 80069fc:	809a      	strh	r2, [r3, #4]
  chtest.failure_message = msg;
 80069fe:	6099      	str	r1, [r3, #8]
    return __test_fail(msg);
 8006a00:	2001      	movs	r0, #1
 8006a02:	4770      	bx	lr
 8006a04:	20000ab4 	.word	0x20000ab4
	...

08006a10 <oslib_test_002_001_execute.lto_priv.0>:
static void oslib_test_002_001_execute(void) {
 8006a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8006a14:	4db7      	ldr	r5, [pc, #732]	; (8006cf4 <oslib_test_002_001_execute.lto_priv.0+0x2e4>)
 8006a16:	2301      	movs	r3, #1
static void oslib_test_002_001_execute(void) {
 8006a18:	b085      	sub	sp, #20
  test_set_step(1);
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	2630      	movs	r6, #48	; 0x30
 8006a1e:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006a22:	4cb5      	ldr	r4, [pc, #724]	; (8006cf8 <oslib_test_002_001_execute.lto_priv.0+0x2e8>)
 8006a24:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a28:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition) {
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	f040 810d 	bne.w	8006c50 <oslib_test_002_001_execute.lto_priv.0+0x240>
 8006a36:	f04f 0800 	mov.w	r8, #0
 8006a3a:	f388 8811 	msr	BASEPRI, r8
  test_set_step(2);
 8006a3e:	2302      	movs	r3, #2
 8006a40:	602b      	str	r3, [r5, #0]
    chMBReset(&mb1);
 8006a42:	f004 f85d 	bl	800ab00 <chMBReset.constprop.0>
 8006a46:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006a4a:	e9d4 3700 	ldrd	r3, r7, [r4]
 8006a4e:	1aff      	subs	r7, r7, r3
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
 8006a56:	2f04      	cmp	r7, #4
 8006a58:	f040 8105 	bne.w	8006c66 <oslib_test_002_001_execute.lto_priv.0+0x256>
 8006a5c:	f388 8811 	msr	BASEPRI, r8
 8006a60:	f386 8811 	msr	BASEPRI, r6
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 810f 	bne.w	8006c8a <oslib_test_002_001_execute.lto_priv.0+0x27a>
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f386 8811 	msr	BASEPRI, r6
 8006a74:	6821      	ldr	r1, [r4, #0]
 8006a76:	68a2      	ldr	r2, [r4, #8]
 8006a78:	4291      	cmp	r1, r2
 8006a7a:	f040 80fe 	bne.w	8006c7a <oslib_test_002_001_execute.lto_priv.0+0x26a>
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f386 8811 	msr	BASEPRI, r6
 8006a86:	6821      	ldr	r1, [r4, #0]
 8006a88:	68e2      	ldr	r2, [r4, #12]
 8006a8a:	4291      	cmp	r1, r2
 8006a8c:	f040 810d 	bne.w	8006caa <oslib_test_002_001_execute.lto_priv.0+0x29a>
 8006a90:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8006a94:	2203      	movs	r2, #3
 8006a96:	602a      	str	r2, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	f7fc fc7d 	bl	80033a0 <chMBPostTimeout>
 8006aa6:	3002      	adds	r0, #2
 8006aa8:	9b01      	ldr	r3, [sp, #4]
 8006aaa:	f040 80f8 	bne.w	8006c9e <oslib_test_002_001_execute.lto_priv.0+0x28e>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8006aae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	f003 ffc3 	bl	800aa40 <chMBPostAheadTimeout.constprop.0>
 8006aba:	3002      	adds	r0, #2
 8006abc:	f040 80ef 	bne.w	8006c9e <oslib_test_002_001_execute.lto_priv.0+0x28e>
 8006ac0:	f386 8811 	msr	BASEPRI, r6
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 8006ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ac8:	a903      	add	r1, sp, #12
 8006aca:	4620      	mov	r0, r4
 8006acc:	f7fc fcd0 	bl	8003470 <chMBFetchTimeoutS>
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	3002      	adds	r0, #2
 8006ad8:	f040 80e1 	bne.w	8006c9e <oslib_test_002_001_execute.lto_priv.0+0x28e>
  mbp->reset = false;
 8006adc:	7523      	strb	r3, [r4, #20]
  test_set_step(4);
 8006ade:	602f      	str	r7, [r5, #0]
 8006ae0:	2642      	movs	r6, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ae8:	4620      	mov	r0, r4
    for (i = 0; i < MB_SIZE - 1; i++) {
 8006aea:	3601      	adds	r6, #1
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006aec:	f7fc fc58 	bl	80033a0 <chMBPostTimeout>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f040 80e2 	bne.w	8006cba <oslib_test_002_001_execute.lto_priv.0+0x2aa>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8006af6:	2e45      	cmp	r6, #69	; 0x45
 8006af8:	d1f3      	bne.n	8006ae2 <oslib_test_002_001_execute.lto_priv.0+0xd2>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8006afa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006afe:	2041      	movs	r0, #65	; 0x41
 8006b00:	f003 ff9e 	bl	800aa40 <chMBPostAheadTimeout.constprop.0>
 8006b04:	4606      	mov	r6, r0
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f040 80d7 	bne.w	8006cba <oslib_test_002_001_execute.lto_priv.0+0x2aa>
  test_set_step(5);
 8006b0c:	2305      	movs	r3, #5
 8006b0e:	602b      	str	r3, [r5, #0]
 8006b10:	f04f 0830 	mov.w	r8, #48	; 0x30
 8006b14:	f388 8811 	msr	BASEPRI, r8
  return (size_t)(mbp->top - mbp->buffer);
 8006b18:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	6922      	ldr	r2, [r4, #16]
 8006b20:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8006b24:	f040 80cf 	bne.w	8006cc6 <oslib_test_002_001_execute.lto_priv.0+0x2b6>
 8006b28:	f380 8811 	msr	BASEPRI, r0
 8006b2c:	f388 8811 	msr	BASEPRI, r8
  return mbp->cnt;
 8006b30:	6927      	ldr	r7, [r4, #16]
 8006b32:	2f04      	cmp	r7, #4
 8006b34:	f040 80cf 	bne.w	8006cd6 <oslib_test_002_001_execute.lto_priv.0+0x2c6>
 8006b38:	f380 8811 	msr	BASEPRI, r0
 8006b3c:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8006b40:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8006b44:	eba0 0c03 	sub.w	ip, r0, r3
 8006b48:	f1dc 0000 	rsbs	r0, ip, #0
 8006b4c:	eb40 000c 	adc.w	r0, r0, ip
 8006b50:	496a      	ldr	r1, [pc, #424]	; (8006cfc <oslib_test_002_001_execute.lto_priv.0+0x2ec>)
 8006b52:	f7ff ff4d 	bl	80069f0 <__test_assert>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	f040 80c5 	bne.w	8006ce6 <oslib_test_002_001_execute.lto_priv.0+0x2d6>
 8006b5c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8006b60:	2306      	movs	r3, #6
 8006b62:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8006cf8 <oslib_test_002_001_execute.lto_priv.0+0x2e8>
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8006b66:	4e66      	ldr	r6, [pc, #408]	; (8006d00 <oslib_test_002_001_execute.lto_priv.0+0x2f0>)
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	f388 8811 	msr	BASEPRI, r8
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b72:	a903      	add	r1, sp, #12
 8006b74:	4648      	mov	r0, r9
 8006b76:	f7fc fc7b 	bl	8003470 <chMBFetchTimeoutS>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f382 8811 	msr	BASEPRI, r2
  if (!condition) {
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f040 809a 	bne.w	8006cba <oslib_test_002_001_execute.lto_priv.0+0x2aa>
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8006b86:	68eb      	ldr	r3, [r5, #12]
 8006b88:	42b3      	cmp	r3, r6
 8006b8a:	d203      	bcs.n	8006b94 <oslib_test_002_001_execute.lto_priv.0+0x184>
      test_emit_token(msg2);
 8006b8c:	9a03      	ldr	r2, [sp, #12]
    *chtest.tokp++ = token;
 8006b8e:	1c59      	adds	r1, r3, #1
 8006b90:	60e9      	str	r1, [r5, #12]
 8006b92:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MB_SIZE; i++) {
 8006b94:	3f01      	subs	r7, #1
 8006b96:	d1e8      	bne.n	8006b6a <oslib_test_002_001_execute.lto_priv.0+0x15a>
    test_assert_sequence("ABCD", "wrong get sequence");
 8006b98:	495a      	ldr	r1, [pc, #360]	; (8006d04 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 8006b9a:	485b      	ldr	r0, [pc, #364]	; (8006d08 <oslib_test_002_001_execute.lto_priv.0+0x2f8>)
 8006b9c:	f7f9 ff38 	bl	8000a10 <__test_assert_sequence>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d15d      	bne.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
  test_set_step(7);
 8006ba4:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006ba6:	2146      	movs	r1, #70	; 0x46
 8006ba8:	4853      	ldr	r0, [pc, #332]	; (8006cf8 <oslib_test_002_001_execute.lto_priv.0+0x2e8>)
  test_set_step(7);
 8006baa:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb0:	f7fc fbf6 	bl	80033a0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006bb4:	fab0 f080 	clz	r0, r0
 8006bb8:	4954      	ldr	r1, [pc, #336]	; (8006d0c <oslib_test_002_001_execute.lto_priv.0+0x2fc>)
 8006bba:	0940      	lsrs	r0, r0, #5
 8006bbc:	f7ff ff18 	bl	80069f0 <__test_assert>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d14d      	bne.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
 8006bc4:	2630      	movs	r6, #48	; 0x30
 8006bc6:	f386 8811 	msr	BASEPRI, r6
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bce:	a903      	add	r1, sp, #12
 8006bd0:	4849      	ldr	r0, [pc, #292]	; (8006cf8 <oslib_test_002_001_execute.lto_priv.0+0x2e8>)
 8006bd2:	f7fc fc4d 	bl	8003470 <chMBFetchTimeoutS>
 8006bd6:	f387 8811 	msr	BASEPRI, r7
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006bda:	fab0 f080 	clz	r0, r0
 8006bde:	494b      	ldr	r1, [pc, #300]	; (8006d0c <oslib_test_002_001_execute.lto_priv.0+0x2fc>)
 8006be0:	0940      	lsrs	r0, r0, #5
 8006be2:	f7ff ff05 	bl	80069f0 <__test_assert>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d13a      	bne.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
  test_set_step(8);
 8006bea:	2308      	movs	r3, #8
 8006bec:	602b      	str	r3, [r5, #0]
 8006bee:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006bf2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006bf6:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006bf8:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006bfa:	4945      	ldr	r1, [pc, #276]	; (8006d10 <oslib_test_002_001_execute.lto_priv.0+0x300>)
 8006bfc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006c00:	1f1d      	subs	r5, r3, #4
 8006c02:	4268      	negs	r0, r5
 8006c04:	4168      	adcs	r0, r5
 8006c06:	f7ff fef3 	bl	80069f0 <__test_assert>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d16e      	bne.n	8006cec <oslib_test_002_001_execute.lto_priv.0+0x2dc>
 8006c0e:	f387 8811 	msr	BASEPRI, r7
 8006c12:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8006c16:	6920      	ldr	r0, [r4, #16]
 8006c18:	493e      	ldr	r1, [pc, #248]	; (8006d14 <oslib_test_002_001_execute.lto_priv.0+0x304>)
 8006c1a:	fab0 f080 	clz	r0, r0
 8006c1e:	0940      	lsrs	r0, r0, #5
 8006c20:	f7ff fee6 	bl	80069f0 <__test_assert>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d161      	bne.n	8006cec <oslib_test_002_001_execute.lto_priv.0+0x2dc>
 8006c28:	f387 8811 	msr	BASEPRI, r7
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	68a3      	ldr	r3, [r4, #8]
 8006c30:	4939      	ldr	r1, [pc, #228]	; (8006d18 <oslib_test_002_001_execute.lto_priv.0+0x308>)
 8006c32:	1ac2      	subs	r2, r0, r3
 8006c34:	4250      	negs	r0, r2
 8006c36:	4150      	adcs	r0, r2
 8006c38:	f7ff feda 	bl	80069f0 <__test_assert>
 8006c3c:	b980      	cbnz	r0, 8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006c3e:	6820      	ldr	r0, [r4, #0]
 8006c40:	68e3      	ldr	r3, [r4, #12]
 8006c42:	4936      	ldr	r1, [pc, #216]	; (8006d1c <oslib_test_002_001_execute.lto_priv.0+0x30c>)
 8006c44:	1ac3      	subs	r3, r0, r3
 8006c46:	4258      	negs	r0, r3
 8006c48:	4158      	adcs	r0, r3
 8006c4a:	f7ff fed1 	bl	80069f0 <__test_assert>
 8006c4e:	e007      	b.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006c50:	4b33      	ldr	r3, [pc, #204]	; (8006d20 <oslib_test_002_001_execute.lto_priv.0+0x310>)
 8006c52:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006c54:	f240 1201 	movw	r2, #257	; 0x101
 8006c58:	80aa      	strh	r2, [r5, #4]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f383 8811 	msr	BASEPRI, r3
}
 8006c60:	b005      	add	sp, #20
 8006c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8006c66:	4b2a      	ldr	r3, [pc, #168]	; (8006d10 <oslib_test_002_001_execute.lto_priv.0+0x300>)
 8006c68:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006c6a:	f240 1201 	movw	r2, #257	; 0x101
 8006c6e:	80aa      	strh	r2, [r5, #4]
 8006c70:	f388 8811 	msr	BASEPRI, r8
 8006c74:	b005      	add	sp, #20
 8006c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8006c7a:	4a27      	ldr	r2, [pc, #156]	; (8006d18 <oslib_test_002_001_execute.lto_priv.0+0x308>)
 8006c7c:	60aa      	str	r2, [r5, #8]
  chtest.global_fail     = true;
 8006c7e:	f240 1101 	movw	r1, #257	; 0x101
 8006c82:	80a9      	strh	r1, [r5, #4]
 8006c84:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006c88:	e7ea      	b.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <oslib_test_002_001_execute.lto_priv.0+0x304>)
 8006c8c:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006c8e:	f240 1201 	movw	r2, #257	; 0x101
 8006c92:	80aa      	strh	r2, [r5, #4]
 8006c94:	f388 8811 	msr	BASEPRI, r8
}
 8006c98:	b005      	add	sp, #20
 8006c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8006c9e:	4b21      	ldr	r3, [pc, #132]	; (8006d24 <oslib_test_002_001_execute.lto_priv.0+0x314>)
 8006ca0:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006ca2:	f240 1201 	movw	r2, #257	; 0x101
 8006ca6:	80aa      	strh	r2, [r5, #4]
 8006ca8:	e7da      	b.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006caa:	4a1c      	ldr	r2, [pc, #112]	; (8006d1c <oslib_test_002_001_execute.lto_priv.0+0x30c>)
 8006cac:	60aa      	str	r2, [r5, #8]
  chtest.global_fail     = true;
 8006cae:	f240 1101 	movw	r1, #257	; 0x101
 8006cb2:	80a9      	strh	r1, [r5, #4]
 8006cb4:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006cb8:	e7d2      	b.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <oslib_test_002_001_execute.lto_priv.0+0x2fc>)
 8006cbc:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006cbe:	f240 1201 	movw	r2, #257	; 0x101
 8006cc2:	80aa      	strh	r2, [r5, #4]
 8006cc4:	e7cc      	b.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006cc6:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <oslib_test_002_001_execute.lto_priv.0+0x318>)
 8006cc8:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006cca:	f240 1201 	movw	r2, #257	; 0x101
 8006cce:	80aa      	strh	r2, [r5, #4]
 8006cd0:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8006cd4:	e7c4      	b.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006cd6:	4b15      	ldr	r3, [pc, #84]	; (8006d2c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
 8006cd8:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006cda:	f240 1201 	movw	r2, #257	; 0x101
 8006cde:	80aa      	strh	r2, [r5, #4]
 8006ce0:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8006ce4:	e7bc      	b.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
 8006ce6:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8006cea:	e7b9      	b.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
 8006cec:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8006cf0:	e7b6      	b.n	8006c60 <oslib_test_002_001_execute.lto_priv.0+0x250>
 8006cf2:	bf00      	nop
 8006cf4:	20000ab4 	.word	0x20000ab4
 8006cf8:	2000084c 	.word	0x2000084c
 8006cfc:	0800beb4 	.word	0x0800beb4
 8006d00:	20000ad4 	.word	0x20000ad4
 8006d04:	0800becc 	.word	0x0800becc
 8006d08:	0800ba6c 	.word	0x0800ba6c
 8006d0c:	0800bbb8 	.word	0x0800bbb8
 8006d10:	0800be28 	.word	0x0800be28
 8006d14:	0800be34 	.word	0x0800be34
 8006d18:	0800be40 	.word	0x0800be40
 8006d1c:	0800be64 	.word	0x0800be64
 8006d20:	0800bab0 	.word	0x0800bab0
 8006d24:	0800be88 	.word	0x0800be88
 8006d28:	0800be9c 	.word	0x0800be9c
 8006d2c:	0800bea8 	.word	0x0800bea8

08006d30 <oslib_test_002_002_execute.lto_priv.0>:
static void oslib_test_002_002_execute(void) {
 8006d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8006d34:	4db9      	ldr	r5, [pc, #740]	; (800701c <oslib_test_002_002_execute.lto_priv.0+0x2ec>)
 8006d36:	2101      	movs	r1, #1
static void oslib_test_002_002_execute(void) {
 8006d38:	b083      	sub	sp, #12
  test_set_step(1);
 8006d3a:	6029      	str	r1, [r5, #0]
 8006d3c:	2030      	movs	r0, #48	; 0x30
 8006d3e:	f380 8811 	msr	BASEPRI, r0
  return (size_t)(mbp->top - mbp->buffer);
 8006d42:	4cb7      	ldr	r4, [pc, #732]	; (8007020 <oslib_test_002_002_execute.lto_priv.0+0x2f0>)
 8006d44:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d48:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition) {
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	f040 8189 	bne.w	8007068 <oslib_test_002_002_execute.lto_priv.0+0x338>
 8006d56:	f04f 0c00 	mov.w	ip, #0
 8006d5a:	f38c 8811 	msr	BASEPRI, ip
  test_set_step(2);
 8006d5e:	2302      	movs	r3, #2
 8006d60:	602b      	str	r3, [r5, #0]
 8006d62:	f380 8811 	msr	BASEPRI, r0
  return (bool)(qp->next != qp);
 8006d66:	4626      	mov	r6, r4
  mbp->reset = true;
 8006d68:	7521      	strb	r1, [r4, #20]
 8006d6a:	f856 1f18 	ldr.w	r1, [r6, #24]!
  mbp->wrptr = mbp->buffer;
 8006d6e:	6823      	ldr	r3, [r4, #0]
  mbp->cnt   = (size_t)0;
 8006d70:	f8c4 c010 	str.w	ip, [r4, #16]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (ch_queue_notempty(&tqp->queue)) {
 8006d74:	42b1      	cmp	r1, r6
  mbp->rdptr = mbp->buffer;
 8006d76:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8006d7a:	d016      	beq.n	8006daa <oslib_test_002_002_execute.lto_priv.0+0x7a>
  tp->u.rdymsg = msg;
 8006d7c:	f06f 0e01 	mvn.w	lr, #1
 8006d80:	460b      	mov	r3, r1
  qp->next       = p->next;
 8006d82:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006d84:	691a      	ldr	r2, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8006d86:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8006d88:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 8006d8a:	604e      	str	r6, [r1, #4]
 8006d8c:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8006d90:	f883 c01c 	strb.w	ip, [r3, #28]
    pqp = pqp->next;
 8006d94:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8006d96:	6890      	ldr	r0, [r2, #8]
 8006d98:	42b8      	cmp	r0, r7
 8006d9a:	d2fb      	bcs.n	8006d94 <oslib_test_002_002_execute.lto_priv.0+0x64>
  p->prev       = pqp->prev;
 8006d9c:	6850      	ldr	r0, [r2, #4]
 8006d9e:	42b1      	cmp	r1, r6
 8006da0:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8006da4:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8006da6:	6053      	str	r3, [r2, #4]
 8006da8:	d1ea      	bne.n	8006d80 <oslib_test_002_002_execute.lto_priv.0+0x50>
  return (bool)(qp->next != qp);
 8006daa:	6a21      	ldr	r1, [r4, #32]
 8006dac:	4f9d      	ldr	r7, [pc, #628]	; (8007024 <oslib_test_002_002_execute.lto_priv.0+0x2f4>)
 8006dae:	42b9      	cmp	r1, r7
 8006db0:	d019      	beq.n	8006de6 <oslib_test_002_002_execute.lto_priv.0+0xb6>
 8006db2:	f06f 0801 	mvn.w	r8, #1
 8006db6:	f04f 0e00 	mov.w	lr, #0
 8006dba:	460b      	mov	r3, r1
  qp->next       = p->next;
 8006dbc:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006dbe:	691a      	ldr	r2, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8006dc0:	6898      	ldr	r0, [r3, #8]
  qp->next       = p->next;
 8006dc2:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 8006dc4:	604f      	str	r7, [r1, #4]
 8006dc6:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8006dca:	f883 e01c 	strb.w	lr, [r3, #28]
    pqp = pqp->next;
 8006dce:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8006dd0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006dd4:	4584      	cmp	ip, r0
 8006dd6:	d2fa      	bcs.n	8006dce <oslib_test_002_002_execute.lto_priv.0+0x9e>
  p->prev       = pqp->prev;
 8006dd8:	6850      	ldr	r0, [r2, #4]
 8006dda:	42b9      	cmp	r1, r7
 8006ddc:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8006de0:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8006de2:	6053      	str	r3, [r2, #4]
 8006de4:	d1e9      	bne.n	8006dba <oslib_test_002_002_execute.lto_priv.0+0x8a>
 8006de6:	2100      	movs	r1, #0
 8006de8:	f381 8811 	msr	BASEPRI, r1
 8006dec:	2030      	movs	r0, #48	; 0x30
 8006dee:	f380 8811 	msr	BASEPRI, r0
  return (size_t)(mbp->top - mbp->buffer);
 8006df2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006df6:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	f040 813d 	bne.w	800707e <oslib_test_002_002_execute.lto_priv.0+0x34e>
 8006e04:	f381 8811 	msr	BASEPRI, r1
 8006e08:	f380 8811 	msr	BASEPRI, r0
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 8147 	bne.w	80070a2 <oslib_test_002_002_execute.lto_priv.0+0x372>
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f380 8811 	msr	BASEPRI, r0
 8006e1c:	6821      	ldr	r1, [r4, #0]
 8006e1e:	68a2      	ldr	r2, [r4, #8]
 8006e20:	4291      	cmp	r1, r2
 8006e22:	f040 8136 	bne.w	8007092 <oslib_test_002_002_execute.lto_priv.0+0x362>
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f380 8811 	msr	BASEPRI, r0
 8006e2e:	6821      	ldr	r1, [r4, #0]
 8006e30:	68e2      	ldr	r2, [r4, #12]
 8006e32:	4291      	cmp	r1, r2
 8006e34:	f040 8147 	bne.w	80070c6 <oslib_test_002_002_execute.lto_priv.0+0x396>
 8006e38:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8006e3c:	2203      	movs	r2, #3
  mbp->reset = false;
 8006e3e:	7523      	strb	r3, [r4, #20]
 8006e40:	602a      	str	r2, [r5, #0]
 8006e42:	f04f 0c42 	mov.w	ip, #66	; 0x42
 8006e46:	f380 8811 	msr	BASEPRI, r0
  if (mbp->reset) {
 8006e4a:	7d21      	ldrb	r1, [r4, #20]
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	f040 815a 	bne.w	8007106 <oslib_test_002_002_execute.lto_priv.0+0x3d6>
  return (size_t)(mbp->top - mbp->buffer);
 8006e52:	e9d4 9e00 	ldrd	r9, lr, [r4]
  return mbp->cnt;
 8006e56:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8006e58:	ebae 0809 	sub.w	r8, lr, r9
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006e5c:	ebb2 0fa8 	cmp.w	r2, r8, asr #2
 8006e60:	f000 8129 	beq.w	80070b6 <oslib_test_002_002_execute.lto_priv.0+0x386>
    *mbp->wrptr++ = msg;
 8006e64:	f8d4 8008 	ldr.w	r8, [r4, #8]
    mbp->cnt++;
 8006e68:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 8006e6a:	f108 0104 	add.w	r1, r8, #4
 8006e6e:	60a1      	str	r1, [r4, #8]
 8006e70:	f8c8 c000 	str.w	ip, [r8]
    mbp->cnt++;
 8006e74:	6122      	str	r2, [r4, #16]
  return (bool)(qp->next != qp);
 8006e76:	6a22      	ldr	r2, [r4, #32]
    if (mbp->wrptr >= mbp->top) {
 8006e78:	458e      	cmp	lr, r1
      mbp->wrptr = mbp->buffer;
 8006e7a:	bf98      	it	ls
 8006e7c:	f8c4 9008 	strls.w	r9, [r4, #8]
  if (ch_queue_notempty(&tqp->queue)) {
 8006e80:	42ba      	cmp	r2, r7
 8006e82:	d015      	beq.n	8006eb0 <oslib_test_002_002_execute.lto_priv.0+0x180>
  qp->next       = p->next;
 8006e84:	6811      	ldr	r1, [r2, #0]
 8006e86:	6221      	str	r1, [r4, #32]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006e88:	f8d2 e010 	ldr.w	lr, [r2, #16]
  qp->next->prev = qp;
 8006e8c:	604f      	str	r7, [r1, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8006e8e:	6891      	ldr	r1, [r2, #8]
 8006e90:	6353      	str	r3, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8006e92:	7713      	strb	r3, [r2, #28]
    pqp = pqp->next;
 8006e94:	f8de e000 	ldr.w	lr, [lr]
  } while (unlikely(pqp->prio >= p->prio));
 8006e98:	f8de 8008 	ldr.w	r8, [lr, #8]
 8006e9c:	4588      	cmp	r8, r1
 8006e9e:	d2f9      	bcs.n	8006e94 <oslib_test_002_002_execute.lto_priv.0+0x164>
  p->prev       = pqp->prev;
 8006ea0:	f8de 1004 	ldr.w	r1, [lr, #4]
  p->next       = pqp;
 8006ea4:	f8c2 e000 	str.w	lr, [r2]
  p->prev       = pqp->prev;
 8006ea8:	6051      	str	r1, [r2, #4]
  p->prev->next = p;
 8006eaa:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8006eac:	f8ce 2004 	str.w	r2, [lr, #4]
 8006eb0:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < MB_SIZE - 1; i++) {
 8006eb4:	f10c 0c01 	add.w	ip, ip, #1
 8006eb8:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
 8006ebc:	d1c3      	bne.n	8006e46 <oslib_test_002_002_execute.lto_priv.0+0x116>
 8006ebe:	2730      	movs	r7, #48	; 0x30
 8006ec0:	f387 8811 	msr	BASEPRI, r7
    msg1 = chMBPostAheadI(&mb1, 'A');
 8006ec4:	2041      	movs	r0, #65	; 0x41
 8006ec6:	f003 fd7b 	bl	800a9c0 <chMBPostAheadI.constprop.0>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	f040 80f2 	bne.w	80070ba <oslib_test_002_002_execute.lto_priv.0+0x38a>
  test_set_step(4);
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	f387 8811 	msr	BASEPRI, r7
 8006ede:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	6922      	ldr	r2, [r4, #16]
 8006ee6:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8006eea:	f040 80f4 	bne.w	80070d6 <oslib_test_002_002_execute.lto_priv.0+0x3a6>
 8006eee:	f380 8811 	msr	BASEPRI, r0
 8006ef2:	f387 8811 	msr	BASEPRI, r7
  return mbp->cnt;
 8006ef6:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8006efa:	f1b8 0f04 	cmp.w	r8, #4
 8006efe:	f040 80f2 	bne.w	80070e6 <oslib_test_002_002_execute.lto_priv.0+0x3b6>
 8006f02:	f380 8811 	msr	BASEPRI, r0
 8006f06:	f387 8811 	msr	BASEPRI, r7
 8006f0a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	f040 80f1 	bne.w	80070f6 <oslib_test_002_002_execute.lto_priv.0+0x3c6>
 8006f14:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 8006f18:	2305      	movs	r3, #5
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8006f1a:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8007028 <oslib_test_002_002_execute.lto_priv.0+0x2f8>
 8006f1e:	602b      	str	r3, [r5, #0]
 8006f20:	f387 8811 	msr	BASEPRI, r7
  if (mbp->reset) {
 8006f24:	7d23      	ldrb	r3, [r4, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f040 80ed 	bne.w	8007106 <oslib_test_002_002_execute.lto_priv.0+0x3d6>
 8006f2c:	6921      	ldr	r1, [r4, #16]
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8006f2e:	2900      	cmp	r1, #0
 8006f30:	f000 80c1 	beq.w	80070b6 <oslib_test_002_002_execute.lto_priv.0+0x386>
    *msgp = *mbp->rdptr++;
 8006f34:	68e2      	ldr	r2, [r4, #12]
    if (mbp->rdptr >= mbp->top) {
 8006f36:	6863      	ldr	r3, [r4, #4]
    *msgp = *mbp->rdptr++;
 8006f38:	f8d2 e000 	ldr.w	lr, [r2]
 8006f3c:	f8cd e004 	str.w	lr, [sp, #4]
 8006f40:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 8006f42:	429a      	cmp	r2, r3
      mbp->rdptr = mbp->buffer;
 8006f44:	bf28      	it	cs
 8006f46:	6823      	ldrcs	r3, [r4, #0]
    *msgp = *mbp->rdptr++;
 8006f48:	60e2      	str	r2, [r4, #12]
      mbp->rdptr = mbp->buffer;
 8006f4a:	bf28      	it	cs
 8006f4c:	60e3      	strcs	r3, [r4, #12]
  return (bool)(qp->next != qp);
 8006f4e:	69a3      	ldr	r3, [r4, #24]
    mbp->cnt--;
 8006f50:	3901      	subs	r1, #1
 8006f52:	42b3      	cmp	r3, r6
 8006f54:	6121      	str	r1, [r4, #16]
 8006f56:	d010      	beq.n	8006f7a <oslib_test_002_002_execute.lto_priv.0+0x24a>
  qp->next       = p->next;
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	61a2      	str	r2, [r4, #24]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006f5c:	6919      	ldr	r1, [r3, #16]
  qp->next->prev = qp;
 8006f5e:	6056      	str	r6, [r2, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	6358      	str	r0, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8006f64:	7718      	strb	r0, [r3, #28]
    pqp = pqp->next;
 8006f66:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8006f68:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8006f6c:	4596      	cmp	lr, r2
 8006f6e:	d2fa      	bcs.n	8006f66 <oslib_test_002_002_execute.lto_priv.0+0x236>
  p->prev       = pqp->prev;
 8006f70:	684a      	ldr	r2, [r1, #4]
  p->next       = pqp;
 8006f72:	6019      	str	r1, [r3, #0]
  p->prev       = pqp->prev;
 8006f74:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8006f76:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8006f78:	604b      	str	r3, [r1, #4]
 8006f7a:	f380 8811 	msr	BASEPRI, r0
 8006f7e:	68ea      	ldr	r2, [r5, #12]
 8006f80:	4562      	cmp	r2, ip
 8006f82:	d203      	bcs.n	8006f8c <oslib_test_002_002_execute.lto_priv.0+0x25c>
      test_emit_token(msg2);
 8006f84:	9b01      	ldr	r3, [sp, #4]
    *chtest.tokp++ = token;
 8006f86:	1c51      	adds	r1, r2, #1
 8006f88:	60e9      	str	r1, [r5, #12]
 8006f8a:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < MB_SIZE; i++) {
 8006f8c:	f1b8 0801 	subs.w	r8, r8, #1
 8006f90:	d1c6      	bne.n	8006f20 <oslib_test_002_002_execute.lto_priv.0+0x1f0>
    test_assert_sequence("ABCD", "wrong get sequence");
 8006f92:	4926      	ldr	r1, [pc, #152]	; (800702c <oslib_test_002_002_execute.lto_priv.0+0x2fc>)
 8006f94:	4826      	ldr	r0, [pc, #152]	; (8007030 <oslib_test_002_002_execute.lto_priv.0+0x300>)
 8006f96:	f7f9 fd3b 	bl	8000a10 <__test_assert_sequence>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d16c      	bne.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
  test_set_step(6);
 8006f9e:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006fa0:	481f      	ldr	r0, [pc, #124]	; (8007020 <oslib_test_002_002_execute.lto_priv.0+0x2f0>)
  test_set_step(6);
 8006fa2:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa8:	2146      	movs	r1, #70	; 0x46
 8006faa:	f7fc f9f9 	bl	80033a0 <chMBPostTimeout>
  if (!condition) {
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f040 8083 	bne.w	80070ba <oslib_test_002_002_execute.lto_priv.0+0x38a>
 8006fb4:	2630      	movs	r6, #48	; 0x30
 8006fb6:	f386 8811 	msr	BASEPRI, r6
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 8006fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fbe:	a901      	add	r1, sp, #4
 8006fc0:	4817      	ldr	r0, [pc, #92]	; (8007020 <oslib_test_002_002_execute.lto_priv.0+0x2f0>)
 8006fc2:	f7fc fa55 	bl	8003470 <chMBFetchTimeoutS>
 8006fc6:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006fca:	fab0 f080 	clz	r0, r0
 8006fce:	4919      	ldr	r1, [pc, #100]	; (8007034 <oslib_test_002_002_execute.lto_priv.0+0x304>)
 8006fd0:	0940      	lsrs	r0, r0, #5
 8006fd2:	f7ff fd0d 	bl	80069f0 <__test_assert>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d14e      	bne.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
  test_set_step(7);
 8006fda:	2307      	movs	r3, #7
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006fe2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006fe6:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006fe8:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006fea:	4913      	ldr	r1, [pc, #76]	; (8007038 <oslib_test_002_002_execute.lto_priv.0+0x308>)
 8006fec:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006ff0:	1f1d      	subs	r5, r3, #4
 8006ff2:	4268      	negs	r0, r5
 8006ff4:	4168      	adcs	r0, r5
 8006ff6:	f7ff fcfb 	bl	80069f0 <__test_assert>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	f040 8087 	bne.w	800710e <oslib_test_002_002_execute.lto_priv.0+0x3de>
 8007000:	f388 8811 	msr	BASEPRI, r8
 8007004:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8007008:	6920      	ldr	r0, [r4, #16]
 800700a:	490c      	ldr	r1, [pc, #48]	; (800703c <oslib_test_002_002_execute.lto_priv.0+0x30c>)
 800700c:	fab0 f080 	clz	r0, r0
 8007010:	0940      	lsrs	r0, r0, #5
 8007012:	f7ff fced 	bl	80069f0 <__test_assert>
 8007016:	2800      	cmp	r0, #0
 8007018:	d179      	bne.n	800710e <oslib_test_002_002_execute.lto_priv.0+0x3de>
 800701a:	e011      	b.n	8007040 <oslib_test_002_002_execute.lto_priv.0+0x310>
 800701c:	20000ab4 	.word	0x20000ab4
 8007020:	2000084c 	.word	0x2000084c
 8007024:	2000086c 	.word	0x2000086c
 8007028:	20000ad4 	.word	0x20000ad4
 800702c:	0800becc 	.word	0x0800becc
 8007030:	0800ba6c 	.word	0x0800ba6c
 8007034:	0800bbb8 	.word	0x0800bbb8
 8007038:	0800be28 	.word	0x0800be28
 800703c:	0800be34 	.word	0x0800be34
 8007040:	f388 8811 	msr	BASEPRI, r8
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	68a3      	ldr	r3, [r4, #8]
 8007048:	4932      	ldr	r1, [pc, #200]	; (8007114 <oslib_test_002_002_execute.lto_priv.0+0x3e4>)
 800704a:	1ac2      	subs	r2, r0, r3
 800704c:	4250      	negs	r0, r2
 800704e:	4150      	adcs	r0, r2
 8007050:	f7ff fcce 	bl	80069f0 <__test_assert>
 8007054:	b980      	cbnz	r0, 8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8007056:	6820      	ldr	r0, [r4, #0]
 8007058:	68e3      	ldr	r3, [r4, #12]
 800705a:	492f      	ldr	r1, [pc, #188]	; (8007118 <oslib_test_002_002_execute.lto_priv.0+0x3e8>)
 800705c:	1ac3      	subs	r3, r0, r3
 800705e:	4258      	negs	r0, r3
 8007060:	4158      	adcs	r0, r3
 8007062:	f7ff fcc5 	bl	80069f0 <__test_assert>
 8007066:	e007      	b.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
  chtest.failure_message = msg;
 8007068:	4b2c      	ldr	r3, [pc, #176]	; (800711c <oslib_test_002_002_execute.lto_priv.0+0x3ec>)
 800706a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800706c:	f240 1201 	movw	r2, #257	; 0x101
 8007070:	80aa      	strh	r2, [r5, #4]
 8007072:	2300      	movs	r3, #0
 8007074:	f383 8811 	msr	BASEPRI, r3
}
 8007078:	b003      	add	sp, #12
 800707a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 800707e:	4b28      	ldr	r3, [pc, #160]	; (8007120 <oslib_test_002_002_execute.lto_priv.0+0x3f0>)
 8007080:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8007082:	f240 1201 	movw	r2, #257	; 0x101
 8007086:	80aa      	strh	r2, [r5, #4]
 8007088:	f381 8811 	msr	BASEPRI, r1
 800708c:	b003      	add	sp, #12
 800708e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8007092:	4a20      	ldr	r2, [pc, #128]	; (8007114 <oslib_test_002_002_execute.lto_priv.0+0x3e4>)
 8007094:	60aa      	str	r2, [r5, #8]
  chtest.global_fail     = true;
 8007096:	f240 1101 	movw	r1, #257	; 0x101
 800709a:	80a9      	strh	r1, [r5, #4]
 800709c:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80070a0:	e7ea      	b.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
  chtest.failure_message = msg;
 80070a2:	4b20      	ldr	r3, [pc, #128]	; (8007124 <oslib_test_002_002_execute.lto_priv.0+0x3f4>)
 80070a4:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80070a6:	f240 1201 	movw	r2, #257	; 0x101
 80070aa:	80aa      	strh	r2, [r5, #4]
 80070ac:	f381 8811 	msr	BASEPRI, r1
}
 80070b0:	b003      	add	sp, #12
 80070b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070b6:	f381 8811 	msr	BASEPRI, r1
  chtest.failure_message = msg;
 80070ba:	4b1b      	ldr	r3, [pc, #108]	; (8007128 <oslib_test_002_002_execute.lto_priv.0+0x3f8>)
 80070bc:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80070be:	f240 1201 	movw	r2, #257	; 0x101
 80070c2:	80aa      	strh	r2, [r5, #4]
 80070c4:	e7d8      	b.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
  chtest.failure_message = msg;
 80070c6:	4a14      	ldr	r2, [pc, #80]	; (8007118 <oslib_test_002_002_execute.lto_priv.0+0x3e8>)
 80070c8:	60aa      	str	r2, [r5, #8]
  chtest.global_fail     = true;
 80070ca:	f240 1101 	movw	r1, #257	; 0x101
 80070ce:	80a9      	strh	r1, [r5, #4]
 80070d0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80070d4:	e7d0      	b.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
  chtest.failure_message = msg;
 80070d6:	4b15      	ldr	r3, [pc, #84]	; (800712c <oslib_test_002_002_execute.lto_priv.0+0x3fc>)
 80070d8:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80070da:	f240 1201 	movw	r2, #257	; 0x101
 80070de:	80aa      	strh	r2, [r5, #4]
 80070e0:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80070e4:	e7c8      	b.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
  chtest.failure_message = msg;
 80070e6:	4b12      	ldr	r3, [pc, #72]	; (8007130 <oslib_test_002_002_execute.lto_priv.0+0x400>)
 80070e8:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80070ea:	f240 1201 	movw	r2, #257	; 0x101
 80070ee:	80aa      	strh	r2, [r5, #4]
 80070f0:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80070f4:	e7c0      	b.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
  chtest.failure_message = msg;
 80070f6:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <oslib_test_002_002_execute.lto_priv.0+0x404>)
 80070f8:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80070fa:	f240 1201 	movw	r2, #257	; 0x101
 80070fe:	80aa      	strh	r2, [r5, #4]
 8007100:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8007104:	e7b8      	b.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
 8007106:	2300      	movs	r3, #0
 8007108:	f383 8811 	msr	BASEPRI, r3
bool __test_assert(bool condition, const char *msg) {
 800710c:	e7d5      	b.n	80070ba <oslib_test_002_002_execute.lto_priv.0+0x38a>
 800710e:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8007112:	e7b1      	b.n	8007078 <oslib_test_002_002_execute.lto_priv.0+0x348>
 8007114:	0800be40 	.word	0x0800be40
 8007118:	0800be64 	.word	0x0800be64
 800711c:	0800bab0 	.word	0x0800bab0
 8007120:	0800be28 	.word	0x0800be28
 8007124:	0800be34 	.word	0x0800be34
 8007128:	0800bbb8 	.word	0x0800bbb8
 800712c:	0800be9c 	.word	0x0800be9c
 8007130:	0800bea8 	.word	0x0800bea8
 8007134:	0800beb4 	.word	0x0800beb4
	...

08007140 <oslib_test_003_001_execute.lto_priv.0>:
static void oslib_test_003_001_execute(void) {
 8007140:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 8007142:	4d5f      	ldr	r5, [pc, #380]	; (80072c0 <oslib_test_003_001_execute.lto_priv.0+0x180>)
 8007144:	2701      	movs	r7, #1
static void oslib_test_003_001_execute(void) {
 8007146:	b085      	sub	sp, #20
  test_set_step(1);
 8007148:	602f      	str	r7, [r5, #0]
 800714a:	2630      	movs	r6, #48	; 0x30
 800714c:	f386 8811 	msr	BASEPRI, r6
 8007150:	4c5c      	ldr	r4, [pc, #368]	; (80072c4 <oslib_test_003_001_execute.lto_priv.0+0x184>)
 8007152:	f104 0020 	add.w	r0, r4, #32
 8007156:	f7fe fdeb 	bl	8005d30 <chMtxLockS>
 800715a:	2200      	movs	r2, #0
 800715c:	f382 8811 	msr	BASEPRI, r2
  pp->wrptr = pp->buffer;
 8007160:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 8007162:	7527      	strb	r7, [r4, #20]
  pp->rdptr = pp->buffer;
 8007164:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 8007168:	6122      	str	r2, [r4, #16]
 800716a:	f386 8811 	msr	BASEPRI, r6
  if (*trp != NULL) {
 800716e:	69a3      	ldr	r3, [r4, #24]
 8007170:	b17b      	cbz	r3, 8007192 <oslib_test_003_001_execute.lto_priv.0+0x52>
    tp->u.rdymsg = msg;
 8007172:	f06f 0101 	mvn.w	r1, #1
 8007176:	6359      	str	r1, [r3, #52]	; 0x34
  } while (unlikely(pqp->prio >= p->prio));
 8007178:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800717a:	6919      	ldr	r1, [r3, #16]
    *trp = NULL;
 800717c:	61a2      	str	r2, [r4, #24]
  tp->state = CH_STATE_READY;
 800717e:	771a      	strb	r2, [r3, #28]
    pqp = pqp->next;
 8007180:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8007182:	688a      	ldr	r2, [r1, #8]
 8007184:	4282      	cmp	r2, r0
 8007186:	d2fb      	bcs.n	8007180 <oslib_test_003_001_execute.lto_priv.0+0x40>
  p->prev       = pqp->prev;
 8007188:	684a      	ldr	r2, [r1, #4]
 800718a:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 800718e:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8007190:	604b      	str	r3, [r1, #4]
  if (*trp != NULL) {
 8007192:	69e3      	ldr	r3, [r4, #28]
 8007194:	b183      	cbz	r3, 80071b8 <oslib_test_003_001_execute.lto_priv.0+0x78>
    tp->u.rdymsg = msg;
 8007196:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
 800719a:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 800719c:	635a      	str	r2, [r3, #52]	; 0x34
  } while (unlikely(pqp->prio >= p->prio));
 800719e:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80071a0:	691a      	ldr	r2, [r3, #16]
    *trp = NULL;
 80071a2:	61e1      	str	r1, [r4, #28]
  tp->state = CH_STATE_READY;
 80071a4:	7719      	strb	r1, [r3, #28]
    pqp = pqp->next;
 80071a6:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80071a8:	6891      	ldr	r1, [r2, #8]
 80071aa:	4281      	cmp	r1, r0
 80071ac:	d2fb      	bcs.n	80071a6 <oslib_test_003_001_execute.lto_priv.0+0x66>
  p->prev       = pqp->prev;
 80071ae:	6851      	ldr	r1, [r2, #4]
 80071b0:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80071b4:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80071b6:	6053      	str	r3, [r2, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80071b8:	4b43      	ldr	r3, [pc, #268]	; (80072c8 <oslib_test_003_001_execute.lto_priv.0+0x188>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	6892      	ldr	r2, [r2, #8]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d901      	bls.n	80071ca <oslib_test_003_001_execute.lto_priv.0+0x8a>
    __sch_reschedule_ahead();
 80071c6:	f7fb fa1b 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f383 8811 	msr	BASEPRI, r3
  PC_UNLOCK(pp);
 80071d0:	483e      	ldr	r0, [pc, #248]	; (80072cc <oslib_test_003_001_execute.lto_priv.0+0x18c>)
 80071d2:	f7fe fe45 	bl	8005e60 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	68e3      	ldr	r3, [r4, #12]
 80071da:	4293      	cmp	r3, r2
 80071dc:	d006      	beq.n	80071ec <oslib_test_003_001_execute.lto_priv.0+0xac>
  chtest.failure_message = msg;
 80071de:	4b3c      	ldr	r3, [pc, #240]	; (80072d0 <oslib_test_003_001_execute.lto_priv.0+0x190>)
 80071e0:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80071e2:	f240 1201 	movw	r2, #257	; 0x101
 80071e6:	80aa      	strh	r2, [r5, #4]
}
 80071e8:	b005      	add	sp, #20
 80071ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80071ec:	68a2      	ldr	r2, [r4, #8]
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d1f5      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 80071f2:	6923      	ldr	r3, [r4, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1f2      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
  test_set_step(2);
 80071f8:	2302      	movs	r3, #2
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80071fa:	2010      	movs	r0, #16
  test_set_step(2);
 80071fc:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80071fe:	f003 fe97 	bl	800af30 <chPipeWriteTimeout.constprop.0>
  if (!condition) {
 8007202:	2800      	cmp	r0, #0
 8007204:	d141      	bne.n	800728a <oslib_test_003_001_execute.lto_priv.0+0x14a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007206:	6822      	ldr	r2, [r4, #0]
 8007208:	68e3      	ldr	r3, [r4, #12]
 800720a:	4293      	cmp	r3, r2
 800720c:	d1e7      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 800720e:	68a2      	ldr	r2, [r4, #8]
 8007210:	4293      	cmp	r3, r2
 8007212:	d1e4      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 8007214:	6923      	ldr	r3, [r4, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e1      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
  if (pp->reset) {
 800721a:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(3);
 800721c:	2203      	movs	r2, #3
 800721e:	602a      	str	r2, [r5, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d039      	beq.n	8007298 <oslib_test_003_001_execute.lto_priv.0+0x158>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007224:	6922      	ldr	r2, [r4, #16]
 8007226:	2a00      	cmp	r2, #0
 8007228:	d1d9      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
  test_set_step(5);
 800722a:	2305      	movs	r3, #5
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800722c:	2010      	movs	r0, #16
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 800722e:	7522      	strb	r2, [r4, #20]
  test_set_step(5);
 8007230:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8007232:	f003 fe7d 	bl	800af30 <chPipeWriteTimeout.constprop.0>
 8007236:	2810      	cmp	r0, #16
 8007238:	d13c      	bne.n	80072b4 <oslib_test_003_001_execute.lto_priv.0+0x174>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800723a:	6822      	ldr	r2, [r4, #0]
 800723c:	68e3      	ldr	r3, [r4, #12]
 800723e:	4293      	cmp	r3, r2
 8007240:	d1cd      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 8007242:	68a2      	ldr	r2, [r4, #8]
 8007244:	4293      	cmp	r3, r2
 8007246:	d1ca      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 8007248:	6921      	ldr	r1, [r4, #16]
 800724a:	2910      	cmp	r1, #16
 800724c:	d1c7      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 800724e:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(6);
 8007250:	2206      	movs	r2, #6
 8007252:	602a      	str	r2, [r5, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d12d      	bne.n	80072b4 <oslib_test_003_001_execute.lto_priv.0+0x174>
 8007258:	4668      	mov	r0, sp
 800725a:	f003 fef1 	bl	800b040 <chPipeReadTimeout.part.0.constprop.0>
 800725e:	2810      	cmp	r0, #16
 8007260:	d128      	bne.n	80072b4 <oslib_test_003_001_execute.lto_priv.0+0x174>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	68e3      	ldr	r3, [r4, #12]
 8007266:	4293      	cmp	r3, r2
 8007268:	d1b9      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 800726a:	68a2      	ldr	r2, [r4, #8]
 800726c:	4293      	cmp	r3, r2
 800726e:	d1b6      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 8007270:	6927      	ldr	r7, [r4, #16]
 8007272:	2f00      	cmp	r7, #0
 8007274:	d1b3      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8007276:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <oslib_test_003_001_execute.lto_priv.0+0x194>)
 8007278:	9a00      	ldr	r2, [sp, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d032      	beq.n	80072e4 <oslib_test_003_001_execute.lto_priv.0+0x1a4>
  chtest.failure_message = msg;
 800727e:	4b16      	ldr	r3, [pc, #88]	; (80072d8 <oslib_test_003_001_execute.lto_priv.0+0x198>)
 8007280:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8007282:	f240 1201 	movw	r2, #257	; 0x101
 8007286:	80aa      	strh	r2, [r5, #4]
 8007288:	e7ae      	b.n	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
  chtest.failure_message = msg;
 800728a:	4b14      	ldr	r3, [pc, #80]	; (80072dc <oslib_test_003_001_execute.lto_priv.0+0x19c>)
 800728c:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800728e:	f240 1201 	movw	r2, #257	; 0x101
 8007292:	80aa      	strh	r2, [r5, #4]
}
 8007294:	b005      	add	sp, #20
 8007296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007298:	2110      	movs	r1, #16
 800729a:	4668      	mov	r0, sp
 800729c:	f003 fed0 	bl	800b040 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition) {
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d1f2      	bne.n	800728a <oslib_test_003_001_execute.lto_priv.0+0x14a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	68e2      	ldr	r2, [r4, #12]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d198      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 80072ac:	68a2      	ldr	r2, [r4, #8]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d195      	bne.n	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 80072b2:	e7b7      	b.n	8007224 <oslib_test_003_001_execute.lto_priv.0+0xe4>
  chtest.failure_message = msg;
 80072b4:	4b0a      	ldr	r3, [pc, #40]	; (80072e0 <oslib_test_003_001_execute.lto_priv.0+0x1a0>)
 80072b6:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80072b8:	f240 1201 	movw	r2, #257	; 0x101
 80072bc:	80aa      	strh	r2, [r5, #4]
 80072be:	e793      	b.n	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
 80072c0:	20000ab4 	.word	0x20000ab4
 80072c4:	20000884 	.word	0x20000884
 80072c8:	200009b8 	.word	0x200009b8
 80072cc:	200008a4 	.word	0x200008a4
 80072d0:	0800babc 	.word	0x0800babc
 80072d4:	33323130 	.word	0x33323130
 80072d8:	0800beec 	.word	0x0800beec
 80072dc:	0800bee0 	.word	0x0800bee0
 80072e0:	0800bab0 	.word	0x0800bab0
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80072e4:	9a01      	ldr	r2, [sp, #4]
 80072e6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d1c7      	bne.n	800727e <oslib_test_003_001_execute.lto_priv.0+0x13e>
 80072ee:	f103 6330 	add.w	r3, r3, #184549376	; 0xb000000
 80072f2:	9a02      	ldr	r2, [sp, #8]
 80072f4:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
 80072f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d1be      	bne.n	800727e <oslib_test_003_001_execute.lto_priv.0+0x13e>
 8007300:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8007304:	9a03      	ldr	r2, [sp, #12]
 8007306:	f503 2381 	add.w	r3, r3, #264192	; 0x40800
 800730a:	f203 330b 	addw	r3, r3, #779	; 0x30b
 800730e:	429a      	cmp	r2, r3
 8007310:	d1b5      	bne.n	800727e <oslib_test_003_001_execute.lto_priv.0+0x13e>
  test_set_step(7);
 8007312:	2307      	movs	r3, #7
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 8007314:	2004      	movs	r0, #4
  test_set_step(7);
 8007316:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 8007318:	f003 fe0a 	bl	800af30 <chPipeWriteTimeout.constprop.0>
  if (!condition) {
 800731c:	2804      	cmp	r0, #4
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800731e:	f04f 0600 	mov.w	r6, #0
 8007322:	d1c7      	bne.n	80072b4 <oslib_test_003_001_execute.lto_priv.0+0x174>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8007324:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007328:	4293      	cmp	r3, r2
 800732a:	f43f af58 	beq.w	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	4293      	cmp	r3, r2
 8007332:	f47f af54 	bne.w	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	2b04      	cmp	r3, #4
 800733a:	f47f af50 	bne.w	80071de <oslib_test_003_001_execute.lto_priv.0+0x9e>
  test_set_step(8);
 800733e:	2308      	movs	r3, #8
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8007340:	200c      	movs	r0, #12
  test_set_step(8);
 8007342:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8007344:	f003 fdf4 	bl	800af30 <chPipeWriteTimeout.constprop.0>
 8007348:	280c      	cmp	r0, #12
 800734a:	d1b3      	bne.n	80072b4 <oslib_test_003_001_execute.lto_priv.0+0x174>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	4293      	cmp	r3, r2
 8007352:	f000 80ed 	beq.w	8007530 <oslib_test_003_001_execute.lto_priv.0+0x3f0>
 8007356:	2000      	movs	r0, #0
 8007358:	4993      	ldr	r1, [pc, #588]	; (80075a8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 800735a:	f7ff fb49 	bl	80069f0 <__test_assert>
 800735e:	2800      	cmp	r0, #0
 8007360:	f47f af42 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
 8007364:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(9);
 8007366:	2209      	movs	r2, #9
 8007368:	602a      	str	r2, [r5, #0]
 800736a:	b91b      	cbnz	r3, 8007374 <oslib_test_003_001_execute.lto_priv.0+0x234>
 800736c:	2104      	movs	r1, #4
 800736e:	4668      	mov	r0, sp
 8007370:	f003 fe66 	bl	800b040 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 4, "wrong size");
 8007374:	f1a0 0c04 	sub.w	ip, r0, #4
 8007378:	f1dc 0000 	rsbs	r0, ip, #0
 800737c:	eb40 000c 	adc.w	r0, r0, ip
 8007380:	498a      	ldr	r1, [pc, #552]	; (80075ac <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 8007382:	f7ff fb35 	bl	80069f0 <__test_assert>
 8007386:	2800      	cmp	r0, #0
 8007388:	f47f af2e 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	68e2      	ldr	r2, [r4, #12]
 8007390:	429a      	cmp	r2, r3
 8007392:	d003      	beq.n	800739c <oslib_test_003_001_execute.lto_priv.0+0x25c>
 8007394:	68a2      	ldr	r2, [r4, #8]
 8007396:	4293      	cmp	r3, r2
 8007398:	f000 80f8 	beq.w	800758c <oslib_test_003_001_execute.lto_priv.0+0x44c>
 800739c:	4982      	ldr	r1, [pc, #520]	; (80075a8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 800739e:	f7ff fb27 	bl	80069f0 <__test_assert>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f47f af20 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 80073a8:	4669      	mov	r1, sp
 80073aa:	4881      	ldr	r0, [pc, #516]	; (80075b0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 80073ac:	2204      	movs	r2, #4
 80073ae:	f7f8 ff9d 	bl	80002ec <memcmp>
 80073b2:	fab0 f080 	clz	r0, r0
 80073b6:	497f      	ldr	r1, [pc, #508]	; (80075b4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 80073b8:	0940      	lsrs	r0, r0, #5
 80073ba:	f7ff fb19 	bl	80069f0 <__test_assert>
 80073be:	2800      	cmp	r0, #0
 80073c0:	f47f af12 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
 80073c4:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(10);
 80073c6:	220a      	movs	r2, #10
 80073c8:	602a      	str	r2, [r5, #0]
 80073ca:	b91b      	cbnz	r3, 80073d4 <oslib_test_003_001_execute.lto_priv.0+0x294>
 80073cc:	210c      	movs	r1, #12
 80073ce:	4668      	mov	r0, sp
 80073d0:	f003 fe36 	bl	800b040 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 80073d4:	f1a0 020c 	sub.w	r2, r0, #12
 80073d8:	4250      	negs	r0, r2
 80073da:	4150      	adcs	r0, r2
 80073dc:	4973      	ldr	r1, [pc, #460]	; (80075ac <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 80073de:	f7ff fb07 	bl	80069f0 <__test_assert>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f47f af00 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	4293      	cmp	r3, r2
 80073ee:	f000 80bc 	beq.w	800756a <oslib_test_003_001_execute.lto_priv.0+0x42a>
 80073f2:	496d      	ldr	r1, [pc, #436]	; (80075a8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 80073f4:	f7ff fafc 	bl	80069f0 <__test_assert>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f47f aef5 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 80073fe:	4669      	mov	r1, sp
 8007400:	486b      	ldr	r0, [pc, #428]	; (80075b0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 8007402:	220c      	movs	r2, #12
 8007404:	f7f8 ff72 	bl	80002ec <memcmp>
 8007408:	fab0 f080 	clz	r0, r0
 800740c:	4969      	ldr	r1, [pc, #420]	; (80075b4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800740e:	0940      	lsrs	r0, r0, #5
 8007410:	f7ff faee 	bl	80069f0 <__test_assert>
 8007414:	2800      	cmp	r0, #0
 8007416:	f47f aee7 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
  test_set_step(11);
 800741a:	230b      	movs	r3, #11
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 800741c:	2005      	movs	r0, #5
  test_set_step(11);
 800741e:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 8007420:	f003 fd86 	bl	800af30 <chPipeWriteTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 8007424:	1f43      	subs	r3, r0, #5
 8007426:	4258      	negs	r0, r3
 8007428:	4158      	adcs	r0, r3
 800742a:	4960      	ldr	r1, [pc, #384]	; (80075ac <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800742c:	f7ff fae0 	bl	80069f0 <__test_assert>
 8007430:	2800      	cmp	r0, #0
 8007432:	f47f aed9 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8007436:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800743a:	4293      	cmp	r3, r2
 800743c:	d003      	beq.n	8007446 <oslib_test_003_001_execute.lto_priv.0+0x306>
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	4293      	cmp	r3, r2
 8007442:	f000 809b 	beq.w	800757c <oslib_test_003_001_execute.lto_priv.0+0x43c>
 8007446:	4958      	ldr	r1, [pc, #352]	; (80075a8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 8007448:	f7ff fad2 	bl	80069f0 <__test_assert>
 800744c:	2800      	cmp	r0, #0
 800744e:	f47f aecb 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
 8007452:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(12);
 8007454:	220c      	movs	r2, #12
 8007456:	602a      	str	r2, [r5, #0]
 8007458:	b91b      	cbnz	r3, 8007462 <oslib_test_003_001_execute.lto_priv.0+0x322>
 800745a:	2105      	movs	r1, #5
 800745c:	4668      	mov	r0, sp
 800745e:	f003 fdef 	bl	800b040 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 5, "wrong size");
 8007462:	f1a0 0c05 	sub.w	ip, r0, #5
 8007466:	f1dc 0000 	rsbs	r0, ip, #0
 800746a:	eb40 000c 	adc.w	r0, r0, ip
 800746e:	494f      	ldr	r1, [pc, #316]	; (80075ac <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 8007470:	f7ff fabe 	bl	80069f0 <__test_assert>
 8007474:	2800      	cmp	r0, #0
 8007476:	f47f aeb7 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800747a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800747e:	4293      	cmp	r3, r2
 8007480:	d06b      	beq.n	800755a <oslib_test_003_001_execute.lto_priv.0+0x41a>
 8007482:	4949      	ldr	r1, [pc, #292]	; (80075a8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 8007484:	f7ff fab4 	bl	80069f0 <__test_assert>
 8007488:	2800      	cmp	r0, #0
 800748a:	f47f aead 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 800748e:	4669      	mov	r1, sp
 8007490:	4847      	ldr	r0, [pc, #284]	; (80075b0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 8007492:	2205      	movs	r2, #5
 8007494:	f7f8 ff2a 	bl	80002ec <memcmp>
 8007498:	fab0 f080 	clz	r0, r0
 800749c:	4945      	ldr	r1, [pc, #276]	; (80075b4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800749e:	0940      	lsrs	r0, r0, #5
 80074a0:	f7ff faa6 	bl	80069f0 <__test_assert>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f47f ae9f 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
  test_set_step(13);
 80074aa:	230d      	movs	r3, #13
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80074ac:	2010      	movs	r0, #16
  test_set_step(13);
 80074ae:	602b      	str	r3, [r5, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 80074b0:	f003 fd3e 	bl	800af30 <chPipeWriteTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 80074b4:	f1a0 0110 	sub.w	r1, r0, #16
 80074b8:	4248      	negs	r0, r1
 80074ba:	4148      	adcs	r0, r1
 80074bc:	493b      	ldr	r1, [pc, #236]	; (80075ac <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 80074be:	f7ff fa97 	bl	80069f0 <__test_assert>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f47f ae90 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80074c8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d03b      	beq.n	8007548 <oslib_test_003_001_execute.lto_priv.0+0x408>
 80074d0:	4935      	ldr	r1, [pc, #212]	; (80075a8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 80074d2:	f7ff fa8d 	bl	80069f0 <__test_assert>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f47f ae86 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
 80074dc:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(14);
 80074de:	220e      	movs	r2, #14
 80074e0:	602a      	str	r2, [r5, #0]
 80074e2:	b923      	cbnz	r3, 80074ee <oslib_test_003_001_execute.lto_priv.0+0x3ae>
 80074e4:	2110      	movs	r1, #16
 80074e6:	4668      	mov	r0, sp
 80074e8:	f003 fdaa 	bl	800b040 <chPipeReadTimeout.part.0.constprop.0>
 80074ec:	4607      	mov	r7, r0
    test_assert(n == PIPE_SIZE, "wrong size");
 80074ee:	f1a7 0310 	sub.w	r3, r7, #16
 80074f2:	4258      	negs	r0, r3
 80074f4:	4158      	adcs	r0, r3
 80074f6:	492d      	ldr	r1, [pc, #180]	; (80075ac <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 80074f8:	f7ff fa7a 	bl	80069f0 <__test_assert>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f47f ae73 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8007502:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007506:	4293      	cmp	r3, r2
 8007508:	d046      	beq.n	8007598 <oslib_test_003_001_execute.lto_priv.0+0x458>
 800750a:	4927      	ldr	r1, [pc, #156]	; (80075a8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 800750c:	4630      	mov	r0, r6
 800750e:	f7ff fa6f 	bl	80069f0 <__test_assert>
 8007512:	2800      	cmp	r0, #0
 8007514:	f47f ae68 	bne.w	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8007518:	4669      	mov	r1, sp
 800751a:	2210      	movs	r2, #16
 800751c:	4824      	ldr	r0, [pc, #144]	; (80075b0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 800751e:	f7f8 fee5 	bl	80002ec <memcmp>
 8007522:	fab0 f080 	clz	r0, r0
 8007526:	4923      	ldr	r1, [pc, #140]	; (80075b4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 8007528:	0940      	lsrs	r0, r0, #5
 800752a:	f7ff fa61 	bl	80069f0 <__test_assert>
 800752e:	e65b      	b.n	80071e8 <oslib_test_003_001_execute.lto_priv.0+0xa8>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007530:	68a2      	ldr	r2, [r4, #8]
 8007532:	4293      	cmp	r3, r2
 8007534:	f47f af0f 	bne.w	8007356 <oslib_test_003_001_execute.lto_priv.0+0x216>
 8007538:	6920      	ldr	r0, [r4, #16]
 800753a:	f1a0 0e10 	sub.w	lr, r0, #16
 800753e:	f1de 0000 	rsbs	r0, lr, #0
 8007542:	eb40 000e 	adc.w	r0, r0, lr
 8007546:	e707      	b.n	8007358 <oslib_test_003_001_execute.lto_priv.0+0x218>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8007548:	6822      	ldr	r2, [r4, #0]
 800754a:	4293      	cmp	r3, r2
 800754c:	d0c0      	beq.n	80074d0 <oslib_test_003_001_execute.lto_priv.0+0x390>
 800754e:	6920      	ldr	r0, [r4, #16]
 8007550:	f1a0 0210 	sub.w	r2, r0, #16
 8007554:	4250      	negs	r0, r2
 8007556:	4150      	adcs	r0, r2
 8007558:	e7ba      	b.n	80074d0 <oslib_test_003_001_execute.lto_priv.0+0x390>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	4293      	cmp	r3, r2
 800755e:	d090      	beq.n	8007482 <oslib_test_003_001_execute.lto_priv.0+0x342>
 8007560:	6920      	ldr	r0, [r4, #16]
 8007562:	fab0 f080 	clz	r0, r0
 8007566:	0940      	lsrs	r0, r0, #5
 8007568:	e78b      	b.n	8007482 <oslib_test_003_001_execute.lto_priv.0+0x342>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800756a:	68a2      	ldr	r2, [r4, #8]
 800756c:	4293      	cmp	r3, r2
 800756e:	f47f af40 	bne.w	80073f2 <oslib_test_003_001_execute.lto_priv.0+0x2b2>
 8007572:	6920      	ldr	r0, [r4, #16]
 8007574:	fab0 f080 	clz	r0, r0
 8007578:	0940      	lsrs	r0, r0, #5
 800757a:	e73a      	b.n	80073f2 <oslib_test_003_001_execute.lto_priv.0+0x2b2>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800757c:	6920      	ldr	r0, [r4, #16]
 800757e:	f1a0 0e05 	sub.w	lr, r0, #5
 8007582:	f1de 0000 	rsbs	r0, lr, #0
 8007586:	eb40 000e 	adc.w	r0, r0, lr
 800758a:	e75c      	b.n	8007446 <oslib_test_003_001_execute.lto_priv.0+0x306>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800758c:	6920      	ldr	r0, [r4, #16]
 800758e:	f1a0 010c 	sub.w	r1, r0, #12
 8007592:	4248      	negs	r0, r1
 8007594:	4148      	adcs	r0, r1
 8007596:	e701      	b.n	800739c <oslib_test_003_001_execute.lto_priv.0+0x25c>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8007598:	6822      	ldr	r2, [r4, #0]
 800759a:	4293      	cmp	r3, r2
 800759c:	d0b5      	beq.n	800750a <oslib_test_003_001_execute.lto_priv.0+0x3ca>
 800759e:	6926      	ldr	r6, [r4, #16]
 80075a0:	fab6 f686 	clz	r6, r6
 80075a4:	0976      	lsrs	r6, r6, #5
 80075a6:	e7b0      	b.n	800750a <oslib_test_003_001_execute.lto_priv.0+0x3ca>
 80075a8:	0800babc 	.word	0x0800babc
 80075ac:	0800bab0 	.word	0x0800bab0
 80075b0:	0800cc7c 	.word	0x0800cc7c
 80075b4:	0800beec 	.word	0x0800beec
	...

080075c0 <oslib_test_008_001_execute.lto_priv.0>:

static void oslib_test_008_001_execute(void) {
 80075c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  size_t n, sz;

  /* [8.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present, finally, integrity is
     checked.*/
  test_set_step(1);
 80075c4:	4fcc      	ldr	r7, [pc, #816]	; (80078f8 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80075c6:	2301      	movs	r3, #1
 80075c8:	603b      	str	r3, [r7, #0]
static void oslib_test_008_001_execute(void) {
 80075ca:	b083      	sub	sp, #12
 80075cc:	2330      	movs	r3, #48	; 0x30
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f8df 8328 	ldr.w	r8, [pc, #808]	; 80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>
 80075d6:	f108 0014 	add.w	r0, r8, #20
 80075da:	f7fe fba9 	bl	8005d30 <chMtxLockS>
 80075de:	2500      	movs	r5, #0
 80075e0:	f385 8811 	msr	BASEPRI, r5
  while (H_FREE_NEXT(qp) != NULL) {
 80075e4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80075e8:	2c00      	cmp	r4, #0
 80075ea:	f000 81dc 	beq.w	80079a6 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  n = 0U;
 80075ee:	462e      	mov	r6, r5
  while (H_FREE_NEXT(qp) != NULL) {
 80075f0:	e9d4 4300 	ldrd	r4, r3, [r4]
    n++;
 80075f4:	3601      	adds	r6, #1
    tpages += pages;
 80075f6:	441d      	add	r5, r3
  while (H_FREE_NEXT(qp) != NULL) {
 80075f8:	2c00      	cmp	r4, #0
 80075fa:	d1f9      	bne.n	80075f0 <oslib_test_008_001_execute.lto_priv.0+0x30>
  H_UNLOCK(heapp);
 80075fc:	48c0      	ldr	r0, [pc, #768]	; (8007900 <oslib_test_008_001_execute.lto_priv.0+0x340>)
 80075fe:	f7fe fc2f 	bl	8005e60 <chMtxUnlock>
 8007602:	2e01      	cmp	r6, #1
 8007604:	f040 81d3 	bne.w	80079ae <oslib_test_008_001_execute.lto_priv.0+0x3ee>
  {
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 8007608:	f003 f9a2 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 800760c:	2800      	cmp	r0, #0
 800760e:	f040 81c2 	bne.w	8007996 <oslib_test_008_001_execute.lto_priv.0+0x3d6>
  }
  test_end_step(1);

  /* [8.1.2] Trying to allocate an block bigger than available space,
     an error is expected, finally, integrity is checked.*/
  test_set_step(2);
 8007612:	2302      	movs	r3, #2
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8007614:	48b9      	ldr	r0, [pc, #740]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	2208      	movs	r2, #8
 800761a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800761e:	f7ff f8b7 	bl	8006790 <chHeapAllocAligned>
 8007622:	2800      	cmp	r0, #0
 8007624:	f040 81cb 	bne.w	80079be <oslib_test_008_001_execute.lto_priv.0+0x3fe>
  {
    p1 = chHeapAlloc(&test_heap, sizeof test_heap_buffer * 2);
    test_assert(p1 == NULL, "allocation not failed");
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 8007628:	f003 f992 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 800762c:	2800      	cmp	r0, #0
 800762e:	f040 81b2 	bne.w	8007996 <oslib_test_008_001_execute.lto_priv.0+0x3d6>
  test_end_step(2);

  /* [8.1.3] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail, finally, integrity is
     checked.*/
  test_set_step(3);
 8007632:	2303      	movs	r3, #3
 8007634:	48b1      	ldr	r0, [pc, #708]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	2208      	movs	r2, #8
 800763a:	2110      	movs	r1, #16
 800763c:	f7ff f8a8 	bl	8006790 <chHeapAllocAligned>
 8007640:	2800      	cmp	r0, #0
 8007642:	f000 81c2 	beq.w	80079ca <oslib_test_008_001_execute.lto_priv.0+0x40a>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 8007646:	f7ff f933 	bl	80068b0 <chHeapFree>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 800764a:	f003 f981 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 800764e:	2800      	cmp	r0, #0
 8007650:	f040 81a1 	bne.w	8007996 <oslib_test_008_001_execute.lto_priv.0+0x3d6>
  test_end_step(3);

  /* [8.1.4] Using chHeapStatus() to assess the heap state. There must
     be at least one free block of sufficient size, finally, integrity
     is checked.*/
  test_set_step(4);
 8007654:	2304      	movs	r3, #4
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	2330      	movs	r3, #48	; 0x30
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	48a8      	ldr	r0, [pc, #672]	; (8007900 <oslib_test_008_001_execute.lto_priv.0+0x340>)
 8007660:	f7fe fb66 	bl	8005d30 <chMtxLockS>
 8007664:	f384 8811 	msr	BASEPRI, r4
  while (H_FREE_NEXT(qp) != NULL) {
 8007668:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800766c:	2e00      	cmp	r6, #0
 800766e:	f000 81b2 	beq.w	80079d6 <oslib_test_008_001_execute.lto_priv.0+0x416>
  tpages = 0U;
 8007672:	4622      	mov	r2, r4
  n = 0U;
 8007674:	46a1      	mov	r9, r4
  while (H_FREE_NEXT(qp) != NULL) {
 8007676:	e9d6 6300 	ldrd	r6, r3, [r6]
 800767a:	429c      	cmp	r4, r3
    n++;
 800767c:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 8007680:	441a      	add	r2, r3
 8007682:	bf38      	it	cc
 8007684:	461c      	movcc	r4, r3
  while (H_FREE_NEXT(qp) != NULL) {
 8007686:	2e00      	cmp	r6, #0
 8007688:	d1f5      	bne.n	8007676 <oslib_test_008_001_execute.lto_priv.0+0xb6>
  H_UNLOCK(heapp);
 800768a:	489d      	ldr	r0, [pc, #628]	; (8007900 <oslib_test_008_001_execute.lto_priv.0+0x340>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800768c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
  H_UNLOCK(heapp);
 8007690:	f7fe fbe6 	bl	8005e60 <chMtxUnlock>
 8007694:	f1b9 0f01 	cmp.w	r9, #1
  {
    size_t total_size, largest_size;

    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8007698:	f8cd 9004 	str.w	r9, [sp, #4]
 800769c:	f040 819e 	bne.w	80079dc <oslib_test_008_001_execute.lto_priv.0+0x41c>
 80076a0:	f1b8 0f0f 	cmp.w	r8, #15
 80076a4:	f240 81a0 	bls.w	80079e8 <oslib_test_008_001_execute.lto_priv.0+0x428>
 80076a8:	ebb8 0fc4 	cmp.w	r8, r4, lsl #3
 80076ac:	f040 819c 	bne.w	80079e8 <oslib_test_008_001_execute.lto_priv.0+0x428>
    test_assert(n == 1, "missing free block");
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
    test_assert(total_size == largest_size, "unexpected heap state");
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 80076b0:	f003 f94e 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f040 816e 	bne.w	8007996 <oslib_test_008_001_execute.lto_priv.0+0x3d6>
  }
  test_end_step(4);

  /* [8.1.5] Allocating then freeing in the same order, finally,
     integrity is checked.*/
  test_set_step(5);
 80076ba:	2305      	movs	r3, #5
 80076bc:	2208      	movs	r2, #8
 80076be:	2110      	movs	r1, #16
 80076c0:	488e      	ldr	r0, [pc, #568]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	f7ff f864 	bl	8006790 <chHeapAllocAligned>
 80076c8:	2208      	movs	r2, #8
 80076ca:	4681      	mov	r9, r0
 80076cc:	2110      	movs	r1, #16
 80076ce:	488b      	ldr	r0, [pc, #556]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80076d0:	f7ff f85e 	bl	8006790 <chHeapAllocAligned>
 80076d4:	2208      	movs	r2, #8
 80076d6:	2110      	movs	r1, #16
 80076d8:	4680      	mov	r8, r0
 80076da:	4888      	ldr	r0, [pc, #544]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80076dc:	f7ff f858 	bl	8006790 <chHeapAllocAligned>
 80076e0:	4604      	mov	r4, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);                                 /* Does not merge.*/
 80076e2:	4648      	mov	r0, r9
 80076e4:	f7ff f8e4 	bl	80068b0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 80076e8:	4640      	mov	r0, r8
 80076ea:	f7ff f8e1 	bl	80068b0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 80076ee:	4620      	mov	r0, r4
 80076f0:	f7ff f8de 	bl	80068b0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80076f4:	a901      	add	r1, sp, #4
 80076f6:	4881      	ldr	r0, [pc, #516]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80076f8:	4632      	mov	r2, r6
 80076fa:	f7fe fbf9 	bl	8005ef0 <chHeapStatus>
 80076fe:	f1a0 0001 	sub.w	r0, r0, #1
 8007702:	fab0 f080 	clz	r0, r0
 8007706:	497f      	ldr	r1, [pc, #508]	; (8007904 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 8007708:	0940      	lsrs	r0, r0, #5
 800770a:	f7ff f971 	bl	80069f0 <__test_assert>
 800770e:	2800      	cmp	r0, #0
 8007710:	f040 8146 	bne.w	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 8007714:	f003 f91c 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 8007718:	f080 0001 	eor.w	r0, r0, #1
 800771c:	497a      	ldr	r1, [pc, #488]	; (8007908 <oslib_test_008_001_execute.lto_priv.0+0x348>)
 800771e:	b2c0      	uxtb	r0, r0
 8007720:	f7ff f966 	bl	80069f0 <__test_assert>
 8007724:	2800      	cmp	r0, #0
 8007726:	f040 813b 	bne.w	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
  }
  test_end_step(5);

  /* [8.1.6] Allocating then freeing in reverse order, finally,
     integrity is checked.*/
  test_set_step(6);
 800772a:	2306      	movs	r3, #6
 800772c:	2208      	movs	r2, #8
 800772e:	2110      	movs	r1, #16
 8007730:	4872      	ldr	r0, [pc, #456]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	f7ff f82c 	bl	8006790 <chHeapAllocAligned>
 8007738:	2208      	movs	r2, #8
 800773a:	4604      	mov	r4, r0
 800773c:	2110      	movs	r1, #16
 800773e:	486f      	ldr	r0, [pc, #444]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007740:	f7ff f826 	bl	8006790 <chHeapAllocAligned>
 8007744:	2208      	movs	r2, #8
 8007746:	2110      	movs	r1, #16
 8007748:	4680      	mov	r8, r0
 800774a:	486c      	ldr	r0, [pc, #432]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800774c:	f7ff f820 	bl	8006790 <chHeapAllocAligned>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p3);                                 /* Merges forward.*/
 8007750:	f7ff f8ae 	bl	80068b0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 8007754:	4640      	mov	r0, r8
 8007756:	f7ff f8ab 	bl	80068b0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 800775a:	4620      	mov	r0, r4
 800775c:	f7ff f8a8 	bl	80068b0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007760:	a901      	add	r1, sp, #4
 8007762:	4866      	ldr	r0, [pc, #408]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007764:	4632      	mov	r2, r6
 8007766:	f7fe fbc3 	bl	8005ef0 <chHeapStatus>
 800776a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800776e:	f1d8 0000 	rsbs	r0, r8, #0
 8007772:	eb40 0008 	adc.w	r0, r0, r8
 8007776:	4963      	ldr	r1, [pc, #396]	; (8007904 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 8007778:	f7ff f93a 	bl	80069f0 <__test_assert>
 800777c:	2800      	cmp	r0, #0
 800777e:	f040 810f 	bne.w	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 8007782:	f003 f8e5 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 8007786:	f080 0001 	eor.w	r0, r0, #1
 800778a:	495f      	ldr	r1, [pc, #380]	; (8007908 <oslib_test_008_001_execute.lto_priv.0+0x348>)
 800778c:	b2c0      	uxtb	r0, r0
 800778e:	f7ff f92f 	bl	80069f0 <__test_assert>
 8007792:	2800      	cmp	r0, #0
 8007794:	f040 8104 	bne.w	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
  test_end_step(6);

  /* [8.1.7] Small fragments handling. Checking the behavior when
     allocating blocks with size not multiple of alignment unit,
     finally, integrity is checked.*/
  test_set_step(7);
 8007798:	2307      	movs	r3, #7
 800779a:	2208      	movs	r2, #8
 800779c:	2111      	movs	r1, #17
 800779e:	4857      	ldr	r0, [pc, #348]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	f7fe fff5 	bl	8006790 <chHeapAllocAligned>
 80077a6:	2208      	movs	r2, #8
 80077a8:	2110      	movs	r1, #16
 80077aa:	4680      	mov	r8, r0
 80077ac:	4853      	ldr	r0, [pc, #332]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80077ae:	f7fe ffef 	bl	8006790 <chHeapAllocAligned>
 80077b2:	4604      	mov	r4, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE + 1);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 80077b4:	4640      	mov	r0, r8
 80077b6:	f7ff f87b 	bl	80068b0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80077ba:	a901      	add	r1, sp, #4
 80077bc:	484f      	ldr	r0, [pc, #316]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80077be:	4632      	mov	r2, r6
 80077c0:	f7fe fb96 	bl	8005ef0 <chHeapStatus>
 80077c4:	f1a0 0e02 	sub.w	lr, r0, #2
 80077c8:	f1de 0000 	rsbs	r0, lr, #0
 80077cc:	eb40 000e 	adc.w	r0, r0, lr
 80077d0:	494e      	ldr	r1, [pc, #312]	; (800790c <oslib_test_008_001_execute.lto_priv.0+0x34c>)
 80077d2:	f7ff f90d 	bl	80069f0 <__test_assert>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f040 80e2 	bne.w	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
 80077dc:	2208      	movs	r2, #8
 80077de:	2110      	movs	r1, #16
 80077e0:	4846      	ldr	r0, [pc, #280]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80077e2:	f7fe ffd5 	bl	8006790 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    /* Note, the first situation happens when the alignment size is smaller
       than the header size, the second in the other cases.*/
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80077e6:	2200      	movs	r2, #0
 80077e8:	4606      	mov	r6, r0
 80077ea:	a901      	add	r1, sp, #4
 80077ec:	4843      	ldr	r0, [pc, #268]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80077ee:	f7fe fb7f 	bl	8005ef0 <chHeapStatus>
 80077f2:	2801      	cmp	r0, #1
 80077f4:	d00a      	beq.n	800780c <oslib_test_008_001_execute.lto_priv.0+0x24c>
 80077f6:	4841      	ldr	r0, [pc, #260]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	a901      	add	r1, sp, #4
 80077fc:	f7fe fb78 	bl	8005ef0 <chHeapStatus>
 8007800:	f1a0 0c02 	sub.w	ip, r0, #2
 8007804:	f1dc 0000 	rsbs	r0, ip, #0
 8007808:	eb40 000c 	adc.w	r0, r0, ip
 800780c:	493d      	ldr	r1, [pc, #244]	; (8007904 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 800780e:	f7ff f8ef 	bl	80069f0 <__test_assert>
 8007812:	4680      	mov	r8, r0
 8007814:	2800      	cmp	r0, #0
 8007816:	f040 80c3 	bne.w	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
                (chHeapStatus(&test_heap, &n, NULL) == 2), "heap fragmented");
    chHeapFree(p2);
 800781a:	4620      	mov	r0, r4
 800781c:	f7ff f848 	bl	80068b0 <chHeapFree>
    chHeapFree(p1);
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff f845 	bl	80068b0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007826:	a901      	add	r1, sp, #4
 8007828:	4834      	ldr	r0, [pc, #208]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800782a:	4642      	mov	r2, r8
 800782c:	f7fe fb60 	bl	8005ef0 <chHeapStatus>
 8007830:	1e44      	subs	r4, r0, #1
 8007832:	4260      	negs	r0, r4
 8007834:	4160      	adcs	r0, r4
 8007836:	4933      	ldr	r1, [pc, #204]	; (8007904 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 8007838:	f7ff f8da 	bl	80069f0 <__test_assert>
 800783c:	2800      	cmp	r0, #0
 800783e:	f040 80af 	bne.w	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 8007842:	f003 f885 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 8007846:	f080 0001 	eor.w	r0, r0, #1
 800784a:	492f      	ldr	r1, [pc, #188]	; (8007908 <oslib_test_008_001_execute.lto_priv.0+0x348>)
 800784c:	b2c0      	uxtb	r0, r0
 800784e:	f7ff f8cf 	bl	80069f0 <__test_assert>
 8007852:	4606      	mov	r6, r0
 8007854:	2800      	cmp	r0, #0
 8007856:	f040 80a3 	bne.w	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
  test_end_step(7);

  /* [8.1.8] Skipping a fragment, the first fragment in the list is too
     small so the allocator must pick the second one, finally,
     integrity is checked.*/
  test_set_step(8);
 800785a:	2408      	movs	r4, #8
 800785c:	4622      	mov	r2, r4
 800785e:	2110      	movs	r1, #16
 8007860:	4826      	ldr	r0, [pc, #152]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007862:	603c      	str	r4, [r7, #0]
 8007864:	f7fe ff94 	bl	8006790 <chHeapAllocAligned>
 8007868:	4622      	mov	r2, r4
 800786a:	2110      	movs	r1, #16
 800786c:	4681      	mov	r9, r0
 800786e:	4823      	ldr	r0, [pc, #140]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007870:	f7fe ff8e 	bl	8006790 <chHeapAllocAligned>
 8007874:	4680      	mov	r8, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 8007876:	4648      	mov	r0, r9
 8007878:	f7ff f81a 	bl	80068b0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800787c:	4632      	mov	r2, r6
 800787e:	a901      	add	r1, sp, #4
 8007880:	481e      	ldr	r0, [pc, #120]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007882:	f7fe fb35 	bl	8005ef0 <chHeapStatus>
 8007886:	1e81      	subs	r1, r0, #2
 8007888:	4248      	negs	r0, r1
 800788a:	4148      	adcs	r0, r1
 800788c:	491f      	ldr	r1, [pc, #124]	; (800790c <oslib_test_008_001_execute.lto_priv.0+0x34c>)
 800788e:	f7ff f8af 	bl	80069f0 <__test_assert>
 8007892:	4606      	mov	r6, r0
 8007894:	2800      	cmp	r0, #0
 8007896:	f040 8083 	bne.w	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
 800789a:	4622      	mov	r2, r4
 800789c:	2120      	movs	r1, #32
 800789e:	4817      	ldr	r0, [pc, #92]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80078a0:	f7fe ff76 	bl	8006790 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE * 2); /* Skips first fragment.*/
    chHeapFree(p1);
 80078a4:	f7ff f804 	bl	80068b0 <chHeapFree>
    chHeapFree(p2);
 80078a8:	4640      	mov	r0, r8
 80078aa:	f7ff f801 	bl	80068b0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80078ae:	4632      	mov	r2, r6
 80078b0:	a901      	add	r1, sp, #4
 80078b2:	4812      	ldr	r0, [pc, #72]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80078b4:	f7fe fb1c 	bl	8005ef0 <chHeapStatus>
 80078b8:	1e42      	subs	r2, r0, #1
 80078ba:	4250      	negs	r0, r2
 80078bc:	4150      	adcs	r0, r2
 80078be:	4911      	ldr	r1, [pc, #68]	; (8007904 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 80078c0:	f7ff f896 	bl	80069f0 <__test_assert>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d16b      	bne.n	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 80078c8:	f003 f842 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 80078cc:	f080 0001 	eor.w	r0, r0, #1
 80078d0:	490d      	ldr	r1, [pc, #52]	; (8007908 <oslib_test_008_001_execute.lto_priv.0+0x348>)
 80078d2:	b2c0      	uxtb	r0, r0
 80078d4:	f7ff f88c 	bl	80069f0 <__test_assert>
 80078d8:	4602      	mov	r2, r0
 80078da:	2800      	cmp	r0, #0
 80078dc:	d160      	bne.n	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
  }
  test_end_step(8);

  /* [8.1.9] Allocating the whole available space, finally, integrity
     is checked.*/
  test_set_step(9);
 80078de:	2309      	movs	r3, #9
  {
    (void)chHeapStatus(&test_heap, &n, NULL);
 80078e0:	a901      	add	r1, sp, #4
 80078e2:	4806      	ldr	r0, [pc, #24]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
  test_set_step(9);
 80078e4:	603b      	str	r3, [r7, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 80078e6:	f7fe fb03 	bl	8005ef0 <chHeapStatus>
 80078ea:	4622      	mov	r2, r4
 80078ec:	9901      	ldr	r1, [sp, #4]
 80078ee:	4803      	ldr	r0, [pc, #12]	; (80078fc <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80078f0:	f7fe ff4e 	bl	8006790 <chHeapAllocAligned>
 80078f4:	e00c      	b.n	8007910 <oslib_test_008_001_execute.lto_priv.0+0x350>
 80078f6:	bf00      	nop
 80078f8:	20000ab4 	.word	0x20000ab4
 80078fc:	200016a0 	.word	0x200016a0
 8007900:	200016b4 	.word	0x200016b4
 8007904:	0800bdc0 	.word	0x0800bdc0
 8007908:	0800bf00 	.word	0x0800bf00
 800790c:	0800bf6c 	.word	0x0800bf6c
    p1 = chHeapAlloc(&test_heap, n);
    test_assert(p1 != NULL, "allocation failed");
 8007910:	4604      	mov	r4, r0
 8007912:	3800      	subs	r0, #0
 8007914:	4937      	ldr	r1, [pc, #220]	; (80079f4 <oslib_test_008_001_execute.lto_priv.0+0x434>)
 8007916:	bf18      	it	ne
 8007918:	2001      	movne	r0, #1
 800791a:	f7ff f869 	bl	80069f0 <__test_assert>
 800791e:	4602      	mov	r2, r0
 8007920:	2800      	cmp	r0, #0
 8007922:	d13d      	bne.n	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8007924:	4601      	mov	r1, r0
 8007926:	4834      	ldr	r0, [pc, #208]	; (80079f8 <oslib_test_008_001_execute.lto_priv.0+0x438>)
 8007928:	f7fe fae2 	bl	8005ef0 <chHeapStatus>
 800792c:	fab0 f080 	clz	r0, r0
 8007930:	4932      	ldr	r1, [pc, #200]	; (80079fc <oslib_test_008_001_execute.lto_priv.0+0x43c>)
 8007932:	0940      	lsrs	r0, r0, #5
 8007934:	f7ff f85c 	bl	80069f0 <__test_assert>
 8007938:	2800      	cmp	r0, #0
 800793a:	d131      	bne.n	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
    chHeapFree(p1);
 800793c:	4620      	mov	r0, r4
 800793e:	f7fe ffb7 	bl	80068b0 <chHeapFree>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 8007942:	f003 f805 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 8007946:	f080 0001 	eor.w	r0, r0, #1
 800794a:	492d      	ldr	r1, [pc, #180]	; (8007a00 <oslib_test_008_001_execute.lto_priv.0+0x440>)
 800794c:	b2c0      	uxtb	r0, r0
 800794e:	f7ff f84f 	bl	80069f0 <__test_assert>
 8007952:	4602      	mov	r2, r0
 8007954:	bb20      	cbnz	r0, 80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
  test_end_step(9);

  /* [8.1.10] Testing final conditions. The heap geometry must be the
     same than the one registered at beginning, finally, integrity is
     checked.*/
  test_set_step(10);
 8007956:	230a      	movs	r3, #10
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007958:	a901      	add	r1, sp, #4
 800795a:	4827      	ldr	r0, [pc, #156]	; (80079f8 <oslib_test_008_001_execute.lto_priv.0+0x438>)
  test_set_step(10);
 800795c:	603b      	str	r3, [r7, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800795e:	f7fe fac7 	bl	8005ef0 <chHeapStatus>
 8007962:	1e43      	subs	r3, r0, #1
 8007964:	4258      	negs	r0, r3
 8007966:	4158      	adcs	r0, r3
 8007968:	4926      	ldr	r1, [pc, #152]	; (8007a04 <oslib_test_008_001_execute.lto_priv.0+0x444>)
 800796a:	f7ff f841 	bl	80069f0 <__test_assert>
 800796e:	b9b8      	cbnz	r0, 80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
    test_assert(n == sz, "size changed");
 8007970:	9b01      	ldr	r3, [sp, #4]
 8007972:	4925      	ldr	r1, [pc, #148]	; (8007a08 <oslib_test_008_001_execute.lto_priv.0+0x448>)
 8007974:	ebb3 0fc5 	cmp.w	r3, r5, lsl #3
 8007978:	bf0c      	ite	eq
 800797a:	2001      	moveq	r0, #1
 800797c:	2000      	movne	r0, #0
 800797e:	f7ff f837 	bl	80069f0 <__test_assert>
 8007982:	b968      	cbnz	r0, 80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
    test_assert(!chHeapIntegrityCheck(&test_heap), "integrity failure");
 8007984:	f002 ffe4 	bl	800a950 <chHeapIntegrityCheck.constprop.0>
 8007988:	f080 0001 	eor.w	r0, r0, #1
 800798c:	491c      	ldr	r1, [pc, #112]	; (8007a00 <oslib_test_008_001_execute.lto_priv.0+0x440>)
 800798e:	b2c0      	uxtb	r0, r0
 8007990:	f7ff f82e 	bl	80069f0 <__test_assert>
 8007994:	e004      	b.n	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
  chtest.failure_message = msg;
 8007996:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <oslib_test_008_001_execute.lto_priv.0+0x440>)
 8007998:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800799a:	f240 1201 	movw	r2, #257	; 0x101
 800799e:	80ba      	strh	r2, [r7, #4]
  }
  test_end_step(10);
}
 80079a0:	b003      	add	sp, #12
 80079a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079a6:	f108 0014 	add.w	r0, r8, #20
 80079aa:	f7fe fa59 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 80079ae:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <oslib_test_008_001_execute.lto_priv.0+0x444>)
 80079b0:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80079b2:	f240 1201 	movw	r2, #257	; 0x101
 80079b6:	80ba      	strh	r2, [r7, #4]
 80079b8:	b003      	add	sp, #12
 80079ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <oslib_test_008_001_execute.lto_priv.0+0x44c>)
 80079c0:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80079c2:	f240 1201 	movw	r2, #257	; 0x101
 80079c6:	80ba      	strh	r2, [r7, #4]
 80079c8:	e7ea      	b.n	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
  chtest.failure_message = msg;
 80079ca:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <oslib_test_008_001_execute.lto_priv.0+0x434>)
 80079cc:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80079ce:	f240 1201 	movw	r2, #257	; 0x101
 80079d2:	80ba      	strh	r2, [r7, #4]
 80079d4:	e7e4      	b.n	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
 80079d6:	480e      	ldr	r0, [pc, #56]	; (8007a10 <oslib_test_008_001_execute.lto_priv.0+0x450>)
 80079d8:	f7fe fa42 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 80079dc:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <oslib_test_008_001_execute.lto_priv.0+0x454>)
 80079de:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80079e0:	f240 1201 	movw	r2, #257	; 0x101
 80079e4:	80ba      	strh	r2, [r7, #4]
 80079e6:	e7db      	b.n	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
  chtest.failure_message = msg;
 80079e8:	4b0b      	ldr	r3, [pc, #44]	; (8007a18 <oslib_test_008_001_execute.lto_priv.0+0x458>)
 80079ea:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80079ec:	f240 1201 	movw	r2, #257	; 0x101
 80079f0:	80ba      	strh	r2, [r7, #4]
 80079f2:	e7d5      	b.n	80079a0 <oslib_test_008_001_execute.lto_priv.0+0x3e0>
 80079f4:	0800bf2c 	.word	0x0800bf2c
 80079f8:	200016a0 	.word	0x200016a0
 80079fc:	0800be28 	.word	0x0800be28
 8007a00:	0800bf00 	.word	0x0800bf00
 8007a04:	0800bdc0 	.word	0x0800bdc0
 8007a08:	0800bf7c 	.word	0x0800bf7c
 8007a0c:	0800bf14 	.word	0x0800bf14
 8007a10:	200016b4 	.word	0x200016b4
 8007a14:	0800bf40 	.word	0x0800bf40
 8007a18:	0800bf54 	.word	0x0800bf54
 8007a1c:	00000000 	.word	0x00000000

08007a20 <test_printf>:
 * @param[in] fmt       formatting string
 * @return              The number of bytes written.
 *
 * @api
 */
int test_printf(const char *fmt, ...) {
 8007a20:	b40f      	push	{r0, r1, r2, r3}
 8007a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a26:	b087      	sub	sp, #28
 8007a28:	ab10      	add	r3, sp, #64	; 0x40
 8007a2a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8007a2e:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8007a30:	4627      	mov	r7, r4
 8007a32:	f817 0b01 	ldrb.w	r0, [r7], #1
    if (c == '\0') {
 8007a36:	2800      	cmp	r0, #0
 8007a38:	f000 81fc 	beq.w	8007e34 <test_printf+0x414>
 8007a3c:	4d89      	ldr	r5, [pc, #548]	; (8007c64 <test_printf+0x244>)
  n = 0;
 8007a3e:	f04f 0b00 	mov.w	fp, #0
 8007a42:	4699      	mov	r9, r3
 8007a44:	e00a      	b.n	8007a5c <test_printf+0x3c>
  if (chtest.putchar != NULL) {
 8007a46:	6a2b      	ldr	r3, [r5, #32]
 8007a48:	b103      	cbz	r3, 8007a4c <test_printf+0x2c>
    chtest.putchar(c);
 8007a4a:	4798      	blx	r3
      n++;
 8007a4c:	f10b 0b01 	add.w	fp, fp, #1
      continue;
 8007a50:	463c      	mov	r4, r7
    c = *fmt++;
 8007a52:	4627      	mov	r7, r4
 8007a54:	f817 0b01 	ldrb.w	r0, [r7], #1
    if (c == '\0') {
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d072      	beq.n	8007b42 <test_printf+0x122>
    if (c != '%') {
 8007a5c:	2825      	cmp	r0, #37	; 0x25
 8007a5e:	d1f2      	bne.n	8007a46 <test_printf+0x26>
    if (*fmt == '-') {
 8007a60:	7863      	ldrb	r3, [r4, #1]
 8007a62:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8007a64:	bf04      	itt	eq
 8007a66:	1ca7      	addeq	r7, r4, #2
      left_align = true;
 8007a68:	f04f 0c01 	moveq.w	ip, #1
    if (*fmt == '+') {
 8007a6c:	783b      	ldrb	r3, [r7, #0]
    left_align = false;
 8007a6e:	bf18      	it	ne
 8007a70:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '+') {
 8007a74:	2b2b      	cmp	r3, #43	; 0x2b
    if (*fmt == '0') {
 8007a76:	bf03      	ittte	eq
 8007a78:	787b      	ldrbeq	r3, [r7, #1]
      do_sign = true;
 8007a7a:	2601      	moveq	r6, #1
      fmt++;
 8007a7c:	3701      	addeq	r7, #1
    do_sign = false;
 8007a7e:	2600      	movne	r6, #0
    if (*fmt == '0') {
 8007a80:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 8007a82:	bf03      	ittte	eq
 8007a84:	3701      	addeq	r7, #1
      filler = '0';
 8007a86:	4698      	moveq	r8, r3
    if ( *fmt == '*') {
 8007a88:	783b      	ldrbeq	r3, [r7, #0]
    filler = ' ';
 8007a8a:	f04f 0820 	movne.w	r8, #32
    if ( *fmt == '*') {
 8007a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a90:	d147      	bne.n	8007b22 <test_printf+0x102>
      width = va_arg(ap, int);
 8007a92:	f859 2b04 	ldr.w	r2, [r9], #4
      c = *fmt++;
 8007a96:	787b      	ldrb	r3, [r7, #1]
 8007a98:	1cbc      	adds	r4, r7, #2
    if (c == '.') {
 8007a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a9c:	f000 8096 	beq.w	8007bcc <test_printf+0x1ac>
    precision = 0;
 8007aa0:	2000      	movs	r0, #0
    if ((c == 'l') || (c == 'L')) {
 8007aa2:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 8007aa6:	294c      	cmp	r1, #76	; 0x4c
 8007aa8:	d051      	beq.n	8007b4e <test_printf+0x12e>
    switch (c) {
 8007aaa:	f1a3 0744 	sub.w	r7, r3, #68	; 0x44
 8007aae:	2f34      	cmp	r7, #52	; 0x34
 8007ab0:	f200 8096 	bhi.w	8007be0 <test_printf+0x1c0>
 8007ab4:	e8df f017 	tbh	[pc, r7, lsl #1]
 8007ab8:	009400d8 	.word	0x009400d8
 8007abc:	00940094 	.word	0x00940094
 8007ac0:	00d80094 	.word	0x00d80094
 8007ac4:	00940094 	.word	0x00940094
 8007ac8:	00940094 	.word	0x00940094
 8007acc:	01430094 	.word	0x01430094
 8007ad0:	0094010a 	.word	0x0094010a
 8007ad4:	00940094 	.word	0x00940094
 8007ad8:	01b30094 	.word	0x01b30094
 8007adc:	00940094 	.word	0x00940094
 8007ae0:	0094010a 	.word	0x0094010a
 8007ae4:	00940094 	.word	0x00940094
 8007ae8:	00940094 	.word	0x00940094
 8007aec:	00940094 	.word	0x00940094
 8007af0:	00940094 	.word	0x00940094
 8007af4:	01650094 	.word	0x01650094
 8007af8:	009400d8 	.word	0x009400d8
 8007afc:	00940094 	.word	0x00940094
 8007b00:	00d80094 	.word	0x00d80094
 8007b04:	00940094 	.word	0x00940094
 8007b08:	00940094 	.word	0x00940094
 8007b0c:	01430094 	.word	0x01430094
 8007b10:	0094010a 	.word	0x0094010a
 8007b14:	01460094 	.word	0x01460094
 8007b18:	01b30094 	.word	0x01b30094
 8007b1c:	00940094 	.word	0x00940094
 8007b20:	010a      	.short	0x010a
        c = *fmt++;
 8007b22:	1c7c      	adds	r4, r7, #1
        if (c == '\0') {
 8007b24:	b16b      	cbz	r3, 8007b42 <test_printf+0x122>
      width = 0;
 8007b26:	2200      	movs	r2, #0
        if ((c >= '0') && (c <= '9')) {
 8007b28:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007b2c:	b2c9      	uxtb	r1, r1
 8007b2e:	2909      	cmp	r1, #9
          width = width * 10 + c;
 8007b30:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if ((c >= '0') && (c <= '9')) {
 8007b34:	d8b1      	bhi.n	8007a9a <test_printf+0x7a>
        c = *fmt++;
 8007b36:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 8007b3a:	eb01 0240 	add.w	r2, r1, r0, lsl #1
        if (c == '\0') {
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f2      	bne.n	8007b28 <test_printf+0x108>
  formatted_bytes = test_vprintf(fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8007b42:	4658      	mov	r0, fp
 8007b44:	b007      	add	sp, #28
 8007b46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	b004      	add	sp, #16
 8007b4c:	4770      	bx	lr
      c = *fmt++;
 8007b4e:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == '\0') {
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f5      	beq.n	8007b42 <test_printf+0x122>
    switch (c) {
 8007b56:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8007b5a:	2934      	cmp	r1, #52	; 0x34
 8007b5c:	d840      	bhi.n	8007be0 <test_printf+0x1c0>
 8007b5e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007b62:	0083      	.short	0x0083
 8007b64:	003f003f 	.word	0x003f003f
 8007b68:	003f003f 	.word	0x003f003f
 8007b6c:	003f0083 	.word	0x003f0083
 8007b70:	003f003f 	.word	0x003f003f
 8007b74:	003f003f 	.word	0x003f003f
 8007b78:	00b500ee 	.word	0x00b500ee
 8007b7c:	003f003f 	.word	0x003f003f
 8007b80:	003f003f 	.word	0x003f003f
 8007b84:	003f015e 	.word	0x003f015e
 8007b88:	00b5003f 	.word	0x00b5003f
 8007b8c:	003f003f 	.word	0x003f003f
 8007b90:	003f003f 	.word	0x003f003f
 8007b94:	003f003f 	.word	0x003f003f
 8007b98:	003f003f 	.word	0x003f003f
 8007b9c:	003f003f 	.word	0x003f003f
 8007ba0:	00830110 	.word	0x00830110
 8007ba4:	003f003f 	.word	0x003f003f
 8007ba8:	003f003f 	.word	0x003f003f
 8007bac:	003f0083 	.word	0x003f0083
 8007bb0:	003f003f 	.word	0x003f003f
 8007bb4:	003f003f 	.word	0x003f003f
 8007bb8:	00b500ee 	.word	0x00b500ee
 8007bbc:	003f003f 	.word	0x003f003f
 8007bc0:	003f00f1 	.word	0x003f00f1
 8007bc4:	003f015e 	.word	0x003f015e
 8007bc8:	00b5003f 	.word	0x00b5003f
      c = *fmt++;
 8007bcc:	7823      	ldrb	r3, [r4, #0]
      if (c == '\0') {
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0b7      	beq.n	8007b42 <test_printf+0x122>
      if (c == '*') {
 8007bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd4:	d134      	bne.n	8007c40 <test_printf+0x220>
        c = *fmt++;
 8007bd6:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8007bd8:	f859 0b04 	ldr.w	r0, [r9], #4
        c = *fmt++;
 8007bdc:	3402      	adds	r4, #2
 8007bde:	e760      	b.n	8007aa2 <test_printf+0x82>
      *p++ = c;
 8007be0:	3a01      	subs	r2, #1
 8007be2:	f88d 300c 	strb.w	r3, [sp, #12]
    if (width < 0) {
 8007be6:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
    if (left_align == false) {
 8007bea:	f1bc 0f00 	cmp.w	ip, #0
 8007bee:	f040 80d5 	bne.w	8007d9c <test_printf+0x37c>
    if (width < 0) {
 8007bf2:	2a00      	cmp	r2, #0
      width = -width;
 8007bf4:	f1c7 0700 	rsb	r7, r7, #0
    if (width < 0) {
 8007bf8:	f8cd c004 	str.w	ip, [sp, #4]
 8007bfc:	f300 80fc 	bgt.w	8007df8 <test_printf+0x3d8>
    if (left_align == false) {
 8007c00:	f10d 0a0c 	add.w	sl, sp, #12
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	4656      	mov	r6, sl
 8007c08:	449a      	add	sl, r3
  if (chtest.putchar != NULL) {
 8007c0a:	6a2b      	ldr	r3, [r5, #32]
      test_putchar(*s++);
 8007c0c:	3601      	adds	r6, #1
  if (chtest.putchar != NULL) {
 8007c0e:	b113      	cbz	r3, 8007c16 <test_printf+0x1f6>
    chtest.putchar(c);
 8007c10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007c14:	4798      	blx	r3
    while (--i >= 0) {
 8007c16:	ebaa 0306 	sub.w	r3, sl, r6
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	daf5      	bge.n	8007c0a <test_printf+0x1ea>
      n++;
 8007c1e:	9b01      	ldr	r3, [sp, #4]
 8007c20:	f10b 0b01 	add.w	fp, fp, #1
 8007c24:	445b      	add	r3, fp
 8007c26:	469b      	mov	fp, r3
    while (width) {
 8007c28:	2f00      	cmp	r7, #0
 8007c2a:	f43f af12 	beq.w	8007a52 <test_printf+0x32>
 8007c2e:	463e      	mov	r6, r7
  if (chtest.putchar != NULL) {
 8007c30:	6a2b      	ldr	r3, [r5, #32]
    chtest.putchar(c);
 8007c32:	4640      	mov	r0, r8
  if (chtest.putchar != NULL) {
 8007c34:	b103      	cbz	r3, 8007c38 <test_printf+0x218>
    chtest.putchar(c);
 8007c36:	4798      	blx	r3
    while (width) {
 8007c38:	3e01      	subs	r6, #1
 8007c3a:	d1f9      	bne.n	8007c30 <test_printf+0x210>
      n++;
 8007c3c:	44bb      	add	fp, r7
 8007c3e:	e708      	b.n	8007a52 <test_printf+0x32>
      c = *fmt++;
 8007c40:	3401      	adds	r4, #1
    precision = 0;
 8007c42:	2000      	movs	r0, #0
        while ((c >= '0') && (c <= '9')) {
 8007c44:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007c48:	b2c9      	uxtb	r1, r1
 8007c4a:	2909      	cmp	r1, #9
          precision = precision * 10 + c;
 8007c4c:	eb00 0780 	add.w	r7, r0, r0, lsl #2
        while ((c >= '0') && (c <= '9')) {
 8007c50:	f63f af27 	bhi.w	8007aa2 <test_printf+0x82>
          c = *fmt++;
 8007c54:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8007c58:	eb01 0047 	add.w	r0, r1, r7, lsl #1
          if (c == '\0') {
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f1      	bne.n	8007c44 <test_printf+0x224>
 8007c60:	e76f      	b.n	8007b42 <test_printf+0x122>
 8007c62:	bf00      	nop
 8007c64:	20000ab4 	.word	0x20000ab4
        arg = va_arg(ap, int);
 8007c68:	f859 0b04 	ldr.w	r0, [r9], #4
      if (arg < 0) {
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	f2c0 80bb 	blt.w	8007de8 <test_printf+0x3c8>
        if (do_sign) {
 8007c72:	2e00      	cmp	r6, #0
 8007c74:	f000 80db 	beq.w	8007e2e <test_printf+0x40e>
          *p++ = '+';
 8007c78:	232b      	movs	r3, #43	; 0x2b
 8007c7a:	f88d 300c 	strb.w	r3, [sp, #12]
 8007c7e:	f10d 070d 	add.w	r7, sp, #13
 8007c82:	ab03      	add	r3, sp, #12
  q = p + MAX_FILLER;
 8007c84:	f107 010b 	add.w	r1, r7, #11
 8007c88:	9101      	str	r1, [sp, #4]
 8007c8a:	460e      	mov	r6, r1
    c = (int)(l % (long)radix);
 8007c8c:	496e      	ldr	r1, [pc, #440]	; (8007e48 <test_printf+0x428>)
 8007c8e:	fba1 e100 	umull	lr, r1, r1, r0
 8007c92:	08c9      	lsrs	r1, r1, #3
 8007c94:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
 8007c98:	468e      	mov	lr, r1
 8007c9a:	eba0 014a 	sub.w	r1, r0, sl, lsl #1
    c += '0';
 8007c9e:	3130      	adds	r1, #48	; 0x30
    *--q = (char)c;
 8007ca0:	b2c9      	uxtb	r1, r1
  } while (ll != 0);
 8007ca2:	4670      	mov	r0, lr
    *--q = (char)c;
 8007ca4:	f806 1d01 	strb.w	r1, [r6, #-1]!
  } while (ll != 0);
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d1ef      	bne.n	8007c8c <test_printf+0x26c>
  i = (int)(p + MAX_FILLER - q);
 8007cac:	9801      	ldr	r0, [sp, #4]
 8007cae:	1b80      	subs	r0, r0, r6
 8007cb0:	4438      	add	r0, r7
 8007cb2:	e001      	b.n	8007cb8 <test_printf+0x298>
    *p++ = *q++;
 8007cb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cb8:	f807 1b01 	strb.w	r1, [r7], #1
  } while (--i);
 8007cbc:	42b8      	cmp	r0, r7
 8007cbe:	d1f9      	bne.n	8007cb4 <test_printf+0x294>
    i = (int)(p - s);
 8007cc0:	1ac0      	subs	r0, r0, r3
        i--;
 8007cc2:	1e41      	subs	r1, r0, #1
    width -= i;
 8007cc4:	1a12      	subs	r2, r2, r0
        i--;
 8007cc6:	9101      	str	r1, [sp, #4]
    s = tmpbuf;
 8007cc8:	469a      	mov	sl, r3
 8007cca:	e02a      	b.n	8007d22 <test_printf+0x302>
      radix = 16;
 8007ccc:	f04f 0e10 	mov.w	lr, #16
        arg = va_arg(ap, unsigned int);
 8007cd0:	f859 3b04 	ldr.w	r3, [r9], #4
    switch (c) {
 8007cd4:	f10d 0017 	add.w	r0, sp, #23
 8007cd8:	e000      	b.n	8007cdc <test_printf+0x2bc>
 8007cda:	4630      	mov	r0, r6
    c = (int)(l % (long)radix);
 8007cdc:	fb93 f7fe 	sdiv	r7, r3, lr
 8007ce0:	fb0e 3317 	mls	r3, lr, r7, r3
    c += '0';
 8007ce4:	f103 0130 	add.w	r1, r3, #48	; 0x30
    if (c > '9') {
 8007ce8:	2939      	cmp	r1, #57	; 0x39
      c += ('A' - '0') - 10;
 8007cea:	bfc8      	it	gt
 8007cec:	f103 0137 	addgt.w	r1, r3, #55	; 0x37
    *--q = (char)c;
 8007cf0:	b2c9      	uxtb	r1, r1
 8007cf2:	1e46      	subs	r6, r0, #1
 8007cf4:	f800 1c01 	strb.w	r1, [r0, #-1]
    l /= radix;
 8007cf8:	463b      	mov	r3, r7
  } while (ll != 0);
 8007cfa:	2f00      	cmp	r7, #0
 8007cfc:	d1ed      	bne.n	8007cda <test_printf+0x2ba>
  i = (int)(p + MAX_FILLER - q);
 8007cfe:	f10d 0317 	add.w	r3, sp, #23
 8007d02:	1b9e      	subs	r6, r3, r6
 8007d04:	ab03      	add	r3, sp, #12
 8007d06:	f10d 0e17 	add.w	lr, sp, #23
 8007d0a:	461f      	mov	r7, r3
 8007d0c:	e001      	b.n	8007d12 <test_printf+0x2f2>
    *p++ = *q++;
 8007d0e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007d12:	f807 1b01 	strb.w	r1, [r7], #1
  } while (--i);
 8007d16:	4586      	cmp	lr, r0
 8007d18:	d1f9      	bne.n	8007d0e <test_printf+0x2ee>
        i--;
 8007d1a:	1e71      	subs	r1, r6, #1
    width -= i;
 8007d1c:	1b92      	subs	r2, r2, r6
        i--;
 8007d1e:	9101      	str	r1, [sp, #4]
    s = tmpbuf;
 8007d20:	469a      	mov	sl, r3
    if (width < 0) {
 8007d22:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
    if (left_align == false) {
 8007d26:	f1bc 0f00 	cmp.w	ip, #0
 8007d2a:	d103      	bne.n	8007d34 <test_printf+0x314>
    if (width < 0) {
 8007d2c:	2a00      	cmp	r2, #0
      width = -width;
 8007d2e:	f1c7 0700 	rsb	r7, r7, #0
    if (width < 0) {
 8007d32:	dc36      	bgt.n	8007da2 <test_printf+0x382>
    while (--i >= 0) {
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f6bf af64 	bge.w	8007c04 <test_printf+0x1e4>
 8007d3c:	e774      	b.n	8007c28 <test_printf+0x208>
      radix = 8;
 8007d3e:	f04f 0e08 	mov.w	lr, #8
 8007d42:	e7c5      	b.n	8007cd0 <test_printf+0x2b0>
      if ((s = va_arg(ap, char *)) == NULL) {
 8007d44:	f859 ab04 	ldr.w	sl, [r9], #4
 8007d48:	f1ba 0f00 	cmp.w	sl, #0
 8007d4c:	d06a      	beq.n	8007e24 <test_printf+0x404>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 8007d4e:	f89a 1000 	ldrb.w	r1, [sl]
      if (precision == 0) {
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d154      	bne.n	8007e00 <test_printf+0x3e0>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 8007d56:	2900      	cmp	r1, #0
 8007d58:	d055      	beq.n	8007e06 <test_printf+0x3e6>
 8007d5a:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8007d5e:	4651      	mov	r1, sl
 8007d60:	e001      	b.n	8007d66 <test_printf+0x346>
 8007d62:	42c6      	cmn	r6, r0
 8007d64:	d405      	bmi.n	8007d72 <test_printf+0x352>
 8007d66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d6a:	ebaa 0601 	sub.w	r6, sl, r1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f7      	bne.n	8007d62 <test_printf+0x342>
    i = (int)(p - s);
 8007d72:	eba1 010a 	sub.w	r1, r1, sl
        i--;
 8007d76:	1e4b      	subs	r3, r1, #1
    width -= i;
 8007d78:	1a52      	subs	r2, r2, r1
        i--;
 8007d7a:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8007d7c:	f04f 0820 	mov.w	r8, #32
 8007d80:	e7cf      	b.n	8007d22 <test_printf+0x302>
      *p++ = va_arg(ap, int);
 8007d82:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d86:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8007d8a:	3a01      	subs	r2, #1
      filler = ' ';
 8007d8c:	f04f 0820 	mov.w	r8, #32
    if (width < 0) {
 8007d90:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
    if (left_align == false) {
 8007d94:	f1bc 0f00 	cmp.w	ip, #0
 8007d98:	f43f af2b 	beq.w	8007bf2 <test_printf+0x1d2>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	e72e      	b.n	8007c00 <test_printf+0x1e0>
      width = -width;
 8007da2:	463e      	mov	r6, r7
      if (((*s == '-') || (*s == '+')) && (filler == '0')) {
 8007da4:	f89a 0000 	ldrb.w	r0, [sl]
 8007da8:	282d      	cmp	r0, #45	; 0x2d
 8007daa:	d00e      	beq.n	8007dca <test_printf+0x3aa>
 8007dac:	282b      	cmp	r0, #43	; 0x2b
 8007dae:	d00c      	beq.n	8007dca <test_printf+0x3aa>
  if (chtest.putchar != NULL) {
 8007db0:	6a2a      	ldr	r2, [r5, #32]
    chtest.putchar(c);
 8007db2:	4640      	mov	r0, r8
  if (chtest.putchar != NULL) {
 8007db4:	b102      	cbz	r2, 8007db8 <test_printf+0x398>
    chtest.putchar(c);
 8007db6:	4790      	blx	r2
      } while (++width != 0);
 8007db8:	3701      	adds	r7, #1
 8007dba:	d1f9      	bne.n	8007db0 <test_printf+0x390>
    while (--i >= 0) {
 8007dbc:	9b01      	ldr	r3, [sp, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	ebab 0b06 	sub.w	fp, fp, r6
 8007dc4:	f6bf af1e 	bge.w	8007c04 <test_printf+0x1e4>
 8007dc8:	e643      	b.n	8007a52 <test_printf+0x32>
      if (((*s == '-') || (*s == '+')) && (filler == '0')) {
 8007dca:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8007dce:	d1ef      	bne.n	8007db0 <test_printf+0x390>
  if (chtest.putchar != NULL) {
 8007dd0:	6a2a      	ldr	r2, [r5, #32]
        test_putchar(*s++);
 8007dd2:	f10a 0a01 	add.w	sl, sl, #1
  if (chtest.putchar != NULL) {
 8007dd6:	b10a      	cbz	r2, 8007ddc <test_printf+0x3bc>
    chtest.putchar(c);
 8007dd8:	4790      	blx	r2
  if (chtest.putchar != NULL) {
 8007dda:	6a2a      	ldr	r2, [r5, #32]
    while (--i >= 0) {
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	3b01      	subs	r3, #1
        n++;
 8007de0:	f10b 0b01 	add.w	fp, fp, #1
    while (--i >= 0) {
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	e7e4      	b.n	8007db2 <test_printf+0x392>
        *p++ = '-';
 8007de8:	232d      	movs	r3, #45	; 0x2d
 8007dea:	f88d 300c 	strb.w	r3, [sp, #12]
        arg = -arg;
 8007dee:	4240      	negs	r0, r0
        *p++ = '-';
 8007df0:	f10d 070d 	add.w	r7, sp, #13
 8007df4:	ab03      	add	r3, sp, #12
 8007df6:	e745      	b.n	8007c84 <test_printf+0x264>
      width = -width;
 8007df8:	463e      	mov	r6, r7
    if (width < 0) {
 8007dfa:	f10d 0a0c 	add.w	sl, sp, #12
 8007dfe:	e7d1      	b.n	8007da4 <test_printf+0x384>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 8007e00:	b109      	cbz	r1, 8007e06 <test_printf+0x3e6>
 8007e02:	3801      	subs	r0, #1
 8007e04:	d5ab      	bpl.n	8007d5e <test_printf+0x33e>
    if (width < 0) {
 8007e06:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
    if (left_align == false) {
 8007e0a:	f1bc 0f00 	cmp.w	ip, #0
 8007e0e:	d103      	bne.n	8007e18 <test_printf+0x3f8>
    if (width < 0) {
 8007e10:	2a00      	cmp	r2, #0
      width = -width;
 8007e12:	f1c7 0700 	rsb	r7, r7, #0
    if (width < 0) {
 8007e16:	dc0f      	bgt.n	8007e38 <test_printf+0x418>
    if (left_align == false) {
 8007e18:	f04f 0820 	mov.w	r8, #32
 8007e1c:	e704      	b.n	8007c28 <test_printf+0x208>
    switch (c) {
 8007e1e:	f04f 0e0a 	mov.w	lr, #10
 8007e22:	e755      	b.n	8007cd0 <test_printf+0x2b0>
        s = "(null)";
 8007e24:	f8df a024 	ldr.w	sl, [pc, #36]	; 8007e4c <test_printf+0x42c>
      if (precision == 0) {
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d096      	beq.n	8007d5a <test_printf+0x33a>
 8007e2c:	e7e9      	b.n	8007e02 <test_printf+0x3e2>
    p = tmpbuf;
 8007e2e:	ab03      	add	r3, sp, #12
 8007e30:	461f      	mov	r7, r3
 8007e32:	e727      	b.n	8007c84 <test_printf+0x264>
  n = 0;
 8007e34:	4683      	mov	fp, r0
  return formatted_bytes;
 8007e36:	e684      	b.n	8007b42 <test_printf+0x122>
    if (width < 0) {
 8007e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      width = -width;
 8007e3c:	463e      	mov	r6, r7
    if (width < 0) {
 8007e3e:	f04f 0820 	mov.w	r8, #32
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	e7ae      	b.n	8007da4 <test_printf+0x384>
 8007e46:	bf00      	nop
 8007e48:	cccccccd 	.word	0xcccccccd
 8007e4c:	0800bf8c 	.word	0x0800bf8c

08007e50 <rt_test_001_001_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.1.1] Prints the version string.
 * .
 */

static void rt_test_001_001_execute(void) {
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @api
 */
static inline void test_print(const char *msgp) {

  test_printf("%s", msgp);
 8007e52:	4d26      	ldr	r5, [pc, #152]	; (8007eec <rt_test_001_001_execute.lto_priv.0+0x9c>)

  /* [1.1.1] Prints the version string.*/
  test_set_step(1);
 8007e54:	4b26      	ldr	r3, [pc, #152]	; (8007ef0 <rt_test_001_001_execute.lto_priv.0+0xa0>)
 *
 * @api
 */
static inline void test_println(const char *msgp) {

  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e56:	4c27      	ldr	r4, [pc, #156]	; (8007ef4 <rt_test_001_001_execute.lto_priv.0+0xa4>)
  test_printf("%s", msgp);
 8007e58:	4927      	ldr	r1, [pc, #156]	; (8007ef8 <rt_test_001_001_execute.lto_priv.0+0xa8>)
  test_printf("%u", n);
 8007e5a:	4f28      	ldr	r7, [pc, #160]	; (8007efc <rt_test_001_001_execute.lto_priv.0+0xac>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e5c:	4e28      	ldr	r6, [pc, #160]	; (8007f00 <rt_test_001_001_execute.lto_priv.0+0xb0>)
 8007e5e:	2201      	movs	r2, #1
  test_printf("%s", msgp);
 8007e60:	4628      	mov	r0, r5
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	f7ff fddc 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e68:	4926      	ldr	r1, [pc, #152]	; (8007f04 <rt_test_001_001_execute.lto_priv.0+0xb4>)
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f7ff fdd8 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007e70:	4925      	ldr	r1, [pc, #148]	; (8007f08 <rt_test_001_001_execute.lto_priv.0+0xb8>)
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7ff fdd4 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e78:	4924      	ldr	r1, [pc, #144]	; (8007f0c <rt_test_001_001_execute.lto_priv.0+0xbc>)
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f7ff fdd0 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007e80:	4923      	ldr	r1, [pc, #140]	; (8007f10 <rt_test_001_001_execute.lto_priv.0+0xc0>)
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7ff fdcc 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e88:	4922      	ldr	r1, [pc, #136]	; (8007f14 <rt_test_001_001_execute.lto_priv.0+0xc4>)
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7ff fdc8 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007e90:	4921      	ldr	r1, [pc, #132]	; (8007f18 <rt_test_001_001_execute.lto_priv.0+0xc8>)
 8007e92:	4628      	mov	r0, r5
 8007e94:	f7ff fdc4 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e98:	4920      	ldr	r1, [pc, #128]	; (8007f1c <rt_test_001_001_execute.lto_priv.0+0xcc>)
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f7ff fdc0 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007ea0:	491f      	ldr	r1, [pc, #124]	; (8007f20 <rt_test_001_001_execute.lto_priv.0+0xd0>)
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f7ff fdbc 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8007ea8:	2104      	movs	r1, #4
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7ff fdb8 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f7ff fdb4 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007eb8:	491a      	ldr	r1, [pc, #104]	; (8007f24 <rt_test_001_001_execute.lto_priv.0+0xd4>)
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f7ff fdb0 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8007ec0:	2120      	movs	r1, #32
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f7ff fdac 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f7ff fda8 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007ed0:	4915      	ldr	r1, [pc, #84]	; (8007f28 <rt_test_001_001_execute.lto_priv.0+0xd8>)
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7ff fda4 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8007ed8:	2120      	movs	r1, #32
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7ff fda0 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4620      	mov	r0, r4
    test_printn(PORT_WORKING_AREA_ALIGN);
    test_println("");
#endif
  }
  test_end_step(1);
}
 8007ee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ee8:	f7ff bd9a 	b.w	8007a20 <test_printf>
 8007eec:	0800bfc0 	.word	0x0800bfc0
 8007ef0:	20000ab4 	.word	0x20000ab4
 8007ef4:	0800cdf8 	.word	0x0800cdf8
 8007ef8:	0800bf94 	.word	0x0800bf94
 8007efc:	0800c0c4 	.word	0x0800c0c4
 8007f00:	0800ce10 	.word	0x0800ce10
 8007f04:	0800bfc4 	.word	0x0800bfc4
 8007f08:	0800bfd0 	.word	0x0800bfd0
 8007f0c:	0800bffc 	.word	0x0800bffc
 8007f10:	0800c008 	.word	0x0800c008
 8007f14:	0800c034 	.word	0x0800c034
 8007f18:	0800c054 	.word	0x0800c054
 8007f1c:	0800c080 	.word	0x0800c080
 8007f20:	0800c098 	.word	0x0800c098
 8007f24:	0800c0c8 	.word	0x0800c0c8
 8007f28:	0800c0f4 	.word	0x0800c0f4
 8007f2c:	00000000 	.word	0x00000000

08007f30 <oslib_test_001_001_execute.lto_priv.0>:
 8007f30:	f7ff bf8e 	b.w	8007e50 <rt_test_001_001_execute.lto_priv.0>
	...

08007f40 <rt_test_001_002_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void rt_test_001_002_execute(void) {
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	4c22      	ldr	r4, [pc, #136]	; (8007fcc <rt_test_001_002_execute.lto_priv.0+0x8c>)

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8007f44:	4b22      	ldr	r3, [pc, #136]	; (8007fd0 <rt_test_001_002_execute.lto_priv.0+0x90>)
  test_printf("%s", msgp);
 8007f46:	4d23      	ldr	r5, [pc, #140]	; (8007fd4 <rt_test_001_002_execute.lto_priv.0+0x94>)
  test_printf("%u", n);
 8007f48:	4f23      	ldr	r7, [pc, #140]	; (8007fd8 <rt_test_001_002_execute.lto_priv.0+0x98>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f4a:	4924      	ldr	r1, [pc, #144]	; (8007fdc <rt_test_001_002_execute.lto_priv.0+0x9c>)
 8007f4c:	4e24      	ldr	r6, [pc, #144]	; (8007fe0 <rt_test_001_002_execute.lto_priv.0+0xa0>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4620      	mov	r0, r4
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	f7ff fd64 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007f58:	4922      	ldr	r1, [pc, #136]	; (8007fe4 <rt_test_001_002_execute.lto_priv.0+0xa4>)
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f7ff fd60 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8007f60:	2100      	movs	r1, #0
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7ff fd5c 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f7ff fd58 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007f70:	491d      	ldr	r1, [pc, #116]	; (8007fe8 <rt_test_001_002_execute.lto_priv.0+0xa8>)
 8007f72:	4628      	mov	r0, r5
 8007f74:	f7ff fd54 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f78:	491c      	ldr	r1, [pc, #112]	; (8007fec <rt_test_001_002_execute.lto_priv.0+0xac>)
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7ff fd50 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007f80:	491b      	ldr	r1, [pc, #108]	; (8007ff0 <rt_test_001_002_execute.lto_priv.0+0xb0>)
 8007f82:	4628      	mov	r0, r5
 8007f84:	f7ff fd4c 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8007f88:	2108      	movs	r1, #8
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f7ff fd48 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f90:	4631      	mov	r1, r6
 8007f92:	4620      	mov	r0, r4
 8007f94:	f7ff fd44 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007f98:	4916      	ldr	r1, [pc, #88]	; (8007ff4 <rt_test_001_002_execute.lto_priv.0+0xb4>)
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f7ff fd40 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	f7ff fd3c 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4620      	mov	r0, r4
 8007fac:	f7ff fd38 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8007fb0:	4911      	ldr	r1, [pc, #68]	; (8007ff8 <rt_test_001_002_execute.lto_priv.0+0xb8>)
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f7ff fd34 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8007fb8:	2100      	movs	r1, #0
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff fd30 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4620      	mov	r0, r4
    test_print("--- Patch Number:                       ");
    test_printn(CH_KERNEL_PATCH);
    test_println("");
  }
  test_end_step(1);
}
 8007fc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007fc8:	f7ff bd2a 	b.w	8007a20 <test_printf>
 8007fcc:	0800cdf8 	.word	0x0800cdf8
 8007fd0:	20000ab4 	.word	0x20000ab4
 8007fd4:	0800bfc0 	.word	0x0800bfc0
 8007fd8:	0800c0c4 	.word	0x0800c0c4
 8007fdc:	0800c120 	.word	0x0800c120
 8007fe0:	0800ce10 	.word	0x0800ce10
 8007fe4:	0800c154 	.word	0x0800c154
 8007fe8:	0800c180 	.word	0x0800c180
 8007fec:	0800c1ac 	.word	0x0800c1ac
 8007ff0:	0800c1b4 	.word	0x0800c1b4
 8007ff4:	0800c1e0 	.word	0x0800c1e0
 8007ff8:	0800c20c 	.word	0x0800c20c
 8007ffc:	00000000 	.word	0x00000000

08008000 <rt_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8008000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_printf("%s", msgp);
 8008004:	4fd1      	ldr	r7, [pc, #836]	; (800834c <rt_test_001_003_execute.lto_priv.0+0x34c>)
  test_printf("%u", n);
 8008006:	4ed2      	ldr	r6, [pc, #840]	; (8008350 <rt_test_001_003_execute.lto_priv.0+0x350>)

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8008008:	4bd2      	ldr	r3, [pc, #840]	; (8008354 <rt_test_001_003_execute.lto_priv.0+0x354>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800800a:	4dd3      	ldr	r5, [pc, #844]	; (8008358 <rt_test_001_003_execute.lto_priv.0+0x358>)
 800800c:	4cd3      	ldr	r4, [pc, #844]	; (800835c <rt_test_001_003_execute.lto_priv.0+0x35c>)
  test_printf("%s", msgp);
 800800e:	49d4      	ldr	r1, [pc, #848]	; (8008360 <rt_test_001_003_execute.lto_priv.0+0x360>)
 8008010:	f04f 0801 	mov.w	r8, #1
 8008014:	4638      	mov	r0, r7
 8008016:	f8c3 8000 	str.w	r8, [r3]
 800801a:	f7ff fd01 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800801e:	2100      	movs	r1, #0
 8008020:	4630      	mov	r0, r6
 8008022:	f7ff fcfd 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008026:	4629      	mov	r1, r5
 8008028:	4620      	mov	r0, r4
 800802a:	f7ff fcf9 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800802e:	49cd      	ldr	r1, [pc, #820]	; (8008364 <rt_test_001_003_execute.lto_priv.0+0x364>)
 8008030:	4638      	mov	r0, r7
 8008032:	f7ff fcf5 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008036:	2100      	movs	r1, #0
 8008038:	4630      	mov	r0, r6
 800803a:	f7ff fcf1 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800803e:	4629      	mov	r1, r5
 8008040:	4620      	mov	r0, r4
 8008042:	f7ff fced 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008046:	49c8      	ldr	r1, [pc, #800]	; (8008368 <rt_test_001_003_execute.lto_priv.0+0x368>)
 8008048:	4638      	mov	r0, r7
 800804a:	f7ff fce9 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800804e:	2120      	movs	r1, #32
 8008050:	4630      	mov	r0, r6
 8008052:	f7ff fce5 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008056:	4629      	mov	r1, r5
 8008058:	4620      	mov	r0, r4
 800805a:	f7ff fce1 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800805e:	49c3      	ldr	r1, [pc, #780]	; (800836c <rt_test_001_003_execute.lto_priv.0+0x36c>)
 8008060:	4638      	mov	r0, r7
 8008062:	f7ff fcdd 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008066:	f242 7110 	movw	r1, #10000	; 0x2710
 800806a:	4630      	mov	r0, r6
 800806c:	f7ff fcd8 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008070:	4629      	mov	r1, r5
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff fcd4 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008078:	49bd      	ldr	r1, [pc, #756]	; (8008370 <rt_test_001_003_execute.lto_priv.0+0x370>)
 800807a:	4638      	mov	r0, r7
 800807c:	f7ff fcd0 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008080:	2120      	movs	r1, #32
 8008082:	4630      	mov	r0, r6
 8008084:	f7ff fccc 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008088:	4629      	mov	r1, r5
 800808a:	4620      	mov	r0, r4
 800808c:	f7ff fcc8 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008090:	49b8      	ldr	r1, [pc, #736]	; (8008374 <rt_test_001_003_execute.lto_priv.0+0x374>)
 8008092:	4638      	mov	r0, r7
 8008094:	f7ff fcc4 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008098:	2120      	movs	r1, #32
 800809a:	4630      	mov	r0, r6
 800809c:	f7ff fcc0 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80080a0:	4629      	mov	r1, r5
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7ff fcbc 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80080a8:	49b3      	ldr	r1, [pc, #716]	; (8008378 <rt_test_001_003_execute.lto_priv.0+0x378>)
 80080aa:	4638      	mov	r0, r7
 80080ac:	f7ff fcb8 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80080b0:	2102      	movs	r1, #2
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff fcb4 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80080b8:	4629      	mov	r1, r5
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7ff fcb0 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80080c0:	49ae      	ldr	r1, [pc, #696]	; (800837c <rt_test_001_003_execute.lto_priv.0+0x37c>)
 80080c2:	4638      	mov	r0, r7
 80080c4:	f7ff fcac 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80080c8:	2100      	movs	r1, #0
 80080ca:	4630      	mov	r0, r6
 80080cc:	f7ff fca8 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80080d0:	4629      	mov	r1, r5
 80080d2:	4620      	mov	r0, r4
 80080d4:	f7ff fca4 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80080d8:	49a9      	ldr	r1, [pc, #676]	; (8008380 <rt_test_001_003_execute.lto_priv.0+0x380>)
 80080da:	4638      	mov	r0, r7
 80080dc:	f7ff fca0 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80080e0:	2100      	movs	r1, #0
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7ff fc9c 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80080e8:	4629      	mov	r1, r5
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7ff fc98 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80080f0:	49a4      	ldr	r1, [pc, #656]	; (8008384 <rt_test_001_003_execute.lto_priv.0+0x384>)
 80080f2:	4638      	mov	r0, r7
 80080f4:	f7ff fc94 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80080f8:	4641      	mov	r1, r8
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7ff fc90 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008100:	4629      	mov	r1, r5
 8008102:	4620      	mov	r0, r4
 8008104:	f7ff fc8c 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008108:	499f      	ldr	r1, [pc, #636]	; (8008388 <rt_test_001_003_execute.lto_priv.0+0x388>)
 800810a:	4638      	mov	r0, r7
 800810c:	f7ff fc88 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008110:	4641      	mov	r1, r8
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff fc84 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008118:	4629      	mov	r1, r5
 800811a:	4620      	mov	r0, r4
 800811c:	f7ff fc80 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008120:	499a      	ldr	r1, [pc, #616]	; (800838c <rt_test_001_003_execute.lto_priv.0+0x38c>)
 8008122:	4638      	mov	r0, r7
 8008124:	f7ff fc7c 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008128:	4641      	mov	r1, r8
 800812a:	4630      	mov	r0, r6
 800812c:	f7ff fc78 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008130:	4629      	mov	r1, r5
 8008132:	4620      	mov	r0, r4
 8008134:	f7ff fc74 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008138:	4995      	ldr	r1, [pc, #596]	; (8008390 <rt_test_001_003_execute.lto_priv.0+0x390>)
 800813a:	4638      	mov	r0, r7
 800813c:	f7ff fc70 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008140:	4641      	mov	r1, r8
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff fc6c 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008148:	4629      	mov	r1, r5
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff fc68 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008150:	4990      	ldr	r1, [pc, #576]	; (8008394 <rt_test_001_003_execute.lto_priv.0+0x394>)
 8008152:	4638      	mov	r0, r7
 8008154:	f7ff fc64 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008158:	4641      	mov	r1, r8
 800815a:	4630      	mov	r0, r6
 800815c:	f7ff fc60 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008160:	4629      	mov	r1, r5
 8008162:	4620      	mov	r0, r4
 8008164:	f7ff fc5c 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008168:	498b      	ldr	r1, [pc, #556]	; (8008398 <rt_test_001_003_execute.lto_priv.0+0x398>)
 800816a:	4638      	mov	r0, r7
 800816c:	f7ff fc58 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008170:	4641      	mov	r1, r8
 8008172:	4630      	mov	r0, r6
 8008174:	f7ff fc54 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008178:	4629      	mov	r1, r5
 800817a:	4620      	mov	r0, r4
 800817c:	f7ff fc50 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008180:	4986      	ldr	r1, [pc, #536]	; (800839c <rt_test_001_003_execute.lto_priv.0+0x39c>)
 8008182:	4638      	mov	r0, r7
 8008184:	f7ff fc4c 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008188:	2100      	movs	r1, #0
 800818a:	4630      	mov	r0, r6
 800818c:	f7ff fc48 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008190:	4629      	mov	r1, r5
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff fc44 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008198:	4981      	ldr	r1, [pc, #516]	; (80083a0 <rt_test_001_003_execute.lto_priv.0+0x3a0>)
 800819a:	4638      	mov	r0, r7
 800819c:	f7ff fc40 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80081a0:	4641      	mov	r1, r8
 80081a2:	4630      	mov	r0, r6
 80081a4:	f7ff fc3c 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80081a8:	4629      	mov	r1, r5
 80081aa:	4620      	mov	r0, r4
 80081ac:	f7ff fc38 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80081b0:	497c      	ldr	r1, [pc, #496]	; (80083a4 <rt_test_001_003_execute.lto_priv.0+0x3a4>)
 80081b2:	4638      	mov	r0, r7
 80081b4:	f7ff fc34 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80081b8:	2100      	movs	r1, #0
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff fc30 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80081c0:	4629      	mov	r1, r5
 80081c2:	4620      	mov	r0, r4
 80081c4:	f7ff fc2c 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80081c8:	4977      	ldr	r1, [pc, #476]	; (80083a8 <rt_test_001_003_execute.lto_priv.0+0x3a8>)
 80081ca:	4638      	mov	r0, r7
 80081cc:	f7ff fc28 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80081d0:	4641      	mov	r1, r8
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7ff fc24 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80081d8:	4629      	mov	r1, r5
 80081da:	4620      	mov	r0, r4
 80081dc:	f7ff fc20 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80081e0:	4972      	ldr	r1, [pc, #456]	; (80083ac <rt_test_001_003_execute.lto_priv.0+0x3ac>)
 80081e2:	4638      	mov	r0, r7
 80081e4:	f7ff fc1c 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80081e8:	4641      	mov	r1, r8
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7ff fc18 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80081f0:	4629      	mov	r1, r5
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7ff fc14 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80081f8:	496d      	ldr	r1, [pc, #436]	; (80083b0 <rt_test_001_003_execute.lto_priv.0+0x3b0>)
 80081fa:	4638      	mov	r0, r7
 80081fc:	f7ff fc10 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008200:	4641      	mov	r1, r8
 8008202:	4630      	mov	r0, r6
 8008204:	f7ff fc0c 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008208:	4629      	mov	r1, r5
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff fc08 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008210:	4968      	ldr	r1, [pc, #416]	; (80083b4 <rt_test_001_003_execute.lto_priv.0+0x3b4>)
 8008212:	4638      	mov	r0, r7
 8008214:	f7ff fc04 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008218:	4641      	mov	r1, r8
 800821a:	4630      	mov	r0, r6
 800821c:	f7ff fc00 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008220:	4629      	mov	r1, r5
 8008222:	4620      	mov	r0, r4
 8008224:	f7ff fbfc 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008228:	4963      	ldr	r1, [pc, #396]	; (80083b8 <rt_test_001_003_execute.lto_priv.0+0x3b8>)
 800822a:	4638      	mov	r0, r7
 800822c:	f7ff fbf8 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008230:	4641      	mov	r1, r8
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff fbf4 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008238:	4629      	mov	r1, r5
 800823a:	4620      	mov	r0, r4
 800823c:	f7ff fbf0 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008240:	495e      	ldr	r1, [pc, #376]	; (80083bc <rt_test_001_003_execute.lto_priv.0+0x3bc>)
 8008242:	4638      	mov	r0, r7
 8008244:	f7ff fbec 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008248:	2100      	movs	r1, #0
 800824a:	4630      	mov	r0, r6
 800824c:	f7ff fbe8 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008250:	4629      	mov	r1, r5
 8008252:	4620      	mov	r0, r4
 8008254:	f7ff fbe4 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008258:	4959      	ldr	r1, [pc, #356]	; (80083c0 <rt_test_001_003_execute.lto_priv.0+0x3c0>)
 800825a:	4638      	mov	r0, r7
 800825c:	f7ff fbe0 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008260:	4641      	mov	r1, r8
 8008262:	4630      	mov	r0, r6
 8008264:	f7ff fbdc 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008268:	4629      	mov	r1, r5
 800826a:	4620      	mov	r0, r4
 800826c:	f7ff fbd8 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008270:	4954      	ldr	r1, [pc, #336]	; (80083c4 <rt_test_001_003_execute.lto_priv.0+0x3c4>)
 8008272:	4638      	mov	r0, r7
 8008274:	f7ff fbd4 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008278:	2100      	movs	r1, #0
 800827a:	4630      	mov	r0, r6
 800827c:	f7ff fbd0 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008280:	4629      	mov	r1, r5
 8008282:	4620      	mov	r0, r4
 8008284:	f7ff fbcc 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008288:	494f      	ldr	r1, [pc, #316]	; (80083c8 <rt_test_001_003_execute.lto_priv.0+0x3c8>)
 800828a:	4638      	mov	r0, r7
 800828c:	f7ff fbc8 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008290:	2100      	movs	r1, #0
 8008292:	4630      	mov	r0, r6
 8008294:	f7ff fbc4 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008298:	4629      	mov	r1, r5
 800829a:	4620      	mov	r0, r4
 800829c:	f7ff fbc0 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80082a0:	494a      	ldr	r1, [pc, #296]	; (80083cc <rt_test_001_003_execute.lto_priv.0+0x3cc>)
 80082a2:	4638      	mov	r0, r7
 80082a4:	f7ff fbbc 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80082a8:	2100      	movs	r1, #0
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff fbb8 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80082b0:	4629      	mov	r1, r5
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7ff fbb4 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80082b8:	4945      	ldr	r1, [pc, #276]	; (80083d0 <rt_test_001_003_execute.lto_priv.0+0x3d0>)
 80082ba:	4638      	mov	r0, r7
 80082bc:	f7ff fbb0 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80082c0:	2100      	movs	r1, #0
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff fbac 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80082c8:	4629      	mov	r1, r5
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7ff fba8 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80082d0:	4940      	ldr	r1, [pc, #256]	; (80083d4 <rt_test_001_003_execute.lto_priv.0+0x3d4>)
 80082d2:	4638      	mov	r0, r7
 80082d4:	f7ff fba4 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80082d8:	21ff      	movs	r1, #255	; 0xff
 80082da:	4630      	mov	r0, r6
 80082dc:	f7ff fba0 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80082e0:	4629      	mov	r1, r5
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7ff fb9c 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80082e8:	493b      	ldr	r1, [pc, #236]	; (80083d8 <rt_test_001_003_execute.lto_priv.0+0x3d8>)
 80082ea:	4638      	mov	r0, r7
 80082ec:	f7ff fb98 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80082f0:	2180      	movs	r1, #128	; 0x80
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7ff fb94 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80082f8:	4629      	mov	r1, r5
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff fb90 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008300:	4936      	ldr	r1, [pc, #216]	; (80083dc <rt_test_001_003_execute.lto_priv.0+0x3dc>)
 8008302:	4638      	mov	r0, r7
 8008304:	f7ff fb8c 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008308:	2100      	movs	r1, #0
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff fb88 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008310:	4629      	mov	r1, r5
 8008312:	4620      	mov	r0, r4
 8008314:	f7ff fb84 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008318:	4931      	ldr	r1, [pc, #196]	; (80083e0 <rt_test_001_003_execute.lto_priv.0+0x3e0>)
 800831a:	4638      	mov	r0, r7
 800831c:	f7ff fb80 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008320:	2100      	movs	r1, #0
 8008322:	4630      	mov	r0, r6
 8008324:	f7ff fb7c 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008328:	4629      	mov	r1, r5
 800832a:	4620      	mov	r0, r4
 800832c:	f7ff fb78 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008330:	492c      	ldr	r1, [pc, #176]	; (80083e4 <rt_test_001_003_execute.lto_priv.0+0x3e4>)
 8008332:	4638      	mov	r0, r7
 8008334:	f7ff fb74 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008338:	2100      	movs	r1, #0
 800833a:	4630      	mov	r0, r6
 800833c:	f7ff fb70 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008340:	4629      	mov	r1, r5
 8008342:	4620      	mov	r0, r4
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
    test_printn(CH_DBG_THREADS_PROFILING);
    test_println("");
  }
  test_end_step(1);
}
 8008344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008348:	f7ff bb6a 	b.w	8007a20 <test_printf>
 800834c:	0800bfc0 	.word	0x0800bfc0
 8008350:	0800c0c4 	.word	0x0800c0c4
 8008354:	20000ab4 	.word	0x20000ab4
 8008358:	0800ce10 	.word	0x0800ce10
 800835c:	0800cdf8 	.word	0x0800cdf8
 8008360:	0800c238 	.word	0x0800c238
 8008364:	0800c264 	.word	0x0800c264
 8008368:	0800c290 	.word	0x0800c290
 800836c:	0800c2bc 	.word	0x0800c2bc
 8008370:	0800c2e8 	.word	0x0800c2e8
 8008374:	0800c314 	.word	0x0800c314
 8008378:	0800c340 	.word	0x0800c340
 800837c:	0800c36c 	.word	0x0800c36c
 8008380:	0800c398 	.word	0x0800c398
 8008384:	0800c3c4 	.word	0x0800c3c4
 8008388:	0800c3f0 	.word	0x0800c3f0
 800838c:	0800c41c 	.word	0x0800c41c
 8008390:	0800c448 	.word	0x0800c448
 8008394:	0800c474 	.word	0x0800c474
 8008398:	0800c4a0 	.word	0x0800c4a0
 800839c:	0800c4cc 	.word	0x0800c4cc
 80083a0:	0800c4f8 	.word	0x0800c4f8
 80083a4:	0800c524 	.word	0x0800c524
 80083a8:	0800c550 	.word	0x0800c550
 80083ac:	0800c57c 	.word	0x0800c57c
 80083b0:	0800c5a8 	.word	0x0800c5a8
 80083b4:	0800c5d4 	.word	0x0800c5d4
 80083b8:	0800c600 	.word	0x0800c600
 80083bc:	0800c62c 	.word	0x0800c62c
 80083c0:	0800c658 	.word	0x0800c658
 80083c4:	0800c684 	.word	0x0800c684
 80083c8:	0800c6b0 	.word	0x0800c6b0
 80083cc:	0800c6dc 	.word	0x0800c6dc
 80083d0:	0800c708 	.word	0x0800c708
 80083d4:	0800c734 	.word	0x0800c734
 80083d8:	0800c760 	.word	0x0800c760
 80083dc:	0800c78c 	.word	0x0800c78c
 80083e0:	0800c7b8 	.word	0x0800c7b8
 80083e4:	0800c7e4 	.word	0x0800c7e4
	...

080083f0 <rt_test_012_001_execute.lto_priv.0>:
static void rt_test_012_001_execute(void) {
 80083f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 80083f4:	4b1f      	ldr	r3, [pc, #124]	; (8008474 <rt_test_012_001_execute.lto_priv.0+0x84>)
  test_set_step(1);
 80083f6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008478 <rt_test_012_001_execute.lto_priv.0+0x88>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80083fa:	68db      	ldr	r3, [r3, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80083fc:	4c1f      	ldr	r4, [pc, #124]	; (800847c <rt_test_012_001_execute.lto_priv.0+0x8c>)
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	4b1f      	ldr	r3, [pc, #124]	; (8008480 <rt_test_012_001_execute.lto_priv.0+0x90>)
static void rt_test_012_001_execute(void) {
 8008402:	b082      	sub	sp, #8
  test_set_step(1);
 8008404:	2001      	movs	r0, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008406:	2700      	movs	r7, #0
 8008408:	3a01      	subs	r2, #1
 800840a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  test_set_step(1);
 800840e:	f8c8 0000 	str.w	r0, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008412:	9700      	str	r7, [sp, #0]
 8008414:	481b      	ldr	r0, [pc, #108]	; (8008484 <rt_test_012_001_execute.lto_priv.0+0x94>)
 8008416:	f7fc f8b3 	bl	8004580 <chThdCreateStatic>
  test_set_step(2);
 800841a:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800841c:	6020      	str	r0, [r4, #0]
  test_set_step(2);
 800841e:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 8008422:	f7fb fd35 	bl	8003e90 <msg_loop_test>
 8008426:	f104 0514 	add.w	r5, r4, #20
 800842a:	4606      	mov	r6, r0
    if (threads[i] != NULL) {
 800842c:	f854 0b04 	ldr.w	r0, [r4], #4
 8008430:	b118      	cbz	r0, 800843a <rt_test_012_001_execute.lto_priv.0+0x4a>
      chThdWait(threads[i]);
 8008432:	f7f9 f955 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8008436:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800843a:	42ac      	cmp	r4, r5
 800843c:	d1f6      	bne.n	800842c <rt_test_012_001_execute.lto_priv.0+0x3c>
  test_set_step(3);
 800843e:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 8008440:	4911      	ldr	r1, [pc, #68]	; (8008488 <rt_test_012_001_execute.lto_priv.0+0x98>)
 8008442:	4812      	ldr	r0, [pc, #72]	; (800848c <rt_test_012_001_execute.lto_priv.0+0x9c>)
 8008444:	f8c8 3000 	str.w	r3, [r8]
 8008448:	f7ff faea 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800844c:	4631      	mov	r1, r6
 800844e:	4810      	ldr	r0, [pc, #64]	; (8008490 <rt_test_012_001_execute.lto_priv.0+0xa0>)
 8008450:	f7ff fae6 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008454:	490f      	ldr	r1, [pc, #60]	; (8008494 <rt_test_012_001_execute.lto_priv.0+0xa4>)
 8008456:	480d      	ldr	r0, [pc, #52]	; (800848c <rt_test_012_001_execute.lto_priv.0+0x9c>)
 8008458:	f7ff fae2 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800845c:	0071      	lsls	r1, r6, #1
 800845e:	480c      	ldr	r0, [pc, #48]	; (8008490 <rt_test_012_001_execute.lto_priv.0+0xa0>)
 8008460:	f7ff fade 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008464:	490c      	ldr	r1, [pc, #48]	; (8008498 <rt_test_012_001_execute.lto_priv.0+0xa8>)
 8008466:	480d      	ldr	r0, [pc, #52]	; (800849c <rt_test_012_001_execute.lto_priv.0+0xac>)
}
 8008468:	b002      	add	sp, #8
 800846a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800846e:	f7ff bad7 	b.w	8007a20 <test_printf>
 8008472:	bf00      	nop
 8008474:	200009b8 	.word	0x200009b8
 8008478:	20000ab4 	.word	0x20000ab4
 800847c:	20001744 	.word	0x20001744
 8008480:	08004141 	.word	0x08004141
 8008484:	20000d40 	.word	0x20000d40
 8008488:	0800c810 	.word	0x0800c810
 800848c:	0800bfc0 	.word	0x0800bfc0
 8008490:	0800c0c4 	.word	0x0800c0c4
 8008494:	0800c820 	.word	0x0800c820
 8008498:	0800c82c 	.word	0x0800c82c
 800849c:	0800cdf8 	.word	0x0800cdf8

080084a0 <rt_test_012_002_execute.lto_priv.0>:
static void rt_test_012_002_execute(void) {
 80084a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 80084a4:	4b1f      	ldr	r3, [pc, #124]	; (8008524 <rt_test_012_002_execute.lto_priv.0+0x84>)
  test_set_step(1);
 80084a6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008528 <rt_test_012_002_execute.lto_priv.0+0x88>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80084aa:	68db      	ldr	r3, [r3, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80084ac:	4c1f      	ldr	r4, [pc, #124]	; (800852c <rt_test_012_002_execute.lto_priv.0+0x8c>)
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	4b1f      	ldr	r3, [pc, #124]	; (8008530 <rt_test_012_002_execute.lto_priv.0+0x90>)
static void rt_test_012_002_execute(void) {
 80084b2:	b082      	sub	sp, #8
  test_set_step(1);
 80084b4:	2001      	movs	r0, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80084b6:	2700      	movs	r7, #0
 80084b8:	3201      	adds	r2, #1
 80084ba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  test_set_step(1);
 80084be:	f8c8 0000 	str.w	r0, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80084c2:	9700      	str	r7, [sp, #0]
 80084c4:	481b      	ldr	r0, [pc, #108]	; (8008534 <rt_test_012_002_execute.lto_priv.0+0x94>)
 80084c6:	f7fc f85b 	bl	8004580 <chThdCreateStatic>
  test_set_step(2);
 80084ca:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80084cc:	6020      	str	r0, [r4, #0]
  test_set_step(2);
 80084ce:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 80084d2:	f7fb fcdd 	bl	8003e90 <msg_loop_test>
 80084d6:	f104 0514 	add.w	r5, r4, #20
 80084da:	4606      	mov	r6, r0
    if (threads[i] != NULL) {
 80084dc:	f854 0b04 	ldr.w	r0, [r4], #4
 80084e0:	b118      	cbz	r0, 80084ea <rt_test_012_002_execute.lto_priv.0+0x4a>
      chThdWait(threads[i]);
 80084e2:	f7f9 f8fd 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 80084e6:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80084ea:	42ac      	cmp	r4, r5
 80084ec:	d1f6      	bne.n	80084dc <rt_test_012_002_execute.lto_priv.0+0x3c>
  test_set_step(3);
 80084ee:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 80084f0:	4911      	ldr	r1, [pc, #68]	; (8008538 <rt_test_012_002_execute.lto_priv.0+0x98>)
 80084f2:	4812      	ldr	r0, [pc, #72]	; (800853c <rt_test_012_002_execute.lto_priv.0+0x9c>)
 80084f4:	f8c8 3000 	str.w	r3, [r8]
 80084f8:	f7ff fa92 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80084fc:	4631      	mov	r1, r6
 80084fe:	4810      	ldr	r0, [pc, #64]	; (8008540 <rt_test_012_002_execute.lto_priv.0+0xa0>)
 8008500:	f7ff fa8e 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008504:	490f      	ldr	r1, [pc, #60]	; (8008544 <rt_test_012_002_execute.lto_priv.0+0xa4>)
 8008506:	480d      	ldr	r0, [pc, #52]	; (800853c <rt_test_012_002_execute.lto_priv.0+0x9c>)
 8008508:	f7ff fa8a 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800850c:	0071      	lsls	r1, r6, #1
 800850e:	480c      	ldr	r0, [pc, #48]	; (8008540 <rt_test_012_002_execute.lto_priv.0+0xa0>)
 8008510:	f7ff fa86 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008514:	490c      	ldr	r1, [pc, #48]	; (8008548 <rt_test_012_002_execute.lto_priv.0+0xa8>)
 8008516:	480d      	ldr	r0, [pc, #52]	; (800854c <rt_test_012_002_execute.lto_priv.0+0xac>)
}
 8008518:	b002      	add	sp, #8
 800851a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800851e:	f7ff ba7f 	b.w	8007a20 <test_printf>
 8008522:	bf00      	nop
 8008524:	200009b8 	.word	0x200009b8
 8008528:	20000ab4 	.word	0x20000ab4
 800852c:	20001744 	.word	0x20001744
 8008530:	08004141 	.word	0x08004141
 8008534:	20000d40 	.word	0x20000d40
 8008538:	0800c810 	.word	0x0800c810
 800853c:	0800bfc0 	.word	0x0800bfc0
 8008540:	0800c0c4 	.word	0x0800c0c4
 8008544:	0800c820 	.word	0x0800c820
 8008548:	0800c82c 	.word	0x0800c82c
 800854c:	0800cdf8 	.word	0x0800cdf8

08008550 <rt_test_012_003_execute.lto_priv.0>:
static void rt_test_012_003_execute(void) {
 8008550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 8008554:	4e37      	ldr	r6, [pc, #220]	; (8008634 <rt_test_012_003_execute.lto_priv.0+0xe4>)
  test_set_step(1);
 8008556:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8008638 <rt_test_012_003_execute.lto_priv.0+0xe8>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800855a:	68f3      	ldr	r3, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800855c:	4837      	ldr	r0, [pc, #220]	; (800863c <rt_test_012_003_execute.lto_priv.0+0xec>)
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	4c37      	ldr	r4, [pc, #220]	; (8008640 <rt_test_012_003_execute.lto_priv.0+0xf0>)
static void rt_test_012_003_execute(void) {
 8008562:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008564:	2500      	movs	r5, #0
  test_set_step(1);
 8008566:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008568:	441a      	add	r2, r3
  test_set_step(1);
 800856a:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800856e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008572:	4b34      	ldr	r3, [pc, #208]	; (8008644 <rt_test_012_003_execute.lto_priv.0+0xf4>)
 8008574:	9500      	str	r5, [sp, #0]
 8008576:	f7fc f803 	bl	8004580 <chThdCreateStatic>
  test_set_step(2);
 800857a:	2302      	movs	r3, #2
 800857c:	f8c8 3000 	str.w	r3, [r8]
 8008580:	68f3      	ldr	r3, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008582:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	4830      	ldr	r0, [pc, #192]	; (8008648 <rt_test_012_003_execute.lto_priv.0+0xf8>)
 8008588:	4b30      	ldr	r3, [pc, #192]	; (800864c <rt_test_012_003_execute.lto_priv.0+0xfc>)
 800858a:	9500      	str	r5, [sp, #0]
 800858c:	3a02      	subs	r2, #2
 800858e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008592:	f7fb fff5 	bl	8004580 <chThdCreateStatic>
 8008596:	68f3      	ldr	r3, [r6, #12]
 8008598:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	482c      	ldr	r0, [pc, #176]	; (8008650 <rt_test_012_003_execute.lto_priv.0+0x100>)
 800859e:	4b2b      	ldr	r3, [pc, #172]	; (800864c <rt_test_012_003_execute.lto_priv.0+0xfc>)
 80085a0:	9500      	str	r5, [sp, #0]
 80085a2:	3a03      	subs	r2, #3
 80085a4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80085a8:	f7fb ffea 	bl	8004580 <chThdCreateStatic>
 80085ac:	68f3      	ldr	r3, [r6, #12]
 80085ae:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	4828      	ldr	r0, [pc, #160]	; (8008654 <rt_test_012_003_execute.lto_priv.0+0x104>)
 80085b4:	4b25      	ldr	r3, [pc, #148]	; (800864c <rt_test_012_003_execute.lto_priv.0+0xfc>)
 80085b6:	9500      	str	r5, [sp, #0]
 80085b8:	3a04      	subs	r2, #4
 80085ba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80085be:	f7fb ffdf 	bl	8004580 <chThdCreateStatic>
 80085c2:	68f3      	ldr	r3, [r6, #12]
 80085c4:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	4823      	ldr	r0, [pc, #140]	; (8008658 <rt_test_012_003_execute.lto_priv.0+0x108>)
 80085ca:	4b20      	ldr	r3, [pc, #128]	; (800864c <rt_test_012_003_execute.lto_priv.0+0xfc>)
 80085cc:	9500      	str	r5, [sp, #0]
 80085ce:	3a05      	subs	r2, #5
 80085d0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80085d4:	f7fb ffd4 	bl	8004580 <chThdCreateStatic>
  test_set_step(3);
 80085d8:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80085da:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 80085dc:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 80085de:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 80085e2:	f7fb fc55 	bl	8003e90 <msg_loop_test>
 80085e6:	f104 0614 	add.w	r6, r4, #20
 80085ea:	4607      	mov	r7, r0
    if (threads[i] != NULL) {
 80085ec:	f854 0b04 	ldr.w	r0, [r4], #4
 80085f0:	b118      	cbz	r0, 80085fa <rt_test_012_003_execute.lto_priv.0+0xaa>
      chThdWait(threads[i]);
 80085f2:	f7f9 f875 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 80085f6:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80085fa:	42b4      	cmp	r4, r6
 80085fc:	d1f6      	bne.n	80085ec <rt_test_012_003_execute.lto_priv.0+0x9c>
  test_set_step(4);
 80085fe:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 8008600:	4916      	ldr	r1, [pc, #88]	; (800865c <rt_test_012_003_execute.lto_priv.0+0x10c>)
 8008602:	4817      	ldr	r0, [pc, #92]	; (8008660 <rt_test_012_003_execute.lto_priv.0+0x110>)
 8008604:	f8c8 3000 	str.w	r3, [r8]
 8008608:	f7ff fa0a 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800860c:	4639      	mov	r1, r7
 800860e:	4815      	ldr	r0, [pc, #84]	; (8008664 <rt_test_012_003_execute.lto_priv.0+0x114>)
 8008610:	f7ff fa06 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8008614:	4914      	ldr	r1, [pc, #80]	; (8008668 <rt_test_012_003_execute.lto_priv.0+0x118>)
 8008616:	4812      	ldr	r0, [pc, #72]	; (8008660 <rt_test_012_003_execute.lto_priv.0+0x110>)
 8008618:	f7ff fa02 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800861c:	0079      	lsls	r1, r7, #1
 800861e:	4811      	ldr	r0, [pc, #68]	; (8008664 <rt_test_012_003_execute.lto_priv.0+0x114>)
 8008620:	f7ff f9fe 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008624:	4911      	ldr	r1, [pc, #68]	; (800866c <rt_test_012_003_execute.lto_priv.0+0x11c>)
 8008626:	4812      	ldr	r0, [pc, #72]	; (8008670 <rt_test_012_003_execute.lto_priv.0+0x120>)
}
 8008628:	b002      	add	sp, #8
 800862a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800862e:	f7ff b9f7 	b.w	8007a20 <test_printf>
 8008632:	bf00      	nop
 8008634:	200009b8 	.word	0x200009b8
 8008638:	20000ab4 	.word	0x20000ab4
 800863c:	20000d40 	.word	0x20000d40
 8008640:	20001744 	.word	0x20001744
 8008644:	08004141 	.word	0x08004141
 8008648:	20000f20 	.word	0x20000f20
 800864c:	08001951 	.word	0x08001951
 8008650:	20001100 	.word	0x20001100
 8008654:	200012e0 	.word	0x200012e0
 8008658:	200014c0 	.word	0x200014c0
 800865c:	0800c810 	.word	0x0800c810
 8008660:	0800bfc0 	.word	0x0800bfc0
 8008664:	0800c0c4 	.word	0x0800c0c4
 8008668:	0800c820 	.word	0x0800c820
 800866c:	0800c82c 	.word	0x0800c82c
 8008670:	0800cdf8 	.word	0x0800cdf8
	...

08008680 <rt_test_012_004_execute.lto_priv.0>:
static void rt_test_012_004_execute(void) {
 8008680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return __sch_get_currthread();
 8008684:	4b39      	ldr	r3, [pc, #228]	; (800876c <rt_test_012_004_execute.lto_priv.0+0xec>)
  test_set_step(1);
 8008686:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8008770 <rt_test_012_004_execute.lto_priv.0+0xf0>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800868a:	68db      	ldr	r3, [r3, #12]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800868c:	4839      	ldr	r0, [pc, #228]	; (8008774 <rt_test_012_004_execute.lto_priv.0+0xf4>)
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	4b39      	ldr	r3, [pc, #228]	; (8008778 <rt_test_012_004_execute.lto_priv.0+0xf8>)
static void rt_test_012_004_execute(void) {
 8008692:	b082      	sub	sp, #8
  test_set_step(1);
 8008694:	2701      	movs	r7, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008696:	2500      	movs	r5, #0
 8008698:	9500      	str	r5, [sp, #0]
 800869a:	443a      	add	r2, r7
 800869c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  test_set_step(1);
 80086a0:	f8ca 7000 	str.w	r7, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80086a4:	f7fb ff6c 	bl	8004580 <chThdCreateStatic>
 80086a8:	4b34      	ldr	r3, [pc, #208]	; (800877c <rt_test_012_004_execute.lto_priv.0+0xfc>)
 80086aa:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 80086ac:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80086ae:	4604      	mov	r4, r0
  test_set_step(2);
 80086b0:	f8ca 3000 	str.w	r3, [sl]
 80086b4:	2630      	movs	r6, #48	; 0x30
 80086b6:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80086ba:	2008      	movs	r0, #8
 80086bc:	4639      	mov	r1, r7
 80086be:	f7fa fc8f 	bl	8002fe0 <chSchGoSleepTimeoutS>
 80086c2:	f385 8811 	msr	BASEPRI, r5
 80086c6:	f386 8811 	msr	BASEPRI, r6
 80086ca:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80086ce:	f8d8 9024 	ldr.w	r9, [r8, #36]	; 0x24
 80086d2:	f385 8811 	msr	BASEPRI, r5
      chSchWakeupS(tp, MSG_OK);
 80086d6:	462f      	mov	r7, r5
 80086d8:	f386 8811 	msr	BASEPRI, r6
 80086dc:	2100      	movs	r1, #0
 80086de:	4620      	mov	r0, r4
 80086e0:	f7fb fc36 	bl	8003f50 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80086e4:	4620      	mov	r0, r4
 80086e6:	2100      	movs	r1, #0
 80086e8:	f7fb fc32 	bl	8003f50 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80086ec:	4620      	mov	r0, r4
 80086ee:	2100      	movs	r1, #0
 80086f0:	f7fb fc2e 	bl	8003f50 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80086f4:	2100      	movs	r1, #0
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7fb fc2a 	bl	8003f50 <chSchWakeupS>
 80086fc:	f387 8811 	msr	BASEPRI, r7
 8008700:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8008704:	f242 720f 	movw	r2, #9999	; 0x270f
 8008708:	eba3 0309 	sub.w	r3, r3, r9
 800870c:	4293      	cmp	r3, r2
      n += 4;
 800870e:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 8008712:	d9e1      	bls.n	80086d8 <rt_test_012_004_execute.lto_priv.0+0x58>
  test_set_step(3);
 8008714:	2303      	movs	r3, #3
 8008716:	f8ca 3000 	str.w	r3, [sl]
 800871a:	f386 8811 	msr	BASEPRI, r6
    chSchWakeupS(tp, MSG_TIMEOUT);
 800871e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008722:	4620      	mov	r0, r4
 8008724:	f7fb fc14 	bl	8003f50 <chSchWakeupS>
 8008728:	f387 8811 	msr	BASEPRI, r7
 800872c:	4c13      	ldr	r4, [pc, #76]	; (800877c <rt_test_012_004_execute.lto_priv.0+0xfc>)
      threads[i] = NULL;
 800872e:	2700      	movs	r7, #0
 8008730:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 8008734:	f854 0b04 	ldr.w	r0, [r4], #4
 8008738:	b118      	cbz	r0, 8008742 <rt_test_012_004_execute.lto_priv.0+0xc2>
      chThdWait(threads[i]);
 800873a:	f7f8 ffd1 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 800873e:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008742:	42a6      	cmp	r6, r4
 8008744:	d1f6      	bne.n	8008734 <rt_test_012_004_execute.lto_priv.0+0xb4>
  test_set_step(4);
 8008746:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 8008748:	490d      	ldr	r1, [pc, #52]	; (8008780 <rt_test_012_004_execute.lto_priv.0+0x100>)
 800874a:	480e      	ldr	r0, [pc, #56]	; (8008784 <rt_test_012_004_execute.lto_priv.0+0x104>)
 800874c:	f8ca 3000 	str.w	r3, [sl]
 8008750:	f7ff f966 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008754:	0069      	lsls	r1, r5, #1
 8008756:	480c      	ldr	r0, [pc, #48]	; (8008788 <rt_test_012_004_execute.lto_priv.0+0x108>)
 8008758:	f7ff f962 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800875c:	490b      	ldr	r1, [pc, #44]	; (800878c <rt_test_012_004_execute.lto_priv.0+0x10c>)
 800875e:	480c      	ldr	r0, [pc, #48]	; (8008790 <rt_test_012_004_execute.lto_priv.0+0x110>)
}
 8008760:	b002      	add	sp, #8
 8008762:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008766:	f7ff b95b 	b.w	8007a20 <test_printf>
 800876a:	bf00      	nop
 800876c:	200009b8 	.word	0x200009b8
 8008770:	20000ab4 	.word	0x20000ab4
 8008774:	20000d40 	.word	0x20000d40
 8008778:	080019d1 	.word	0x080019d1
 800877c:	20001744 	.word	0x20001744
 8008780:	0800c810 	.word	0x0800c810
 8008784:	0800bfc0 	.word	0x0800bfc0
 8008788:	0800c0c4 	.word	0x0800c0c4
 800878c:	0800c82c 	.word	0x0800c82c
 8008790:	0800cdf8 	.word	0x0800cdf8
	...

080087a0 <rt_test_012_005_execute.lto_priv.0>:
  return __sch_get_currthread();
 80087a0:	4b23      	ldr	r3, [pc, #140]	; (8008830 <rt_test_012_005_execute.lto_priv.0+0x90>)
static void rt_test_012_005_execute(void) {
 80087a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 80087a6:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 80087a8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8008834 <rt_test_012_005_execute.lto_priv.0+0x94>
  tprio_t prio = chThdGetPriorityX() - 1;
 80087ac:	689d      	ldr	r5, [r3, #8]
  test_set_step(1);
 80087ae:	2101      	movs	r1, #1
static void rt_test_012_005_execute(void) {
 80087b0:	b082      	sub	sp, #8
  test_set_step(1);
 80087b2:	f8c9 1000 	str.w	r1, [r9]
  tprio_t prio = chThdGetPriorityX() - 1;
 80087b6:	3d01      	subs	r5, #1
 80087b8:	2630      	movs	r6, #48	; 0x30
 80087ba:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80087be:	2008      	movs	r0, #8
 80087c0:	f7fa fc0e 	bl	8002fe0 <chSchGoSleepTimeoutS>
 80087c4:	2400      	movs	r4, #0
 80087c6:	f384 8811 	msr	BASEPRI, r4
 80087ca:	f386 8811 	msr	BASEPRI, r6
 80087ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087d2:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80087d6:	f384 8811 	msr	BASEPRI, r4
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80087da:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8008838 <rt_test_012_005_execute.lto_priv.0+0x98>
 80087de:	4e17      	ldr	r6, [pc, #92]	; (800883c <rt_test_012_005_execute.lto_priv.0+0x9c>)
 80087e0:	4627      	mov	r7, r4
 80087e2:	4653      	mov	r3, sl
 80087e4:	462a      	mov	r2, r5
 80087e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80087ea:	9700      	str	r7, [sp, #0]
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7fb fec7 	bl	8004580 <chThdCreateStatic>
 80087f2:	f7f8 ff75 	bl	80016e0 <chThdWait>
 80087f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80087fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80087fe:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8008800:	eba0 0008 	sub.w	r0, r0, r8
 8008804:	4298      	cmp	r0, r3
      n++;
 8008806:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800880a:	d9ea      	bls.n	80087e2 <rt_test_012_005_execute.lto_priv.0+0x42>
  test_set_step(2);
 800880c:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 800880e:	490c      	ldr	r1, [pc, #48]	; (8008840 <rt_test_012_005_execute.lto_priv.0+0xa0>)
 8008810:	480c      	ldr	r0, [pc, #48]	; (8008844 <rt_test_012_005_execute.lto_priv.0+0xa4>)
 8008812:	f8c9 3000 	str.w	r3, [r9]
 8008816:	f7ff f903 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800881a:	4621      	mov	r1, r4
 800881c:	480a      	ldr	r0, [pc, #40]	; (8008848 <rt_test_012_005_execute.lto_priv.0+0xa8>)
 800881e:	f7ff f8ff 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008822:	490a      	ldr	r1, [pc, #40]	; (800884c <rt_test_012_005_execute.lto_priv.0+0xac>)
 8008824:	480a      	ldr	r0, [pc, #40]	; (8008850 <rt_test_012_005_execute.lto_priv.0+0xb0>)
}
 8008826:	b002      	add	sp, #8
 8008828:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800882c:	f7ff b8f8 	b.w	8007a20 <test_printf>
 8008830:	200009b8 	.word	0x200009b8
 8008834:	20000ab4 	.word	0x20000ab4
 8008838:	08001951 	.word	0x08001951
 800883c:	20000d40 	.word	0x20000d40
 8008840:	0800c810 	.word	0x0800c810
 8008844:	0800bfc0 	.word	0x0800bfc0
 8008848:	0800c0c4 	.word	0x0800c0c4
 800884c:	0800c838 	.word	0x0800c838
 8008850:	0800cdf8 	.word	0x0800cdf8
	...

08008860 <rt_test_012_006_execute.lto_priv.0>:
  return __sch_get_currthread();
 8008860:	4b2f      	ldr	r3, [pc, #188]	; (8008920 <rt_test_012_006_execute.lto_priv.0+0xc0>)
static void rt_test_012_006_execute(void) {
 8008862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008866:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 8008868:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008924 <rt_test_012_006_execute.lto_priv.0+0xc4>
  tprio_t prio = chThdGetPriorityX() + 1;
 800886c:	689e      	ldr	r6, [r3, #8]
  test_set_step(1);
 800886e:	2101      	movs	r1, #1
static void rt_test_012_006_execute(void) {
 8008870:	b082      	sub	sp, #8
  test_set_step(1);
 8008872:	f8ca 1000 	str.w	r1, [sl]
  tprio_t prio = chThdGetPriorityX() + 1;
 8008876:	440e      	add	r6, r1
 8008878:	2530      	movs	r5, #48	; 0x30
 800887a:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800887e:	2008      	movs	r0, #8
 8008880:	f7fa fbae 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8008884:	2400      	movs	r4, #0
 8008886:	f384 8811 	msr	BASEPRI, r4
 800888a:	f385 8811 	msr	BASEPRI, r5
 800888e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008892:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 8008896:	f384 8811 	msr	BASEPRI, r4
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800889a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8008928 <rt_test_012_006_execute.lto_priv.0+0xc8>
 800889e:	4f23      	ldr	r7, [pc, #140]	; (800892c <rt_test_012_006_execute.lto_priv.0+0xcc>)
 80088a0:	4625      	mov	r5, r4
 80088a2:	e00c      	b.n	80088be <rt_test_012_006_execute.lto_priv.0+0x5e>
 80088a4:	f385 8811 	msr	BASEPRI, r5
 80088a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80088ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	eba3 0309 	sub.w	r3, r3, r9
 80088b6:	4293      	cmp	r3, r2
      n++;
 80088b8:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80088bc:	d81d      	bhi.n	80088fa <rt_test_012_006_execute.lto_priv.0+0x9a>
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80088be:	4632      	mov	r2, r6
 80088c0:	9500      	str	r5, [sp, #0]
 80088c2:	4643      	mov	r3, r8
 80088c4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7fb fe59 	bl	8004580 <chThdCreateStatic>
 80088ce:	2230      	movs	r2, #48	; 0x30
 80088d0:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 80088d4:	7f82      	ldrb	r2, [r0, #30]
 80088d6:	3a01      	subs	r2, #1
 80088d8:	7782      	strb	r2, [r0, #30]
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80088da:	69c2      	ldr	r2, [r0, #28]
 80088dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80088e0:	2a0f      	cmp	r2, #15
 80088e2:	d1df      	bne.n	80088a4 <rt_test_012_006_execute.lto_priv.0+0x44>
  p->prev->next = p->next;
 80088e4:	e9d0 2109 	ldrd	r2, r1, [r0, #36]	; 0x24
 80088e8:	600a      	str	r2, [r1, #0]
  p->next->prev = p->prev;
 80088ea:	6051      	str	r1, [r2, #4]
 80088ec:	f385 8811 	msr	BASEPRI, r5
    if (tp->dispose != NULL) {
 80088f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0d8      	beq.n	80088a8 <rt_test_012_006_execute.lto_priv.0+0x48>
      tp->dispose(tp);
 80088f6:	4798      	blx	r3
 80088f8:	e7d6      	b.n	80088a8 <rt_test_012_006_execute.lto_priv.0+0x48>
  test_set_step(2);
 80088fa:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 80088fc:	490c      	ldr	r1, [pc, #48]	; (8008930 <rt_test_012_006_execute.lto_priv.0+0xd0>)
 80088fe:	480d      	ldr	r0, [pc, #52]	; (8008934 <rt_test_012_006_execute.lto_priv.0+0xd4>)
 8008900:	f8ca 3000 	str.w	r3, [sl]
 8008904:	f7ff f88c 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008908:	4621      	mov	r1, r4
 800890a:	480b      	ldr	r0, [pc, #44]	; (8008938 <rt_test_012_006_execute.lto_priv.0+0xd8>)
 800890c:	f7ff f888 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008910:	490a      	ldr	r1, [pc, #40]	; (800893c <rt_test_012_006_execute.lto_priv.0+0xdc>)
 8008912:	480b      	ldr	r0, [pc, #44]	; (8008940 <rt_test_012_006_execute.lto_priv.0+0xe0>)
}
 8008914:	b002      	add	sp, #8
 8008916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891a:	f7ff b881 	b.w	8007a20 <test_printf>
 800891e:	bf00      	nop
 8008920:	200009b8 	.word	0x200009b8
 8008924:	20000ab4 	.word	0x20000ab4
 8008928:	08001951 	.word	0x08001951
 800892c:	20000d40 	.word	0x20000d40
 8008930:	0800c810 	.word	0x0800c810
 8008934:	0800bfc0 	.word	0x0800bfc0
 8008938:	0800c0c4 	.word	0x0800c0c4
 800893c:	0800c838 	.word	0x0800c838
 8008940:	0800cdf8 	.word	0x0800cdf8
	...

08008950 <rt_test_012_007_execute.lto_priv.0>:
static void rt_test_012_007_execute(void) {
 8008950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 8008954:	4f50      	ldr	r7, [pc, #320]	; (8008a98 <rt_test_012_007_execute.lto_priv.0+0x148>)
  test_set_step(1);
 8008956:	4e51      	ldr	r6, [pc, #324]	; (8008a9c <rt_test_012_007_execute.lto_priv.0+0x14c>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008958:	68fb      	ldr	r3, [r7, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800895a:	4851      	ldr	r0, [pc, #324]	; (8008aa0 <rt_test_012_007_execute.lto_priv.0+0x150>)
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	4b51      	ldr	r3, [pc, #324]	; (8008aa4 <rt_test_012_007_execute.lto_priv.0+0x154>)
 8008960:	4d51      	ldr	r5, [pc, #324]	; (8008aa8 <rt_test_012_007_execute.lto_priv.0+0x158>)
static void rt_test_012_007_execute(void) {
 8008962:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008964:	2400      	movs	r4, #0
  test_set_step(1);
 8008966:	f04f 0801 	mov.w	r8, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800896a:	3205      	adds	r2, #5
 800896c:	9400      	str	r4, [sp, #0]
 800896e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  test_set_step(1);
 8008972:	f8c6 8000 	str.w	r8, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008976:	f7fb fe03 	bl	8004580 <chThdCreateStatic>
 800897a:	68fb      	ldr	r3, [r7, #12]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800897c:	689a      	ldr	r2, [r3, #8]
 800897e:	9400      	str	r4, [sp, #0]
 8008980:	4b48      	ldr	r3, [pc, #288]	; (8008aa4 <rt_test_012_007_execute.lto_priv.0+0x154>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008982:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8008984:	3204      	adds	r2, #4
 8008986:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800898a:	4848      	ldr	r0, [pc, #288]	; (8008aac <rt_test_012_007_execute.lto_priv.0+0x15c>)
 800898c:	f7fb fdf8 	bl	8004580 <chThdCreateStatic>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	4846      	ldr	r0, [pc, #280]	; (8008ab0 <rt_test_012_007_execute.lto_priv.0+0x160>)
 8008998:	4b42      	ldr	r3, [pc, #264]	; (8008aa4 <rt_test_012_007_execute.lto_priv.0+0x154>)
 800899a:	9400      	str	r4, [sp, #0]
 800899c:	3203      	adds	r2, #3
 800899e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80089a2:	f7fb fded 	bl	8004580 <chThdCreateStatic>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	4841      	ldr	r0, [pc, #260]	; (8008ab4 <rt_test_012_007_execute.lto_priv.0+0x164>)
 80089ae:	4b3d      	ldr	r3, [pc, #244]	; (8008aa4 <rt_test_012_007_execute.lto_priv.0+0x154>)
 80089b0:	9400      	str	r4, [sp, #0]
 80089b2:	3202      	adds	r2, #2
 80089b4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80089b8:	f7fb fde2 	bl	8004580 <chThdCreateStatic>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	483d      	ldr	r0, [pc, #244]	; (8008ab8 <rt_test_012_007_execute.lto_priv.0+0x168>)
 80089c4:	4b37      	ldr	r3, [pc, #220]	; (8008aa4 <rt_test_012_007_execute.lto_priv.0+0x154>)
 80089c6:	9400      	str	r4, [sp, #0]
 80089c8:	4442      	add	r2, r8
 80089ca:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80089ce:	f7fb fdd7 	bl	8004580 <chThdCreateStatic>
  test_set_step(2);
 80089d2:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80089d4:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 80089d6:	6033      	str	r3, [r6, #0]
 80089d8:	2530      	movs	r5, #48	; 0x30
 80089da:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80089de:	2008      	movs	r0, #8
 80089e0:	4641      	mov	r1, r8
 80089e2:	f7fa fafd 	bl	8002fe0 <chSchGoSleepTimeoutS>
 80089e6:	f384 8811 	msr	BASEPRI, r4
 80089ea:	f385 8811 	msr	BASEPRI, r5
 80089ee:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80089f2:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 80089f6:	f384 8811 	msr	BASEPRI, r4
 80089fa:	4f30      	ldr	r7, [pc, #192]	; (8008abc <rt_test_012_007_execute.lto_priv.0+0x16c>)
 80089fc:	2100      	movs	r1, #0
 80089fe:	4638      	mov	r0, r7
 8008a00:	f002 f97e 	bl	800ad00 <chSemResetWithMessage.constprop.0>
 8008a04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8008a06:	f242 720f 	movw	r2, #9999	; 0x270f
 8008a0a:	eba3 0308 	sub.w	r3, r3, r8
 8008a0e:	4293      	cmp	r3, r2
      n++;
 8008a10:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008a14:	d9f2      	bls.n	80089fc <rt_test_012_007_execute.lto_priv.0+0xac>
  test_set_step(3);
 8008a16:	4d24      	ldr	r5, [pc, #144]	; (8008aa8 <rt_test_012_007_execute.lto_priv.0+0x158>)
 8008a18:	2303      	movs	r3, #3
 8008a1a:	6033      	str	r3, [r6, #0]
  for (i = 0; i < MAX_THREADS; i++)
 8008a1c:	f105 0714 	add.w	r7, r5, #20
 8008a20:	462b      	mov	r3, r5
 8008a22:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008a26:	2000      	movs	r0, #0
    if (threads[i])
 8008a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2c:	b13a      	cbz	r2, 8008a3e <rt_test_012_007_execute.lto_priv.0+0xee>
 8008a2e:	f38c 8811 	msr	BASEPRI, ip
  tp->flags |= CH_FLAGS_TERMINATE;
 8008a32:	7f51      	ldrb	r1, [r2, #29]
 8008a34:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8008a38:	7751      	strb	r1, [r2, #29]
 8008a3a:	f380 8811 	msr	BASEPRI, r0
  for (i = 0; i < MAX_THREADS; i++)
 8008a3e:	42bb      	cmp	r3, r7
 8008a40:	d1f2      	bne.n	8008a28 <rt_test_012_007_execute.lto_priv.0+0xd8>
 8008a42:	481e      	ldr	r0, [pc, #120]	; (8008abc <rt_test_012_007_execute.lto_priv.0+0x16c>)
 8008a44:	2100      	movs	r1, #0
 8008a46:	f002 f95b 	bl	800ad00 <chSemResetWithMessage.constprop.0>
      threads[i] = NULL;
 8008a4a:	f04f 0800 	mov.w	r8, #0
    if (threads[i] != NULL) {
 8008a4e:	f855 0b04 	ldr.w	r0, [r5], #4
 8008a52:	b118      	cbz	r0, 8008a5c <rt_test_012_007_execute.lto_priv.0+0x10c>
      chThdWait(threads[i]);
 8008a54:	f7f8 fe44 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8008a58:	f845 8c04 	str.w	r8, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008a5c:	42bd      	cmp	r5, r7
 8008a5e:	d1f6      	bne.n	8008a4e <rt_test_012_007_execute.lto_priv.0+0xfe>
  test_set_step(4);
 8008a60:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 8008a62:	4917      	ldr	r1, [pc, #92]	; (8008ac0 <rt_test_012_007_execute.lto_priv.0+0x170>)
 8008a64:	4817      	ldr	r0, [pc, #92]	; (8008ac4 <rt_test_012_007_execute.lto_priv.0+0x174>)
 8008a66:	6033      	str	r3, [r6, #0]
 8008a68:	f7fe ffda 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4816      	ldr	r0, [pc, #88]	; (8008ac8 <rt_test_012_007_execute.lto_priv.0+0x178>)
 8008a70:	f7fe ffd6 	bl	8007a20 <test_printf>
    test_printn(n * 6);
 8008a74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  test_printf("%s", msgp);
 8008a78:	4914      	ldr	r1, [pc, #80]	; (8008acc <rt_test_012_007_execute.lto_priv.0+0x17c>)
 8008a7a:	4812      	ldr	r0, [pc, #72]	; (8008ac4 <rt_test_012_007_execute.lto_priv.0+0x174>)
 8008a7c:	f7fe ffd0 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008a80:	0061      	lsls	r1, r4, #1
 8008a82:	4811      	ldr	r0, [pc, #68]	; (8008ac8 <rt_test_012_007_execute.lto_priv.0+0x178>)
 8008a84:	f7fe ffcc 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008a88:	4911      	ldr	r1, [pc, #68]	; (8008ad0 <rt_test_012_007_execute.lto_priv.0+0x180>)
 8008a8a:	4812      	ldr	r0, [pc, #72]	; (8008ad4 <rt_test_012_007_execute.lto_priv.0+0x184>)
}
 8008a8c:	b002      	add	sp, #8
 8008a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a92:	f7fe bfc5 	b.w	8007a20 <test_printf>
 8008a96:	bf00      	nop
 8008a98:	200009b8 	.word	0x200009b8
 8008a9c:	20000ab4 	.word	0x20000ab4
 8008aa0:	20000d40 	.word	0x20000d40
 8008aa4:	08001a11 	.word	0x08001a11
 8008aa8:	20001744 	.word	0x20001744
 8008aac:	20000f20 	.word	0x20000f20
 8008ab0:	20001100 	.word	0x20001100
 8008ab4:	200012e0 	.word	0x200012e0
 8008ab8:	200014c0 	.word	0x200014c0
 8008abc:	20000d18 	.word	0x20000d18
 8008ac0:	0800c810 	.word	0x0800c810
 8008ac4:	0800bfc0 	.word	0x0800bfc0
 8008ac8:	0800c0c4 	.word	0x0800c0c4
 8008acc:	0800c844 	.word	0x0800c844
 8008ad0:	0800c82c 	.word	0x0800c82c
 8008ad4:	0800cdf8 	.word	0x0800cdf8
	...

08008ae0 <rt_test_012_008_execute.lto_priv.0>:
static void rt_test_012_008_execute(void) {
 8008ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 8008ae4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8008be4 <rt_test_012_008_execute.lto_priv.0+0x104>
  test_set_step(1);
 8008ae8:	4e3f      	ldr	r6, [pc, #252]	; (8008be8 <rt_test_012_008_execute.lto_priv.0+0x108>)
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008aea:	4c40      	ldr	r4, [pc, #256]	; (8008bec <rt_test_012_008_execute.lto_priv.0+0x10c>)
static void rt_test_012_008_execute(void) {
 8008aec:	b084      	sub	sp, #16
  test_set_step(1);
 8008aee:	2301      	movs	r3, #1
    n = 0;
 8008af0:	2700      	movs	r7, #0
  test_set_step(1);
 8008af2:	6033      	str	r3, [r6, #0]
    n = 0;
 8008af4:	9703      	str	r7, [sp, #12]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008af6:	f7f9 fd13 	bl	8002520 <test_wait_tick>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008afa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008afe:	483c      	ldr	r0, [pc, #240]	; (8008bf0 <rt_test_012_008_execute.lto_priv.0+0x110>)
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	4b3c      	ldr	r3, [pc, #240]	; (8008bf4 <rt_test_012_008_execute.lto_priv.0+0x114>)
 8008b04:	ad03      	add	r5, sp, #12
 8008b06:	9500      	str	r5, [sp, #0]
 8008b08:	3a01      	subs	r2, #1
 8008b0a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008b0e:	f7fb fd37 	bl	8004580 <chThdCreateStatic>
 8008b12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b16:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	4837      	ldr	r0, [pc, #220]	; (8008bf8 <rt_test_012_008_execute.lto_priv.0+0x118>)
 8008b1c:	4b35      	ldr	r3, [pc, #212]	; (8008bf4 <rt_test_012_008_execute.lto_priv.0+0x114>)
 8008b1e:	9500      	str	r5, [sp, #0]
 8008b20:	3a01      	subs	r2, #1
 8008b22:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008b26:	f7fb fd2b 	bl	8004580 <chThdCreateStatic>
 8008b2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b2e:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	4832      	ldr	r0, [pc, #200]	; (8008bfc <rt_test_012_008_execute.lto_priv.0+0x11c>)
 8008b34:	4b2f      	ldr	r3, [pc, #188]	; (8008bf4 <rt_test_012_008_execute.lto_priv.0+0x114>)
 8008b36:	9500      	str	r5, [sp, #0]
 8008b38:	3a01      	subs	r2, #1
 8008b3a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008b3e:	f7fb fd1f 	bl	8004580 <chThdCreateStatic>
 8008b42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b46:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	482d      	ldr	r0, [pc, #180]	; (8008c00 <rt_test_012_008_execute.lto_priv.0+0x120>)
 8008b4c:	4b29      	ldr	r3, [pc, #164]	; (8008bf4 <rt_test_012_008_execute.lto_priv.0+0x114>)
 8008b4e:	9500      	str	r5, [sp, #0]
 8008b50:	3a01      	subs	r2, #1
 8008b52:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008b56:	f7fb fd13 	bl	8004580 <chThdCreateStatic>
 8008b5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b5e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	4828      	ldr	r0, [pc, #160]	; (8008c04 <rt_test_012_008_execute.lto_priv.0+0x124>)
 8008b64:	4b23      	ldr	r3, [pc, #140]	; (8008bf4 <rt_test_012_008_execute.lto_priv.0+0x114>)
 8008b66:	9500      	str	r5, [sp, #0]
 8008b68:	3a01      	subs	r2, #1
 8008b6a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008b6e:	f7fb fd07 	bl	8004580 <chThdCreateStatic>
  test_set_step(2);
 8008b72:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008b74:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	f04f 0830 	mov.w	r8, #48	; 0x30
 8008b7c:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008b80:	f242 7110 	movw	r1, #10000	; 0x2710
 8008b84:	2008      	movs	r0, #8
 8008b86:	f7fa fa2b 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8008b8a:	f387 8811 	msr	BASEPRI, r7
  for (i = 0; i < MAX_THREADS; i++)
 8008b8e:	f104 0514 	add.w	r5, r4, #20
 8008b92:	4623      	mov	r3, r4
    if (threads[i])
 8008b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b98:	b13a      	cbz	r2, 8008baa <rt_test_012_008_execute.lto_priv.0+0xca>
 8008b9a:	f388 8811 	msr	BASEPRI, r8
 8008b9e:	7f51      	ldrb	r1, [r2, #29]
 8008ba0:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8008ba4:	7751      	strb	r1, [r2, #29]
 8008ba6:	f387 8811 	msr	BASEPRI, r7
  for (i = 0; i < MAX_THREADS; i++)
 8008baa:	42ab      	cmp	r3, r5
 8008bac:	d1f2      	bne.n	8008b94 <rt_test_012_008_execute.lto_priv.0+0xb4>
      threads[i] = NULL;
 8008bae:	2700      	movs	r7, #0
    if (threads[i] != NULL) {
 8008bb0:	f854 0b04 	ldr.w	r0, [r4], #4
 8008bb4:	b118      	cbz	r0, 8008bbe <rt_test_012_008_execute.lto_priv.0+0xde>
      chThdWait(threads[i]);
 8008bb6:	f7f8 fd93 	bl	80016e0 <chThdWait>
      threads[i] = NULL;
 8008bba:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008bbe:	42ac      	cmp	r4, r5
 8008bc0:	d1f6      	bne.n	8008bb0 <rt_test_012_008_execute.lto_priv.0+0xd0>
  test_set_step(3);
 8008bc2:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 8008bc4:	4910      	ldr	r1, [pc, #64]	; (8008c08 <rt_test_012_008_execute.lto_priv.0+0x128>)
 8008bc6:	4811      	ldr	r0, [pc, #68]	; (8008c0c <rt_test_012_008_execute.lto_priv.0+0x12c>)
 8008bc8:	6033      	str	r3, [r6, #0]
 8008bca:	f7fe ff29 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008bce:	9903      	ldr	r1, [sp, #12]
 8008bd0:	480f      	ldr	r0, [pc, #60]	; (8008c10 <rt_test_012_008_execute.lto_priv.0+0x130>)
 8008bd2:	f7fe ff25 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008bd6:	490f      	ldr	r1, [pc, #60]	; (8008c14 <rt_test_012_008_execute.lto_priv.0+0x134>)
 8008bd8:	480f      	ldr	r0, [pc, #60]	; (8008c18 <rt_test_012_008_execute.lto_priv.0+0x138>)
 8008bda:	f7fe ff21 	bl	8007a20 <test_printf>
}
 8008bde:	b004      	add	sp, #16
 8008be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be4:	200009b8 	.word	0x200009b8
 8008be8:	20000ab4 	.word	0x20000ab4
 8008bec:	20001744 	.word	0x20001744
 8008bf0:	20000d40 	.word	0x20000d40
 8008bf4:	08001a81 	.word	0x08001a81
 8008bf8:	20000f20 	.word	0x20000f20
 8008bfc:	20001100 	.word	0x20001100
 8008c00:	200012e0 	.word	0x200012e0
 8008c04:	200014c0 	.word	0x200014c0
 8008c08:	0800c810 	.word	0x0800c810
 8008c0c:	0800bfc0 	.word	0x0800bfc0
 8008c10:	0800c0c4 	.word	0x0800c0c4
 8008c14:	0800c82c 	.word	0x0800c82c
 8008c18:	0800cdf8 	.word	0x0800cdf8
 8008c1c:	00000000 	.word	0x00000000

08008c20 <rt_test_012_009_execute.lto_priv.0>:
static void rt_test_012_009_execute(void) {
 8008c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8008c24:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8008cc8 <rt_test_012_009_execute.lto_priv.0+0xa8>
 8008c28:	2101      	movs	r1, #1
 8008c2a:	f8ca 1000 	str.w	r1, [sl]
 8008c2e:	f04f 0830 	mov.w	r8, #48	; 0x30
 8008c32:	f388 8811 	msr	BASEPRI, r8
 8008c36:	2008      	movs	r0, #8
 8008c38:	f7fa f9d2 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8008c3c:	f04f 0b00 	mov.w	fp, #0
 8008c40:	f38b 8811 	msr	BASEPRI, fp
 8008c44:	f388 8811 	msr	BASEPRI, r8
 8008c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c4c:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 8008c50:	f38b 8811 	msr	BASEPRI, fp
  return systime + (systime_t)interval;
 8008c54:	4e1d      	ldr	r6, [pc, #116]	; (8008ccc <rt_test_012_009_execute.lto_priv.0+0xac>)
 8008c56:	4f1e      	ldr	r7, [pc, #120]	; (8008cd0 <rt_test_012_009_execute.lto_priv.0+0xb0>)
 8008c58:	4d1e      	ldr	r5, [pc, #120]	; (8008cd4 <rt_test_012_009_execute.lto_priv.0+0xb4>)
 8008c5a:	f388 8811 	msr	BASEPRI, r8
  vtp->par     = par;
 8008c5e:	2400      	movs	r4, #0
  vt_enqueue(vtlp, vtp, delay);
 8008c60:	4630      	mov	r0, r6
 8008c62:	2101      	movs	r1, #1
  vtp->func    = vtfunc;
 8008c64:	e9c6 7403 	strd	r7, r4, [r6, #12]
  vtp->reload  = (sysinterval_t)0;
 8008c68:	6174      	str	r4, [r6, #20]
  vt_enqueue(vtlp, vtp, delay);
 8008c6a:	f002 f8b1 	bl	800add0 <vt_enqueue.constprop.0>
 8008c6e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008c72:	4628      	mov	r0, r5
  vtp->func    = vtfunc;
 8008c74:	e9c5 7403 	strd	r7, r4, [r5, #12]
  vtp->reload  = (sysinterval_t)0;
 8008c78:	616c      	str	r4, [r5, #20]
  vt_enqueue(vtlp, vtp, delay);
 8008c7a:	f002 f8a9 	bl	800add0 <vt_enqueue.constprop.0>
      chVTDoResetI(&vt1);
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7f9 fbf6 	bl	8002470 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8008c84:	4628      	mov	r0, r5
 8008c86:	f7f9 fbf3 	bl	8002470 <chVTDoResetI>
 8008c8a:	f384 8811 	msr	BASEPRI, r4
 8008c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008c92:	f242 720f 	movw	r2, #9999	; 0x270f
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8008c98:	eba3 0309 	sub.w	r3, r3, r9
 8008c9c:	4293      	cmp	r3, r2
      n++;
 8008c9e:	f10b 0b01 	add.w	fp, fp, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008ca2:	d9da      	bls.n	8008c5a <rt_test_012_009_execute.lto_priv.0+0x3a>
  test_set_step(2);
 8008ca4:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8008ca6:	490c      	ldr	r1, [pc, #48]	; (8008cd8 <rt_test_012_009_execute.lto_priv.0+0xb8>)
 8008ca8:	480c      	ldr	r0, [pc, #48]	; (8008cdc <rt_test_012_009_execute.lto_priv.0+0xbc>)
 8008caa:	f8ca 3000 	str.w	r3, [sl]
 8008cae:	f7fe feb7 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008cb2:	ea4f 014b 	mov.w	r1, fp, lsl #1
 8008cb6:	480a      	ldr	r0, [pc, #40]	; (8008ce0 <rt_test_012_009_execute.lto_priv.0+0xc0>)
 8008cb8:	f7fe feb2 	bl	8007a20 <test_printf>
}
 8008cbc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008cc0:	4908      	ldr	r1, [pc, #32]	; (8008ce4 <rt_test_012_009_execute.lto_priv.0+0xc4>)
 8008cc2:	4809      	ldr	r0, [pc, #36]	; (8008ce8 <rt_test_012_009_execute.lto_priv.0+0xc8>)
 8008cc4:	f7fe beac 	b.w	8007a20 <test_printf>
 8008cc8:	20000ab4 	.word	0x20000ab4
 8008ccc:	2000175c 	.word	0x2000175c
 8008cd0:	08001011 	.word	0x08001011
 8008cd4:	20001774 	.word	0x20001774
 8008cd8:	0800c810 	.word	0x0800c810
 8008cdc:	0800bfc0 	.word	0x0800bfc0
 8008ce0:	0800c0c4 	.word	0x0800c0c4
 8008ce4:	0800c858 	.word	0x0800c858
 8008ce8:	0800cdf8 	.word	0x0800cdf8
 8008cec:	00000000 	.word	0x00000000

08008cf0 <rt_test_012_010_execute.lto_priv.0>:
static void rt_test_012_010_execute(void) {
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8008cf4:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8008eb8 <rt_test_012_010_execute.lto_priv.0+0x1c8>
 8008cf8:	4c70      	ldr	r4, [pc, #448]	; (8008ebc <rt_test_012_010_execute.lto_priv.0+0x1cc>)
  return __sch_get_currthread();
 8008cfa:	4f71      	ldr	r7, [pc, #452]	; (8008ec0 <rt_test_012_010_execute.lto_priv.0+0x1d0>)
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8008d02:	f7f9 fc0d 	bl	8002520 <test_wait_tick>
    n = 0;
 8008d06:	f04f 0800 	mov.w	r8, #0
    start = test_wait_tick();
 8008d0a:	4681      	mov	r9, r0
 8008d0c:	2630      	movs	r6, #48	; 0x30
 8008d0e:	4645      	mov	r5, r8
 8008d10:	e043      	b.n	8008d9a <rt_test_012_010_execute.lto_priv.0+0xaa>
 8008d12:	f385 8811 	msr	BASEPRI, r5
 8008d16:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	db6a      	blt.n	8008dfa <rt_test_012_010_execute.lto_priv.0+0x10a>
 8008d24:	f385 8811 	msr	BASEPRI, r5
 8008d28:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8008d2c:	68a3      	ldr	r3, [r4, #8]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	60a3      	str	r3, [r4, #8]
 8008d34:	dd59      	ble.n	8008dea <rt_test_012_010_execute.lto_priv.0+0xfa>
 8008d36:	f385 8811 	msr	BASEPRI, r5
 8008d3a:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	60a3      	str	r3, [r4, #8]
 8008d46:	f2c0 8091 	blt.w	8008e6c <rt_test_012_010_execute.lto_priv.0+0x17c>
 8008d4a:	f385 8811 	msr	BASEPRI, r5
 8008d4e:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8008d52:	68a3      	ldr	r3, [r4, #8]
 8008d54:	3301      	adds	r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	60a3      	str	r3, [r4, #8]
 8008d5a:	dd3e      	ble.n	8008dda <rt_test_012_010_execute.lto_priv.0+0xea>
 8008d5c:	f385 8811 	msr	BASEPRI, r5
 8008d60:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	60a3      	str	r3, [r4, #8]
 8008d6c:	db6b      	blt.n	8008e46 <rt_test_012_010_execute.lto_priv.0+0x156>
 8008d6e:	f385 8811 	msr	BASEPRI, r5
 8008d72:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8008d76:	68a3      	ldr	r3, [r4, #8]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	60a3      	str	r3, [r4, #8]
 8008d7e:	dd24      	ble.n	8008dca <rt_test_012_010_execute.lto_priv.0+0xda>
 8008d80:	f385 8811 	msr	BASEPRI, r5
 8008d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008d88:	f242 720f 	movw	r2, #9999	; 0x270f
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	eba3 0309 	sub.w	r3, r3, r9
 8008d92:	4293      	cmp	r3, r2
      n++;
 8008d94:	f108 0801 	add.w	r8, r8, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008d98:	d87b      	bhi.n	8008e92 <rt_test_012_010_execute.lto_priv.0+0x1a2>
 8008d9a:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	60a3      	str	r3, [r4, #8]
 8008da6:	db3b      	blt.n	8008e20 <rt_test_012_010_execute.lto_priv.0+0x130>
 8008da8:	f385 8811 	msr	BASEPRI, r5
 8008dac:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8008db0:	68a3      	ldr	r3, [r4, #8]
 8008db2:	3301      	adds	r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	60a3      	str	r3, [r4, #8]
 8008db8:	dcab      	bgt.n	8008d12 <rt_test_012_010_execute.lto_priv.0+0x22>
  ch_queue_t *p = qp->next;
 8008dba:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8008dbc:	6803      	ldr	r3, [r0, #0]
 8008dbe:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 8008dc0:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8008dc2:	605c      	str	r4, [r3, #4]
 8008dc4:	f7fb f8c4 	bl	8003f50 <chSchWakeupS>
 8008dc8:	e7a3      	b.n	8008d12 <rt_test_012_010_execute.lto_priv.0+0x22>
  ch_queue_t *p = qp->next;
 8008dca:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8008dcc:	6803      	ldr	r3, [r0, #0]
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8008dd2:	605c      	str	r4, [r3, #4]
 8008dd4:	f7fb f8bc 	bl	8003f50 <chSchWakeupS>
 8008dd8:	e7d2      	b.n	8008d80 <rt_test_012_010_execute.lto_priv.0+0x90>
  ch_queue_t *p = qp->next;
 8008dda:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8008ddc:	6803      	ldr	r3, [r0, #0]
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8008de2:	605c      	str	r4, [r3, #4]
 8008de4:	f7fb f8b4 	bl	8003f50 <chSchWakeupS>
 8008de8:	e7b8      	b.n	8008d5c <rt_test_012_010_execute.lto_priv.0+0x6c>
  ch_queue_t *p = qp->next;
 8008dea:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8008dec:	6803      	ldr	r3, [r0, #0]
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8008df2:	605c      	str	r4, [r3, #4]
 8008df4:	f7fb f8ac 	bl	8003f50 <chSchWakeupS>
 8008df8:	e79d      	b.n	8008d36 <rt_test_012_010_execute.lto_priv.0+0x46>
 8008dfa:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8008dfc:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8008dfe:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8008e00:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 8008e02:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8008e04:	634c      	str	r4, [r1, #52]	; 0x34
  p->prev->next = p;
 8008e06:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8008e08:	2305      	movs	r3, #5
 8008e0a:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8008e0c:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8008e0e:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8008e10:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8008e12:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8008e14:	2301      	movs	r3, #1
 8008e16:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8008e18:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8008e1a:	f7f7 fa51 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8008e1e:	e781      	b.n	8008d24 <rt_test_012_010_execute.lto_priv.0+0x34>
 8008e20:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8008e22:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8008e24:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8008e26:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 8008e28:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8008e2a:	634c      	str	r4, [r1, #52]	; 0x34
  p->prev->next = p;
 8008e2c:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8008e2e:	2305      	movs	r3, #5
 8008e30:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8008e32:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8008e34:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8008e36:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8008e38:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8008e3e:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8008e40:	f7f7 fa3e 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8008e44:	e7b0      	b.n	8008da8 <rt_test_012_010_execute.lto_priv.0+0xb8>
 8008e46:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8008e48:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8008e4a:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8008e4c:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 8008e4e:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8008e50:	634c      	str	r4, [r1, #52]	; 0x34
  p->prev->next = p;
 8008e52:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8008e54:	2305      	movs	r3, #5
 8008e56:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8008e58:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8008e5a:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8008e5c:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8008e5e:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8008e60:	2301      	movs	r3, #1
 8008e62:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8008e64:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8008e66:	f7f7 fa2b 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8008e6a:	e780      	b.n	8008d6e <rt_test_012_010_execute.lto_priv.0+0x7e>
 8008e6c:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8008e6e:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8008e70:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8008e72:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 8008e74:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8008e76:	634c      	str	r4, [r1, #52]	; 0x34
  p->prev->next = p;
 8008e78:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8008e7a:	2305      	movs	r3, #5
 8008e7c:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8008e7e:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8008e80:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8008e82:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8008e84:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8008e86:	2301      	movs	r3, #1
 8008e88:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8008e8a:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8008e8c:	f7f7 fa18 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8008e90:	e75b      	b.n	8008d4a <rt_test_012_010_execute.lto_priv.0+0x5a>
  test_set_step(2);
 8008e92:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8008e94:	490b      	ldr	r1, [pc, #44]	; (8008ec4 <rt_test_012_010_execute.lto_priv.0+0x1d4>)
 8008e96:	480c      	ldr	r0, [pc, #48]	; (8008ec8 <rt_test_012_010_execute.lto_priv.0+0x1d8>)
 8008e98:	f8ca 3000 	str.w	r3, [sl]
 8008e9c:	f7fe fdc0 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008ea0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8008ea4:	4809      	ldr	r0, [pc, #36]	; (8008ecc <rt_test_012_010_execute.lto_priv.0+0x1dc>)
 8008ea6:	f7fe fdbb 	bl	8007a20 <test_printf>
}
 8008eaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008eae:	4908      	ldr	r1, [pc, #32]	; (8008ed0 <rt_test_012_010_execute.lto_priv.0+0x1e0>)
 8008eb0:	4808      	ldr	r0, [pc, #32]	; (8008ed4 <rt_test_012_010_execute.lto_priv.0+0x1e4>)
 8008eb2:	f7fe bdb5 	b.w	8007a20 <test_printf>
 8008eb6:	bf00      	nop
 8008eb8:	20000ab4 	.word	0x20000ab4
 8008ebc:	20000d18 	.word	0x20000d18
 8008ec0:	200009b8 	.word	0x200009b8
 8008ec4:	0800c810 	.word	0x0800c810
 8008ec8:	0800bfc0 	.word	0x0800bfc0
 8008ecc:	0800c0c4 	.word	0x0800c0c4
 8008ed0:	0800c864 	.word	0x0800c864
 8008ed4:	0800cdf8 	.word	0x0800cdf8
	...

08008ee0 <rt_test_012_011_execute.lto_priv.0>:

static void rt_test_012_011_execute(void) {
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t n;

  /* [12.11.1] A mutex is locked and unlocked. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8008ee4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8008f9c <rt_test_012_011_execute.lto_priv.0+0xbc>
 8008ee8:	2101      	movs	r1, #1
 8008eea:	f8c9 1000 	str.w	r1, [r9]
 8008eee:	2530      	movs	r5, #48	; 0x30
 8008ef0:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008ef4:	2008      	movs	r0, #8
 8008ef6:	f7fa f873 	bl	8002fe0 <chSchGoSleepTimeoutS>
 8008efa:	2700      	movs	r7, #0
 8008efc:	f387 8811 	msr	BASEPRI, r7
 8008f00:	f385 8811 	msr	BASEPRI, r5
 8008f04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f08:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8008f0c:	f387 8811 	msr	BASEPRI, r7
 8008f10:	4c23      	ldr	r4, [pc, #140]	; (8008fa0 <rt_test_012_011_execute.lto_priv.0+0xc0>)
 8008f12:	463e      	mov	r6, r7
 8008f14:	f385 8811 	msr	BASEPRI, r5
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f7fc ff09 	bl	8005d30 <chMtxLockS>
 8008f1e:	f386 8811 	msr	BASEPRI, r6
    n = 0;
    start = test_wait_tick();
    end = chTimeAddX(start, TIME_MS2I(1000));
    do {
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008f22:	4620      	mov	r0, r4
 8008f24:	f7fc ff9c 	bl	8005e60 <chMtxUnlock>
 8008f28:	f385 8811 	msr	BASEPRI, r5
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f7fc feff 	bl	8005d30 <chMtxLockS>
 8008f32:	f386 8811 	msr	BASEPRI, r6
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008f36:	4620      	mov	r0, r4
 8008f38:	f7fc ff92 	bl	8005e60 <chMtxUnlock>
 8008f3c:	f385 8811 	msr	BASEPRI, r5
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7fc fef5 	bl	8005d30 <chMtxLockS>
 8008f46:	f386 8811 	msr	BASEPRI, r6
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f7fc ff88 	bl	8005e60 <chMtxUnlock>
 8008f50:	f385 8811 	msr	BASEPRI, r5
 8008f54:	4620      	mov	r0, r4
 8008f56:	f7fc feeb 	bl	8005d30 <chMtxLockS>
 8008f5a:	f386 8811 	msr	BASEPRI, r6
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f7fc ff7e 	bl	8005e60 <chMtxUnlock>
 8008f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8008f68:	f242 720f 	movw	r2, #9999	; 0x270f
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6e:	eba3 0308 	sub.w	r3, r3, r8
 8008f72:	4293      	cmp	r3, r2
      n++;
 8008f74:	f107 0701 	add.w	r7, r7, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008f78:	d9cc      	bls.n	8008f14 <rt_test_012_011_execute.lto_priv.0+0x34>
  }
  test_end_step(1);

  /* [12.11.2] The score is printed.*/
  test_set_step(2);
 8008f7a:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8008f7c:	4909      	ldr	r1, [pc, #36]	; (8008fa4 <rt_test_012_011_execute.lto_priv.0+0xc4>)
 8008f7e:	480a      	ldr	r0, [pc, #40]	; (8008fa8 <rt_test_012_011_execute.lto_priv.0+0xc8>)
 8008f80:	f8c9 3000 	str.w	r3, [r9]
 8008f84:	f7fe fd4c 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008f88:	00b9      	lsls	r1, r7, #2
 8008f8a:	4808      	ldr	r0, [pc, #32]	; (8008fac <rt_test_012_011_execute.lto_priv.0+0xcc>)
 8008f8c:	f7fe fd48 	bl	8007a20 <test_printf>
    test_print("--- Score : ");
    test_printn(n * 4);
    test_println(" lock+unlock/S");
  }
  test_end_step(2);
}
 8008f90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008f94:	4906      	ldr	r1, [pc, #24]	; (8008fb0 <rt_test_012_011_execute.lto_priv.0+0xd0>)
 8008f96:	4807      	ldr	r0, [pc, #28]	; (8008fb4 <rt_test_012_011_execute.lto_priv.0+0xd4>)
 8008f98:	f7fe bd42 	b.w	8007a20 <test_printf>
 8008f9c:	20000ab4 	.word	0x20000ab4
 8008fa0:	20000bfc 	.word	0x20000bfc
 8008fa4:	0800c810 	.word	0x0800c810
 8008fa8:	0800bfc0 	.word	0x0800bfc0
 8008fac:	0800c0c4 	.word	0x0800c0c4
 8008fb0:	0800c874 	.word	0x0800c874
 8008fb4:	0800cdf8 	.word	0x0800cdf8
	...

08008fc0 <rt_test_012_012_execute.lto_priv.0>:
 * - [12.12.8] The size of an event listener is printed.
 * - [12.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_012_012_execute(void) {
 8008fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_printf("%s", msgp);
 8008fc4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80090d4 <rt_test_012_012_execute.lto_priv.0+0x114>

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8008fc8:	4f43      	ldr	r7, [pc, #268]	; (80090d8 <rt_test_012_012_execute.lto_priv.0+0x118>)
  test_printf("%u", n);
 8008fca:	4e44      	ldr	r6, [pc, #272]	; (80090dc <rt_test_012_012_execute.lto_priv.0+0x11c>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008fcc:	4d44      	ldr	r5, [pc, #272]	; (80090e0 <rt_test_012_012_execute.lto_priv.0+0x120>)
 8008fce:	4c45      	ldr	r4, [pc, #276]	; (80090e4 <rt_test_012_012_execute.lto_priv.0+0x124>)
  test_printf("%s", msgp);
 8008fd0:	4945      	ldr	r1, [pc, #276]	; (80090e8 <rt_test_012_012_execute.lto_priv.0+0x128>)
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	603b      	str	r3, [r7, #0]
 8008fd8:	f7fe fd22 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008fdc:	21e8      	movs	r1, #232	; 0xe8
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f7fe fd1e 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f7fe fd1a 	bl	8007a20 <test_printf>
    test_println(" bytes");
  }
  test_end_step(1);

  /* [12.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8008fec:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8008fee:	493f      	ldr	r1, [pc, #252]	; (80090ec <rt_test_012_012_execute.lto_priv.0+0x12c>)
 8008ff0:	603b      	str	r3, [r7, #0]
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	f7fe fd14 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8008ff8:	2150      	movs	r1, #80	; 0x50
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7fe fd10 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009000:	4629      	mov	r1, r5
 8009002:	4620      	mov	r0, r4
 8009004:	f7fe fd0c 	bl	8007a20 <test_printf>
    test_println(" bytes");
  }
  test_end_step(2);

  /* [12.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8009008:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 800900a:	4939      	ldr	r1, [pc, #228]	; (80090f0 <rt_test_012_012_execute.lto_priv.0+0x130>)
 800900c:	603b      	str	r3, [r7, #0]
 800900e:	4640      	mov	r0, r8
 8009010:	f7fe fd06 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009014:	2118      	movs	r1, #24
 8009016:	4630      	mov	r0, r6
 8009018:	f7fe fd02 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800901c:	4629      	mov	r1, r5
 800901e:	4620      	mov	r0, r4
 8009020:	f7fe fcfe 	bl	8007a20 <test_printf>
    test_println(" bytes");
  }
  test_end_step(3);

  /* [12.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8009024:	f04f 0904 	mov.w	r9, #4
  test_printf("%s", msgp);
 8009028:	4932      	ldr	r1, [pc, #200]	; (80090f4 <rt_test_012_012_execute.lto_priv.0+0x134>)
 800902a:	f8c7 9000 	str.w	r9, [r7]
 800902e:	4640      	mov	r0, r8
 8009030:	f7fe fcf6 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009034:	210c      	movs	r1, #12
 8009036:	4630      	mov	r0, r6
 8009038:	f7fe fcf2 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800903c:	4629      	mov	r1, r5
 800903e:	4620      	mov	r0, r4
 8009040:	f7fe fcee 	bl	8007a20 <test_printf>
#endif
  }
  test_end_step(4);

  /* [12.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8009044:	2305      	movs	r3, #5
  test_printf("%s", msgp);
 8009046:	492c      	ldr	r1, [pc, #176]	; (80090f8 <rt_test_012_012_execute.lto_priv.0+0x138>)
 8009048:	603b      	str	r3, [r7, #0]
 800904a:	4640      	mov	r0, r8
 800904c:	f7fe fce8 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009050:	2110      	movs	r1, #16
 8009052:	4630      	mov	r0, r6
 8009054:	f7fe fce4 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009058:	4629      	mov	r1, r5
 800905a:	4620      	mov	r0, r4
 800905c:	f7fe fce0 	bl	8007a20 <test_printf>
#endif
  }
  test_end_step(5);

  /* [12.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8009060:	2306      	movs	r3, #6
  test_printf("%s", msgp);
 8009062:	4926      	ldr	r1, [pc, #152]	; (80090fc <rt_test_012_012_execute.lto_priv.0+0x13c>)
 8009064:	603b      	str	r3, [r7, #0]
 8009066:	4640      	mov	r0, r8
 8009068:	f7fe fcda 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800906c:	2108      	movs	r1, #8
 800906e:	4630      	mov	r0, r6
 8009070:	f7fe fcd6 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009074:	4629      	mov	r1, r5
 8009076:	4620      	mov	r0, r4
 8009078:	f7fe fcd2 	bl	8007a20 <test_printf>
#endif
  }
  test_end_step(6);

  /* [12.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800907c:	2307      	movs	r3, #7
  test_printf("%s", msgp);
 800907e:	4920      	ldr	r1, [pc, #128]	; (8009100 <rt_test_012_012_execute.lto_priv.0+0x140>)
 8009080:	603b      	str	r3, [r7, #0]
 8009082:	4640      	mov	r0, r8
 8009084:	f7fe fccc 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009088:	4649      	mov	r1, r9
 800908a:	4630      	mov	r0, r6
 800908c:	f7fe fcc8 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009090:	4629      	mov	r1, r5
 8009092:	4620      	mov	r0, r4
 8009094:	f7fe fcc4 	bl	8007a20 <test_printf>
#endif
  }
  test_end_step(7);

  /* [12.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8009098:	2308      	movs	r3, #8
  test_printf("%s", msgp);
 800909a:	491a      	ldr	r1, [pc, #104]	; (8009104 <rt_test_012_012_execute.lto_priv.0+0x144>)
 800909c:	603b      	str	r3, [r7, #0]
 800909e:	4640      	mov	r0, r8
 80090a0:	f7fe fcbe 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80090a4:	2114      	movs	r1, #20
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7fe fcba 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80090ac:	4629      	mov	r1, r5
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7fe fcb6 	bl	8007a20 <test_printf>
#endif
  }
  test_end_step(8);

  /* [12.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 80090b4:	2309      	movs	r3, #9
  test_printf("%s", msgp);
 80090b6:	4914      	ldr	r1, [pc, #80]	; (8009108 <rt_test_012_012_execute.lto_priv.0+0x148>)
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	4640      	mov	r0, r8
 80090bc:	f7fe fcb0 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80090c0:	2128      	movs	r1, #40	; 0x28
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7fe fcac 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80090c8:	4629      	mov	r1, r5
 80090ca:	4620      	mov	r0, r4
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
#endif
  }
  test_end_step(9);
}
 80090cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d0:	f7fe bca6 	b.w	8007a20 <test_printf>
 80090d4:	0800bfc0 	.word	0x0800bfc0
 80090d8:	20000ab4 	.word	0x20000ab4
 80090dc:	0800c0c4 	.word	0x0800c0c4
 80090e0:	0800c894 	.word	0x0800c894
 80090e4:	0800cdf8 	.word	0x0800cdf8
 80090e8:	0800c884 	.word	0x0800c884
 80090ec:	0800c89c 	.word	0x0800c89c
 80090f0:	0800c8ac 	.word	0x0800c8ac
 80090f4:	0800c8bc 	.word	0x0800c8bc
 80090f8:	0800c8cc 	.word	0x0800c8cc
 80090fc:	0800c8dc 	.word	0x0800c8dc
 8009100:	0800c8ec 	.word	0x0800c8ec
 8009104:	0800c8fc 	.word	0x0800c8fc
 8009108:	0800c90c 	.word	0x0800c90c
 800910c:	00000000 	.word	0x00000000

08009110 <oslib_test_001_002_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void oslib_test_001_002_execute(void) {
 8009110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009114:	4c23      	ldr	r4, [pc, #140]	; (80091a4 <oslib_test_001_002_execute.lto_priv.0+0x94>)

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8009116:	4b24      	ldr	r3, [pc, #144]	; (80091a8 <oslib_test_001_002_execute.lto_priv.0+0x98>)
  test_printf("%s", msgp);
 8009118:	4d24      	ldr	r5, [pc, #144]	; (80091ac <oslib_test_001_002_execute.lto_priv.0+0x9c>)
  test_printf("%u", n);
 800911a:	4f25      	ldr	r7, [pc, #148]	; (80091b0 <oslib_test_001_002_execute.lto_priv.0+0xa0>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800911c:	4925      	ldr	r1, [pc, #148]	; (80091b4 <oslib_test_001_002_execute.lto_priv.0+0xa4>)
 800911e:	4e26      	ldr	r6, [pc, #152]	; (80091b8 <oslib_test_001_002_execute.lto_priv.0+0xa8>)
 8009120:	f04f 0801 	mov.w	r8, #1
 8009124:	4620      	mov	r0, r4
 8009126:	f8c3 8000 	str.w	r8, [r3]
 800912a:	f7fe fc79 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800912e:	4923      	ldr	r1, [pc, #140]	; (80091bc <oslib_test_001_002_execute.lto_priv.0+0xac>)
 8009130:	4628      	mov	r0, r5
 8009132:	f7fe fc75 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009136:	2100      	movs	r1, #0
 8009138:	4638      	mov	r0, r7
 800913a:	f7fe fc71 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800913e:	4631      	mov	r1, r6
 8009140:	4620      	mov	r0, r4
 8009142:	f7fe fc6d 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8009146:	491e      	ldr	r1, [pc, #120]	; (80091c0 <oslib_test_001_002_execute.lto_priv.0+0xb0>)
 8009148:	4628      	mov	r0, r5
 800914a:	f7fe fc69 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800914e:	491d      	ldr	r1, [pc, #116]	; (80091c4 <oslib_test_001_002_execute.lto_priv.0+0xb4>)
 8009150:	4620      	mov	r0, r4
 8009152:	f7fe fc65 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8009156:	491c      	ldr	r1, [pc, #112]	; (80091c8 <oslib_test_001_002_execute.lto_priv.0+0xb8>)
 8009158:	4628      	mov	r0, r5
 800915a:	f7fe fc61 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800915e:	4641      	mov	r1, r8
 8009160:	4638      	mov	r0, r7
 8009162:	f7fe fc5d 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009166:	4631      	mov	r1, r6
 8009168:	4620      	mov	r0, r4
 800916a:	f7fe fc59 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800916e:	4917      	ldr	r1, [pc, #92]	; (80091cc <oslib_test_001_002_execute.lto_priv.0+0xbc>)
 8009170:	4628      	mov	r0, r5
 8009172:	f7fe fc55 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009176:	2104      	movs	r1, #4
 8009178:	4638      	mov	r0, r7
 800917a:	f7fe fc51 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800917e:	4631      	mov	r1, r6
 8009180:	4620      	mov	r0, r4
 8009182:	f7fe fc4d 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8009186:	4912      	ldr	r1, [pc, #72]	; (80091d0 <oslib_test_001_002_execute.lto_priv.0+0xc0>)
 8009188:	4628      	mov	r0, r5
 800918a:	f7fe fc49 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800918e:	2100      	movs	r1, #0
 8009190:	4638      	mov	r0, r7
 8009192:	f7fe fc45 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009196:	4631      	mov	r1, r6
 8009198:	4620      	mov	r0, r4
    test_print("--- Patch Number:                       ");
    test_printn(CH_OSLIB_PATCH);
    test_println("");
  }
  test_end_step(1);
}
 800919a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	f7fe bc3f 	b.w	8007a20 <test_printf>
 80091a2:	bf00      	nop
 80091a4:	0800cdf8 	.word	0x0800cdf8
 80091a8:	20000ab4 	.word	0x20000ab4
 80091ac:	0800bfc0 	.word	0x0800bfc0
 80091b0:	0800c0c4 	.word	0x0800c0c4
 80091b4:	0800c91c 	.word	0x0800c91c
 80091b8:	0800ce10 	.word	0x0800ce10
 80091bc:	0800c154 	.word	0x0800c154
 80091c0:	0800c180 	.word	0x0800c180
 80091c4:	0800c950 	.word	0x0800c950
 80091c8:	0800c1b4 	.word	0x0800c1b4
 80091cc:	0800c1e0 	.word	0x0800c1e0
 80091d0:	0800c20c 	.word	0x0800c20c
	...

080091e0 <oslib_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 80091e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_printf("%s", msgp);
 80091e4:	4f71      	ldr	r7, [pc, #452]	; (80093ac <oslib_test_001_003_execute.lto_priv.0+0x1cc>)

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 80091e6:	4b72      	ldr	r3, [pc, #456]	; (80093b0 <oslib_test_001_003_execute.lto_priv.0+0x1d0>)
  test_printf("%u", n);
 80091e8:	4e72      	ldr	r6, [pc, #456]	; (80093b4 <oslib_test_001_003_execute.lto_priv.0+0x1d4>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80091ea:	4d73      	ldr	r5, [pc, #460]	; (80093b8 <oslib_test_001_003_execute.lto_priv.0+0x1d8>)
 80091ec:	4c73      	ldr	r4, [pc, #460]	; (80093bc <oslib_test_001_003_execute.lto_priv.0+0x1dc>)
  test_printf("%s", msgp);
 80091ee:	4974      	ldr	r1, [pc, #464]	; (80093c0 <oslib_test_001_003_execute.lto_priv.0+0x1e0>)
 80091f0:	f04f 0801 	mov.w	r8, #1
 80091f4:	4638      	mov	r0, r7
 80091f6:	f8c3 8000 	str.w	r8, [r3]
 80091fa:	f7fe fc11 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80091fe:	4641      	mov	r1, r8
 8009200:	4630      	mov	r0, r6
 8009202:	f7fe fc0d 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009206:	4629      	mov	r1, r5
 8009208:	4620      	mov	r0, r4
 800920a:	f7fe fc09 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800920e:	496d      	ldr	r1, [pc, #436]	; (80093c4 <oslib_test_001_003_execute.lto_priv.0+0x1e4>)
 8009210:	4638      	mov	r0, r7
 8009212:	f7fe fc05 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009216:	4641      	mov	r1, r8
 8009218:	4630      	mov	r0, r6
 800921a:	f7fe fc01 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800921e:	4629      	mov	r1, r5
 8009220:	4620      	mov	r0, r4
 8009222:	f7fe fbfd 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8009226:	4968      	ldr	r1, [pc, #416]	; (80093c8 <oslib_test_001_003_execute.lto_priv.0+0x1e8>)
 8009228:	4638      	mov	r0, r7
 800922a:	f7fe fbf9 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800922e:	4641      	mov	r1, r8
 8009230:	4630      	mov	r0, r6
 8009232:	f7fe fbf5 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009236:	4629      	mov	r1, r5
 8009238:	4620      	mov	r0, r4
 800923a:	f7fe fbf1 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800923e:	4963      	ldr	r1, [pc, #396]	; (80093cc <oslib_test_001_003_execute.lto_priv.0+0x1ec>)
 8009240:	4638      	mov	r0, r7
 8009242:	f7fe fbed 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009246:	2100      	movs	r1, #0
 8009248:	4630      	mov	r0, r6
 800924a:	f7fe fbe9 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800924e:	4629      	mov	r1, r5
 8009250:	4620      	mov	r0, r4
 8009252:	f7fe fbe5 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8009256:	495e      	ldr	r1, [pc, #376]	; (80093d0 <oslib_test_001_003_execute.lto_priv.0+0x1f0>)
 8009258:	4638      	mov	r0, r7
 800925a:	f7fe fbe1 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800925e:	4641      	mov	r1, r8
 8009260:	4630      	mov	r0, r6
 8009262:	f7fe fbdd 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009266:	4629      	mov	r1, r5
 8009268:	4620      	mov	r0, r4
 800926a:	f7fe fbd9 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800926e:	4959      	ldr	r1, [pc, #356]	; (80093d4 <oslib_test_001_003_execute.lto_priv.0+0x1f4>)
 8009270:	4638      	mov	r0, r7
 8009272:	f7fe fbd5 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009276:	4641      	mov	r1, r8
 8009278:	4630      	mov	r0, r6
 800927a:	f7fe fbd1 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800927e:	4629      	mov	r1, r5
 8009280:	4620      	mov	r0, r4
 8009282:	f7fe fbcd 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8009286:	4954      	ldr	r1, [pc, #336]	; (80093d8 <oslib_test_001_003_execute.lto_priv.0+0x1f8>)
 8009288:	4638      	mov	r0, r7
 800928a:	f7fe fbc9 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800928e:	4641      	mov	r1, r8
 8009290:	4630      	mov	r0, r6
 8009292:	f7fe fbc5 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009296:	4629      	mov	r1, r5
 8009298:	4620      	mov	r0, r4
 800929a:	f7fe fbc1 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800929e:	494f      	ldr	r1, [pc, #316]	; (80093dc <oslib_test_001_003_execute.lto_priv.0+0x1fc>)
 80092a0:	4638      	mov	r0, r7
 80092a2:	f7fe fbbd 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80092a6:	4641      	mov	r1, r8
 80092a8:	4630      	mov	r0, r6
 80092aa:	f7fe fbb9 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80092ae:	4629      	mov	r1, r5
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7fe fbb5 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80092b6:	494a      	ldr	r1, [pc, #296]	; (80093e0 <oslib_test_001_003_execute.lto_priv.0+0x200>)
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7fe fbb1 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80092be:	4641      	mov	r1, r8
 80092c0:	4630      	mov	r0, r6
 80092c2:	f7fe fbad 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80092c6:	4629      	mov	r1, r5
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7fe fba9 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80092ce:	4945      	ldr	r1, [pc, #276]	; (80093e4 <oslib_test_001_003_execute.lto_priv.0+0x204>)
 80092d0:	4638      	mov	r0, r7
 80092d2:	f7fe fba5 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80092d6:	4641      	mov	r1, r8
 80092d8:	4630      	mov	r0, r6
 80092da:	f7fe fba1 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80092de:	4629      	mov	r1, r5
 80092e0:	4620      	mov	r0, r4
 80092e2:	f7fe fb9d 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80092e6:	4940      	ldr	r1, [pc, #256]	; (80093e8 <oslib_test_001_003_execute.lto_priv.0+0x208>)
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7fe fb99 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 80092ee:	4641      	mov	r1, r8
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7fe fb95 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80092f6:	4629      	mov	r1, r5
 80092f8:	4620      	mov	r0, r4
 80092fa:	f7fe fb91 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 80092fe:	493b      	ldr	r1, [pc, #236]	; (80093ec <oslib_test_001_003_execute.lto_priv.0+0x20c>)
 8009300:	4638      	mov	r0, r7
 8009302:	f7fe fb8d 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009306:	2108      	movs	r1, #8
 8009308:	4630      	mov	r0, r6
 800930a:	f7fe fb89 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800930e:	4629      	mov	r1, r5
 8009310:	4620      	mov	r0, r4
 8009312:	f7fe fb85 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8009316:	4936      	ldr	r1, [pc, #216]	; (80093f0 <oslib_test_001_003_execute.lto_priv.0+0x210>)
 8009318:	4638      	mov	r0, r7
 800931a:	f7fe fb81 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800931e:	4641      	mov	r1, r8
 8009320:	4630      	mov	r0, r6
 8009322:	f7fe fb7d 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009326:	4629      	mov	r1, r5
 8009328:	4620      	mov	r0, r4
 800932a:	f7fe fb79 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800932e:	4931      	ldr	r1, [pc, #196]	; (80093f4 <oslib_test_001_003_execute.lto_priv.0+0x214>)
 8009330:	4638      	mov	r0, r7
 8009332:	f7fe fb75 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009336:	4641      	mov	r1, r8
 8009338:	4630      	mov	r0, r6
 800933a:	f7fe fb71 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800933e:	4629      	mov	r1, r5
 8009340:	4620      	mov	r0, r4
 8009342:	f7fe fb6d 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8009346:	492c      	ldr	r1, [pc, #176]	; (80093f8 <oslib_test_001_003_execute.lto_priv.0+0x218>)
 8009348:	4638      	mov	r0, r7
 800934a:	f7fe fb69 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800934e:	4641      	mov	r1, r8
 8009350:	4630      	mov	r0, r6
 8009352:	f7fe fb65 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009356:	4629      	mov	r1, r5
 8009358:	4620      	mov	r0, r4
 800935a:	f7fe fb61 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800935e:	4927      	ldr	r1, [pc, #156]	; (80093fc <oslib_test_001_003_execute.lto_priv.0+0x21c>)
 8009360:	4638      	mov	r0, r7
 8009362:	f7fe fb5d 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009366:	4641      	mov	r1, r8
 8009368:	4630      	mov	r0, r6
 800936a:	f7fe fb59 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800936e:	4629      	mov	r1, r5
 8009370:	4620      	mov	r0, r4
 8009372:	f7fe fb55 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 8009376:	4922      	ldr	r1, [pc, #136]	; (8009400 <oslib_test_001_003_execute.lto_priv.0+0x220>)
 8009378:	4638      	mov	r0, r7
 800937a:	f7fe fb51 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 800937e:	4641      	mov	r1, r8
 8009380:	4630      	mov	r0, r6
 8009382:	f7fe fb4d 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009386:	4629      	mov	r1, r5
 8009388:	4620      	mov	r0, r4
 800938a:	f7fe fb49 	bl	8007a20 <test_printf>
  test_printf("%s", msgp);
 800938e:	491d      	ldr	r1, [pc, #116]	; (8009404 <oslib_test_001_003_execute.lto_priv.0+0x224>)
 8009390:	4638      	mov	r0, r7
 8009392:	f7fe fb45 	bl	8007a20 <test_printf>
  test_printf("%u", n);
 8009396:	4641      	mov	r1, r8
 8009398:	4630      	mov	r0, r6
 800939a:	f7fe fb41 	bl	8007a20 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800939e:	4629      	mov	r1, r5
 80093a0:	4620      	mov	r0, r4
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
  }
  test_end_step(1);
}
 80093a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093a6:	f7fe bb3b 	b.w	8007a20 <test_printf>
 80093aa:	bf00      	nop
 80093ac:	0800bfc0 	.word	0x0800bfc0
 80093b0:	20000ab4 	.word	0x20000ab4
 80093b4:	0800c0c4 	.word	0x0800c0c4
 80093b8:	0800ce10 	.word	0x0800ce10
 80093bc:	0800cdf8 	.word	0x0800cdf8
 80093c0:	0800c958 	.word	0x0800c958
 80093c4:	0800c984 	.word	0x0800c984
 80093c8:	0800c9b0 	.word	0x0800c9b0
 80093cc:	0800c9dc 	.word	0x0800c9dc
 80093d0:	0800ca08 	.word	0x0800ca08
 80093d4:	0800ca34 	.word	0x0800ca34
 80093d8:	0800ca60 	.word	0x0800ca60
 80093dc:	0800ca8c 	.word	0x0800ca8c
 80093e0:	0800cab8 	.word	0x0800cab8
 80093e4:	0800cae4 	.word	0x0800cae4
 80093e8:	0800cb10 	.word	0x0800cb10
 80093ec:	0800cb3c 	.word	0x0800cb3c
 80093f0:	0800cb68 	.word	0x0800cb68
 80093f4:	0800cb94 	.word	0x0800cb94
 80093f8:	0800cbc0 	.word	0x0800cbc0
 80093fc:	0800cbec 	.word	0x0800cbec
 8009400:	0800cc18 	.word	0x0800cc18
 8009404:	0800cc44 	.word	0x0800cc44
	...

08009410 <oslib_test_008_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [8.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_008_002_execute(void) {
 8009410:	b538      	push	{r3, r4, r5, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8009412:	4d18      	ldr	r5, [pc, #96]	; (8009474 <oslib_test_008_002_execute+0x64>)
 8009414:	2301      	movs	r3, #1
 8009416:	602b      	str	r3, [r5, #0]
 8009418:	2330      	movs	r3, #48	; 0x30
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	4816      	ldr	r0, [pc, #88]	; (8009478 <oslib_test_008_002_execute+0x68>)
 8009420:	f7fc fc86 	bl	8005d30 <chMtxLockS>
 8009424:	2300      	movs	r3, #0
 8009426:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 800942a:	4c14      	ldr	r4, [pc, #80]	; (800947c <oslib_test_008_002_execute+0x6c>)
  while (H_FREE_NEXT(qp) != NULL) {
 800942c:	6824      	ldr	r4, [r4, #0]
 800942e:	2c00      	cmp	r4, #0
 8009430:	d1fc      	bne.n	800942c <oslib_test_008_002_execute+0x1c>
  H_UNLOCK(heapp);
 8009432:	4811      	ldr	r0, [pc, #68]	; (8009478 <oslib_test_008_002_execute+0x68>)
 8009434:	f7fc fd14 	bl	8005e60 <chMtxUnlock>
 8009438:	4811      	ldr	r0, [pc, #68]	; (8009480 <oslib_test_008_002_execute+0x70>)
 800943a:	2208      	movs	r2, #8
 800943c:	2110      	movs	r1, #16
 800943e:	f7fd f9a7 	bl	8006790 <chHeapAllocAligned>
  if (!condition) {
 8009442:	b158      	cbz	r0, 800945c <oslib_test_008_002_execute+0x4c>
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 8009444:	f7fd fa34 	bl	80068b0 <chHeapFree>
  }
  test_end_step(1);

  /* [8.2.2] Testing allocation failure.*/
  test_set_step(2);
 8009448:	2302      	movs	r3, #2
 800944a:	2208      	movs	r2, #8
 800944c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8009450:	4620      	mov	r0, r4
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7fd f99c 	bl	8006790 <chHeapAllocAligned>
 8009458:	b930      	cbnz	r0, 8009468 <oslib_test_008_002_execute+0x58>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 800945a:	bd38      	pop	{r3, r4, r5, pc}
  chtest.failure_message = msg;
 800945c:	4b09      	ldr	r3, [pc, #36]	; (8009484 <oslib_test_008_002_execute+0x74>)
 800945e:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8009460:	f240 1201 	movw	r2, #257	; 0x101
 8009464:	80aa      	strh	r2, [r5, #4]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
  chtest.failure_message = msg;
 8009468:	4b07      	ldr	r3, [pc, #28]	; (8009488 <oslib_test_008_002_execute+0x78>)
 800946a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800946c:	f240 1201 	movw	r2, #257	; 0x101
 8009470:	80aa      	strh	r2, [r5, #4]
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	20000ab4 	.word	0x20000ab4
 8009478:	20000af0 	.word	0x20000af0
 800947c:	20000ae8 	.word	0x20000ae8
 8009480:	200016a0 	.word	0x200016a0
 8009484:	0800bf2c 	.word	0x0800bf2c
 8009488:	0800bf14 	.word	0x0800bf14
 800948c:	00000000 	.word	0x00000000

08009490 <chFactoryReleasePipe.isra.0>:
 *                      release.
 * @retval 0            if the object has been released.
 *
 * @api
 */
ucnt_t chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8009490:	b510      	push	{r4, lr}
 8009492:	2330      	movs	r3, #48	; 0x30
 8009494:	4604      	mov	r4, r0
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	4811      	ldr	r0, [pc, #68]	; (80094e0 <chFactoryReleasePipe.isra.0+0x50>)
 800949c:	f7fc fc48 	bl	8005d30 <chMtxLockS>
 80094a0:	2300      	movs	r3, #0
 80094a2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80094a6:	4a0f      	ldr	r2, [pc, #60]	; (80094e4 <chFactoryReleasePipe.isra.0+0x54>)
 80094a8:	4613      	mov	r3, r2
 80094aa:	e001      	b.n	80094b0 <chFactoryReleasePipe.isra.0+0x20>
    if (prev->next == element) {
 80094ac:	429c      	cmp	r4, r3
 80094ae:	d008      	beq.n	80094c2 <chFactoryReleasePipe.isra.0+0x32>
 80094b0:	4619      	mov	r1, r3
  while (prev->next != (dyn_element_t *)dlp) {
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d1f9      	bne.n	80094ac <chFactoryReleasePipe.isra.0+0x1c>
  refs = dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  FACTORY_UNLOCK();

  return refs;
}
 80094b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 80094bc:	4808      	ldr	r0, [pc, #32]	; (80094e0 <chFactoryReleasePipe.isra.0+0x50>)
 80094be:	f7fc bccf 	b.w	8005e60 <chMtxUnlock>
    refs = --dep->refs;
 80094c2:	6863      	ldr	r3, [r4, #4]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1f5      	bne.n	80094b8 <chFactoryReleasePipe.isra.0+0x28>
  prev->next = element->next;
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	600b      	str	r3, [r1, #0]
      chHeapFree((void *)dyn_list_unlink(prev));
 80094d0:	4620      	mov	r0, r4
 80094d2:	f7fd f9ed 	bl	80068b0 <chHeapFree>
}
 80094d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 80094da:	4801      	ldr	r0, [pc, #4]	; (80094e0 <chFactoryReleasePipe.isra.0+0x50>)
 80094dc:	f7fc bcc0 	b.w	8005e60 <chMtxUnlock>
 80094e0:	20001f00 	.word	0x20001f00
 80094e4:	20001f44 	.word	0x20001f44
	...

080094f0 <chFactoryReleaseObjectsFIFO.isra.0>:
ucnt_t chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 80094f0:	b510      	push	{r4, lr}
 80094f2:	2330      	movs	r3, #48	; 0x30
 80094f4:	4604      	mov	r4, r0
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	4811      	ldr	r0, [pc, #68]	; (8009540 <chFactoryReleaseObjectsFIFO.isra.0+0x50>)
 80094fc:	f7fc fc18 	bl	8005d30 <chMtxLockS>
 8009500:	2300      	movs	r3, #0
 8009502:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8009506:	4a0f      	ldr	r2, [pc, #60]	; (8009544 <chFactoryReleaseObjectsFIFO.isra.0+0x54>)
 8009508:	4613      	mov	r3, r2
 800950a:	e001      	b.n	8009510 <chFactoryReleaseObjectsFIFO.isra.0+0x20>
    if (prev->next == element) {
 800950c:	429c      	cmp	r4, r3
 800950e:	d008      	beq.n	8009522 <chFactoryReleaseObjectsFIFO.isra.0+0x32>
 8009510:	4619      	mov	r1, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4293      	cmp	r3, r2
 8009516:	d1f9      	bne.n	800950c <chFactoryReleaseObjectsFIFO.isra.0+0x1c>
}
 8009518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800951c:	4808      	ldr	r0, [pc, #32]	; (8009540 <chFactoryReleaseObjectsFIFO.isra.0+0x50>)
 800951e:	f7fc bc9f 	b.w	8005e60 <chMtxUnlock>
    refs = --dep->refs;
 8009522:	6863      	ldr	r3, [r4, #4]
 8009524:	3b01      	subs	r3, #1
 8009526:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1f5      	bne.n	8009518 <chFactoryReleaseObjectsFIFO.isra.0+0x28>
  prev->next = element->next;
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	600b      	str	r3, [r1, #0]
      chHeapFree((void *)dyn_list_unlink(prev));
 8009530:	4620      	mov	r0, r4
 8009532:	f7fd f9bd 	bl	80068b0 <chHeapFree>
}
 8009536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800953a:	4801      	ldr	r0, [pc, #4]	; (8009540 <chFactoryReleaseObjectsFIFO.isra.0+0x50>)
 800953c:	f7fc bc90 	b.w	8005e60 <chMtxUnlock>
 8009540:	20001f00 	.word	0x20001f00
 8009544:	20001f40 	.word	0x20001f40
	...

08009550 <chFactoryReleaseMailbox.isra.0>:
ucnt_t chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8009550:	b510      	push	{r4, lr}
 8009552:	2330      	movs	r3, #48	; 0x30
 8009554:	4604      	mov	r4, r0
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	4811      	ldr	r0, [pc, #68]	; (80095a0 <chFactoryReleaseMailbox.isra.0+0x50>)
 800955c:	f7fc fbe8 	bl	8005d30 <chMtxLockS>
 8009560:	2300      	movs	r3, #0
 8009562:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8009566:	4a0f      	ldr	r2, [pc, #60]	; (80095a4 <chFactoryReleaseMailbox.isra.0+0x54>)
 8009568:	4613      	mov	r3, r2
 800956a:	e001      	b.n	8009570 <chFactoryReleaseMailbox.isra.0+0x20>
    if (prev->next == element) {
 800956c:	429c      	cmp	r4, r3
 800956e:	d008      	beq.n	8009582 <chFactoryReleaseMailbox.isra.0+0x32>
 8009570:	4619      	mov	r1, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4293      	cmp	r3, r2
 8009576:	d1f9      	bne.n	800956c <chFactoryReleaseMailbox.isra.0+0x1c>
}
 8009578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800957c:	4808      	ldr	r0, [pc, #32]	; (80095a0 <chFactoryReleaseMailbox.isra.0+0x50>)
 800957e:	f7fc bc6f 	b.w	8005e60 <chMtxUnlock>
    refs = --dep->refs;
 8009582:	6863      	ldr	r3, [r4, #4]
 8009584:	3b01      	subs	r3, #1
 8009586:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1f5      	bne.n	8009578 <chFactoryReleaseMailbox.isra.0+0x28>
  prev->next = element->next;
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	600b      	str	r3, [r1, #0]
      chHeapFree((void *)dyn_list_unlink(prev));
 8009590:	4620      	mov	r0, r4
 8009592:	f7fd f98d 	bl	80068b0 <chHeapFree>
}
 8009596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800959a:	4801      	ldr	r0, [pc, #4]	; (80095a0 <chFactoryReleaseMailbox.isra.0+0x50>)
 800959c:	f7fc bc60 	b.w	8005e60 <chMtxUnlock>
 80095a0:	20001f00 	.word	0x20001f00
 80095a4:	20001f3c 	.word	0x20001f3c
	...

080095b0 <chFactoryReleaseSemaphore.isra.0>:
ucnt_t chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 80095b0:	b510      	push	{r4, lr}
 80095b2:	2330      	movs	r3, #48	; 0x30
 80095b4:	4604      	mov	r4, r0
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	4815      	ldr	r0, [pc, #84]	; (8009610 <chFactoryReleaseSemaphore.isra.0+0x60>)
 80095bc:	f7fc fbb8 	bl	8005d30 <chMtxLockS>
 80095c0:	2300      	movs	r3, #0
 80095c2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80095c6:	4a13      	ldr	r2, [pc, #76]	; (8009614 <chFactoryReleaseSemaphore.isra.0+0x64>)
 80095c8:	4613      	mov	r3, r2
 80095ca:	f1a2 0028 	sub.w	r0, r2, #40	; 0x28
 80095ce:	e001      	b.n	80095d4 <chFactoryReleaseSemaphore.isra.0+0x24>
    if (prev->next == element) {
 80095d0:	429c      	cmp	r4, r3
 80095d2:	d008      	beq.n	80095e6 <chFactoryReleaseSemaphore.isra.0+0x36>
 80095d4:	4619      	mov	r1, r3
  while (prev->next != (dyn_element_t *)dlp) {
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4293      	cmp	r3, r2
 80095da:	d1f9      	bne.n	80095d0 <chFactoryReleaseSemaphore.isra.0+0x20>
}
 80095dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 80095e0:	480b      	ldr	r0, [pc, #44]	; (8009610 <chFactoryReleaseSemaphore.isra.0+0x60>)
 80095e2:	f7fc bc3d 	b.w	8005e60 <chMtxUnlock>
    refs = --dep->refs;
 80095e6:	6863      	ldr	r3, [r4, #4]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1f5      	bne.n	80095dc <chFactoryReleaseSemaphore.isra.0+0x2c>
  prev->next = element->next;
 80095f0:	6822      	ldr	r2, [r4, #0]
 80095f2:	600a      	str	r2, [r1, #0]
 80095f4:	2230      	movs	r2, #48	; 0x30
 80095f6:	f382 8811 	msr	BASEPRI, r2
 80095fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80095fc:	6022      	str	r2, [r4, #0]
  mp->next = php;
 80095fe:	62c4      	str	r4, [r0, #44]	; 0x2c
 8009600:	f383 8811 	msr	BASEPRI, r3
  FACTORY_UNLOCK();
 8009604:	4802      	ldr	r0, [pc, #8]	; (8009610 <chFactoryReleaseSemaphore.isra.0+0x60>)
}
 8009606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800960a:	f7fc bc29 	b.w	8005e60 <chMtxUnlock>
 800960e:	bf00      	nop
 8009610:	20001f00 	.word	0x20001f00
 8009614:	20001f28 	.word	0x20001f28
	...

08009620 <chFactoryReleaseBuffer.isra.0>:
ucnt_t chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8009620:	b510      	push	{r4, lr}
 8009622:	2330      	movs	r3, #48	; 0x30
 8009624:	4604      	mov	r4, r0
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	4811      	ldr	r0, [pc, #68]	; (8009670 <chFactoryReleaseBuffer.isra.0+0x50>)
 800962c:	f7fc fb80 	bl	8005d30 <chMtxLockS>
 8009630:	2300      	movs	r3, #0
 8009632:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8009636:	4a0f      	ldr	r2, [pc, #60]	; (8009674 <chFactoryReleaseBuffer.isra.0+0x54>)
 8009638:	4613      	mov	r3, r2
 800963a:	e001      	b.n	8009640 <chFactoryReleaseBuffer.isra.0+0x20>
    if (prev->next == element) {
 800963c:	429c      	cmp	r4, r3
 800963e:	d008      	beq.n	8009652 <chFactoryReleaseBuffer.isra.0+0x32>
 8009640:	4619      	mov	r1, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4293      	cmp	r3, r2
 8009646:	d1f9      	bne.n	800963c <chFactoryReleaseBuffer.isra.0+0x1c>
}
 8009648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800964c:	4808      	ldr	r0, [pc, #32]	; (8009670 <chFactoryReleaseBuffer.isra.0+0x50>)
 800964e:	f7fc bc07 	b.w	8005e60 <chMtxUnlock>
    refs = --dep->refs;
 8009652:	6863      	ldr	r3, [r4, #4]
 8009654:	3b01      	subs	r3, #1
 8009656:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f5      	bne.n	8009648 <chFactoryReleaseBuffer.isra.0+0x28>
  prev->next = element->next;
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	600b      	str	r3, [r1, #0]
      chHeapFree((void *)dyn_list_unlink(prev));
 8009660:	4620      	mov	r0, r4
 8009662:	f7fd f925 	bl	80068b0 <chHeapFree>
}
 8009666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 800966a:	4801      	ldr	r0, [pc, #4]	; (8009670 <chFactoryReleaseBuffer.isra.0+0x50>)
 800966c:	f7fc bbf8 	b.w	8005e60 <chMtxUnlock>
 8009670:	20001f00 	.word	0x20001f00
 8009674:	20001f24 	.word	0x20001f24
	...

08009680 <chFactoryReleaseObject.isra.0>:
ucnt_t chFactoryReleaseObject(registered_object_t *rop) {
 8009680:	b510      	push	{r4, lr}
 8009682:	2330      	movs	r3, #48	; 0x30
 8009684:	4604      	mov	r4, r0
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	4815      	ldr	r0, [pc, #84]	; (80096e0 <chFactoryReleaseObject.isra.0+0x60>)
 800968c:	f7fc fb50 	bl	8005d30 <chMtxLockS>
 8009690:	2300      	movs	r3, #0
 8009692:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8009696:	4a13      	ldr	r2, [pc, #76]	; (80096e4 <chFactoryReleaseObject.isra.0+0x64>)
 8009698:	4613      	mov	r3, r2
 800969a:	f1a2 0010 	sub.w	r0, r2, #16
 800969e:	e001      	b.n	80096a4 <chFactoryReleaseObject.isra.0+0x24>
    if (prev->next == element) {
 80096a0:	429c      	cmp	r4, r3
 80096a2:	d008      	beq.n	80096b6 <chFactoryReleaseObject.isra.0+0x36>
 80096a4:	4619      	mov	r1, r3
  while (prev->next != (dyn_element_t *)dlp) {
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d1f9      	bne.n	80096a0 <chFactoryReleaseObject.isra.0+0x20>
}
 80096ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 80096b0:	480b      	ldr	r0, [pc, #44]	; (80096e0 <chFactoryReleaseObject.isra.0+0x60>)
 80096b2:	f7fc bbd5 	b.w	8005e60 <chMtxUnlock>
    refs = --dep->refs;
 80096b6:	6863      	ldr	r3, [r4, #4]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1f5      	bne.n	80096ac <chFactoryReleaseObject.isra.0+0x2c>
  prev->next = element->next;
 80096c0:	6822      	ldr	r2, [r4, #0]
 80096c2:	600a      	str	r2, [r1, #0]
 80096c4:	2230      	movs	r2, #48	; 0x30
 80096c6:	f382 8811 	msr	BASEPRI, r2
  php->next = mp->next;
 80096ca:	6942      	ldr	r2, [r0, #20]
 80096cc:	6022      	str	r2, [r4, #0]
  mp->next = php;
 80096ce:	6144      	str	r4, [r0, #20]
 80096d0:	f383 8811 	msr	BASEPRI, r3
  FACTORY_UNLOCK();
 80096d4:	4802      	ldr	r0, [pc, #8]	; (80096e0 <chFactoryReleaseObject.isra.0+0x60>)
}
 80096d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  FACTORY_UNLOCK();
 80096da:	f7fc bbc1 	b.w	8005e60 <chMtxUnlock>
 80096de:	bf00      	nop
 80096e0:	20001f00 	.word	0x20001f00
 80096e4:	20001f10 	.word	0x20001f10
	...

080096f0 <chFactoryCreateSemaphore.constprop.0>:
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	2330      	movs	r3, #48	; 0x30
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	4f2a      	ldr	r7, [pc, #168]	; (80097a4 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 80096fa:	4638      	mov	r0, r7
 80096fc:	f7fc fb18 	bl	8005d30 <chMtxLockS>
 8009700:	2300      	movs	r3, #0
 8009702:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009706:	463d      	mov	r5, r7
 8009708:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800970c:	42ac      	cmp	r4, r5
 800970e:	d012      	beq.n	8009736 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009710:	4e25      	ldr	r6, [pc, #148]	; (80097a8 <chFactoryCreateSemaphore.constprop.0+0xb8>)
 8009712:	e002      	b.n	800971a <chFactoryCreateSemaphore.constprop.0+0x2a>
    p = p->next;
 8009714:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009716:	42ac      	cmp	r4, r5
 8009718:	d00d      	beq.n	8009736 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800971a:	f104 0008 	add.w	r0, r4, #8
 800971e:	4631      	mov	r1, r6
 8009720:	f7f6 ff12 	bl	8000548 <strcmp>
 8009724:	2800      	cmp	r0, #0
 8009726:	d1f5      	bne.n	8009714 <chFactoryCreateSemaphore.constprop.0+0x24>
  if (dep != NULL) {
 8009728:	b12c      	cbz	r4, 8009736 <chFactoryCreateSemaphore.constprop.0+0x46>
    return NULL;
 800972a:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 800972c:	481d      	ldr	r0, [pc, #116]	; (80097a4 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 800972e:	f7fc fb97 	bl	8005e60 <chMtxUnlock>
}
 8009732:	4620      	mov	r0, r4
 8009734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009736:	2330      	movs	r3, #48	; 0x30
 8009738:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800973c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
  if (objp != NULL) {
 800973e:	b33c      	cbz	r4, 8009790 <chFactoryCreateSemaphore.constprop.0+0xa0>
    mp->next = mp->next->next;
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009744:	2300      	movs	r3, #0
 8009746:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 800974a:	2c00      	cmp	r4, #0
 800974c:	d0ed      	beq.n	800972a <chFactoryCreateSemaphore.constprop.0+0x3a>
    *dp++ = c;
 800974e:	226d      	movs	r2, #109	; 0x6d
 8009750:	f104 0309 	add.w	r3, r4, #9
 8009754:	7222      	strb	r2, [r4, #8]
 8009756:	2279      	movs	r2, #121	; 0x79
 8009758:	4914      	ldr	r1, [pc, #80]	; (80097ac <chFactoryCreateSemaphore.constprop.0+0xbc>)
 800975a:	f803 2b01 	strb.w	r2, [r3], #1
 800975e:	f104 0010 	add.w	r0, r4, #16
  } while ((c != (char)0) && (i > 0U));
 8009762:	b13a      	cbz	r2, 8009774 <chFactoryCreateSemaphore.constprop.0+0x84>
 8009764:	4298      	cmp	r0, r3
 8009766:	d005      	beq.n	8009774 <chFactoryCreateSemaphore.constprop.0+0x84>
    c = *sp++;
 8009768:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 800976c:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 8009770:	2a00      	cmp	r2, #0
 8009772:	d1f7      	bne.n	8009764 <chFactoryCreateSemaphore.constprop.0+0x74>
  dep->refs = (ucnt_t)1;
 8009774:	2301      	movs	r3, #1
  dep->next = dlp->next;
 8009776:	6aba      	ldr	r2, [r7, #40]	; 0x28
  dep->refs = (ucnt_t)1;
 8009778:	6063      	str	r3, [r4, #4]
  sp->cnt = n;
 800977a:	2300      	movs	r3, #0
  dep->next = dlp->next;
 800977c:	6022      	str	r2, [r4, #0]
  dlp->next = (dyn_element_t *)dep;
 800977e:	62bc      	str	r4, [r7, #40]	; 0x28
  qp->prev = qp;
 8009780:	e9c4 0004 	strd	r0, r0, [r4, #16]
 8009784:	61a3      	str	r3, [r4, #24]
  FACTORY_UNLOCK();
 8009786:	4807      	ldr	r0, [pc, #28]	; (80097a4 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 8009788:	f7fc fb6a 	bl	8005e60 <chMtxUnlock>
}
 800978c:	4620      	mov	r0, r4
 800978e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (mp->provider != NULL) {
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	b123      	cbz	r3, 800979e <chFactoryCreateSemaphore.constprop.0+0xae>
    objp = mp->provider(mp->object_size, mp->align);
 8009794:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009798:	4798      	blx	r3
 800979a:	4604      	mov	r4, r0
 800979c:	e7d2      	b.n	8009744 <chFactoryCreateSemaphore.constprop.0+0x54>
 800979e:	f384 8811 	msr	BASEPRI, r4
 80097a2:	e7c3      	b.n	800972c <chFactoryCreateSemaphore.constprop.0+0x3c>
 80097a4:	20001f00 	.word	0x20001f00
 80097a8:	0800cd24 	.word	0x0800cd24
 80097ac:	0800cd25 	.word	0x0800cd25

080097b0 <oslib_test_009_006_teardown>:
 *   trigger an assertion.
 * - [9.6.6] Retrieving the dynamic pipe by name again, must not exist.
 * .
 */

static void oslib_test_009_006_teardown(void) {
 80097b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b4:	2330      	movs	r3, #48	; 0x30
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	4d29      	ldr	r5, [pc, #164]	; (8009860 <oslib_test_009_006_teardown+0xb0>)
 80097bc:	4628      	mov	r0, r5
 80097be:	f7fc fab7 	bl	8005d30 <chMtxLockS>
 80097c2:	2300      	movs	r3, #0
 80097c4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80097c8:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 80097cc:	42ac      	cmp	r4, r5
 80097ce:	d041      	beq.n	8009854 <oslib_test_009_006_teardown+0xa4>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80097d0:	4f24      	ldr	r7, [pc, #144]	; (8009864 <oslib_test_009_006_teardown+0xb4>)
 80097d2:	e002      	b.n	80097da <oslib_test_009_006_teardown+0x2a>
    p = p->next;
 80097d4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80097d6:	42ac      	cmp	r4, r5
 80097d8:	d03c      	beq.n	8009854 <oslib_test_009_006_teardown+0xa4>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80097da:	f104 0008 	add.w	r0, r4, #8
 80097de:	4639      	mov	r1, r7
 80097e0:	f7f6 feb2 	bl	8000548 <strcmp>
 80097e4:	4606      	mov	r6, r0
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d1f4      	bne.n	80097d4 <oslib_test_009_006_teardown+0x24>
  if (dep != NULL) {
 80097ea:	2c00      	cmp	r4, #0
 80097ec:	d032      	beq.n	8009854 <oslib_test_009_006_teardown+0xa4>
    dep->refs++;
 80097ee:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 80097f0:	481b      	ldr	r0, [pc, #108]	; (8009860 <oslib_test_009_006_teardown+0xb0>)
    dep->refs++;
 80097f2:	3301      	adds	r3, #1
 80097f4:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 80097f6:	f7fc fb33 	bl	8005e60 <chMtxUnlock>
  dyn_pipe_t *dpp;

  dpp = chFactoryFindPipe("mypipe");
  if (dpp != NULL) {
    while (dpp->element.refs > 0U) {
 80097fa:	6863      	ldr	r3, [r4, #4]
 80097fc:	b1bb      	cbz	r3, 800982e <oslib_test_009_006_teardown+0x7e>
 80097fe:	4f18      	ldr	r7, [pc, #96]	; (8009860 <oslib_test_009_006_teardown+0xb0>)
 8009800:	f04f 0830 	mov.w	r8, #48	; 0x30
 8009804:	f388 8811 	msr	BASEPRI, r8
 8009808:	4638      	mov	r0, r7
 800980a:	f7fc fa91 	bl	8005d30 <chMtxLockS>
 800980e:	f386 8811 	msr	BASEPRI, r6
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8009812:	4b15      	ldr	r3, [pc, #84]	; (8009868 <oslib_test_009_006_teardown+0xb8>)
 8009814:	e001      	b.n	800981a <oslib_test_009_006_teardown+0x6a>
    if (prev->next == element) {
 8009816:	429c      	cmp	r4, r3
 8009818:	d00b      	beq.n	8009832 <oslib_test_009_006_teardown+0x82>
 800981a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	42ab      	cmp	r3, r5
 8009820:	d1f9      	bne.n	8009816 <oslib_test_009_006_teardown+0x66>
  FACTORY_UNLOCK();
 8009822:	4638      	mov	r0, r7
 8009824:	f7fc fb1c 	bl	8005e60 <chMtxUnlock>
 8009828:	6863      	ldr	r3, [r4, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1ea      	bne.n	8009804 <oslib_test_009_006_teardown+0x54>
      chFactoryReleasePipe(dpp);
    }
  }
}
 800982e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    refs = --dep->refs;
 8009832:	6863      	ldr	r3, [r4, #4]
 8009834:	3b01      	subs	r3, #1
 8009836:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f2      	bne.n	8009822 <oslib_test_009_006_teardown+0x72>
  prev->next = element->next;
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	6013      	str	r3, [r2, #0]
      chHeapFree((void *)dyn_list_unlink(prev));
 8009840:	4620      	mov	r0, r4
 8009842:	f7fd f835 	bl	80068b0 <chHeapFree>
  FACTORY_UNLOCK();
 8009846:	4638      	mov	r0, r7
 8009848:	f7fc fb0a 	bl	8005e60 <chMtxUnlock>
    while (dpp->element.refs > 0U) {
 800984c:	6863      	ldr	r3, [r4, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1d8      	bne.n	8009804 <oslib_test_009_006_teardown+0x54>
 8009852:	e7ec      	b.n	800982e <oslib_test_009_006_teardown+0x7e>
}
 8009854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FACTORY_UNLOCK();
 8009858:	4801      	ldr	r0, [pc, #4]	; (8009860 <oslib_test_009_006_teardown+0xb0>)
 800985a:	f7fc bb01 	b.w	8005e60 <chMtxUnlock>
 800985e:	bf00      	nop
 8009860:	20001f00 	.word	0x20001f00
 8009864:	0800cd2c 	.word	0x0800cd2c
 8009868:	20001f44 	.word	0x20001f44
 800986c:	00000000 	.word	0x00000000

08009870 <oslib_test_009_001_teardown>:
static void oslib_test_009_001_teardown(void) {
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	2330      	movs	r3, #48	; 0x30
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	4d15      	ldr	r5, [pc, #84]	; (80098d0 <oslib_test_009_001_teardown+0x60>)
 800987a:	4628      	mov	r0, r5
 800987c:	f7fc fa58 	bl	8005d30 <chMtxLockS>
 8009880:	2300      	movs	r3, #0
 8009882:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009886:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800988a:	42ac      	cmp	r4, r5
 800988c:	d01b      	beq.n	80098c6 <oslib_test_009_001_teardown+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800988e:	4e11      	ldr	r6, [pc, #68]	; (80098d4 <oslib_test_009_001_teardown+0x64>)
 8009890:	e002      	b.n	8009898 <oslib_test_009_001_teardown+0x28>
    p = p->next;
 8009892:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009894:	42ac      	cmp	r4, r5
 8009896:	d016      	beq.n	80098c6 <oslib_test_009_001_teardown+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009898:	f104 0008 	add.w	r0, r4, #8
 800989c:	4631      	mov	r1, r6
 800989e:	f7f6 fe53 	bl	8000548 <strcmp>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1f5      	bne.n	8009892 <oslib_test_009_001_teardown+0x22>
  if (dep != NULL) {
 80098a6:	b174      	cbz	r4, 80098c6 <oslib_test_009_001_teardown+0x56>
    dep->refs++;
 80098a8:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 80098aa:	4809      	ldr	r0, [pc, #36]	; (80098d0 <oslib_test_009_001_teardown+0x60>)
    dep->refs++;
 80098ac:	3301      	adds	r3, #1
 80098ae:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 80098b0:	f7fc fad6 	bl	8005e60 <chMtxUnlock>
    while (rop->element.refs > 0U) {
 80098b4:	6863      	ldr	r3, [r4, #4]
 80098b6:	b12b      	cbz	r3, 80098c4 <oslib_test_009_001_teardown+0x54>
      chFactoryReleaseObject(rop);
 80098b8:	4620      	mov	r0, r4
 80098ba:	f7ff fee1 	bl	8009680 <chFactoryReleaseObject.isra.0>
    while (rop->element.refs > 0U) {
 80098be:	6863      	ldr	r3, [r4, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1f9      	bne.n	80098b8 <oslib_test_009_001_teardown+0x48>
}
 80098c4:	bd70      	pop	{r4, r5, r6, pc}
 80098c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098ca:	4801      	ldr	r0, [pc, #4]	; (80098d0 <oslib_test_009_001_teardown+0x60>)
 80098cc:	f7fc bac8 	b.w	8005e60 <chMtxUnlock>
 80098d0:	20001f00 	.word	0x20001f00
 80098d4:	0800cd34 	.word	0x0800cd34
	...

080098e0 <oslib_test_009_002_teardown>:
static void oslib_test_009_002_teardown(void) {
 80098e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e4:	2330      	movs	r3, #48	; 0x30
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	4d29      	ldr	r5, [pc, #164]	; (8009990 <oslib_test_009_002_teardown+0xb0>)
 80098ec:	4628      	mov	r0, r5
 80098ee:	f7fc fa1f 	bl	8005d30 <chMtxLockS>
 80098f2:	2300      	movs	r3, #0
 80098f4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80098f8:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 80098fc:	42ac      	cmp	r4, r5
 80098fe:	d041      	beq.n	8009984 <oslib_test_009_002_teardown+0xa4>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009900:	4f24      	ldr	r7, [pc, #144]	; (8009994 <oslib_test_009_002_teardown+0xb4>)
 8009902:	e002      	b.n	800990a <oslib_test_009_002_teardown+0x2a>
    p = p->next;
 8009904:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009906:	42ac      	cmp	r4, r5
 8009908:	d03c      	beq.n	8009984 <oslib_test_009_002_teardown+0xa4>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800990a:	f104 0008 	add.w	r0, r4, #8
 800990e:	4639      	mov	r1, r7
 8009910:	f7f6 fe1a 	bl	8000548 <strcmp>
 8009914:	4606      	mov	r6, r0
 8009916:	2800      	cmp	r0, #0
 8009918:	d1f4      	bne.n	8009904 <oslib_test_009_002_teardown+0x24>
  if (dep != NULL) {
 800991a:	2c00      	cmp	r4, #0
 800991c:	d032      	beq.n	8009984 <oslib_test_009_002_teardown+0xa4>
    dep->refs++;
 800991e:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009920:	481b      	ldr	r0, [pc, #108]	; (8009990 <oslib_test_009_002_teardown+0xb0>)
    dep->refs++;
 8009922:	3301      	adds	r3, #1
 8009924:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009926:	f7fc fa9b 	bl	8005e60 <chMtxUnlock>
    while (dbp->element.refs > 0U) {
 800992a:	6863      	ldr	r3, [r4, #4]
 800992c:	b1bb      	cbz	r3, 800995e <oslib_test_009_002_teardown+0x7e>
 800992e:	4f18      	ldr	r7, [pc, #96]	; (8009990 <oslib_test_009_002_teardown+0xb0>)
 8009930:	f04f 0830 	mov.w	r8, #48	; 0x30
 8009934:	f388 8811 	msr	BASEPRI, r8
 8009938:	4638      	mov	r0, r7
 800993a:	f7fc f9f9 	bl	8005d30 <chMtxLockS>
 800993e:	f386 8811 	msr	BASEPRI, r6
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8009942:	4b15      	ldr	r3, [pc, #84]	; (8009998 <oslib_test_009_002_teardown+0xb8>)
 8009944:	e001      	b.n	800994a <oslib_test_009_002_teardown+0x6a>
    if (prev->next == element) {
 8009946:	429c      	cmp	r4, r3
 8009948:	d00b      	beq.n	8009962 <oslib_test_009_002_teardown+0x82>
 800994a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	42ab      	cmp	r3, r5
 8009950:	d1f9      	bne.n	8009946 <oslib_test_009_002_teardown+0x66>
  FACTORY_UNLOCK();
 8009952:	4638      	mov	r0, r7
 8009954:	f7fc fa84 	bl	8005e60 <chMtxUnlock>
 8009958:	6863      	ldr	r3, [r4, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1ea      	bne.n	8009934 <oslib_test_009_002_teardown+0x54>
}
 800995e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    refs = --dep->refs;
 8009962:	6863      	ldr	r3, [r4, #4]
 8009964:	3b01      	subs	r3, #1
 8009966:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1f2      	bne.n	8009952 <oslib_test_009_002_teardown+0x72>
  prev->next = element->next;
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	6013      	str	r3, [r2, #0]
      chHeapFree((void *)dyn_list_unlink(prev));
 8009970:	4620      	mov	r0, r4
 8009972:	f7fc ff9d 	bl	80068b0 <chHeapFree>
  FACTORY_UNLOCK();
 8009976:	4638      	mov	r0, r7
 8009978:	f7fc fa72 	bl	8005e60 <chMtxUnlock>
    while (dbp->element.refs > 0U) {
 800997c:	6863      	ldr	r3, [r4, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1d8      	bne.n	8009934 <oslib_test_009_002_teardown+0x54>
 8009982:	e7ec      	b.n	800995e <oslib_test_009_002_teardown+0x7e>
}
 8009984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FACTORY_UNLOCK();
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <oslib_test_009_002_teardown+0xb0>)
 800998a:	f7fc ba69 	b.w	8005e60 <chMtxUnlock>
 800998e:	bf00      	nop
 8009990:	20001f00 	.word	0x20001f00
 8009994:	0800cd3c 	.word	0x0800cd3c
 8009998:	20001f24 	.word	0x20001f24
 800999c:	00000000 	.word	0x00000000

080099a0 <oslib_test_009_003_teardown>:
static void oslib_test_009_003_teardown(void) {
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	2330      	movs	r3, #48	; 0x30
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	4d15      	ldr	r5, [pc, #84]	; (8009a00 <oslib_test_009_003_teardown+0x60>)
 80099aa:	4628      	mov	r0, r5
 80099ac:	f7fc f9c0 	bl	8005d30 <chMtxLockS>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80099b6:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 80099ba:	42ac      	cmp	r4, r5
 80099bc:	d01b      	beq.n	80099f6 <oslib_test_009_003_teardown+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80099be:	4e11      	ldr	r6, [pc, #68]	; (8009a04 <oslib_test_009_003_teardown+0x64>)
 80099c0:	e002      	b.n	80099c8 <oslib_test_009_003_teardown+0x28>
    p = p->next;
 80099c2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80099c4:	42ac      	cmp	r4, r5
 80099c6:	d016      	beq.n	80099f6 <oslib_test_009_003_teardown+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80099c8:	f104 0008 	add.w	r0, r4, #8
 80099cc:	4631      	mov	r1, r6
 80099ce:	f7f6 fdbb 	bl	8000548 <strcmp>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d1f5      	bne.n	80099c2 <oslib_test_009_003_teardown+0x22>
  if (dep != NULL) {
 80099d6:	b174      	cbz	r4, 80099f6 <oslib_test_009_003_teardown+0x56>
    dep->refs++;
 80099d8:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 80099da:	4809      	ldr	r0, [pc, #36]	; (8009a00 <oslib_test_009_003_teardown+0x60>)
    dep->refs++;
 80099dc:	3301      	adds	r3, #1
 80099de:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 80099e0:	f7fc fa3e 	bl	8005e60 <chMtxUnlock>
    while (dsp->element.refs > 0U) {
 80099e4:	6863      	ldr	r3, [r4, #4]
 80099e6:	b12b      	cbz	r3, 80099f4 <oslib_test_009_003_teardown+0x54>
      chFactoryReleaseSemaphore(dsp);
 80099e8:	4620      	mov	r0, r4
 80099ea:	f7ff fde1 	bl	80095b0 <chFactoryReleaseSemaphore.isra.0>
    while (dsp->element.refs > 0U) {
 80099ee:	6863      	ldr	r3, [r4, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1f9      	bne.n	80099e8 <oslib_test_009_003_teardown+0x48>
}
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
 80099f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099fa:	4801      	ldr	r0, [pc, #4]	; (8009a00 <oslib_test_009_003_teardown+0x60>)
 80099fc:	f7fc ba30 	b.w	8005e60 <chMtxUnlock>
 8009a00:	20001f00 	.word	0x20001f00
 8009a04:	0800cd24 	.word	0x0800cd24
	...

08009a10 <oslib_test_009_004_teardown>:
static void oslib_test_009_004_teardown(void) {
 8009a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	2330      	movs	r3, #48	; 0x30
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	4d29      	ldr	r5, [pc, #164]	; (8009ac0 <oslib_test_009_004_teardown+0xb0>)
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	f7fc f987 	bl	8005d30 <chMtxLockS>
 8009a22:	2300      	movs	r3, #0
 8009a24:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009a28:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 8009a2c:	42ac      	cmp	r4, r5
 8009a2e:	d041      	beq.n	8009ab4 <oslib_test_009_004_teardown+0xa4>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009a30:	4f24      	ldr	r7, [pc, #144]	; (8009ac4 <oslib_test_009_004_teardown+0xb4>)
 8009a32:	e002      	b.n	8009a3a <oslib_test_009_004_teardown+0x2a>
    p = p->next;
 8009a34:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009a36:	42ac      	cmp	r4, r5
 8009a38:	d03c      	beq.n	8009ab4 <oslib_test_009_004_teardown+0xa4>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009a3a:	f104 0008 	add.w	r0, r4, #8
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f7f6 fd82 	bl	8000548 <strcmp>
 8009a44:	4606      	mov	r6, r0
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d1f4      	bne.n	8009a34 <oslib_test_009_004_teardown+0x24>
  if (dep != NULL) {
 8009a4a:	2c00      	cmp	r4, #0
 8009a4c:	d032      	beq.n	8009ab4 <oslib_test_009_004_teardown+0xa4>
    dep->refs++;
 8009a4e:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009a50:	481b      	ldr	r0, [pc, #108]	; (8009ac0 <oslib_test_009_004_teardown+0xb0>)
    dep->refs++;
 8009a52:	3301      	adds	r3, #1
 8009a54:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009a56:	f7fc fa03 	bl	8005e60 <chMtxUnlock>
    while (dmp->element.refs > 0U) {
 8009a5a:	6863      	ldr	r3, [r4, #4]
 8009a5c:	b1bb      	cbz	r3, 8009a8e <oslib_test_009_004_teardown+0x7e>
 8009a5e:	4f18      	ldr	r7, [pc, #96]	; (8009ac0 <oslib_test_009_004_teardown+0xb0>)
 8009a60:	f04f 0830 	mov.w	r8, #48	; 0x30
 8009a64:	f388 8811 	msr	BASEPRI, r8
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7fc f961 	bl	8005d30 <chMtxLockS>
 8009a6e:	f386 8811 	msr	BASEPRI, r6
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8009a72:	4b15      	ldr	r3, [pc, #84]	; (8009ac8 <oslib_test_009_004_teardown+0xb8>)
 8009a74:	e001      	b.n	8009a7a <oslib_test_009_004_teardown+0x6a>
    if (prev->next == element) {
 8009a76:	429c      	cmp	r4, r3
 8009a78:	d00b      	beq.n	8009a92 <oslib_test_009_004_teardown+0x82>
 8009a7a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	42ab      	cmp	r3, r5
 8009a80:	d1f9      	bne.n	8009a76 <oslib_test_009_004_teardown+0x66>
  FACTORY_UNLOCK();
 8009a82:	4638      	mov	r0, r7
 8009a84:	f7fc f9ec 	bl	8005e60 <chMtxUnlock>
 8009a88:	6863      	ldr	r3, [r4, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1ea      	bne.n	8009a64 <oslib_test_009_004_teardown+0x54>
}
 8009a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    refs = --dep->refs;
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f2      	bne.n	8009a82 <oslib_test_009_004_teardown+0x72>
  prev->next = element->next;
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	6013      	str	r3, [r2, #0]
      chHeapFree((void *)dyn_list_unlink(prev));
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f7fc ff05 	bl	80068b0 <chHeapFree>
  FACTORY_UNLOCK();
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f7fc f9da 	bl	8005e60 <chMtxUnlock>
    while (dmp->element.refs > 0U) {
 8009aac:	6863      	ldr	r3, [r4, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1d8      	bne.n	8009a64 <oslib_test_009_004_teardown+0x54>
 8009ab2:	e7ec      	b.n	8009a8e <oslib_test_009_004_teardown+0x7e>
}
 8009ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FACTORY_UNLOCK();
 8009ab8:	4801      	ldr	r0, [pc, #4]	; (8009ac0 <oslib_test_009_004_teardown+0xb0>)
 8009aba:	f7fc b9d1 	b.w	8005e60 <chMtxUnlock>
 8009abe:	bf00      	nop
 8009ac0:	20001f00 	.word	0x20001f00
 8009ac4:	0800cd44 	.word	0x0800cd44
 8009ac8:	20001f3c 	.word	0x20001f3c
 8009acc:	00000000 	.word	0x00000000

08009ad0 <oslib_test_009_005_teardown>:
static void oslib_test_009_005_teardown(void) {
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	2330      	movs	r3, #48	; 0x30
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	4d29      	ldr	r5, [pc, #164]	; (8009b80 <oslib_test_009_005_teardown+0xb0>)
 8009adc:	4628      	mov	r0, r5
 8009ade:	f7fc f927 	bl	8005d30 <chMtxLockS>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009ae8:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 8009aec:	42ac      	cmp	r4, r5
 8009aee:	d041      	beq.n	8009b74 <oslib_test_009_005_teardown+0xa4>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009af0:	4f24      	ldr	r7, [pc, #144]	; (8009b84 <oslib_test_009_005_teardown+0xb4>)
 8009af2:	e002      	b.n	8009afa <oslib_test_009_005_teardown+0x2a>
    p = p->next;
 8009af4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009af6:	42ac      	cmp	r4, r5
 8009af8:	d03c      	beq.n	8009b74 <oslib_test_009_005_teardown+0xa4>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009afa:	f104 0008 	add.w	r0, r4, #8
 8009afe:	4639      	mov	r1, r7
 8009b00:	f7f6 fd22 	bl	8000548 <strcmp>
 8009b04:	4606      	mov	r6, r0
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d1f4      	bne.n	8009af4 <oslib_test_009_005_teardown+0x24>
  if (dep != NULL) {
 8009b0a:	2c00      	cmp	r4, #0
 8009b0c:	d032      	beq.n	8009b74 <oslib_test_009_005_teardown+0xa4>
    dep->refs++;
 8009b0e:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009b10:	481b      	ldr	r0, [pc, #108]	; (8009b80 <oslib_test_009_005_teardown+0xb0>)
    dep->refs++;
 8009b12:	3301      	adds	r3, #1
 8009b14:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009b16:	f7fc f9a3 	bl	8005e60 <chMtxUnlock>
    while (dofp->element.refs > 0U) {
 8009b1a:	6863      	ldr	r3, [r4, #4]
 8009b1c:	b1bb      	cbz	r3, 8009b4e <oslib_test_009_005_teardown+0x7e>
 8009b1e:	4f18      	ldr	r7, [pc, #96]	; (8009b80 <oslib_test_009_005_teardown+0xb0>)
 8009b20:	f04f 0830 	mov.w	r8, #48	; 0x30
 8009b24:	f388 8811 	msr	BASEPRI, r8
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f7fc f901 	bl	8005d30 <chMtxLockS>
 8009b2e:	f386 8811 	msr	BASEPRI, r6
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8009b32:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <oslib_test_009_005_teardown+0xb8>)
 8009b34:	e001      	b.n	8009b3a <oslib_test_009_005_teardown+0x6a>
    if (prev->next == element) {
 8009b36:	429c      	cmp	r4, r3
 8009b38:	d00b      	beq.n	8009b52 <oslib_test_009_005_teardown+0x82>
 8009b3a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	42ab      	cmp	r3, r5
 8009b40:	d1f9      	bne.n	8009b36 <oslib_test_009_005_teardown+0x66>
  FACTORY_UNLOCK();
 8009b42:	4638      	mov	r0, r7
 8009b44:	f7fc f98c 	bl	8005e60 <chMtxUnlock>
 8009b48:	6863      	ldr	r3, [r4, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1ea      	bne.n	8009b24 <oslib_test_009_005_teardown+0x54>
}
 8009b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    refs = --dep->refs;
 8009b52:	6863      	ldr	r3, [r4, #4]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	6063      	str	r3, [r4, #4]
    if (refs == (ucnt_t)0) {
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1f2      	bne.n	8009b42 <oslib_test_009_005_teardown+0x72>
  prev->next = element->next;
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	6013      	str	r3, [r2, #0]
      chHeapFree((void *)dyn_list_unlink(prev));
 8009b60:	4620      	mov	r0, r4
 8009b62:	f7fc fea5 	bl	80068b0 <chHeapFree>
  FACTORY_UNLOCK();
 8009b66:	4638      	mov	r0, r7
 8009b68:	f7fc f97a 	bl	8005e60 <chMtxUnlock>
    while (dofp->element.refs > 0U) {
 8009b6c:	6863      	ldr	r3, [r4, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1d8      	bne.n	8009b24 <oslib_test_009_005_teardown+0x54>
 8009b72:	e7ec      	b.n	8009b4e <oslib_test_009_005_teardown+0x7e>
}
 8009b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FACTORY_UNLOCK();
 8009b78:	4801      	ldr	r0, [pc, #4]	; (8009b80 <oslib_test_009_005_teardown+0xb0>)
 8009b7a:	f7fc b971 	b.w	8005e60 <chMtxUnlock>
 8009b7e:	bf00      	nop
 8009b80:	20001f00 	.word	0x20001f00
 8009b84:	0800cd4c 	.word	0x0800cd4c
 8009b88:	20001f40 	.word	0x20001f40
 8009b8c:	00000000 	.word	0x00000000

08009b90 <chFactoryFindPipe.constprop.0>:
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	2330      	movs	r3, #48	; 0x30
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	4d13      	ldr	r5, [pc, #76]	; (8009be8 <chFactoryFindPipe.constprop.0+0x58>)
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7fc f8c8 	bl	8005d30 <chMtxLockS>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009ba6:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 8009baa:	42ac      	cmp	r4, r5
 8009bac:	d01a      	beq.n	8009be4 <chFactoryFindPipe.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009bae:	4e0f      	ldr	r6, [pc, #60]	; (8009bec <chFactoryFindPipe.constprop.0+0x5c>)
 8009bb0:	e002      	b.n	8009bb8 <chFactoryFindPipe.constprop.0+0x28>
    p = p->next;
 8009bb2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009bb4:	42ac      	cmp	r4, r5
 8009bb6:	d00f      	beq.n	8009bd8 <chFactoryFindPipe.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009bb8:	f104 0008 	add.w	r0, r4, #8
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	f7f6 fcc3 	bl	8000548 <strcmp>
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d1f5      	bne.n	8009bb2 <chFactoryFindPipe.constprop.0+0x22>
  if (dep != NULL) {
 8009bc6:	b114      	cbz	r4, 8009bce <chFactoryFindPipe.constprop.0+0x3e>
    dep->refs++;
 8009bc8:	6863      	ldr	r3, [r4, #4]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009bce:	4806      	ldr	r0, [pc, #24]	; (8009be8 <chFactoryFindPipe.constprop.0+0x58>)
 8009bd0:	f7fc f946 	bl	8005e60 <chMtxUnlock>
}
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
  FACTORY_UNLOCK();
 8009bd8:	4803      	ldr	r0, [pc, #12]	; (8009be8 <chFactoryFindPipe.constprop.0+0x58>)
  return NULL;
 8009bda:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 8009bdc:	f7fc f940 	bl	8005e60 <chMtxUnlock>
}
 8009be0:	4620      	mov	r0, r4
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8009be4:	461c      	mov	r4, r3
 8009be6:	e7f2      	b.n	8009bce <chFactoryFindPipe.constprop.0+0x3e>
 8009be8:	20001f00 	.word	0x20001f00
 8009bec:	0800cd2c 	.word	0x0800cd2c

08009bf0 <chFactoryFindObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	2330      	movs	r3, #48	; 0x30
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	4d13      	ldr	r5, [pc, #76]	; (8009c48 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f7fc f898 	bl	8005d30 <chMtxLockS>
 8009c00:	2300      	movs	r3, #0
 8009c02:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009c06:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 8009c0a:	42ac      	cmp	r4, r5
 8009c0c:	d01a      	beq.n	8009c44 <chFactoryFindObjectsFIFO.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009c0e:	4e0f      	ldr	r6, [pc, #60]	; (8009c4c <chFactoryFindObjectsFIFO.constprop.0+0x5c>)
 8009c10:	e002      	b.n	8009c18 <chFactoryFindObjectsFIFO.constprop.0+0x28>
    p = p->next;
 8009c12:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009c14:	42ac      	cmp	r4, r5
 8009c16:	d00f      	beq.n	8009c38 <chFactoryFindObjectsFIFO.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009c18:	f104 0008 	add.w	r0, r4, #8
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	f7f6 fc93 	bl	8000548 <strcmp>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d1f5      	bne.n	8009c12 <chFactoryFindObjectsFIFO.constprop.0+0x22>
  if (dep != NULL) {
 8009c26:	b114      	cbz	r4, 8009c2e <chFactoryFindObjectsFIFO.constprop.0+0x3e>
    dep->refs++;
 8009c28:	6863      	ldr	r3, [r4, #4]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009c2e:	4806      	ldr	r0, [pc, #24]	; (8009c48 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 8009c30:	f7fc f916 	bl	8005e60 <chMtxUnlock>
}
 8009c34:	4620      	mov	r0, r4
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
  FACTORY_UNLOCK();
 8009c38:	4803      	ldr	r0, [pc, #12]	; (8009c48 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
  return NULL;
 8009c3a:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 8009c3c:	f7fc f910 	bl	8005e60 <chMtxUnlock>
}
 8009c40:	4620      	mov	r0, r4
 8009c42:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8009c44:	461c      	mov	r4, r3
 8009c46:	e7f2      	b.n	8009c2e <chFactoryFindObjectsFIFO.constprop.0+0x3e>
 8009c48:	20001f00 	.word	0x20001f00
 8009c4c:	0800cd4c 	.word	0x0800cd4c

08009c50 <chFactoryFindMailbox.constprop.0>:
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	2330      	movs	r3, #48	; 0x30
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	4d13      	ldr	r5, [pc, #76]	; (8009ca8 <chFactoryFindMailbox.constprop.0+0x58>)
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f7fc f868 	bl	8005d30 <chMtxLockS>
 8009c60:	2300      	movs	r3, #0
 8009c62:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009c66:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 8009c6a:	42ac      	cmp	r4, r5
 8009c6c:	d01a      	beq.n	8009ca4 <chFactoryFindMailbox.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009c6e:	4e0f      	ldr	r6, [pc, #60]	; (8009cac <chFactoryFindMailbox.constprop.0+0x5c>)
 8009c70:	e002      	b.n	8009c78 <chFactoryFindMailbox.constprop.0+0x28>
    p = p->next;
 8009c72:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009c74:	42ac      	cmp	r4, r5
 8009c76:	d00f      	beq.n	8009c98 <chFactoryFindMailbox.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009c78:	f104 0008 	add.w	r0, r4, #8
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	f7f6 fc63 	bl	8000548 <strcmp>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d1f5      	bne.n	8009c72 <chFactoryFindMailbox.constprop.0+0x22>
  if (dep != NULL) {
 8009c86:	b114      	cbz	r4, 8009c8e <chFactoryFindMailbox.constprop.0+0x3e>
    dep->refs++;
 8009c88:	6863      	ldr	r3, [r4, #4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009c8e:	4806      	ldr	r0, [pc, #24]	; (8009ca8 <chFactoryFindMailbox.constprop.0+0x58>)
 8009c90:	f7fc f8e6 	bl	8005e60 <chMtxUnlock>
}
 8009c94:	4620      	mov	r0, r4
 8009c96:	bd70      	pop	{r4, r5, r6, pc}
  FACTORY_UNLOCK();
 8009c98:	4803      	ldr	r0, [pc, #12]	; (8009ca8 <chFactoryFindMailbox.constprop.0+0x58>)
  return NULL;
 8009c9a:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 8009c9c:	f7fc f8e0 	bl	8005e60 <chMtxUnlock>
}
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8009ca4:	461c      	mov	r4, r3
 8009ca6:	e7f2      	b.n	8009c8e <chFactoryFindMailbox.constprop.0+0x3e>
 8009ca8:	20001f00 	.word	0x20001f00
 8009cac:	0800cd44 	.word	0x0800cd44

08009cb0 <chFactoryFindSemaphore.constprop.0>:
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	2330      	movs	r3, #48	; 0x30
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	4d13      	ldr	r5, [pc, #76]	; (8009d08 <chFactoryFindSemaphore.constprop.0+0x58>)
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f7fc f838 	bl	8005d30 <chMtxLockS>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009cc6:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 8009cca:	42ac      	cmp	r4, r5
 8009ccc:	d01a      	beq.n	8009d04 <chFactoryFindSemaphore.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009cce:	4e0f      	ldr	r6, [pc, #60]	; (8009d0c <chFactoryFindSemaphore.constprop.0+0x5c>)
 8009cd0:	e002      	b.n	8009cd8 <chFactoryFindSemaphore.constprop.0+0x28>
    p = p->next;
 8009cd2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009cd4:	42ac      	cmp	r4, r5
 8009cd6:	d00f      	beq.n	8009cf8 <chFactoryFindSemaphore.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009cd8:	f104 0008 	add.w	r0, r4, #8
 8009cdc:	4631      	mov	r1, r6
 8009cde:	f7f6 fc33 	bl	8000548 <strcmp>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d1f5      	bne.n	8009cd2 <chFactoryFindSemaphore.constprop.0+0x22>
  if (dep != NULL) {
 8009ce6:	b114      	cbz	r4, 8009cee <chFactoryFindSemaphore.constprop.0+0x3e>
    dep->refs++;
 8009ce8:	6863      	ldr	r3, [r4, #4]
 8009cea:	3301      	adds	r3, #1
 8009cec:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009cee:	4806      	ldr	r0, [pc, #24]	; (8009d08 <chFactoryFindSemaphore.constprop.0+0x58>)
 8009cf0:	f7fc f8b6 	bl	8005e60 <chMtxUnlock>
}
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
  FACTORY_UNLOCK();
 8009cf8:	4803      	ldr	r0, [pc, #12]	; (8009d08 <chFactoryFindSemaphore.constprop.0+0x58>)
  return NULL;
 8009cfa:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 8009cfc:	f7fc f8b0 	bl	8005e60 <chMtxUnlock>
}
 8009d00:	4620      	mov	r0, r4
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8009d04:	461c      	mov	r4, r3
 8009d06:	e7f2      	b.n	8009cee <chFactoryFindSemaphore.constprop.0+0x3e>
 8009d08:	20001f00 	.word	0x20001f00
 8009d0c:	0800cd24 	.word	0x0800cd24

08009d10 <oslib_test_009_003_execute>:
static void oslib_test_009_003_execute(void) {
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8009d12:	4f3e      	ldr	r7, [pc, #248]	; (8009e0c <oslib_test_009_003_execute+0xfc>)
 8009d14:	2301      	movs	r3, #1
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	2330      	movs	r3, #48	; 0x30
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	4d3c      	ldr	r5, [pc, #240]	; (8009e10 <oslib_test_009_003_execute+0x100>)
 8009d20:	4628      	mov	r0, r5
 8009d22:	f7fc f805 	bl	8005d30 <chMtxLockS>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009d2c:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 8009d30:	42ac      	cmp	r4, r5
 8009d32:	d018      	beq.n	8009d66 <oslib_test_009_003_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009d34:	4e37      	ldr	r6, [pc, #220]	; (8009e14 <oslib_test_009_003_execute+0x104>)
 8009d36:	e002      	b.n	8009d3e <oslib_test_009_003_execute+0x2e>
    p = p->next;
 8009d38:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009d3a:	42ac      	cmp	r4, r5
 8009d3c:	d013      	beq.n	8009d66 <oslib_test_009_003_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009d3e:	f104 0008 	add.w	r0, r4, #8
 8009d42:	4631      	mov	r1, r6
 8009d44:	f7f6 fc00 	bl	8000548 <strcmp>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d1f5      	bne.n	8009d38 <oslib_test_009_003_execute+0x28>
  if (dep != NULL) {
 8009d4c:	b15c      	cbz	r4, 8009d66 <oslib_test_009_003_execute+0x56>
    dep->refs++;
 8009d4e:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009d50:	482f      	ldr	r0, [pc, #188]	; (8009e10 <oslib_test_009_003_execute+0x100>)
    dep->refs++;
 8009d52:	3301      	adds	r3, #1
 8009d54:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009d56:	f7fc f883 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 8009d5a:	4b2f      	ldr	r3, [pc, #188]	; (8009e18 <oslib_test_009_003_execute+0x108>)
 8009d5c:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8009d5e:	f240 1201 	movw	r2, #257	; 0x101
 8009d62:	80ba      	strh	r2, [r7, #4]
}
 8009d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d66:	482a      	ldr	r0, [pc, #168]	; (8009e10 <oslib_test_009_003_execute+0x100>)
 8009d68:	f7fc f87a 	bl	8005e60 <chMtxUnlock>
  test_set_step(2);
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	603b      	str	r3, [r7, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8009d70:	f7ff fcbe 	bl	80096f0 <chFactoryCreateSemaphore.constprop.0>
  if (!condition) {
 8009d74:	4604      	mov	r4, r0
 8009d76:	b358      	cbz	r0, 8009dd0 <oslib_test_009_003_execute+0xc0>
  test_set_step(3);
 8009d78:	2503      	movs	r5, #3
 8009d7a:	603d      	str	r5, [r7, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8009d7c:	f7ff fcb8 	bl	80096f0 <chFactoryCreateSemaphore.constprop.0>
 8009d80:	bb60      	cbnz	r0, 8009ddc <oslib_test_009_003_execute+0xcc>
  test_set_step(4);
 8009d82:	2304      	movs	r3, #4
 8009d84:	603b      	str	r3, [r7, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8009d86:	f7ff ff93 	bl	8009cb0 <chFactoryFindSemaphore.constprop.0>
 8009d8a:	b368      	cbz	r0, 8009de8 <oslib_test_009_003_execute+0xd8>
 8009d8c:	4284      	cmp	r4, r0
 8009d8e:	d131      	bne.n	8009df4 <oslib_test_009_003_execute+0xe4>
 8009d90:	6863      	ldr	r3, [r4, #4]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d12e      	bne.n	8009df4 <oslib_test_009_003_execute+0xe4>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8009d96:	6065      	str	r5, [r4, #4]
    chFactoryReleaseSemaphore(dsp2);
 8009d98:	f7ff fc0a 	bl	80095b0 <chFactoryReleaseSemaphore.isra.0>
 8009d9c:	6863      	ldr	r3, [r4, #4]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d12e      	bne.n	8009e00 <oslib_test_009_003_execute+0xf0>
    chFactoryReleaseSemaphore(dsp1);
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff fc04 	bl	80095b0 <chFactoryReleaseSemaphore.isra.0>
 8009da8:	6863      	ldr	r3, [r4, #4]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d128      	bne.n	8009e00 <oslib_test_009_003_execute+0xf0>
  test_set_step(5);
 8009dae:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
 8009db0:	4620      	mov	r0, r4
  test_set_step(5);
 8009db2:	603b      	str	r3, [r7, #0]
    chFactoryReleaseSemaphore(dsp);
 8009db4:	f7ff fbfc 	bl	80095b0 <chFactoryReleaseSemaphore.isra.0>
  test_set_step(6);
 8009db8:	2306      	movs	r3, #6
 8009dba:	603b      	str	r3, [r7, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8009dbc:	f7ff ff78 	bl	8009cb0 <chFactoryFindSemaphore.constprop.0>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d0cf      	beq.n	8009d64 <oslib_test_009_003_execute+0x54>
  chtest.failure_message = msg;
 8009dc4:	4b14      	ldr	r3, [pc, #80]	; (8009e18 <oslib_test_009_003_execute+0x108>)
 8009dc6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8009dc8:	f240 1201 	movw	r2, #257	; 0x101
 8009dcc:	80ba      	strh	r2, [r7, #4]
}
 8009dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 8009dd0:	4b12      	ldr	r3, [pc, #72]	; (8009e1c <oslib_test_009_003_execute+0x10c>)
 8009dd2:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8009dd4:	f240 1201 	movw	r2, #257	; 0x101
 8009dd8:	80ba      	strh	r2, [r7, #4]
 8009dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 8009ddc:	4b10      	ldr	r3, [pc, #64]	; (8009e20 <oslib_test_009_003_execute+0x110>)
 8009dde:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8009de0:	f240 1201 	movw	r2, #257	; 0x101
 8009de4:	80ba      	strh	r2, [r7, #4]
 8009de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 8009de8:	4b0e      	ldr	r3, [pc, #56]	; (8009e24 <oslib_test_009_003_execute+0x114>)
 8009dea:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8009dec:	f240 1201 	movw	r2, #257	; 0x101
 8009df0:	80ba      	strh	r2, [r7, #4]
 8009df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 8009df4:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <oslib_test_009_003_execute+0x118>)
 8009df6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8009df8:	f240 1201 	movw	r2, #257	; 0x101
 8009dfc:	80ba      	strh	r2, [r7, #4]
 8009dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 8009e00:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <oslib_test_009_003_execute+0x11c>)
 8009e02:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8009e04:	f240 1201 	movw	r2, #257	; 0x101
 8009e08:	80ba      	strh	r2, [r7, #4]
 8009e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e0c:	20000ab4 	.word	0x20000ab4
 8009e10:	20001f00 	.word	0x20001f00
 8009e14:	0800cd24 	.word	0x0800cd24
 8009e18:	0800cd74 	.word	0x0800cd74
 8009e1c:	0800cd54 	.word	0x0800cd54
 8009e20:	0800cd64 	.word	0x0800cd64
 8009e24:	0800cd70 	.word	0x0800cd70
 8009e28:	0800cd7c 	.word	0x0800cd7c
 8009e2c:	0800cd98 	.word	0x0800cd98

08009e30 <chFactoryFindBuffer.constprop.0>:
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	2330      	movs	r3, #48	; 0x30
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	4d13      	ldr	r5, [pc, #76]	; (8009e88 <chFactoryFindBuffer.constprop.0+0x58>)
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	f7fb ff78 	bl	8005d30 <chMtxLockS>
 8009e40:	2300      	movs	r3, #0
 8009e42:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009e46:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 8009e4a:	42ac      	cmp	r4, r5
 8009e4c:	d01a      	beq.n	8009e84 <chFactoryFindBuffer.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009e4e:	4e0f      	ldr	r6, [pc, #60]	; (8009e8c <chFactoryFindBuffer.constprop.0+0x5c>)
 8009e50:	e002      	b.n	8009e58 <chFactoryFindBuffer.constprop.0+0x28>
    p = p->next;
 8009e52:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009e54:	42ac      	cmp	r4, r5
 8009e56:	d00f      	beq.n	8009e78 <chFactoryFindBuffer.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009e58:	f104 0008 	add.w	r0, r4, #8
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	f7f6 fb73 	bl	8000548 <strcmp>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d1f5      	bne.n	8009e52 <chFactoryFindBuffer.constprop.0+0x22>
  if (dep != NULL) {
 8009e66:	b114      	cbz	r4, 8009e6e <chFactoryFindBuffer.constprop.0+0x3e>
    dep->refs++;
 8009e68:	6863      	ldr	r3, [r4, #4]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009e6e:	4806      	ldr	r0, [pc, #24]	; (8009e88 <chFactoryFindBuffer.constprop.0+0x58>)
 8009e70:	f7fb fff6 	bl	8005e60 <chMtxUnlock>
}
 8009e74:	4620      	mov	r0, r4
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
  FACTORY_UNLOCK();
 8009e78:	4803      	ldr	r0, [pc, #12]	; (8009e88 <chFactoryFindBuffer.constprop.0+0x58>)
  return NULL;
 8009e7a:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 8009e7c:	f7fb fff0 	bl	8005e60 <chMtxUnlock>
}
 8009e80:	4620      	mov	r0, r4
 8009e82:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8009e84:	461c      	mov	r4, r3
 8009e86:	e7f2      	b.n	8009e6e <chFactoryFindBuffer.constprop.0+0x3e>
 8009e88:	20001f00 	.word	0x20001f00
 8009e8c:	0800cd3c 	.word	0x0800cd3c

08009e90 <chFactoryFindObject.constprop.0>:
registered_object_t *chFactoryFindObject(const char *name) {
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	2330      	movs	r3, #48	; 0x30
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	4d13      	ldr	r5, [pc, #76]	; (8009ee8 <chFactoryFindObject.constprop.0+0x58>)
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f7fb ff48 	bl	8005d30 <chMtxLockS>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009ea6:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 8009eaa:	42ac      	cmp	r4, r5
 8009eac:	d01a      	beq.n	8009ee4 <chFactoryFindObject.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009eae:	4e0f      	ldr	r6, [pc, #60]	; (8009eec <chFactoryFindObject.constprop.0+0x5c>)
 8009eb0:	e002      	b.n	8009eb8 <chFactoryFindObject.constprop.0+0x28>
    p = p->next;
 8009eb2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009eb4:	42ac      	cmp	r4, r5
 8009eb6:	d00f      	beq.n	8009ed8 <chFactoryFindObject.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009eb8:	f104 0008 	add.w	r0, r4, #8
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	f7f6 fb43 	bl	8000548 <strcmp>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d1f5      	bne.n	8009eb2 <chFactoryFindObject.constprop.0+0x22>
  if (dep != NULL) {
 8009ec6:	b114      	cbz	r4, 8009ece <chFactoryFindObject.constprop.0+0x3e>
    dep->refs++;
 8009ec8:	6863      	ldr	r3, [r4, #4]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 8009ece:	4806      	ldr	r0, [pc, #24]	; (8009ee8 <chFactoryFindObject.constprop.0+0x58>)
 8009ed0:	f7fb ffc6 	bl	8005e60 <chMtxUnlock>
}
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
  FACTORY_UNLOCK();
 8009ed8:	4803      	ldr	r0, [pc, #12]	; (8009ee8 <chFactoryFindObject.constprop.0+0x58>)
  return NULL;
 8009eda:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 8009edc:	f7fb ffc0 	bl	8005e60 <chMtxUnlock>
}
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8009ee4:	461c      	mov	r4, r3
 8009ee6:	e7f2      	b.n	8009ece <chFactoryFindObject.constprop.0+0x3e>
 8009ee8:	20001f00 	.word	0x20001f00
 8009eec:	0800cd34 	.word	0x0800cd34

08009ef0 <chFactoryRegisterObject.constprop.0>:
registered_object_t *chFactoryRegisterObject(const char *name,
 8009ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef4:	2330      	movs	r3, #48	; 0x30
 8009ef6:	4680      	mov	r8, r0
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	4f2a      	ldr	r7, [pc, #168]	; (8009fa8 <chFactoryRegisterObject.constprop.0+0xb8>)
 8009efe:	4638      	mov	r0, r7
 8009f00:	f7fb ff16 	bl	8005d30 <chMtxLockS>
 8009f04:	2300      	movs	r3, #0
 8009f06:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009f0a:	463d      	mov	r5, r7
 8009f0c:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 8009f10:	42ac      	cmp	r4, r5
 8009f12:	d013      	beq.n	8009f3c <chFactoryRegisterObject.constprop.0+0x4c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009f14:	4e25      	ldr	r6, [pc, #148]	; (8009fac <chFactoryRegisterObject.constprop.0+0xbc>)
 8009f16:	e002      	b.n	8009f1e <chFactoryRegisterObject.constprop.0+0x2e>
    p = p->next;
 8009f18:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009f1a:	42ac      	cmp	r4, r5
 8009f1c:	d00e      	beq.n	8009f3c <chFactoryRegisterObject.constprop.0+0x4c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009f1e:	f104 0008 	add.w	r0, r4, #8
 8009f22:	4631      	mov	r1, r6
 8009f24:	f7f6 fb10 	bl	8000548 <strcmp>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d1f5      	bne.n	8009f18 <chFactoryRegisterObject.constprop.0+0x28>
  if (dep != NULL) {
 8009f2c:	b134      	cbz	r4, 8009f3c <chFactoryRegisterObject.constprop.0+0x4c>
    return NULL;
 8009f2e:	2400      	movs	r4, #0
  FACTORY_UNLOCK();
 8009f30:	481d      	ldr	r0, [pc, #116]	; (8009fa8 <chFactoryRegisterObject.constprop.0+0xb8>)
 8009f32:	f7fb ff95 	bl	8005e60 <chMtxUnlock>
}
 8009f36:	4620      	mov	r0, r4
 8009f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f3c:	2330      	movs	r3, #48	; 0x30
 8009f3e:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8009f42:	697c      	ldr	r4, [r7, #20]
  if (objp != NULL) {
 8009f44:	b334      	cbz	r4, 8009f94 <chFactoryRegisterObject.constprop.0+0xa4>
    mp->next = mp->next->next;
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	617b      	str	r3, [r7, #20]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 8009f50:	2c00      	cmp	r4, #0
 8009f52:	d0ec      	beq.n	8009f2e <chFactoryRegisterObject.constprop.0+0x3e>
    *dp++ = c;
 8009f54:	226d      	movs	r2, #109	; 0x6d
 8009f56:	f104 0309 	add.w	r3, r4, #9
 8009f5a:	7222      	strb	r2, [r4, #8]
 8009f5c:	2279      	movs	r2, #121	; 0x79
 8009f5e:	4914      	ldr	r1, [pc, #80]	; (8009fb0 <chFactoryRegisterObject.constprop.0+0xc0>)
 8009f60:	f803 2b01 	strb.w	r2, [r3], #1
 8009f64:	f104 0010 	add.w	r0, r4, #16
  } while ((c != (char)0) && (i > 0U));
 8009f68:	b13a      	cbz	r2, 8009f7a <chFactoryRegisterObject.constprop.0+0x8a>
 8009f6a:	4298      	cmp	r0, r3
 8009f6c:	d005      	beq.n	8009f7a <chFactoryRegisterObject.constprop.0+0x8a>
    c = *sp++;
 8009f6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 8009f72:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	d1f7      	bne.n	8009f6a <chFactoryRegisterObject.constprop.0+0x7a>
  dep->next = dlp->next;
 8009f7a:	693b      	ldr	r3, [r7, #16]
  FACTORY_UNLOCK();
 8009f7c:	480a      	ldr	r0, [pc, #40]	; (8009fa8 <chFactoryRegisterObject.constprop.0+0xb8>)
  dep->refs = (ucnt_t)1;
 8009f7e:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8009f80:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 8009f84:	613c      	str	r4, [r7, #16]
    rop->objp = objp;
 8009f86:	f8c4 8010 	str.w	r8, [r4, #16]
  FACTORY_UNLOCK();
 8009f8a:	f7fb ff69 	bl	8005e60 <chMtxUnlock>
}
 8009f8e:	4620      	mov	r0, r4
 8009f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	b123      	cbz	r3, 8009fa2 <chFactoryRegisterObject.constprop.0+0xb2>
    objp = mp->provider(mp->object_size, mp->align);
 8009f98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009f9c:	4798      	blx	r3
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	e7d3      	b.n	8009f4a <chFactoryRegisterObject.constprop.0+0x5a>
 8009fa2:	f384 8811 	msr	BASEPRI, r4
 8009fa6:	e7c3      	b.n	8009f30 <chFactoryRegisterObject.constprop.0+0x40>
 8009fa8:	20001f00 	.word	0x20001f00
 8009fac:	0800cd34 	.word	0x0800cd34
 8009fb0:	0800cd35 	.word	0x0800cd35
	...

08009fc0 <oslib_test_009_001_execute>:
static void oslib_test_009_001_execute(void) {
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8009fc2:	4f4b      	ldr	r7, [pc, #300]	; (800a0f0 <oslib_test_009_001_execute+0x130>)
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	2330      	movs	r3, #48	; 0x30
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	4d49      	ldr	r5, [pc, #292]	; (800a0f4 <oslib_test_009_001_execute+0x134>)
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f7fb fead 	bl	8005d30 <chMtxLockS>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009fdc:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 8009fe0:	42ac      	cmp	r4, r5
 8009fe2:	d018      	beq.n	800a016 <oslib_test_009_001_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009fe4:	4e44      	ldr	r6, [pc, #272]	; (800a0f8 <oslib_test_009_001_execute+0x138>)
 8009fe6:	e002      	b.n	8009fee <oslib_test_009_001_execute+0x2e>
    p = p->next;
 8009fe8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009fea:	42ac      	cmp	r4, r5
 8009fec:	d013      	beq.n	800a016 <oslib_test_009_001_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009fee:	f104 0008 	add.w	r0, r4, #8
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	f7f6 faa8 	bl	8000548 <strcmp>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1f5      	bne.n	8009fe8 <oslib_test_009_001_execute+0x28>
  if (dep != NULL) {
 8009ffc:	b15c      	cbz	r4, 800a016 <oslib_test_009_001_execute+0x56>
    dep->refs++;
 8009ffe:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a000:	483c      	ldr	r0, [pc, #240]	; (800a0f4 <oslib_test_009_001_execute+0x134>)
    dep->refs++;
 800a002:	3301      	adds	r3, #1
 800a004:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a006:	f7fb ff2b 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 800a00a:	4b3c      	ldr	r3, [pc, #240]	; (800a0fc <oslib_test_009_001_execute+0x13c>)
 800a00c:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a00e:	f240 1201 	movw	r2, #257	; 0x101
 800a012:	80ba      	strh	r2, [r7, #4]
}
 800a014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a016:	4837      	ldr	r0, [pc, #220]	; (800a0f4 <oslib_test_009_001_execute+0x134>)
 800a018:	f7fb ff22 	bl	8005e60 <chMtxUnlock>
  test_set_step(2);
 800a01c:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800a01e:	4838      	ldr	r0, [pc, #224]	; (800a100 <oslib_test_009_001_execute+0x140>)
  test_set_step(2);
 800a020:	603b      	str	r3, [r7, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800a022:	f7ff ff65 	bl	8009ef0 <chFactoryRegisterObject.constprop.0>
  if (!condition) {
 800a026:	4604      	mov	r4, r0
 800a028:	2800      	cmp	r0, #0
 800a02a:	d03d      	beq.n	800a0a8 <oslib_test_009_001_execute+0xe8>
  test_set_step(3);
 800a02c:	2503      	movs	r5, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800a02e:	4835      	ldr	r0, [pc, #212]	; (800a104 <oslib_test_009_001_execute+0x144>)
  test_set_step(3);
 800a030:	603d      	str	r5, [r7, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800a032:	f7ff ff5d 	bl	8009ef0 <chFactoryRegisterObject.constprop.0>
 800a036:	2800      	cmp	r0, #0
 800a038:	d13c      	bne.n	800a0b4 <oslib_test_009_001_execute+0xf4>
  test_set_step(4);
 800a03a:	2304      	movs	r3, #4
 800a03c:	603b      	str	r3, [r7, #0]
    rop1 = chFactoryFindObject("myobj");
 800a03e:	f7ff ff27 	bl	8009e90 <chFactoryFindObject.constprop.0>
 800a042:	2800      	cmp	r0, #0
 800a044:	d03c      	beq.n	800a0c0 <oslib_test_009_001_execute+0x100>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 800a046:	6901      	ldr	r1, [r0, #16]
 800a048:	680a      	ldr	r2, [r1, #0]
 800a04a:	f245 56aa 	movw	r6, #21930	; 0x55aa
 800a04e:	42b2      	cmp	r2, r6
 800a050:	d142      	bne.n	800a0d8 <oslib_test_009_001_execute+0x118>
 800a052:	4284      	cmp	r4, r0
 800a054:	d13a      	bne.n	800a0cc <oslib_test_009_001_execute+0x10c>
 800a056:	6863      	ldr	r3, [r4, #4]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d137      	bne.n	800a0cc <oslib_test_009_001_execute+0x10c>
 800a05c:	6065      	str	r5, [r4, #4]
 800a05e:	680b      	ldr	r3, [r1, #0]
 800a060:	4293      	cmp	r3, r2
 800a062:	d139      	bne.n	800a0d8 <oslib_test_009_001_execute+0x118>
    chFactoryReleaseObject(rop2);
 800a064:	f7ff fb0c 	bl	8009680 <chFactoryReleaseObject.isra.0>
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d13a      	bne.n	800a0e4 <oslib_test_009_001_execute+0x124>
    chFactoryReleaseObject(rop1);
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff fb06 	bl	8009680 <chFactoryReleaseObject.isra.0>
    test_assert(rop->element.refs == 1, "references mismatch");
 800a074:	6860      	ldr	r0, [r4, #4]
 800a076:	4924      	ldr	r1, [pc, #144]	; (800a108 <oslib_test_009_001_execute+0x148>)
 800a078:	1e43      	subs	r3, r0, #1
 800a07a:	4258      	negs	r0, r3
 800a07c:	4158      	adcs	r0, r3
 800a07e:	f7fc fcb7 	bl	80069f0 <__test_assert>
 800a082:	2800      	cmp	r0, #0
 800a084:	d1c6      	bne.n	800a014 <oslib_test_009_001_execute+0x54>
    chFactoryReleaseObject(rop);
 800a086:	4620      	mov	r0, r4
  test_set_step(5);
 800a088:	2305      	movs	r3, #5
 800a08a:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObject(rop);
 800a08c:	f7ff faf8 	bl	8009680 <chFactoryReleaseObject.isra.0>
  test_set_step(6);
 800a090:	2306      	movs	r3, #6
 800a092:	603b      	str	r3, [r7, #0]
    rop = chFactoryFindObject("myobj");
 800a094:	f7ff fefc 	bl	8009e90 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 800a098:	fab0 f080 	clz	r0, r0
}
 800a09c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(rop == NULL, "found");
 800a0a0:	4916      	ldr	r1, [pc, #88]	; (800a0fc <oslib_test_009_001_execute+0x13c>)
 800a0a2:	0940      	lsrs	r0, r0, #5
 800a0a4:	f7fc bca4 	b.w	80069f0 <__test_assert>
  chtest.failure_message = msg;
 800a0a8:	4b18      	ldr	r3, [pc, #96]	; (800a10c <oslib_test_009_001_execute+0x14c>)
 800a0aa:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a0ac:	f240 1201 	movw	r2, #257	; 0x101
 800a0b0:	80ba      	strh	r2, [r7, #4]
}
 800a0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a0b4:	4b16      	ldr	r3, [pc, #88]	; (800a110 <oslib_test_009_001_execute+0x150>)
 800a0b6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a0b8:	f240 1201 	movw	r2, #257	; 0x101
 800a0bc:	80ba      	strh	r2, [r7, #4]
 800a0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a0c0:	4b14      	ldr	r3, [pc, #80]	; (800a114 <oslib_test_009_001_execute+0x154>)
 800a0c2:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a0c4:	f240 1201 	movw	r2, #257	; 0x101
 800a0c8:	80ba      	strh	r2, [r7, #4]
 800a0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a0cc:	4b12      	ldr	r3, [pc, #72]	; (800a118 <oslib_test_009_001_execute+0x158>)
 800a0ce:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a0d0:	f240 1201 	movw	r2, #257	; 0x101
 800a0d4:	80ba      	strh	r2, [r7, #4]
 800a0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a0d8:	4b10      	ldr	r3, [pc, #64]	; (800a11c <oslib_test_009_001_execute+0x15c>)
 800a0da:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a0dc:	f240 1201 	movw	r2, #257	; 0x101
 800a0e0:	80ba      	strh	r2, [r7, #4]
 800a0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a0e4:	4b08      	ldr	r3, [pc, #32]	; (800a108 <oslib_test_009_001_execute+0x148>)
 800a0e6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a0e8:	f240 1201 	movw	r2, #257	; 0x101
 800a0ec:	80ba      	strh	r2, [r7, #4]
 800a0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f0:	20000ab4 	.word	0x20000ab4
 800a0f4:	20001f00 	.word	0x20001f00
 800a0f8:	0800cd34 	.word	0x0800cd34
 800a0fc:	0800cd74 	.word	0x0800cd74
 800a100:	200008d8 	.word	0x200008d8
 800a104:	200008d4 	.word	0x200008d4
 800a108:	0800cd98 	.word	0x0800cd98
 800a10c:	0800cdac 	.word	0x0800cdac
 800a110:	0800cdbc 	.word	0x0800cdbc
 800a114:	0800cd70 	.word	0x0800cd70
 800a118:	0800cd7c 	.word	0x0800cd7c
 800a11c:	0800cdcc 	.word	0x0800cdcc

0800a120 <chFactoryCreatePipe.constprop.0>:
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	2330      	movs	r3, #48	; 0x30
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	4816      	ldr	r0, [pc, #88]	; (800a184 <chFactoryCreatePipe.constprop.0+0x64>)
 800a12a:	f7fb fe01 	bl	8005d30 <chMtxLockS>
 800a12e:	2500      	movs	r5, #0
 800a130:	f385 8811 	msr	BASEPRI, r5
  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 800a134:	4914      	ldr	r1, [pc, #80]	; (800a188 <chFactoryCreatePipe.constprop.0+0x68>)
 800a136:	4815      	ldr	r0, [pc, #84]	; (800a18c <chFactoryCreatePipe.constprop.0+0x6c>)
 800a138:	2308      	movs	r3, #8
 800a13a:	2270      	movs	r2, #112	; 0x70
 800a13c:	f7fc fc10 	bl	8006960 <dyn_create_object_heap.lto_priv.0>
  if (dpp != NULL) {
 800a140:	4604      	mov	r4, r0
 800a142:	b1d0      	cbz	r0, 800a17a <chFactoryCreatePipe.constprop.0+0x5a>
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 800a144:	f100 0360 	add.w	r3, r0, #96	; 0x60
  PC_INIT(pp);
 800a148:	f100 0130 	add.w	r1, r0, #48	; 0x30
  PW_INIT(pp);
 800a14c:	f100 0240 	add.w	r2, r0, #64	; 0x40
  pp->top    = &buf[n];
 800a150:	3070      	adds	r0, #112	; 0x70
  pp->buffer = buf;
 800a152:	e9c4 3004 	strd	r3, r0, [r4, #16]
  pp->wrptr  = buf;
 800a156:	e9c4 3306 	strd	r3, r3, [r4, #24]
  PR_INIT(pp);
 800a15a:	f104 0350 	add.w	r3, r4, #80	; 0x50
  pp->rtr    = NULL;
 800a15e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 800a162:	e9c4 110c 	strd	r1, r1, [r4, #48]	; 0x30
 800a166:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 800a16a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  pp->cnt    = (size_t)0;
 800a16e:	6225      	str	r5, [r4, #32]
  pp->reset  = false;
 800a170:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  mp->owner = NULL;
 800a174:	63a5      	str	r5, [r4, #56]	; 0x38
 800a176:	64a5      	str	r5, [r4, #72]	; 0x48
 800a178:	65a5      	str	r5, [r4, #88]	; 0x58
  FACTORY_UNLOCK();
 800a17a:	4802      	ldr	r0, [pc, #8]	; (800a184 <chFactoryCreatePipe.constprop.0+0x64>)
 800a17c:	f7fb fe70 	bl	8005e60 <chMtxUnlock>
}
 800a180:	4620      	mov	r0, r4
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	20001f00 	.word	0x20001f00
 800a188:	20001f44 	.word	0x20001f44
 800a18c:	0800cd2c 	.word	0x0800cd2c

0800a190 <oslib_test_009_006_execute>:

static void oslib_test_009_006_execute(void) {
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 800a192:	4f3e      	ldr	r7, [pc, #248]	; (800a28c <oslib_test_009_006_execute+0xfc>)
 800a194:	2301      	movs	r3, #1
 800a196:	603b      	str	r3, [r7, #0]
 800a198:	2330      	movs	r3, #48	; 0x30
 800a19a:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800a19e:	4d3c      	ldr	r5, [pc, #240]	; (800a290 <oslib_test_009_006_execute+0x100>)
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f7fb fdc5 	bl	8005d30 <chMtxLockS>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a1ac:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800a1b0:	42ac      	cmp	r4, r5
 800a1b2:	d018      	beq.n	800a1e6 <oslib_test_009_006_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a1b4:	4e37      	ldr	r6, [pc, #220]	; (800a294 <oslib_test_009_006_execute+0x104>)
 800a1b6:	e002      	b.n	800a1be <oslib_test_009_006_execute+0x2e>
    p = p->next;
 800a1b8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a1ba:	42ac      	cmp	r4, r5
 800a1bc:	d013      	beq.n	800a1e6 <oslib_test_009_006_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a1be:	f104 0008 	add.w	r0, r4, #8
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	f7f6 f9c0 	bl	8000548 <strcmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d1f5      	bne.n	800a1b8 <oslib_test_009_006_execute+0x28>
  if (dep != NULL) {
 800a1cc:	b15c      	cbz	r4, 800a1e6 <oslib_test_009_006_execute+0x56>
    dep->refs++;
 800a1ce:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a1d0:	482f      	ldr	r0, [pc, #188]	; (800a290 <oslib_test_009_006_execute+0x100>)
    dep->refs++;
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a1d6:	f7fb fe43 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 800a1da:	4b2f      	ldr	r3, [pc, #188]	; (800a298 <oslib_test_009_006_execute+0x108>)
 800a1dc:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a1de:	f240 1201 	movw	r2, #257	; 0x101
 800a1e2:	80ba      	strh	r2, [r7, #4]
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 800a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e6:	482a      	ldr	r0, [pc, #168]	; (800a290 <oslib_test_009_006_execute+0x100>)
 800a1e8:	f7fb fe3a 	bl	8005e60 <chMtxUnlock>
  test_set_step(2);
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	603b      	str	r3, [r7, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 800a1f0:	f7ff ff96 	bl	800a120 <chFactoryCreatePipe.constprop.0>
  if (!condition) {
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	b358      	cbz	r0, 800a250 <oslib_test_009_006_execute+0xc0>
  test_set_step(3);
 800a1f8:	2503      	movs	r5, #3
 800a1fa:	603d      	str	r5, [r7, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 800a1fc:	f7ff ff90 	bl	800a120 <chFactoryCreatePipe.constprop.0>
 800a200:	bb60      	cbnz	r0, 800a25c <oslib_test_009_006_execute+0xcc>
  test_set_step(4);
 800a202:	2304      	movs	r3, #4
 800a204:	603b      	str	r3, [r7, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 800a206:	f7ff fcc3 	bl	8009b90 <chFactoryFindPipe.constprop.0>
 800a20a:	b368      	cbz	r0, 800a268 <oslib_test_009_006_execute+0xd8>
 800a20c:	4284      	cmp	r4, r0
 800a20e:	d131      	bne.n	800a274 <oslib_test_009_006_execute+0xe4>
 800a210:	6863      	ldr	r3, [r4, #4]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d12e      	bne.n	800a274 <oslib_test_009_006_execute+0xe4>
 800a216:	6065      	str	r5, [r4, #4]
    chFactoryReleasePipe(dpp2);
 800a218:	f7ff f93a 	bl	8009490 <chFactoryReleasePipe.isra.0>
 800a21c:	6863      	ldr	r3, [r4, #4]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d12e      	bne.n	800a280 <oslib_test_009_006_execute+0xf0>
    chFactoryReleasePipe(dpp1);
 800a222:	4620      	mov	r0, r4
 800a224:	f7ff f934 	bl	8009490 <chFactoryReleasePipe.isra.0>
 800a228:	6863      	ldr	r3, [r4, #4]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d128      	bne.n	800a280 <oslib_test_009_006_execute+0xf0>
  test_set_step(5);
 800a22e:	2305      	movs	r3, #5
    chFactoryReleasePipe(dpp);
 800a230:	4620      	mov	r0, r4
  test_set_step(5);
 800a232:	603b      	str	r3, [r7, #0]
    chFactoryReleasePipe(dpp);
 800a234:	f7ff f92c 	bl	8009490 <chFactoryReleasePipe.isra.0>
  test_set_step(6);
 800a238:	2306      	movs	r3, #6
 800a23a:	603b      	str	r3, [r7, #0]
    dpp = chFactoryFindPipe("mypipe");
 800a23c:	f7ff fca8 	bl	8009b90 <chFactoryFindPipe.constprop.0>
 800a240:	2800      	cmp	r0, #0
 800a242:	d0cf      	beq.n	800a1e4 <oslib_test_009_006_execute+0x54>
  chtest.failure_message = msg;
 800a244:	4b14      	ldr	r3, [pc, #80]	; (800a298 <oslib_test_009_006_execute+0x108>)
 800a246:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a248:	f240 1201 	movw	r2, #257	; 0x101
 800a24c:	80ba      	strh	r2, [r7, #4]
}
 800a24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a250:	4b12      	ldr	r3, [pc, #72]	; (800a29c <oslib_test_009_006_execute+0x10c>)
 800a252:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a254:	f240 1201 	movw	r2, #257	; 0x101
 800a258:	80ba      	strh	r2, [r7, #4]
 800a25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <oslib_test_009_006_execute+0x110>)
 800a25e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a260:	f240 1201 	movw	r2, #257	; 0x101
 800a264:	80ba      	strh	r2, [r7, #4]
 800a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a268:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <oslib_test_009_006_execute+0x114>)
 800a26a:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a26c:	f240 1201 	movw	r2, #257	; 0x101
 800a270:	80ba      	strh	r2, [r7, #4]
 800a272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a274:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <oslib_test_009_006_execute+0x118>)
 800a276:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a278:	f240 1201 	movw	r2, #257	; 0x101
 800a27c:	80ba      	strh	r2, [r7, #4]
 800a27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a280:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <oslib_test_009_006_execute+0x11c>)
 800a282:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a284:	f240 1201 	movw	r2, #257	; 0x101
 800a288:	80ba      	strh	r2, [r7, #4]
 800a28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a28c:	20000ab4 	.word	0x20000ab4
 800a290:	20001f00 	.word	0x20001f00
 800a294:	0800cd2c 	.word	0x0800cd2c
 800a298:	0800cd74 	.word	0x0800cd74
 800a29c:	0800cd54 	.word	0x0800cd54
 800a2a0:	0800cd64 	.word	0x0800cd64
 800a2a4:	0800cd70 	.word	0x0800cd70
 800a2a8:	0800cd7c 	.word	0x0800cd7c
 800a2ac:	0800cd98 	.word	0x0800cd98

0800a2b0 <chFactoryCreateMailbox.constprop.0>:
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	2330      	movs	r3, #48	; 0x30
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	4812      	ldr	r0, [pc, #72]	; (800a304 <chFactoryCreateMailbox.constprop.0+0x54>)
 800a2ba:	f7fb fd39 	bl	8005d30 <chMtxLockS>
 800a2be:	2500      	movs	r5, #0
 800a2c0:	f385 8811 	msr	BASEPRI, r5
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 800a2c4:	4910      	ldr	r1, [pc, #64]	; (800a308 <chFactoryCreateMailbox.constprop.0+0x58>)
 800a2c6:	4811      	ldr	r0, [pc, #68]	; (800a30c <chFactoryCreateMailbox.constprop.0+0x5c>)
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	2278      	movs	r2, #120	; 0x78
 800a2cc:	f7fc fb48 	bl	8006960 <dyn_create_object_heap.lto_priv.0>
  if (dmp != NULL) {
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	b188      	cbz	r0, 800a2f8 <chFactoryCreateMailbox.constprop.0+0x48>
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 800a2d4:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 800a2d8:	f100 0128 	add.w	r1, r0, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 800a2dc:	f100 0230 	add.w	r2, r0, #48	; 0x30
  mbp->top    = &buf[n];
 800a2e0:	3078      	adds	r0, #120	; 0x78
  mbp->buffer = buf;
 800a2e2:	e9c4 3004 	strd	r3, r0, [r4, #16]
  mbp->wrptr  = buf;
 800a2e6:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800a2ea:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800a2ee:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 800a2f2:	6225      	str	r5, [r4, #32]
  mbp->reset  = false;
 800a2f4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  FACTORY_UNLOCK();
 800a2f8:	4802      	ldr	r0, [pc, #8]	; (800a304 <chFactoryCreateMailbox.constprop.0+0x54>)
 800a2fa:	f7fb fdb1 	bl	8005e60 <chMtxUnlock>
}
 800a2fe:	4620      	mov	r0, r4
 800a300:	bd38      	pop	{r3, r4, r5, pc}
 800a302:	bf00      	nop
 800a304:	20001f00 	.word	0x20001f00
 800a308:	20001f3c 	.word	0x20001f3c
 800a30c:	0800cd44 	.word	0x0800cd44

0800a310 <oslib_test_009_004_execute>:
static void oslib_test_009_004_execute(void) {
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800a312:	4f3e      	ldr	r7, [pc, #248]	; (800a40c <oslib_test_009_004_execute+0xfc>)
 800a314:	2301      	movs	r3, #1
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	2330      	movs	r3, #48	; 0x30
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	4d3c      	ldr	r5, [pc, #240]	; (800a410 <oslib_test_009_004_execute+0x100>)
 800a320:	4628      	mov	r0, r5
 800a322:	f7fb fd05 	bl	8005d30 <chMtxLockS>
 800a326:	2300      	movs	r3, #0
 800a328:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a32c:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800a330:	42ac      	cmp	r4, r5
 800a332:	d018      	beq.n	800a366 <oslib_test_009_004_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a334:	4e37      	ldr	r6, [pc, #220]	; (800a414 <oslib_test_009_004_execute+0x104>)
 800a336:	e002      	b.n	800a33e <oslib_test_009_004_execute+0x2e>
    p = p->next;
 800a338:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a33a:	42ac      	cmp	r4, r5
 800a33c:	d013      	beq.n	800a366 <oslib_test_009_004_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a33e:	f104 0008 	add.w	r0, r4, #8
 800a342:	4631      	mov	r1, r6
 800a344:	f7f6 f900 	bl	8000548 <strcmp>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d1f5      	bne.n	800a338 <oslib_test_009_004_execute+0x28>
  if (dep != NULL) {
 800a34c:	b15c      	cbz	r4, 800a366 <oslib_test_009_004_execute+0x56>
    dep->refs++;
 800a34e:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a350:	482f      	ldr	r0, [pc, #188]	; (800a410 <oslib_test_009_004_execute+0x100>)
    dep->refs++;
 800a352:	3301      	adds	r3, #1
 800a354:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a356:	f7fb fd83 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 800a35a:	4b2f      	ldr	r3, [pc, #188]	; (800a418 <oslib_test_009_004_execute+0x108>)
 800a35c:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a35e:	f240 1201 	movw	r2, #257	; 0x101
 800a362:	80ba      	strh	r2, [r7, #4]
}
 800a364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a366:	482a      	ldr	r0, [pc, #168]	; (800a410 <oslib_test_009_004_execute+0x100>)
 800a368:	f7fb fd7a 	bl	8005e60 <chMtxUnlock>
  test_set_step(2);
 800a36c:	2302      	movs	r3, #2
 800a36e:	603b      	str	r3, [r7, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 800a370:	f7ff ff9e 	bl	800a2b0 <chFactoryCreateMailbox.constprop.0>
  if (!condition) {
 800a374:	4604      	mov	r4, r0
 800a376:	b358      	cbz	r0, 800a3d0 <oslib_test_009_004_execute+0xc0>
  test_set_step(3);
 800a378:	2503      	movs	r5, #3
 800a37a:	603d      	str	r5, [r7, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 800a37c:	f7ff ff98 	bl	800a2b0 <chFactoryCreateMailbox.constprop.0>
 800a380:	bb60      	cbnz	r0, 800a3dc <oslib_test_009_004_execute+0xcc>
  test_set_step(4);
 800a382:	2304      	movs	r3, #4
 800a384:	603b      	str	r3, [r7, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 800a386:	f7ff fc63 	bl	8009c50 <chFactoryFindMailbox.constprop.0>
 800a38a:	b368      	cbz	r0, 800a3e8 <oslib_test_009_004_execute+0xd8>
 800a38c:	4284      	cmp	r4, r0
 800a38e:	d131      	bne.n	800a3f4 <oslib_test_009_004_execute+0xe4>
 800a390:	6863      	ldr	r3, [r4, #4]
 800a392:	2b02      	cmp	r3, #2
 800a394:	d12e      	bne.n	800a3f4 <oslib_test_009_004_execute+0xe4>
 800a396:	6065      	str	r5, [r4, #4]
    chFactoryReleaseMailbox(dmp2);
 800a398:	f7ff f8da 	bl	8009550 <chFactoryReleaseMailbox.isra.0>
 800a39c:	6863      	ldr	r3, [r4, #4]
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d12e      	bne.n	800a400 <oslib_test_009_004_execute+0xf0>
    chFactoryReleaseMailbox(dmp1);
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f7ff f8d4 	bl	8009550 <chFactoryReleaseMailbox.isra.0>
 800a3a8:	6863      	ldr	r3, [r4, #4]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d128      	bne.n	800a400 <oslib_test_009_004_execute+0xf0>
  test_set_step(5);
 800a3ae:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
 800a3b0:	4620      	mov	r0, r4
  test_set_step(5);
 800a3b2:	603b      	str	r3, [r7, #0]
    chFactoryReleaseMailbox(dmp);
 800a3b4:	f7ff f8cc 	bl	8009550 <chFactoryReleaseMailbox.isra.0>
  test_set_step(6);
 800a3b8:	2306      	movs	r3, #6
 800a3ba:	603b      	str	r3, [r7, #0]
    dmp = chFactoryFindMailbox("mymbx");
 800a3bc:	f7ff fc48 	bl	8009c50 <chFactoryFindMailbox.constprop.0>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d0cf      	beq.n	800a364 <oslib_test_009_004_execute+0x54>
  chtest.failure_message = msg;
 800a3c4:	4b14      	ldr	r3, [pc, #80]	; (800a418 <oslib_test_009_004_execute+0x108>)
 800a3c6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a3c8:	f240 1201 	movw	r2, #257	; 0x101
 800a3cc:	80ba      	strh	r2, [r7, #4]
}
 800a3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a3d0:	4b12      	ldr	r3, [pc, #72]	; (800a41c <oslib_test_009_004_execute+0x10c>)
 800a3d2:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a3d4:	f240 1201 	movw	r2, #257	; 0x101
 800a3d8:	80ba      	strh	r2, [r7, #4]
 800a3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a3dc:	4b10      	ldr	r3, [pc, #64]	; (800a420 <oslib_test_009_004_execute+0x110>)
 800a3de:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a3e0:	f240 1201 	movw	r2, #257	; 0x101
 800a3e4:	80ba      	strh	r2, [r7, #4]
 800a3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a3e8:	4b0e      	ldr	r3, [pc, #56]	; (800a424 <oslib_test_009_004_execute+0x114>)
 800a3ea:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a3ec:	f240 1201 	movw	r2, #257	; 0x101
 800a3f0:	80ba      	strh	r2, [r7, #4]
 800a3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <oslib_test_009_004_execute+0x118>)
 800a3f6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a3f8:	f240 1201 	movw	r2, #257	; 0x101
 800a3fc:	80ba      	strh	r2, [r7, #4]
 800a3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <oslib_test_009_004_execute+0x11c>)
 800a402:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a404:	f240 1201 	movw	r2, #257	; 0x101
 800a408:	80ba      	strh	r2, [r7, #4]
 800a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a40c:	20000ab4 	.word	0x20000ab4
 800a410:	20001f00 	.word	0x20001f00
 800a414:	0800cd44 	.word	0x0800cd44
 800a418:	0800cd74 	.word	0x0800cd74
 800a41c:	0800cd54 	.word	0x0800cd54
 800a420:	0800cd64 	.word	0x0800cd64
 800a424:	0800cd70 	.word	0x0800cd70
 800a428:	0800cd7c 	.word	0x0800cd7c
 800a42c:	0800cd98 	.word	0x0800cd98

0800a430 <oslib_test_009_002_execute>:
static void oslib_test_009_002_execute(void) {
 800a430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800a434:	4f59      	ldr	r7, [pc, #356]	; (800a59c <oslib_test_009_002_execute+0x16c>)
 800a436:	2301      	movs	r3, #1
 800a438:	603b      	str	r3, [r7, #0]
 800a43a:	2330      	movs	r3, #48	; 0x30
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	4d57      	ldr	r5, [pc, #348]	; (800a5a0 <oslib_test_009_002_execute+0x170>)
 800a442:	4628      	mov	r0, r5
 800a444:	f7fb fc74 	bl	8005d30 <chMtxLockS>
 800a448:	2300      	movs	r3, #0
 800a44a:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a44e:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800a452:	42ac      	cmp	r4, r5
 800a454:	d019      	beq.n	800a48a <oslib_test_009_002_execute+0x5a>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a456:	4e53      	ldr	r6, [pc, #332]	; (800a5a4 <oslib_test_009_002_execute+0x174>)
 800a458:	e002      	b.n	800a460 <oslib_test_009_002_execute+0x30>
    p = p->next;
 800a45a:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a45c:	42ac      	cmp	r4, r5
 800a45e:	d014      	beq.n	800a48a <oslib_test_009_002_execute+0x5a>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a460:	f104 0008 	add.w	r0, r4, #8
 800a464:	4631      	mov	r1, r6
 800a466:	f7f6 f86f 	bl	8000548 <strcmp>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d1f5      	bne.n	800a45a <oslib_test_009_002_execute+0x2a>
  if (dep != NULL) {
 800a46e:	b164      	cbz	r4, 800a48a <oslib_test_009_002_execute+0x5a>
    dep->refs++;
 800a470:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a472:	484b      	ldr	r0, [pc, #300]	; (800a5a0 <oslib_test_009_002_execute+0x170>)
    dep->refs++;
 800a474:	3301      	adds	r3, #1
 800a476:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a478:	f7fb fcf2 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 800a47c:	4b4a      	ldr	r3, [pc, #296]	; (800a5a8 <oslib_test_009_002_execute+0x178>)
 800a47e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a480:	f240 1201 	movw	r2, #257	; 0x101
 800a484:	80ba      	strh	r2, [r7, #4]
}
 800a486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48a:	4845      	ldr	r0, [pc, #276]	; (800a5a0 <oslib_test_009_002_execute+0x170>)
 800a48c:	f7fb fce8 	bl	8005e60 <chMtxUnlock>
  test_set_step(2);
 800a490:	2302      	movs	r3, #2
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	2630      	movs	r6, #48	; 0x30
 800a496:	f386 8811 	msr	BASEPRI, r6
 800a49a:	4841      	ldr	r0, [pc, #260]	; (800a5a0 <oslib_test_009_002_execute+0x170>)
 800a49c:	f7fb fc48 	bl	8005d30 <chMtxLockS>
 800a4a0:	2500      	movs	r5, #0
 800a4a2:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800a4a6:	4941      	ldr	r1, [pc, #260]	; (800a5ac <oslib_test_009_002_execute+0x17c>)
 800a4a8:	483e      	ldr	r0, [pc, #248]	; (800a5a4 <oslib_test_009_002_execute+0x174>)
 800a4aa:	2308      	movs	r3, #8
 800a4ac:	2290      	movs	r2, #144	; 0x90
 800a4ae:	f7fc fa57 	bl	8006960 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	b348      	cbz	r0, 800a50a <oslib_test_009_002_execute+0xda>
    memset((void *)(dbp + 1), 0, size);
 800a4b6:	2280      	movs	r2, #128	; 0x80
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f104 0010 	add.w	r0, r4, #16
 800a4be:	f7f5 ffe3 	bl	8000488 <memset>
  test_set_step(3);
 800a4c2:	f04f 0803 	mov.w	r8, #3
  FACTORY_UNLOCK();
 800a4c6:	4836      	ldr	r0, [pc, #216]	; (800a5a0 <oslib_test_009_002_execute+0x170>)
 800a4c8:	f7fb fcca 	bl	8005e60 <chMtxUnlock>
 800a4cc:	f8c7 8000 	str.w	r8, [r7]
 800a4d0:	f386 8811 	msr	BASEPRI, r6
 800a4d4:	4832      	ldr	r0, [pc, #200]	; (800a5a0 <oslib_test_009_002_execute+0x170>)
 800a4d6:	f7fb fc2b 	bl	8005d30 <chMtxLockS>
 800a4da:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800a4de:	4933      	ldr	r1, [pc, #204]	; (800a5ac <oslib_test_009_002_execute+0x17c>)
 800a4e0:	4830      	ldr	r0, [pc, #192]	; (800a5a4 <oslib_test_009_002_execute+0x174>)
 800a4e2:	2308      	movs	r3, #8
 800a4e4:	2290      	movs	r2, #144	; 0x90
 800a4e6:	f7fc fa3b 	bl	8006960 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800a4ea:	b1c0      	cbz	r0, 800a51e <oslib_test_009_002_execute+0xee>
    memset((void *)(dbp + 1), 0, size);
 800a4ec:	2280      	movs	r2, #128	; 0x80
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	3010      	adds	r0, #16
 800a4f2:	f7f5 ffc9 	bl	8000488 <memset>
  FACTORY_UNLOCK();
 800a4f6:	482a      	ldr	r0, [pc, #168]	; (800a5a0 <oslib_test_009_002_execute+0x170>)
 800a4f8:	f7fb fcb2 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 800a4fc:	4b2c      	ldr	r3, [pc, #176]	; (800a5b0 <oslib_test_009_002_execute+0x180>)
 800a4fe:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a500:	f240 1201 	movw	r2, #257	; 0x101
 800a504:	80ba      	strh	r2, [r7, #4]
}
 800a506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a50a:	4825      	ldr	r0, [pc, #148]	; (800a5a0 <oslib_test_009_002_execute+0x170>)
 800a50c:	f7fb fca8 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 800a510:	4b28      	ldr	r3, [pc, #160]	; (800a5b4 <oslib_test_009_002_execute+0x184>)
 800a512:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a514:	f240 1201 	movw	r2, #257	; 0x101
 800a518:	80ba      	strh	r2, [r7, #4]
 800a51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51e:	4820      	ldr	r0, [pc, #128]	; (800a5a0 <oslib_test_009_002_execute+0x170>)
 800a520:	f7fb fc9e 	bl	8005e60 <chMtxUnlock>
  test_set_step(4);
 800a524:	2304      	movs	r3, #4
 800a526:	603b      	str	r3, [r7, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 800a528:	f7ff fc82 	bl	8009e30 <chFactoryFindBuffer.constprop.0>
  if (!condition) {
 800a52c:	4605      	mov	r5, r0
 800a52e:	b340      	cbz	r0, 800a582 <oslib_test_009_002_execute+0x152>
 800a530:	42a5      	cmp	r5, r4
 800a532:	d120      	bne.n	800a576 <oslib_test_009_002_execute+0x146>
 800a534:	686b      	ldr	r3, [r5, #4]
 800a536:	2b02      	cmp	r3, #2
 800a538:	d11d      	bne.n	800a576 <oslib_test_009_002_execute+0x146>
 800a53a:	f8c5 8004 	str.w	r8, [r5, #4]
    chFactoryReleaseBuffer(dbp2);
 800a53e:	f7ff f86f 	bl	8009620 <chFactoryReleaseBuffer.isra.0>
 800a542:	686b      	ldr	r3, [r5, #4]
 800a544:	2b02      	cmp	r3, #2
 800a546:	d122      	bne.n	800a58e <oslib_test_009_002_execute+0x15e>
    chFactoryReleaseBuffer(dbp1);
 800a548:	4628      	mov	r0, r5
 800a54a:	f7ff f869 	bl	8009620 <chFactoryReleaseBuffer.isra.0>
 800a54e:	686b      	ldr	r3, [r5, #4]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d11c      	bne.n	800a58e <oslib_test_009_002_execute+0x15e>
  test_set_step(5);
 800a554:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
 800a556:	4628      	mov	r0, r5
  test_set_step(5);
 800a558:	603b      	str	r3, [r7, #0]
    chFactoryReleaseBuffer(dbp);
 800a55a:	f7ff f861 	bl	8009620 <chFactoryReleaseBuffer.isra.0>
  test_set_step(6);
 800a55e:	2306      	movs	r3, #6
 800a560:	603b      	str	r3, [r7, #0]
    dbp = chFactoryFindBuffer("mybuf");
 800a562:	f7ff fc65 	bl	8009e30 <chFactoryFindBuffer.constprop.0>
 800a566:	2800      	cmp	r0, #0
 800a568:	d08d      	beq.n	800a486 <oslib_test_009_002_execute+0x56>
  chtest.failure_message = msg;
 800a56a:	4b0f      	ldr	r3, [pc, #60]	; (800a5a8 <oslib_test_009_002_execute+0x178>)
 800a56c:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a56e:	f240 1201 	movw	r2, #257	; 0x101
 800a572:	80ba      	strh	r2, [r7, #4]
    return __test_fail(msg);
 800a574:	e787      	b.n	800a486 <oslib_test_009_002_execute+0x56>
  chtest.failure_message = msg;
 800a576:	4b10      	ldr	r3, [pc, #64]	; (800a5b8 <oslib_test_009_002_execute+0x188>)
 800a578:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a57a:	f240 1201 	movw	r2, #257	; 0x101
 800a57e:	80ba      	strh	r2, [r7, #4]
  return true;
 800a580:	e781      	b.n	800a486 <oslib_test_009_002_execute+0x56>
  chtest.failure_message = msg;
 800a582:	4b0e      	ldr	r3, [pc, #56]	; (800a5bc <oslib_test_009_002_execute+0x18c>)
 800a584:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a586:	f240 1201 	movw	r2, #257	; 0x101
 800a58a:	80ba      	strh	r2, [r7, #4]
  return true;
 800a58c:	e77b      	b.n	800a486 <oslib_test_009_002_execute+0x56>
  chtest.failure_message = msg;
 800a58e:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <oslib_test_009_002_execute+0x190>)
 800a590:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a592:	f240 1201 	movw	r2, #257	; 0x101
 800a596:	80ba      	strh	r2, [r7, #4]
  return true;
 800a598:	e775      	b.n	800a486 <oslib_test_009_002_execute+0x56>
 800a59a:	bf00      	nop
 800a59c:	20000ab4 	.word	0x20000ab4
 800a5a0:	20001f00 	.word	0x20001f00
 800a5a4:	0800cd3c 	.word	0x0800cd3c
 800a5a8:	0800cd74 	.word	0x0800cd74
 800a5ac:	20001f24 	.word	0x20001f24
 800a5b0:	0800cd64 	.word	0x0800cd64
 800a5b4:	0800cd54 	.word	0x0800cd54
 800a5b8:	0800cd7c 	.word	0x0800cd7c
 800a5bc:	0800cd70 	.word	0x0800cd70
 800a5c0:	0800cd98 	.word	0x0800cd98
	...

0800a5d0 <chFactoryCreateObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	f04f 0830 	mov.w	r8, #48	; 0x30
 800a5d8:	b083      	sub	sp, #12
 800a5da:	f388 8811 	msr	BASEPRI, r8
 800a5de:	4834      	ldr	r0, [pc, #208]	; (800a6b0 <chFactoryCreateObjectsFIFO.constprop.0+0xe0>)
 800a5e0:	f7fb fba6 	bl	8005d30 <chMtxLockS>
 800a5e4:	2700      	movs	r7, #0
 800a5e6:	f387 8811 	msr	BASEPRI, r7
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 800a5ea:	4932      	ldr	r1, [pc, #200]	; (800a6b4 <chFactoryCreateObjectsFIFO.constprop.0+0xe4>)
 800a5ec:	4832      	ldr	r0, [pc, #200]	; (800a6b8 <chFactoryCreateObjectsFIFO.constprop.0+0xe8>)
 800a5ee:	2304      	movs	r3, #4
 800a5f0:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800a5f4:	f7fc f9b4 	bl	8006960 <dyn_create_object_heap.lto_priv.0>
  if (dofp != NULL) {
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d050      	beq.n	800a6a0 <chFactoryCreateObjectsFIFO.constprop.0+0xd0>
    uint8_t *objbuf = (uint8_t *)dofp + size1;
 800a5fe:	f100 0594 	add.w	r5, r0, #148	; 0x94
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800a602:	f100 0910 	add.w	r9, r0, #16
  mp->align = align;
 800a606:	2610      	movs	r6, #16
 800a608:	2304      	movs	r3, #4
 800a60a:	e9c0 9904 	strd	r9, r9, [r0, #16]
 800a60e:	e9c0 6308 	strd	r6, r3, [r0, #32]
 800a612:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a6bc <chFactoryCreateObjectsFIFO.constprop.0+0xec>
 800a616:	9501      	str	r5, [sp, #4]
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 800a618:	f100 0b54 	add.w	fp, r0, #84	; 0x54
  mp->next = NULL;
 800a61c:	61c7      	str	r7, [r0, #28]
  mp->provider = provider;
 800a61e:	6287      	str	r7, [r0, #40]	; 0x28
 800a620:	6187      	str	r7, [r0, #24]
 800a622:	e00f      	b.n	800a644 <chFactoryCreateObjectsFIFO.constprop.0+0x74>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800a624:	f8da 2000 	ldr.w	r2, [sl]
 800a628:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a62c:	6892      	ldr	r2, [r2, #8]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	429a      	cmp	r2, r3
 800a632:	d901      	bls.n	800a638 <chFactoryCreateObjectsFIFO.constprop.0+0x68>
    __sch_reschedule_ahead();
 800a634:	f7f7 ffe4 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 800a638:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800a63c:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 800a63e:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800a640:	441d      	add	r5, r3
  while (n != 0U) {
 800a642:	d01c      	beq.n	800a67e <chFactoryCreateObjectsFIFO.constprop.0+0xae>
 800a644:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 800a648:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
  if (++sp->cnt <= (cnt_t)0) {
 800a64c:	3301      	adds	r3, #1
 800a64e:	2b00      	cmp	r3, #0
 800a650:	602a      	str	r2, [r5, #0]
 800a652:	e9c4 3506 	strd	r3, r5, [r4, #24]
 800a656:	dce5      	bgt.n	800a624 <chFactoryCreateObjectsFIFO.constprop.0+0x54>
  ch_queue_t *p = qp->next;
 800a658:	6922      	ldr	r2, [r4, #16]
  qp->next       = p->next;
 800a65a:	6813      	ldr	r3, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a65c:	6911      	ldr	r1, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 800a65e:	6890      	ldr	r0, [r2, #8]
  qp->next       = p->next;
 800a660:	6123      	str	r3, [r4, #16]
  qp->next->prev = qp;
 800a662:	f8c3 9004 	str.w	r9, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 800a666:	6357      	str	r7, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 800a668:	7717      	strb	r7, [r2, #28]
    pqp = pqp->next;
 800a66a:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800a66c:	688b      	ldr	r3, [r1, #8]
 800a66e:	4283      	cmp	r3, r0
 800a670:	d2fb      	bcs.n	800a66a <chFactoryCreateObjectsFIFO.constprop.0+0x9a>
  p->prev       = pqp->prev;
 800a672:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 800a674:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 800a676:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 800a678:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 800a67a:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 800a67c:	e7d2      	b.n	800a624 <chFactoryCreateObjectsFIFO.constprop.0+0x54>
  mbp->top    = &buf[n];
 800a67e:	9b01      	ldr	r3, [sp, #4]
 800a680:	6323      	str	r3, [r4, #48]	; 0x30
  chThdQueueObjectInit(&mbp->qw);
 800a682:	f104 0244 	add.w	r2, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 800a686:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 800a68a:	e9c4 bb0d 	strd	fp, fp, [r4, #52]	; 0x34
  qp->prev = qp;
 800a68e:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 800a692:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->buffer = buf;
 800a696:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
  mbp->cnt    = (size_t)0;
 800a69a:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 800a69c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  FACTORY_UNLOCK();
 800a6a0:	4803      	ldr	r0, [pc, #12]	; (800a6b0 <chFactoryCreateObjectsFIFO.constprop.0+0xe0>)
 800a6a2:	f7fb fbdd 	bl	8005e60 <chMtxUnlock>
}
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	b003      	add	sp, #12
 800a6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20001f00 	.word	0x20001f00
 800a6b4:	20001f40 	.word	0x20001f40
 800a6b8:	0800cd4c 	.word	0x0800cd4c
 800a6bc:	200009b8 	.word	0x200009b8

0800a6c0 <oslib_test_009_005_execute>:
static void oslib_test_009_005_execute(void) {
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800a6c2:	4f3e      	ldr	r7, [pc, #248]	; (800a7bc <oslib_test_009_005_execute+0xfc>)
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	2330      	movs	r3, #48	; 0x30
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	4d3c      	ldr	r5, [pc, #240]	; (800a7c0 <oslib_test_009_005_execute+0x100>)
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f7fb fb2d 	bl	8005d30 <chMtxLockS>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a6dc:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800a6e0:	42ac      	cmp	r4, r5
 800a6e2:	d018      	beq.n	800a716 <oslib_test_009_005_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a6e4:	4e37      	ldr	r6, [pc, #220]	; (800a7c4 <oslib_test_009_005_execute+0x104>)
 800a6e6:	e002      	b.n	800a6ee <oslib_test_009_005_execute+0x2e>
    p = p->next;
 800a6e8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a6ea:	42ac      	cmp	r4, r5
 800a6ec:	d013      	beq.n	800a716 <oslib_test_009_005_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a6ee:	f104 0008 	add.w	r0, r4, #8
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	f7f5 ff28 	bl	8000548 <strcmp>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d1f5      	bne.n	800a6e8 <oslib_test_009_005_execute+0x28>
  if (dep != NULL) {
 800a6fc:	b15c      	cbz	r4, 800a716 <oslib_test_009_005_execute+0x56>
    dep->refs++;
 800a6fe:	6863      	ldr	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a700:	482f      	ldr	r0, [pc, #188]	; (800a7c0 <oslib_test_009_005_execute+0x100>)
    dep->refs++;
 800a702:	3301      	adds	r3, #1
 800a704:	6063      	str	r3, [r4, #4]
  FACTORY_UNLOCK();
 800a706:	f7fb fbab 	bl	8005e60 <chMtxUnlock>
  chtest.failure_message = msg;
 800a70a:	4b2f      	ldr	r3, [pc, #188]	; (800a7c8 <oslib_test_009_005_execute+0x108>)
 800a70c:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a70e:	f240 1201 	movw	r2, #257	; 0x101
 800a712:	80ba      	strh	r2, [r7, #4]
}
 800a714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a716:	482a      	ldr	r0, [pc, #168]	; (800a7c0 <oslib_test_009_005_execute+0x100>)
 800a718:	f7fb fba2 	bl	8005e60 <chMtxUnlock>
  test_set_step(2);
 800a71c:	2302      	movs	r3, #2
 800a71e:	603b      	str	r3, [r7, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800a720:	f7ff ff56 	bl	800a5d0 <chFactoryCreateObjectsFIFO.constprop.0>
  if (!condition) {
 800a724:	4604      	mov	r4, r0
 800a726:	b358      	cbz	r0, 800a780 <oslib_test_009_005_execute+0xc0>
  test_set_step(3);
 800a728:	2503      	movs	r5, #3
 800a72a:	603d      	str	r5, [r7, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800a72c:	f7ff ff50 	bl	800a5d0 <chFactoryCreateObjectsFIFO.constprop.0>
 800a730:	bb60      	cbnz	r0, 800a78c <oslib_test_009_005_execute+0xcc>
  test_set_step(4);
 800a732:	2304      	movs	r3, #4
 800a734:	603b      	str	r3, [r7, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 800a736:	f7ff fa5b 	bl	8009bf0 <chFactoryFindObjectsFIFO.constprop.0>
 800a73a:	b368      	cbz	r0, 800a798 <oslib_test_009_005_execute+0xd8>
 800a73c:	4284      	cmp	r4, r0
 800a73e:	d131      	bne.n	800a7a4 <oslib_test_009_005_execute+0xe4>
 800a740:	6863      	ldr	r3, [r4, #4]
 800a742:	2b02      	cmp	r3, #2
 800a744:	d12e      	bne.n	800a7a4 <oslib_test_009_005_execute+0xe4>
 800a746:	6065      	str	r5, [r4, #4]
    chFactoryReleaseObjectsFIFO(dofp2);
 800a748:	f7fe fed2 	bl	80094f0 <chFactoryReleaseObjectsFIFO.isra.0>
 800a74c:	6863      	ldr	r3, [r4, #4]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d12e      	bne.n	800a7b0 <oslib_test_009_005_execute+0xf0>
    chFactoryReleaseObjectsFIFO(dofp1);
 800a752:	4620      	mov	r0, r4
 800a754:	f7fe fecc 	bl	80094f0 <chFactoryReleaseObjectsFIFO.isra.0>
 800a758:	6863      	ldr	r3, [r4, #4]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d128      	bne.n	800a7b0 <oslib_test_009_005_execute+0xf0>
  test_set_step(5);
 800a75e:	2305      	movs	r3, #5
    chFactoryReleaseObjectsFIFO(dofp);
 800a760:	4620      	mov	r0, r4
  test_set_step(5);
 800a762:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 800a764:	f7fe fec4 	bl	80094f0 <chFactoryReleaseObjectsFIFO.isra.0>
  test_set_step(6);
 800a768:	2306      	movs	r3, #6
 800a76a:	603b      	str	r3, [r7, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800a76c:	f7ff fa40 	bl	8009bf0 <chFactoryFindObjectsFIFO.constprop.0>
 800a770:	2800      	cmp	r0, #0
 800a772:	d0cf      	beq.n	800a714 <oslib_test_009_005_execute+0x54>
  chtest.failure_message = msg;
 800a774:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <oslib_test_009_005_execute+0x108>)
 800a776:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a778:	f240 1201 	movw	r2, #257	; 0x101
 800a77c:	80ba      	strh	r2, [r7, #4]
}
 800a77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a780:	4b12      	ldr	r3, [pc, #72]	; (800a7cc <oslib_test_009_005_execute+0x10c>)
 800a782:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a784:	f240 1201 	movw	r2, #257	; 0x101
 800a788:	80ba      	strh	r2, [r7, #4]
 800a78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a78c:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <oslib_test_009_005_execute+0x110>)
 800a78e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a790:	f240 1201 	movw	r2, #257	; 0x101
 800a794:	80ba      	strh	r2, [r7, #4]
 800a796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a798:	4b0e      	ldr	r3, [pc, #56]	; (800a7d4 <oslib_test_009_005_execute+0x114>)
 800a79a:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a79c:	f240 1201 	movw	r2, #257	; 0x101
 800a7a0:	80ba      	strh	r2, [r7, #4]
 800a7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a7a4:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <oslib_test_009_005_execute+0x118>)
 800a7a6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a7a8:	f240 1201 	movw	r2, #257	; 0x101
 800a7ac:	80ba      	strh	r2, [r7, #4]
 800a7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <oslib_test_009_005_execute+0x11c>)
 800a7b2:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a7b4:	f240 1201 	movw	r2, #257	; 0x101
 800a7b8:	80ba      	strh	r2, [r7, #4]
 800a7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7bc:	20000ab4 	.word	0x20000ab4
 800a7c0:	20001f00 	.word	0x20001f00
 800a7c4:	0800cd4c 	.word	0x0800cd4c
 800a7c8:	0800cd74 	.word	0x0800cd74
 800a7cc:	0800cd54 	.word	0x0800cd54
 800a7d0:	0800cd64 	.word	0x0800cd64
 800a7d4:	0800cd70 	.word	0x0800cd70
 800a7d8:	0800cd7c 	.word	0x0800cd7c
 800a7dc:	0800cd98 	.word	0x0800cd98

0800a7e0 <chCacheGetObject.constprop.0>:
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 800a7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	2330      	movs	r3, #48	; 0x30
 800a7e8:	f383 8811 	msr	BASEPRI, r3
  hep  = &ocp->hashp[OC_HASH_FUNCTION(ocp, owner, key)];
 800a7ec:	4d52      	ldr	r5, [pc, #328]	; (800a938 <chCacheGetObject.constprop.0+0x158>)
 800a7ee:	e9d5 3100 	ldrd	r3, r1, [r5]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	4003      	ands	r3, r0
 800a7f6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  p = hep->next;
 800a7fa:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
  while (p != hep) {
 800a7fe:	42a2      	cmp	r2, r4
 800a800:	d103      	bne.n	800a80a <chCacheGetObject.constprop.0+0x2a>
 800a802:	e01b      	b.n	800a83c <chCacheGetObject.constprop.0+0x5c>
    p = p->next;
 800a804:	6824      	ldr	r4, [r4, #0]
  while (p != hep) {
 800a806:	42a2      	cmp	r2, r4
 800a808:	d018      	beq.n	800a83c <chCacheGetObject.constprop.0+0x5c>
    if ((objp->obj_owner == owner) && (objp->obj_key == key)) {
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1f9      	bne.n	800a804 <chCacheGetObject.constprop.0+0x24>
 800a810:	6963      	ldr	r3, [r4, #20]
 800a812:	429e      	cmp	r6, r3
 800a814:	d1f6      	bne.n	800a804 <chCacheGetObject.constprop.0+0x24>
 */
static inline cnt_t chSemGetCounterI(const semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 800a816:	6a23      	ldr	r3, [r4, #32]
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dd4e      	ble.n	800a8ba <chCacheGetObject.constprop.0+0xda>
      objp->obj_flags &= ~OC_FLAG_INLRU;
 800a81c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      LRU_REMOVE(objp);
 800a81e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 800a822:	f022 0201 	bic.w	r2, r2, #1
  sp->cnt--;
 800a826:	3b01      	subs	r3, #1
      LRU_REMOVE(objp);
 800a828:	6081      	str	r1, [r0, #8]
 800a82a:	60c8      	str	r0, [r1, #12]
 800a82c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 800a830:	2300      	movs	r3, #0
 800a832:	f383 8811 	msr	BASEPRI, r3
}
 800a836:	4620      	mov	r0, r4
 800a838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currtp->u.wtsemp = sp;
 800a83c:	4f3f      	ldr	r7, [pc, #252]	; (800a93c <chCacheGetObject.constprop.0+0x15c>)
  return __sch_get_currthread();
 800a83e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800a940 <chCacheGetObject.constprop.0+0x160>
    (void) ocp->writef(ocp, objp, true);
 800a842:	f1a7 0930 	sub.w	r9, r7, #48	; 0x30
 800a846:	e01b      	b.n	800a880 <chCacheGetObject.constprop.0+0xa0>
    objp = (oc_object_t *)(void *)ocp->list.prev;
 800a848:	6a2c      	ldr	r4, [r5, #32]
 800a84a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
    LRU_REMOVE(objp);
 800a84e:	68a1      	ldr	r1, [r4, #8]
 800a850:	68e0      	ldr	r0, [r4, #12]
 800a852:	3b01      	subs	r3, #1
 800a854:	6081      	str	r1, [r0, #8]
 800a856:	60c8      	str	r0, [r1, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 800a858:	f022 0101 	bic.w	r1, r2, #1
 800a85c:	e9c4 3108 	strd	r3, r1, [r4, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 800a860:	06d1      	lsls	r1, r2, #27
 800a862:	f04f 0c00 	mov.w	ip, #0
 800a866:	d545      	bpl.n	800a8f4 <chCacheGetObject.constprop.0+0x114>
 800a868:	f38c 8811 	msr	BASEPRI, ip
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800a86c:	2222      	movs	r2, #34	; 0x22
    (void) ocp->writef(ocp, objp, true);
 800a86e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800a870:	6262      	str	r2, [r4, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 800a872:	4621      	mov	r1, r4
 800a874:	2201      	movs	r2, #1
 800a876:	4648      	mov	r0, r9
 800a878:	4798      	blx	r3
 800a87a:	2330      	movs	r3, #48	; 0x30
 800a87c:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800a880:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a882:	3b01      	subs	r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	63ab      	str	r3, [r5, #56]	; 0x38
 800a888:	dade      	bge.n	800a848 <chCacheGetObject.constprop.0+0x68>
 800a88a:	f8d8 100c 	ldr.w	r1, [r8, #12]
  p->prev       = qp->prev;
 800a88e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  p->next       = qp;
 800a890:	600f      	str	r7, [r1, #0]
  p->prev       = qp->prev;
 800a892:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 800a894:	f8d8 0000 	ldr.w	r0, [r8]
    currtp->u.wtsemp = sp;
 800a898:	634f      	str	r7, [r1, #52]	; 0x34
  p->prev->next = p;
 800a89a:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 800a89c:	2305      	movs	r3, #5
  qp->prev      = p;
 800a89e:	6369      	str	r1, [r5, #52]	; 0x34
 800a8a0:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 800a8a2:	6803      	ldr	r3, [r0, #0]
 800a8a4:	f8c8 3000 	str.w	r3, [r8]
  pqp->next->prev = pqp;
 800a8a8:	f8c3 8004 	str.w	r8, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800a8b0:	f8c8 000c 	str.w	r0, [r8, #12]
  chSysSwitch(ntp, otp);
 800a8b4:	f7f5 fd04 	bl	80002c0 <__port_switch>
 800a8b8:	e7c6      	b.n	800a848 <chCacheGetObject.constprop.0+0x68>
 800a8ba:	4a21      	ldr	r2, [pc, #132]	; (800a940 <chCacheGetObject.constprop.0+0x160>)
  p->prev       = qp->prev;
 800a8bc:	69e5      	ldr	r5, [r4, #28]
 800a8be:	68d1      	ldr	r1, [r2, #12]
      (void) chSemWaitS(&objp->obj_sem);
 800a8c0:	f104 0018 	add.w	r0, r4, #24
  if (--sp->cnt < (cnt_t)0) {
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	6223      	str	r3, [r4, #32]
 800a8c8:	e9c1 0500 	strd	r0, r5, [r1]
    currtp->u.wtsemp = sp;
 800a8cc:	6348      	str	r0, [r1, #52]	; 0x34
  otp->state = newstate;
 800a8ce:	2305      	movs	r3, #5
  ch_priority_queue_t *p = pqp->next;
 800a8d0:	6810      	ldr	r0, [r2, #0]
  p->prev->next = p;
 800a8d2:	6029      	str	r1, [r5, #0]
  qp->prev      = p;
 800a8d4:	61e1      	str	r1, [r4, #28]
 800a8d6:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 800a8d8:	6803      	ldr	r3, [r0, #0]
 800a8da:	6013      	str	r3, [r2, #0]
  pqp->next->prev = pqp;
 800a8dc:	605a      	str	r2, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800a8e2:	60d0      	str	r0, [r2, #12]
  chSysSwitch(ntp, otp);
 800a8e4:	f7f5 fcec 	bl	80002c0 <__port_switch>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f383 8811 	msr	BASEPRI, r3
}
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 800a8f4:	0793      	lsls	r3, r2, #30
 800a8f6:	d504      	bpl.n	800a902 <chCacheGetObject.constprop.0+0x122>
        HASH_REMOVE(objp);
 800a8f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	6822      	ldr	r2, [r4, #0]
 800a900:	6053      	str	r3, [r2, #4]
    HASH_INSERT(ocp, objp, owner, key);
 800a902:	e9d5 3200 	ldrd	r3, r2, [r5]
 800a906:	3b01      	subs	r3, #1
 800a908:	4033      	ands	r3, r6
    objp->obj_owner = owner;
 800a90a:	2100      	movs	r1, #0
 800a90c:	6121      	str	r1, [r4, #16]
    HASH_INSERT(ocp, objp, owner, key);
 800a90e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a912:	6021      	str	r1, [r4, #0]
 800a914:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    objp->obj_key   = key;
 800a918:	6166      	str	r6, [r4, #20]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 800a91a:	200a      	movs	r0, #10
 800a91c:	6260      	str	r0, [r4, #36]	; 0x24
    HASH_INSERT(ocp, objp, owner, key);
 800a91e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 800a922:	6060      	str	r0, [r4, #4]
 800a924:	604c      	str	r4, [r1, #4]
 800a926:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
 800a92a:	2300      	movs	r3, #0
 800a92c:	f383 8811 	msr	BASEPRI, r3
}
 800a930:	4620      	mov	r0, r4
 800a932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a936:	bf00      	nop
 800a938:	20000970 	.word	0x20000970
 800a93c:	200009a0 	.word	0x200009a0
 800a940:	200009b8 	.word	0x200009b8
	...

0800a950 <chHeapIntegrityCheck.constprop.0>:
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @api
 */
bool chHeapIntegrityCheck(memory_heap_t *heapp) {
 800a950:	b510      	push	{r4, lr}
 800a952:	2330      	movs	r3, #48	; 0x30
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	4815      	ldr	r0, [pc, #84]	; (800a9b0 <chHeapIntegrityCheck.constprop.0+0x60>)
 800a95a:	f7fb f9e9 	bl	8005d30 <chMtxLockS>
 800a95e:	2300      	movs	r3, #0
 800a960:	f383 8811 	msr	BASEPRI, r3
 * @xclass
 */
static inline bool chMemIsSpaceWithinX(const memory_area_t *map,
                                       const void *p,
                                       size_t size) {
  const uint8_t *mem_base = (const uint8_t *)map->base;
 800a964:	4c13      	ldr	r4, [pc, #76]	; (800a9b4 <chHeapIntegrityCheck.constprop.0+0x64>)
 800a966:	e9d4 1201 	ldrd	r1, r2, [r4, #4]

  /* Taking heap mutex.*/
  H_LOCK(heapp);

  prevhp = NULL;
  hp = &heapp->header;
 800a96a:	340c      	adds	r4, #12
  const uint8_t *mem_end  = mem_base + map->size - (size_t)1;
 800a96c:	3a01      	subs	r2, #1
  while ((hp = H_FREE_NEXT(hp)) != NULL) {
 800a96e:	6824      	ldr	r4, [r4, #0]
 800a970:	440a      	add	r2, r1
 800a972:	b18c      	cbz	r4, 800a998 <chHeapIntegrityCheck.constprop.0+0x48>

    /* Order violation or loop.*/
    if (hp <= prevhp) {
 800a974:	42a3      	cmp	r3, r4
 800a976:	d214      	bcs.n	800a9a2 <chHeapIntegrityCheck.constprop.0+0x52>
      result = true;
      break;
    }

    /* Checking pointer alignment.*/
    if (!MEM_IS_ALIGNED(hp, CH_HEAP_ALIGNMENT)) {
 800a978:	0763      	lsls	r3, r4, #29
 800a97a:	d112      	bne.n	800a9a2 <chHeapIntegrityCheck.constprop.0+0x52>
    }

    /* Validating the found free block.*/
    if (!chMemIsSpaceWithinX(&heapp->area,
                             (void *)hp,
                             H_FREE_FULLSIZE(hp))) {
 800a97c:	6863      	ldr	r3, [r4, #4]
  const uint8_t *base     = (const uint8_t *)p;
  const uint8_t *end      = base + size - (size_t)1;
 800a97e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a982:	3307      	adds	r3, #7

  chDbgAssert((mem_base <= mem_end) && (base <= end), "invalid memory area");

  return (bool)((base <= end) && (base >= mem_base) && (end <= mem_end));
 800a984:	429c      	cmp	r4, r3
 800a986:	d80c      	bhi.n	800a9a2 <chHeapIntegrityCheck.constprop.0+0x52>
 800a988:	428c      	cmp	r4, r1
 800a98a:	d30a      	bcc.n	800a9a2 <chHeapIntegrityCheck.constprop.0+0x52>
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d308      	bcc.n	800a9a2 <chHeapIntegrityCheck.constprop.0+0x52>
 800a990:	4623      	mov	r3, r4
  while ((hp = H_FREE_NEXT(hp)) != NULL) {
 800a992:	6824      	ldr	r4, [r4, #0]
 800a994:	2c00      	cmp	r4, #0
 800a996:	d1ed      	bne.n	800a974 <chHeapIntegrityCheck.constprop.0+0x24>

    prevhp = hp;
  }

  /* Releasing the heap mutex.*/
  H_UNLOCK(heapp);
 800a998:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <chHeapIntegrityCheck.constprop.0+0x60>)
 800a99a:	f7fb fa61 	bl	8005e60 <chMtxUnlock>

  return result;
}
 800a99e:	4620      	mov	r0, r4
 800a9a0:	bd10      	pop	{r4, pc}
  H_UNLOCK(heapp);
 800a9a2:	4803      	ldr	r0, [pc, #12]	; (800a9b0 <chHeapIntegrityCheck.constprop.0+0x60>)
      result = true;
 800a9a4:	2401      	movs	r4, #1
  H_UNLOCK(heapp);
 800a9a6:	f7fb fa5b 	bl	8005e60 <chMtxUnlock>
}
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	bd10      	pop	{r4, pc}
 800a9ae:	bf00      	nop
 800a9b0:	200016b4 	.word	0x200016b4
 800a9b4:	200016a0 	.word	0x200016a0
	...

0800a9c0 <chMBPostAheadI.constprop.0>:
  if (mbp->reset) {
 800a9c0:	4b1a      	ldr	r3, [pc, #104]	; (800aa2c <chMBPostAheadI.constprop.0+0x6c>)
 800a9c2:	7d1a      	ldrb	r2, [r3, #20]
 800a9c4:	2a00      	cmp	r2, #0
 800a9c6:	d12e      	bne.n	800aa26 <chMBPostAheadI.constprop.0+0x66>
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800a9c8:	b430      	push	{r4, r5}
  return (size_t)(mbp->top - mbp->buffer);
 800a9ca:	e9d3 2500 	ldrd	r2, r5, [r3]
  return mbp->cnt;
 800a9ce:	691c      	ldr	r4, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a9d0:	1aa9      	subs	r1, r5, r2
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a9d2:	ebb4 0fa1 	cmp.w	r4, r1, asr #2
 800a9d6:	d023      	beq.n	800aa20 <chMBPostAheadI.constprop.0+0x60>
    if (--mbp->rdptr < mbp->buffer) {
 800a9d8:	68d9      	ldr	r1, [r3, #12]
 800a9da:	3904      	subs	r1, #4
 800a9dc:	428a      	cmp	r2, r1
      mbp->rdptr = mbp->top - 1;
 800a9de:	bf88      	it	hi
 800a9e0:	1f29      	subhi	r1, r5, #4
  return (bool)(qp->next != qp);
 800a9e2:	6a1a      	ldr	r2, [r3, #32]
 800a9e4:	60d9      	str	r1, [r3, #12]
    *mbp->rdptr = msg;
 800a9e6:	6008      	str	r0, [r1, #0]
  if (ch_queue_notempty(&tqp->queue)) {
 800a9e8:	4911      	ldr	r1, [pc, #68]	; (800aa30 <chMBPostAheadI.constprop.0+0x70>)
    mbp->cnt++;
 800a9ea:	3401      	adds	r4, #1
 800a9ec:	428a      	cmp	r2, r1
 800a9ee:	611c      	str	r4, [r3, #16]
 800a9f0:	d013      	beq.n	800aa1a <chMBPostAheadI.constprop.0+0x5a>
  qp->next       = p->next;
 800a9f2:	6814      	ldr	r4, [r2, #0]
 800a9f4:	621c      	str	r4, [r3, #32]
  tp->u.rdymsg = msg;
 800a9f6:	2000      	movs	r0, #0
  qp->next->prev = qp;
 800a9f8:	6061      	str	r1, [r4, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800a9fa:	6913      	ldr	r3, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 800a9fc:	6894      	ldr	r4, [r2, #8]
 800a9fe:	6350      	str	r0, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 800aa00:	7710      	strb	r0, [r2, #28]
    pqp = pqp->next;
 800aa02:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800aa04:	6899      	ldr	r1, [r3, #8]
 800aa06:	42a1      	cmp	r1, r4
 800aa08:	d2fb      	bcs.n	800aa02 <chMBPostAheadI.constprop.0+0x42>
  p->prev       = pqp->prev;
 800aa0a:	6859      	ldr	r1, [r3, #4]
    return MSG_OK;
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 800aa12:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 800aa14:	605a      	str	r2, [r3, #4]
}
 800aa16:	bc30      	pop	{r4, r5}
 800aa18:	4770      	bx	lr
    return MSG_OK;
 800aa1a:	2000      	movs	r0, #0
}
 800aa1c:	bc30      	pop	{r4, r5}
 800aa1e:	4770      	bx	lr
  return MSG_TIMEOUT;
 800aa20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa24:	e7f7      	b.n	800aa16 <chMBPostAheadI.constprop.0+0x56>
    return MSG_RESET;
 800aa26:	f06f 0001 	mvn.w	r0, #1
}
 800aa2a:	4770      	bx	lr
 800aa2c:	2000084c 	.word	0x2000084c
 800aa30:	2000086c 	.word	0x2000086c
	...

0800aa40 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800aa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa44:	4681      	mov	r9, r0
 800aa46:	4688      	mov	r8, r1
 800aa48:	2330      	movs	r3, #48	; 0x30
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	4c29      	ldr	r4, [pc, #164]	; (800aaf4 <chMBPostAheadTimeout.constprop.0+0xb4>)
  return __sch_get_currthread();
 800aa50:	4e29      	ldr	r6, [pc, #164]	; (800aaf8 <chMBPostAheadTimeout.constprop.0+0xb8>)
  p->next       = qp;
 800aa52:	f104 0518 	add.w	r5, r4, #24
 800aa56:	e010      	b.n	800aa7a <chMBPostAheadTimeout.constprop.0+0x3a>
 800aa58:	e9d4 2700 	ldrd	r2, r7, [r4]
  return mbp->cnt;
 800aa5c:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800aa5e:	eba7 0e02 	sub.w	lr, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800aa62:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 800aa66:	d114      	bne.n	800aa92 <chMBPostAheadTimeout.constprop.0+0x52>
 800aa68:	68f3      	ldr	r3, [r6, #12]
  p->prev       = qp->prev;
 800aa6a:	69e2      	ldr	r2, [r4, #28]
 800aa6c:	e9c3 5200 	strd	r5, r2, [r3]
  p->prev->next = p;
 800aa70:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 800aa72:	61e3      	str	r3, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800aa74:	f7f8 fab4 	bl	8002fe0 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 800aa78:	b930      	cbnz	r0, 800aa88 <chMBPostAheadTimeout.constprop.0+0x48>
    if (mbp->reset) {
 800aa7a:	7d23      	ldrb	r3, [r4, #20]
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	2004      	movs	r0, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0e9      	beq.n	800aa58 <chMBPostAheadTimeout.constprop.0+0x18>
      return MSG_RESET;
 800aa84:	f06f 0001 	mvn.w	r0, #1
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f383 8811 	msr	BASEPRI, r3
}
 800aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (--mbp->rdptr < mbp->buffer) {
 800aa92:	68e1      	ldr	r1, [r4, #12]
 800aa94:	3904      	subs	r1, #4
 800aa96:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 800aa98:	bf88      	it	hi
 800aa9a:	1f39      	subhi	r1, r7, #4
  return (bool)(qp->next != qp);
 800aa9c:	6a22      	ldr	r2, [r4, #32]
 800aa9e:	60e1      	str	r1, [r4, #12]
      *mbp->rdptr = msg;
 800aaa0:	f8c1 9000 	str.w	r9, [r1]
  if (ch_queue_notempty(&tqp->queue)) {
 800aaa4:	4915      	ldr	r1, [pc, #84]	; (800aafc <chMBPostAheadTimeout.constprop.0+0xbc>)
      mbp->cnt++;
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	428a      	cmp	r2, r1
 800aaaa:	6123      	str	r3, [r4, #16]
 800aaac:	d010      	beq.n	800aad0 <chMBPostAheadTimeout.constprop.0+0x90>
  qp->next       = p->next;
 800aaae:	6813      	ldr	r3, [r2, #0]
 800aab0:	6223      	str	r3, [r4, #32]
  tp->u.rdymsg = msg;
 800aab2:	2000      	movs	r0, #0
  qp->next->prev = qp;
 800aab4:	6059      	str	r1, [r3, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800aab6:	6894      	ldr	r4, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800aab8:	6913      	ldr	r3, [r2, #16]
 800aaba:	6350      	str	r0, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 800aabc:	7710      	strb	r0, [r2, #28]
    pqp = pqp->next;
 800aabe:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800aac0:	6899      	ldr	r1, [r3, #8]
 800aac2:	42a1      	cmp	r1, r4
 800aac4:	d2fb      	bcs.n	800aabe <chMBPostAheadTimeout.constprop.0+0x7e>
  p->prev       = pqp->prev;
 800aac6:	6859      	ldr	r1, [r3, #4]
 800aac8:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 800aacc:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 800aace:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800aad0:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <chMBPostAheadTimeout.constprop.0+0xb8>)
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	6892      	ldr	r2, [r2, #8]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d907      	bls.n	800aaee <chMBPostAheadTimeout.constprop.0+0xae>
    __sch_reschedule_ahead();
 800aade:	f7f7 fd8f 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 800aae2:	2000      	movs	r0, #0
 800aae4:	2300      	movs	r3, #0
 800aae6:	f383 8811 	msr	BASEPRI, r3
}
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return MSG_OK;
 800aaee:	2000      	movs	r0, #0
 800aaf0:	e7ca      	b.n	800aa88 <chMBPostAheadTimeout.constprop.0+0x48>
 800aaf2:	bf00      	nop
 800aaf4:	2000084c 	.word	0x2000084c
 800aaf8:	200009b8 	.word	0x200009b8
 800aafc:	2000086c 	.word	0x2000086c

0800ab00 <chMBReset.constprop.0>:
void chMBReset(mailbox_t *mbp) {
 800ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab02:	2330      	movs	r3, #48	; 0x30
 800ab04:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 800ab08:	4c25      	ldr	r4, [pc, #148]	; (800aba0 <chMBReset.constprop.0+0xa0>)
  return (bool)(qp->next != qp);
 800ab0a:	4625      	mov	r5, r4
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	f855 1f18 	ldr.w	r1, [r5, #24]!
  mbp->cnt   = (size_t)0;
 800ab12:	2700      	movs	r7, #0
  mbp->reset = true;
 800ab14:	2201      	movs	r2, #1
  while (ch_queue_notempty(&tqp->queue)) {
 800ab16:	42a9      	cmp	r1, r5
  mbp->rdptr = mbp->buffer;
 800ab18:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 800ab1c:	6127      	str	r7, [r4, #16]
  mbp->reset = true;
 800ab1e:	7522      	strb	r2, [r4, #20]
 800ab20:	d015      	beq.n	800ab4e <chMBReset.constprop.0+0x4e>
 800ab22:	f06f 0c01 	mvn.w	ip, #1
 800ab26:	460b      	mov	r3, r1
  qp->next       = p->next;
 800ab28:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800ab2a:	691a      	ldr	r2, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 800ab2c:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 800ab2e:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 800ab30:	604d      	str	r5, [r1, #4]
 800ab32:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 800ab36:	771f      	strb	r7, [r3, #28]
    pqp = pqp->next;
 800ab38:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ab3a:	6890      	ldr	r0, [r2, #8]
 800ab3c:	42b0      	cmp	r0, r6
 800ab3e:	d2fb      	bcs.n	800ab38 <chMBReset.constprop.0+0x38>
  p->prev       = pqp->prev;
 800ab40:	6850      	ldr	r0, [r2, #4]
 800ab42:	42a9      	cmp	r1, r5
 800ab44:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800ab48:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800ab4a:	6053      	str	r3, [r2, #4]
 800ab4c:	d1eb      	bne.n	800ab26 <chMBReset.constprop.0+0x26>
  return (bool)(qp->next != qp);
 800ab4e:	6a21      	ldr	r1, [r4, #32]
 800ab50:	4d14      	ldr	r5, [pc, #80]	; (800aba4 <chMBReset.constprop.0+0xa4>)
 800ab52:	42a9      	cmp	r1, r5
 800ab54:	d016      	beq.n	800ab84 <chMBReset.constprop.0+0x84>
 800ab56:	f06f 0c01 	mvn.w	ip, #1
 800ab5a:	2700      	movs	r7, #0
 800ab5c:	460b      	mov	r3, r1
  qp->next       = p->next;
 800ab5e:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800ab60:	691a      	ldr	r2, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 800ab62:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 800ab64:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 800ab66:	604d      	str	r5, [r1, #4]
 800ab68:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 800ab6c:	771f      	strb	r7, [r3, #28]
    pqp = pqp->next;
 800ab6e:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ab70:	6890      	ldr	r0, [r2, #8]
 800ab72:	42b0      	cmp	r0, r6
 800ab74:	d2fb      	bcs.n	800ab6e <chMBReset.constprop.0+0x6e>
  p->prev       = pqp->prev;
 800ab76:	6850      	ldr	r0, [r2, #4]
 800ab78:	42a9      	cmp	r1, r5
 800ab7a:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 800ab7e:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 800ab80:	6053      	str	r3, [r2, #4]
 800ab82:	d1eb      	bne.n	800ab5c <chMBReset.constprop.0+0x5c>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800ab84:	4b08      	ldr	r3, [pc, #32]	; (800aba8 <chMBReset.constprop.0+0xa8>)
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	6892      	ldr	r2, [r2, #8]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d901      	bls.n	800ab96 <chMBReset.constprop.0+0x96>
    __sch_reschedule_ahead();
 800ab92:	f7f7 fd35 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 800ab96:	2300      	movs	r3, #0
 800ab98:	f383 8811 	msr	BASEPRI, r3
}
 800ab9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	2000084c 	.word	0x2000084c
 800aba4:	2000086c 	.word	0x2000086c
 800aba8:	200009b8 	.word	0x200009b8
 800abac:	00000000 	.word	0x00000000

0800abb0 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800abb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abb4:	2330      	movs	r3, #48	; 0x30
 800abb6:	b089      	sub	sp, #36	; 0x24
 800abb8:	4607      	mov	r7, r0
 800abba:	460e      	mov	r6, r1
 800abbc:	4615      	mov	r5, r2
 800abbe:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800abc2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800ac30 <chThdCreateFromMemoryPool.constprop.0+0x80>
 800abc6:	f8d8 4000 	ldr.w	r4, [r8]
  if (objp != NULL) {
 800abca:	b334      	cbz	r4, 800ac1a <chThdCreateFromMemoryPool.constprop.0+0x6a>
    mp->next = mp->next->next;
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	f8c8 3000 	str.w	r3, [r8]
 800abd2:	f04f 0900 	mov.w	r9, #0
 800abd6:	f389 8811 	msr	BASEPRI, r9
  void *wbase, *wend;

  chDbgCheck(mp != NULL);

  wbase = chPoolAlloc(mp);
  if (wbase == NULL) {
 800abda:	b1d4      	cbz	r4, 800ac12 <chThdCreateFromMemoryPool.constprop.0+0x62>
    return NULL;
  }
  wend = (void *)((uint8_t *)wbase + mp->object_size);
 800abdc:	f8d8 0004 	ldr.w	r0, [r8, #4]

  thread_descriptor_t td = __THD_DECL_DATA(name, wbase, wend, prio,
 800abe0:	4b14      	ldr	r3, [pc, #80]	; (800ac34 <chThdCreateFromMemoryPool.constprop.0+0x84>)
 800abe2:	9604      	str	r6, [sp, #16]
  wend = (void *)((uint8_t *)wbase + mp->object_size);
 800abe4:	4420      	add	r0, r4
  thread_descriptor_t td = __THD_DECL_DATA(name, wbase, wend, prio,
 800abe6:	e9cd 3505 	strd	r3, r5, [sp, #20]
 800abea:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800abee:	f8cd 901c 	str.w	r9, [sp, #28]
 800abf2:	2330      	movs	r3, #48	; 0x30
 800abf4:	9003      	str	r0, [sp, #12]
 800abf6:	f383 8811 	msr	BASEPRI, r3
#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wbase, (uint8_t *)wend);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800abfa:	a801      	add	r0, sp, #4
 800abfc:	f7f9 fad8 	bl	80041b0 <chThdCreateSuspendedI>
  tp->dispose = dispose;
 800ac00:	4b0d      	ldr	r3, [pc, #52]	; (800ac38 <chThdCreateFromMemoryPool.constprop.0+0x88>)
  chThdSetCallbackX(tp, thd_poolfree, (void *)mp);
  chSchWakeupS(tp, MSG_OK);
 800ac02:	4649      	mov	r1, r9
  tp->object  = object;
 800ac04:	e9c0 380b 	strd	r3, r8, [r0, #44]	; 0x2c
  tp = chThdCreateSuspendedI(&td);
 800ac08:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800ac0a:	f7f9 f9a1 	bl	8003f50 <chSchWakeupS>
 800ac0e:	f389 8811 	msr	BASEPRI, r9
  chSysUnlock();

  return tp;
}
 800ac12:	4620      	mov	r0, r4
 800ac14:	b009      	add	sp, #36	; 0x24
 800ac16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (mp->provider != NULL) {
 800ac1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac1e:	b123      	cbz	r3, 800ac2a <chThdCreateFromMemoryPool.constprop.0+0x7a>
    objp = mp->provider(mp->object_size, mp->align);
 800ac20:	e9d8 0101 	ldrd	r0, r1, [r8, #4]
 800ac24:	4798      	blx	r3
 800ac26:	4604      	mov	r4, r0
 800ac28:	e7d3      	b.n	800abd2 <chThdCreateFromMemoryPool.constprop.0+0x22>
 800ac2a:	f384 8811 	msr	BASEPRI, r4
 800ac2e:	e7f0      	b.n	800ac12 <chThdCreateFromMemoryPool.constprop.0+0x62>
 800ac30:	20000bdc 	.word	0x20000bdc
 800ac34:	08000f91 	.word	0x08000f91
 800ac38:	080008d1 	.word	0x080008d1
 800ac3c:	00000000 	.word	0x00000000

0800ac40 <chThdCreateFromHeap.constprop.0>:
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 800ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac44:	4605      	mov	r5, r0
 800ac46:	b088      	sub	sp, #32
  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800ac48:	4813      	ldr	r0, [pc, #76]	; (800ac98 <chThdCreateFromHeap.constprop.0+0x58>)
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 800ac4a:	4616      	mov	r6, r2
 800ac4c:	460f      	mov	r7, r1
  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800ac4e:	2220      	movs	r2, #32
 800ac50:	4629      	mov	r1, r5
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 800ac52:	4698      	mov	r8, r3
  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800ac54:	f7fb fd9c 	bl	8006790 <chHeapAllocAligned>
  if (wbase == NULL) {
 800ac58:	4604      	mov	r4, r0
 800ac5a:	b1c0      	cbz	r0, 800ac8e <chThdCreateFromHeap.constprop.0+0x4e>
  wend = (void *)((uint8_t *)wbase + size);
 800ac5c:	4405      	add	r5, r0
  thread_descriptor_t td = __THD_DECL_DATA(name, wbase, wend, prio,
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <chThdCreateFromHeap.constprop.0+0x5c>)
 800ac60:	9503      	str	r5, [sp, #12]
 800ac62:	2500      	movs	r5, #0
 800ac64:	9305      	str	r3, [sp, #20]
 800ac66:	e9cd 7001 	strd	r7, r0, [sp, #4]
 800ac6a:	9604      	str	r6, [sp, #16]
 800ac6c:	e9cd 8506 	strd	r8, r5, [sp, #24]
 800ac70:	2330      	movs	r3, #48	; 0x30
 800ac72:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 800ac76:	a801      	add	r0, sp, #4
 800ac78:	f7f9 fa9a 	bl	80041b0 <chThdCreateSuspendedI>
  tp->dispose = dispose;
 800ac7c:	4b08      	ldr	r3, [pc, #32]	; (800aca0 <chThdCreateFromHeap.constprop.0+0x60>)
  chSchWakeupS(tp, MSG_OK);
 800ac7e:	4629      	mov	r1, r5
  tp->object  = object;
 800ac80:	e9c0 350b 	strd	r3, r5, [r0, #44]	; 0x2c
  tp = chThdCreateSuspendedI(&td);
 800ac84:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800ac86:	f7f9 f963 	bl	8003f50 <chSchWakeupS>
 800ac8a:	f385 8811 	msr	BASEPRI, r5
}
 800ac8e:	4620      	mov	r0, r4
 800ac90:	b008      	add	sp, #32
 800ac92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac96:	bf00      	nop
 800ac98:	20000b44 	.word	0x20000b44
 800ac9c:	08000f91 	.word	0x08000f91
 800aca0:	08006951 	.word	0x08006951
	...

0800acb0 <chEvtWaitOne.constprop.0>:
  return __sch_get_currthread();
 800acb0:	4b10      	ldr	r3, [pc, #64]	; (800acf4 <chEvtWaitOne.constprop.0+0x44>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 800acb2:	b510      	push	{r4, lr}
 800acb4:	2230      	movs	r2, #48	; 0x30
 800acb6:	68dc      	ldr	r4, [r3, #12]
 800acb8:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 800acbc:	6c60      	ldr	r0, [r4, #68]	; 0x44
  if (m == (eventmask_t)0) {
 800acbe:	b140      	cbz	r0, 800acd2 <chEvtWaitOne.constprop.0+0x22>
  m ^= m & (m - (eventmask_t)1);
 800acc0:	4243      	negs	r3, r0
  currtp->epending &= ~m;
 800acc2:	ea20 0203 	bic.w	r2, r0, r3
 800acc6:	6462      	str	r2, [r4, #68]	; 0x44
  m ^= m & (m - (eventmask_t)1);
 800acc8:	4018      	ands	r0, r3
 800acca:	2300      	movs	r3, #0
 800accc:	f383 8811 	msr	BASEPRI, r3
}
 800acd0:	bd10      	pop	{r4, pc}
  thread_t *otp = __instance_get_currthread(oip);
 800acd2:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 800acd4:	6818      	ldr	r0, [r3, #0]
    currtp->u.ewmask = events;
 800acd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acda:	6362      	str	r2, [r4, #52]	; 0x34
  otp->state = newstate;
 800acdc:	220a      	movs	r2, #10
 800acde:	770a      	strb	r2, [r1, #28]
  pqp->next       = p->next;
 800ace0:	6802      	ldr	r2, [r0, #0]
 800ace2:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 800ace4:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 800ace6:	2201      	movs	r2, #1
 800ace8:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800acea:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800acec:	f7f5 fae8 	bl	80002c0 <__port_switch>
    m = currtp->epending & events;
 800acf0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800acf2:	e7e5      	b.n	800acc0 <chEvtWaitOne.constprop.0+0x10>
 800acf4:	200009b8 	.word	0x200009b8
	...

0800ad00 <chSemResetWithMessage.constprop.0>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	2330      	movs	r3, #48	; 0x30
 800ad04:	f383 8811 	msr	BASEPRI, r3
  while (ch_queue_notempty(&sp->queue)) {
 800ad08:	6803      	ldr	r3, [r0, #0]
  sp->cnt = n;
 800ad0a:	6081      	str	r1, [r0, #8]
  while (ch_queue_notempty(&sp->queue)) {
 800ad0c:	4298      	cmp	r0, r3
 800ad0e:	d018      	beq.n	800ad42 <chSemResetWithMessage.constprop.0+0x42>
  tp->state = CH_STATE_READY;
 800ad10:	f04f 0c00 	mov.w	ip, #0
    chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 800ad14:	f06f 0501 	mvn.w	r5, #1
  ch_queue_t *p = qp->prev;
 800ad18:	6843      	ldr	r3, [r0, #4]
  qp->prev       = p->prev;
 800ad1a:	6859      	ldr	r1, [r3, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800ad1c:	691a      	ldr	r2, [r3, #16]
  } while (unlikely(pqp->prio >= p->prio));
 800ad1e:	689c      	ldr	r4, [r3, #8]
  qp->prev       = p->prev;
 800ad20:	6041      	str	r1, [r0, #4]
  qp->prev->next = qp;
 800ad22:	6008      	str	r0, [r1, #0]
  tp->state = CH_STATE_READY;
 800ad24:	f883 c01c 	strb.w	ip, [r3, #28]
    pqp = pqp->next;
 800ad28:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800ad2a:	6891      	ldr	r1, [r2, #8]
 800ad2c:	42a1      	cmp	r1, r4
 800ad2e:	d2fb      	bcs.n	800ad28 <chSemResetWithMessage.constprop.0+0x28>
  while (ch_queue_notempty(&sp->queue)) {
 800ad30:	6804      	ldr	r4, [r0, #0]
  p->prev       = pqp->prev;
 800ad32:	6851      	ldr	r1, [r2, #4]
 800ad34:	42a0      	cmp	r0, r4
 800ad36:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 800ad3a:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 800ad3c:	6053      	str	r3, [r2, #4]
    chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 800ad3e:	635d      	str	r5, [r3, #52]	; 0x34
  while (ch_queue_notempty(&sp->queue)) {
 800ad40:	d1ea      	bne.n	800ad18 <chSemResetWithMessage.constprop.0+0x18>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800ad42:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <chSemResetWithMessage.constprop.0+0x5c>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	6892      	ldr	r2, [r2, #8]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d901      	bls.n	800ad54 <chSemResetWithMessage.constprop.0+0x54>
    __sch_reschedule_ahead();
 800ad50:	f7f7 fc56 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 800ad54:	2300      	movs	r3, #0
 800ad56:	f383 8811 	msr	BASEPRI, r3
}
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	200009b8 	.word	0x200009b8

0800ad60 <vt_insert_first.constprop.0>:
  vtlp->lasttime = now;
 800ad60:	4b18      	ldr	r3, [pc, #96]	; (800adc4 <vt_insert_first.constprop.0+0x64>)
static void vt_insert_first(virtual_timers_list_t *vtlp,
 800ad62:	b470      	push	{r4, r5, r6}
  dlp->prev       = dlhp;
 800ad64:	f103 0410 	add.w	r4, r3, #16
  vtlp->lasttime = now;
 800ad68:	61d9      	str	r1, [r3, #28]
 800ad6a:	e9c0 4201 	strd	r4, r2, [r0, #4]
  dlp->next       = dlp->prev->next;
 800ad6e:	691c      	ldr	r4, [r3, #16]
 800ad70:	6004      	str	r4, [r0, #0]
  dlp->next->prev = dlp;
 800ad72:	6060      	str	r0, [r4, #4]
  currdelta = vtlp->lastdelta;
 800ad74:	6a1c      	ldr	r4, [r3, #32]
  dlhp->next      = dlp;
 800ad76:	6118      	str	r0, [r3, #16]
 800ad78:	42a2      	cmp	r2, r4
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800ad7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ad7e:	bf38      	it	cc
 800ad80:	4622      	movcc	r2, r4
  return systime + (systime_t)interval;
 800ad82:	188d      	adds	r5, r1, r2
 800ad84:	6345      	str	r5, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800ad86:	2500      	movs	r5, #0
 800ad88:	6105      	str	r5, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800ad8a:	2502      	movs	r5, #2
 800ad8c:	60c5      	str	r5, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 800ad8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800ad90:	eba5 0c01 	sub.w	ip, r5, r1
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 800ad94:	4594      	cmp	ip, r2
  currdelta = vtlp->lastdelta;
 800ad96:	bf28      	it	cs
 800ad98:	4626      	movcs	r6, r4
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 800ad9a:	d203      	bcs.n	800ada4 <vt_insert_first.constprop.0+0x44>
}
 800ad9c:	bc70      	pop	{r4, r5, r6}
 800ad9e:	4770      	bx	lr
 800ada0:	4629      	mov	r1, r5
 800ada2:	4615      	mov	r5, r2
    currdelta += (sysinterval_t)1;
 800ada4:	3601      	adds	r6, #1
  return systime + (systime_t)interval;
 800ada6:	4431      	add	r1, r6
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800ada8:	6341      	str	r1, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800adaa:	6a42      	ldr	r2, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800adac:	1b51      	subs	r1, r2, r5
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 800adae:	42b1      	cmp	r1, r6
 800adb0:	d2f6      	bcs.n	800ada0 <vt_insert_first.constprop.0+0x40>
  if (currdelta > vtlp->lastdelta) {
 800adb2:	42b4      	cmp	r4, r6
 800adb4:	d2f2      	bcs.n	800ad9c <vt_insert_first.constprop.0+0x3c>
  currcore->rfcu.mask |= mask;
 800adb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    vtlp->lastdelta = currdelta;
 800adb8:	621e      	str	r6, [r3, #32]
 800adba:	f042 0201 	orr.w	r2, r2, #1
}
 800adbe:	bc70      	pop	{r4, r5, r6}
 800adc0:	63da      	str	r2, [r3, #60]	; 0x3c
 800adc2:	4770      	bx	lr
 800adc4:	200009b8 	.word	0x200009b8
	...

0800add0 <vt_enqueue.constprop.0>:
static void vt_enqueue(virtual_timers_list_t *vtlp,
 800add0:	b5f0      	push	{r4, r5, r6, r7, lr}
  return (bool)(dlhp == dlhp->next);
 800add2:	4e28      	ldr	r6, [pc, #160]	; (800ae74 <vt_enqueue.constprop.0+0xa4>)
 800add4:	4633      	mov	r3, r6
 800add6:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800adda:	f853 2f10 	ldr.w	r2, [r3, #16]!
 800adde:	f8dc 7024 	ldr.w	r7, [ip, #36]	; 0x24
    if (ch_dlist_isempty(&vtlp->dlist)) {
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d03e      	beq.n	800ae64 <vt_enqueue.constprop.0+0x94>
 800ade6:	69f3      	ldr	r3, [r6, #28]
    if (delta < vtlp->dlist.next->delta) {
 800ade8:	6894      	ldr	r4, [r2, #8]
 800adea:	1afb      	subs	r3, r7, r3
      delta = delay;
 800adec:	18cb      	adds	r3, r1, r3
 800adee:	bf28      	it	cs
 800adf0:	460b      	movcs	r3, r1
    if (delta < vtlp->dlist.next->delta) {
 800adf2:	429c      	cmp	r4, r3
 800adf4:	4605      	mov	r5, r0
 800adf6:	d903      	bls.n	800ae00 <vt_enqueue.constprop.0+0x30>
 800adf8:	e011      	b.n	800ae1e <vt_enqueue.constprop.0+0x4e>
    dlp = dlp->next;
 800adfa:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 800adfc:	1b1b      	subs	r3, r3, r4
  while (likely(dlp->delta < delta)) {
 800adfe:	6894      	ldr	r4, [r2, #8]
 800ae00:	429c      	cmp	r4, r3
 800ae02:	d3fa      	bcc.n	800adfa <vt_enqueue.constprop.0+0x2a>
  dlp->prev       = dlp->next->prev;
 800ae04:	6851      	ldr	r1, [r2, #4]
  dlp->delta      = delta;
 800ae06:	60ab      	str	r3, [r5, #8]
  dlp->prev       = dlp->next->prev;
 800ae08:	e9c5 2100 	strd	r2, r1, [r5]
  dlp->prev->next = dlp;
 800ae0c:	600d      	str	r5, [r1, #0]
  dlp->delta -= delta;
 800ae0e:	6891      	ldr	r1, [r2, #8]
  dlhp->prev      = dlp;
 800ae10:	6055      	str	r5, [r2, #4]
  dlp->delta -= delta;
 800ae12:	1acb      	subs	r3, r1, r3
  dlhp->delta = (sysinterval_t)-1;
 800ae14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  dlp->delta -= delta;
 800ae18:	6093      	str	r3, [r2, #8]
  dlhp->delta = (sysinterval_t)-1;
 800ae1a:	61b1      	str	r1, [r6, #24]
}
 800ae1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  currdelta = vtlp->lastdelta;
 800ae1e:	6a30      	ldr	r0, [r6, #32]
 800ae20:	4281      	cmp	r1, r0
 800ae22:	bf38      	it	cc
 800ae24:	4601      	movcc	r1, r0
  return systime + (systime_t)interval;
 800ae26:	eb07 0e01 	add.w	lr, r7, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800ae2a:	f8cc e034 	str.w	lr, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800ae2e:	f8dc e024 	ldr.w	lr, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800ae32:	ebae 0707 	sub.w	r7, lr, r7
    if (likely(nowdelta < delay)) {
 800ae36:	428f      	cmp	r7, r1
 800ae38:	bf28      	it	cs
 800ae3a:	4601      	movcs	r1, r0
 800ae3c:	d3e0      	bcc.n	800ae00 <vt_enqueue.constprop.0+0x30>
    currdelta += (sysinterval_t)1;
 800ae3e:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 800ae40:	eb0e 0701 	add.w	r7, lr, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800ae44:	f8cc 7034 	str.w	r7, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800ae48:	f8dc 7024 	ldr.w	r7, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800ae4c:	eba7 0e0e 	sub.w	lr, r7, lr
    if (likely(nowdelta < delay)) {
 800ae50:	458e      	cmp	lr, r1
 800ae52:	d20d      	bcs.n	800ae70 <vt_enqueue.constprop.0+0xa0>
  if (currdelta > vtlp->lastdelta) {
 800ae54:	4288      	cmp	r0, r1
 800ae56:	d2d3      	bcs.n	800ae00 <vt_enqueue.constprop.0+0x30>
    vtlp->lastdelta = currdelta;
 800ae58:	6231      	str	r1, [r6, #32]
 800ae5a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 800ae5c:	f041 0101 	orr.w	r1, r1, #1
 800ae60:	63f1      	str	r1, [r6, #60]	; 0x3c
}
 800ae62:	e7cd      	b.n	800ae00 <vt_enqueue.constprop.0+0x30>
      vt_insert_first(vtlp, vtp, now, delay);
 800ae64:	460a      	mov	r2, r1
 800ae66:	4639      	mov	r1, r7
}
 800ae68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      vt_insert_first(vtlp, vtp, now, delay);
 800ae6c:	f7ff bf78 	b.w	800ad60 <vt_insert_first.constprop.0>
 800ae70:	46be      	mov	lr, r7
 800ae72:	e7e4      	b.n	800ae3e <vt_enqueue.constprop.0+0x6e>
 800ae74:	200009b8 	.word	0x200009b8
	...

0800ae80 <Thread1>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 800ae80:	b580      	push	{r7, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 800ae82:	4c27      	ldr	r4, [pc, #156]	; (800af20 <Thread1+0xa0>)
 800ae84:	4a27      	ldr	r2, [pc, #156]	; (800af24 <Thread1+0xa4>)
 800ae86:	68e3      	ldr	r3, [r4, #12]
 800ae88:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800af28 <Thread1+0xa8>

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 800ae8c:	4f27      	ldr	r7, [pc, #156]	; (800af2c <Thread1+0xac>)
 800ae8e:	621a      	str	r2, [r3, #32]
 800ae90:	f04f 0920 	mov.w	r9, #32
static THD_FUNCTION(Thread1, arg) {
 800ae94:	b086      	sub	sp, #24
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 800ae96:	46ca      	mov	sl, r9
 800ae98:	2630      	movs	r6, #48	; 0x30
  vtp->reload  = (sysinterval_t)0;
 800ae9a:	2500      	movs	r5, #0
 800ae9c:	f8a7 a01a 	strh.w	sl, [r7, #26]
 800aea0:	f386 8811 	msr	BASEPRI, r6
  vtp->par     = par;
 800aea4:	68e3      	ldr	r3, [r4, #12]
  vtp->reload  = (sysinterval_t)0;
 800aea6:	9505      	str	r5, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 800aea8:	f241 3188 	movw	r1, #5000	; 0x1388
 800aeac:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 800aeae:	e9cd 8303 	strd	r8, r3, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 800aeb2:	f7ff ff8d 	bl	800add0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 800aeb6:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 800aeb8:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800aeba:	2308      	movs	r3, #8
 800aebc:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 800aebe:	6803      	ldr	r3, [r0, #0]
 800aec0:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 800aec2:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 800aec4:	605c      	str	r4, [r3, #4]
 800aec6:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800aec8:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800aeca:	f7f5 f9f9 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800aece:	9b00      	ldr	r3, [sp, #0]
      chVTDoResetI(&vt);
 800aed0:	4668      	mov	r0, sp
    if (chVTIsArmedI(&vt)) {
 800aed2:	b10b      	cbz	r3, 800aed8 <Thread1+0x58>
      chVTDoResetI(&vt);
 800aed4:	f7f7 facc 	bl	8002470 <chVTDoResetI>
 800aed8:	f385 8811 	msr	BASEPRI, r5
    chThdSleepMilliseconds(500);
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 800aedc:	f8a7 9018 	strh.w	r9, [r7, #24]
 800aee0:	f386 8811 	msr	BASEPRI, r6
  vtp->par     = par;
 800aee4:	68e3      	ldr	r3, [r4, #12]
  vtp->reload  = (sysinterval_t)0;
 800aee6:	9505      	str	r5, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 800aee8:	f241 3188 	movw	r1, #5000	; 0x1388
 800aeec:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 800aeee:	e9cd 8303 	strd	r8, r3, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 800aef2:	f7ff ff6d 	bl	800add0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 800aef6:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 800aef8:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800aefa:	2308      	movs	r3, #8
 800aefc:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 800aefe:	6803      	ldr	r3, [r0, #0]
 800af00:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 800af02:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 800af04:	605c      	str	r4, [r3, #4]
 800af06:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800af08:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800af0a:	f7f5 f9d9 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800af0e:	9b00      	ldr	r3, [sp, #0]
      chVTDoResetI(&vt);
 800af10:	4668      	mov	r0, sp
    if (chVTIsArmedI(&vt)) {
 800af12:	b10b      	cbz	r3, 800af18 <Thread1+0x98>
      chVTDoResetI(&vt);
 800af14:	f7f7 faac 	bl	8002470 <chVTDoResetI>
 800af18:	f385 8811 	msr	BASEPRI, r5
}
 800af1c:	e7be      	b.n	800ae9c <Thread1+0x1c>
 800af1e:	bf00      	nop
 800af20:	200009b8 	.word	0x200009b8
 800af24:	0800cddc 	.word	0x0800cddc
 800af28:	08001551 	.word	0x08001551
 800af2c:	40020000 	.word	0x40020000

0800af30 <chPipeWriteTimeout.constprop.0>:
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pp->reset) {
 800af34:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 800b028 <chPipeWriteTimeout.constprop.0+0xf8>
 800af38:	f89b 7014 	ldrb.w	r7, [fp, #20]
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 800af3c:	b083      	sub	sp, #12
  if (pp->reset) {
 800af3e:	b11f      	cbz	r7, 800af48 <chPipeWriteTimeout.constprop.0+0x18>
    return (size_t)0;
 800af40:	2000      	movs	r0, #0
}
 800af42:	b003      	add	sp, #12
 800af44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af48:	4681      	mov	r9, r0
 800af4a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800af4e:	f38a 8811 	msr	BASEPRI, sl
 800af52:	eb0b 000a 	add.w	r0, fp, sl
 800af56:	f7fa feeb 	bl	8005d30 <chMtxLockS>
 800af5a:	f387 8811 	msr	BASEPRI, r7
 800af5e:	4d33      	ldr	r5, [pc, #204]	; (800b02c <chPipeWriteTimeout.constprop.0+0xfc>)
 800af60:	464e      	mov	r6, r9
 800af62:	f10b 0820 	add.w	r8, fp, #32
 800af66:	f38a 8811 	msr	BASEPRI, sl
 800af6a:	4640      	mov	r0, r8
 800af6c:	f7fa fee0 	bl	8005d30 <chMtxLockS>
 800af70:	f387 8811 	msr	BASEPRI, r7
  return (size_t)(pp->top - pp->buffer);
 800af74:	e9db 4300 	ldrd	r4, r3, [fp]
  return pp->cnt;
 800af78:	f8db 2010 	ldr.w	r2, [fp, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 800af7c:	f8db 0008 	ldr.w	r0, [fp, #8]
  return (size_t)(pp->top - pp->buffer);
 800af80:	1b1c      	subs	r4, r3, r4
  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 800af82:	1aa4      	subs	r4, r4, r2
 800af84:	42b4      	cmp	r4, r6
 800af86:	bf28      	it	cs
 800af88:	4634      	movcs	r4, r6
 800af8a:	1a1b      	subs	r3, r3, r0
  pp->cnt += n;
 800af8c:	4422      	add	r2, r4
  if (n < s1) {
 800af8e:	429c      	cmp	r4, r3
  pp->cnt += n;
 800af90:	f8cb 2010 	str.w	r2, [fp, #16]
  if (n < s1) {
 800af94:	d33e      	bcc.n	800b014 <chPipeWriteTimeout.constprop.0+0xe4>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800af96:	461a      	mov	r2, r3
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	4629      	mov	r1, r5
  else if (n > s1) {
 800af9c:	d932      	bls.n	800b004 <chPipeWriteTimeout.constprop.0+0xd4>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800af9e:	f7f5 f9d9 	bl	8000354 <memcpy>
    s2 = n - s1;
 800afa2:	9b01      	ldr	r3, [sp, #4]
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800afa4:	f8db 0000 	ldr.w	r0, [fp]
    s2 = n - s1;
 800afa8:	1ae2      	subs	r2, r4, r3
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800afaa:	18e9      	adds	r1, r5, r3
 800afac:	9201      	str	r2, [sp, #4]
 800afae:	f7f5 f9d1 	bl	8000354 <memcpy>
    pp->wrptr = pp->buffer + s2;
 800afb2:	f8db 3000 	ldr.w	r3, [fp]
 800afb6:	9a01      	ldr	r2, [sp, #4]
 800afb8:	441a      	add	r2, r3
 800afba:	f8cb 2008 	str.w	r2, [fp, #8]
  PC_UNLOCK(pp);
 800afbe:	4640      	mov	r0, r8
      bp += done;
 800afc0:	4425      	add	r5, r4
  PC_UNLOCK(pp);
 800afc2:	f7fa ff4d 	bl	8005e60 <chMtxUnlock>
    if (done == (size_t)0) {
 800afc6:	b96c      	cbnz	r4, 800afe4 <chPipeWriteTimeout.constprop.0+0xb4>
 800afc8:	2330      	movs	r3, #48	; 0x30
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f384 8811 	msr	BASEPRI, r4
  return max - n;
 800afd2:	eba9 0906 	sub.w	r9, r9, r6
  PW_UNLOCK(pp);
 800afd6:	4816      	ldr	r0, [pc, #88]	; (800b030 <chPipeWriteTimeout.constprop.0+0x100>)
 800afd8:	f7fa ff42 	bl	8005e60 <chMtxUnlock>
 800afdc:	4648      	mov	r0, r9
}
 800afde:	b003      	add	sp, #12
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 800afe4:	1b36      	subs	r6, r6, r4
 800afe6:	f38a 8811 	msr	BASEPRI, sl
  if (*trp != NULL) {
 800afea:	f8db 001c 	ldr.w	r0, [fp, #28]
    chSchWakeupS(tp, msg);
 800afee:	2100      	movs	r1, #0
  if (*trp != NULL) {
 800aff0:	b118      	cbz	r0, 800affa <chPipeWriteTimeout.constprop.0+0xca>
    *trp = NULL;
 800aff2:	f8cb 701c 	str.w	r7, [fp, #28]
    chSchWakeupS(tp, msg);
 800aff6:	f7f8 ffab 	bl	8003f50 <chSchWakeupS>
 800affa:	f387 8811 	msr	BASEPRI, r7
  while (n > 0U) {
 800affe:	2e00      	cmp	r6, #0
 800b000:	d1b1      	bne.n	800af66 <chPipeWriteTimeout.constprop.0+0x36>
 800b002:	e7e8      	b.n	800afd6 <chPipeWriteTimeout.constprop.0+0xa6>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800b004:	4622      	mov	r2, r4
 800b006:	f7f5 f9a5 	bl	8000354 <memcpy>
    pp->wrptr = pp->buffer;
 800b00a:	f8db 3000 	ldr.w	r3, [fp]
 800b00e:	f8cb 3008 	str.w	r3, [fp, #8]
 800b012:	e7d4      	b.n	800afbe <chPipeWriteTimeout.constprop.0+0x8e>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800b014:	4622      	mov	r2, r4
 800b016:	4629      	mov	r1, r5
 800b018:	f7f5 f99c 	bl	8000354 <memcpy>
    pp->wrptr += n;
 800b01c:	f8db 3008 	ldr.w	r3, [fp, #8]
 800b020:	4423      	add	r3, r4
 800b022:	f8cb 3008 	str.w	r3, [fp, #8]
 800b026:	e7ca      	b.n	800afbe <chPipeWriteTimeout.constprop.0+0x8e>
 800b028:	20000884 	.word	0x20000884
 800b02c:	0800cc7c 	.word	0x0800cc7c
 800b030:	200008b4 	.word	0x200008b4
	...

0800b040 <chPipeReadTimeout.part.0.constprop.0>:
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	b083      	sub	sp, #12
 800b046:	4607      	mov	r7, r0
 800b048:	4688      	mov	r8, r1
 800b04a:	9100      	str	r1, [sp, #0]
 800b04c:	f04f 0b30 	mov.w	fp, #48	; 0x30
 800b050:	f38b 8811 	msr	BASEPRI, fp
 800b054:	4831      	ldr	r0, [pc, #196]	; (800b11c <chPipeReadTimeout.part.0.constprop.0+0xdc>)
 800b056:	f7fa fe6b 	bl	8005d30 <chMtxLockS>
 800b05a:	f04f 0900 	mov.w	r9, #0
 800b05e:	f389 8811 	msr	BASEPRI, r9
 800b062:	4d2f      	ldr	r5, [pc, #188]	; (800b120 <chPipeReadTimeout.part.0.constprop.0+0xe0>)
 800b064:	f105 0a20 	add.w	sl, r5, #32
 800b068:	f38b 8811 	msr	BASEPRI, fp
 800b06c:	4650      	mov	r0, sl
 800b06e:	f7fa fe5f 	bl	8005d30 <chMtxLockS>
 800b072:	f389 8811 	msr	BASEPRI, r9
  s1 = (size_t)(pp->top - pp->rdptr);
 800b076:	e9d5 1303 	ldrd	r1, r3, [r5, #12]
 800b07a:	686e      	ldr	r6, [r5, #4]
 800b07c:	4543      	cmp	r3, r8
 800b07e:	461c      	mov	r4, r3
 800b080:	eba6 0601 	sub.w	r6, r6, r1
 800b084:	bf28      	it	cs
 800b086:	4644      	movcs	r4, r8
  pp->cnt -= n;
 800b088:	1b1b      	subs	r3, r3, r4
  if (n < s1) {
 800b08a:	42b4      	cmp	r4, r6
  pp->cnt -= n;
 800b08c:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 800b08e:	d33d      	bcc.n	800b10c <chPipeReadTimeout.part.0.constprop.0+0xcc>
    s2 = n - s1;
 800b090:	eba4 0306 	sub.w	r3, r4, r6
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800b094:	4632      	mov	r2, r6
    s2 = n - s1;
 800b096:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800b098:	4638      	mov	r0, r7
  else if (n > s1) {
 800b09a:	d931      	bls.n	800b100 <chPipeReadTimeout.part.0.constprop.0+0xc0>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800b09c:	f7f5 f95a 	bl	8000354 <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	6829      	ldr	r1, [r5, #0]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	19b8      	adds	r0, r7, r6
 800b0a8:	f7f5 f954 	bl	8000354 <memcpy>
    pp->rdptr = pp->buffer + s2;
 800b0ac:	682a      	ldr	r2, [r5, #0]
 800b0ae:	9b01      	ldr	r3, [sp, #4]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	60eb      	str	r3, [r5, #12]
  PC_UNLOCK(pp);
 800b0b4:	4650      	mov	r0, sl
        break;
      }
    }
    else {
      n  -= done;
      bp += done;
 800b0b6:	4427      	add	r7, r4
  PC_UNLOCK(pp);
 800b0b8:	f7fa fed2 	bl	8005e60 <chMtxUnlock>
    if (done == (size_t)0) {
 800b0bc:	b97c      	cbnz	r4, 800b0de <chPipeReadTimeout.part.0.constprop.0+0x9e>
 800b0be:	2330      	movs	r3, #48	; 0x30
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f384 8811 	msr	BASEPRI, r4
    }
  }

  PR_UNLOCK(pp);

  return max - n;
 800b0c8:	9b00      	ldr	r3, [sp, #0]
 800b0ca:	eba3 0308 	sub.w	r3, r3, r8
 800b0ce:	9300      	str	r3, [sp, #0]
  PR_UNLOCK(pp);
 800b0d0:	4812      	ldr	r0, [pc, #72]	; (800b11c <chPipeReadTimeout.part.0.constprop.0+0xdc>)
 800b0d2:	f7fa fec5 	bl	8005e60 <chMtxUnlock>
}
 800b0d6:	9800      	ldr	r0, [sp, #0]
 800b0d8:	b003      	add	sp, #12
 800b0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 800b0de:	eba8 0804 	sub.w	r8, r8, r4
 800b0e2:	f38b 8811 	msr	BASEPRI, fp
  if (*trp != NULL) {
 800b0e6:	69a8      	ldr	r0, [r5, #24]
    chSchWakeupS(tp, msg);
 800b0e8:	2100      	movs	r1, #0
  if (*trp != NULL) {
 800b0ea:	b118      	cbz	r0, 800b0f4 <chPipeReadTimeout.part.0.constprop.0+0xb4>
    *trp = NULL;
 800b0ec:	f8c5 9018 	str.w	r9, [r5, #24]
    chSchWakeupS(tp, msg);
 800b0f0:	f7f8 ff2e 	bl	8003f50 <chSchWakeupS>
 800b0f4:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800b0f8:	f1b8 0f00 	cmp.w	r8, #0
 800b0fc:	d1b4      	bne.n	800b068 <chPipeReadTimeout.part.0.constprop.0+0x28>
 800b0fe:	e7e7      	b.n	800b0d0 <chPipeReadTimeout.part.0.constprop.0+0x90>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800b100:	4622      	mov	r2, r4
 800b102:	f7f5 f927 	bl	8000354 <memcpy>
    pp->rdptr = pp->buffer;
 800b106:	682b      	ldr	r3, [r5, #0]
 800b108:	60eb      	str	r3, [r5, #12]
 800b10a:	e7d3      	b.n	800b0b4 <chPipeReadTimeout.part.0.constprop.0+0x74>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800b10c:	4622      	mov	r2, r4
 800b10e:	4638      	mov	r0, r7
 800b110:	f7f5 f920 	bl	8000354 <memcpy>
    pp->rdptr += n;
 800b114:	68eb      	ldr	r3, [r5, #12]
 800b116:	4423      	add	r3, r4
 800b118:	60eb      	str	r3, [r5, #12]
 800b11a:	e7cb      	b.n	800b0b4 <chPipeReadTimeout.part.0.constprop.0+0x74>
 800b11c:	200008c4 	.word	0x200008c4
 800b120:	20000884 	.word	0x20000884
	...

0800b130 <test_execute_inner.isra.0>:
static bool test_execute_inner(const testsuite_t *tsp) {
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	4680      	mov	r8, r0
 800b136:	b089      	sub	sp, #36	; 0x24
  test_printf(TEST_CFG_EOL_STRING);
 800b138:	489e      	ldr	r0, [pc, #632]	; (800b3b4 <test_execute_inner.isra.0+0x284>)
 800b13a:	f7fc fc71 	bl	8007a20 <test_printf>
  if (tsp->name != NULL) {
 800b13e:	f8d8 1000 	ldr.w	r1, [r8]
 800b142:	2900      	cmp	r1, #0
 800b144:	f000 8132 	beq.w	800b3ac <test_execute_inner.isra.0+0x27c>
    test_printf("*** %s"TEST_CFG_EOL_STRING, tsp->name);
 800b148:	489b      	ldr	r0, [pc, #620]	; (800b3b8 <test_execute_inner.isra.0+0x288>)
 800b14a:	f7fc fc69 	bl	8007a20 <test_printf>
  test_printf("***"TEST_CFG_EOL_STRING);
 800b14e:	489b      	ldr	r0, [pc, #620]	; (800b3bc <test_execute_inner.isra.0+0x28c>)
  chtest.global_fail = false;
 800b150:	f8df 926c 	ldr.w	r9, [pc, #620]	; 800b3c0 <test_execute_inner.isra.0+0x290>
  test_printf("***"TEST_CFG_EOL_STRING);
 800b154:	f7fc fc64 	bl	8007a20 <test_printf>
  test_printf("*** Compiled:     %s"TEST_CFG_EOL_STRING, __DATE__ " - " __TIME__);
 800b158:	499a      	ldr	r1, [pc, #616]	; (800b3c4 <test_execute_inner.isra.0+0x294>)
 800b15a:	489b      	ldr	r0, [pc, #620]	; (800b3c8 <test_execute_inner.isra.0+0x298>)
 800b15c:	f7fc fc60 	bl	8007a20 <test_printf>
  test_printf("*** Platform:     %s"TEST_CFG_EOL_STRING, PLATFORM_NAME);
 800b160:	499a      	ldr	r1, [pc, #616]	; (800b3cc <test_execute_inner.isra.0+0x29c>)
 800b162:	489b      	ldr	r0, [pc, #620]	; (800b3d0 <test_execute_inner.isra.0+0x2a0>)
 800b164:	f7fc fc5c 	bl	8007a20 <test_printf>
  test_printf("*** Test Board:   %s"TEST_CFG_EOL_STRING, BOARD_NAME);
 800b168:	499a      	ldr	r1, [pc, #616]	; (800b3d4 <test_execute_inner.isra.0+0x2a4>)
 800b16a:	489b      	ldr	r0, [pc, #620]	; (800b3d8 <test_execute_inner.isra.0+0x2a8>)
 800b16c:	f7fc fc58 	bl	8007a20 <test_printf>
    test_printf("***"TEST_CFG_EOL_STRING);
 800b170:	4892      	ldr	r0, [pc, #584]	; (800b3bc <test_execute_inner.isra.0+0x28c>)
 800b172:	f7fc fc55 	bl	8007a20 <test_printf>
    test_printf("*** Text size:    %u bytes"TEST_CFG_EOL_STRING, &__text_end__   - &__text_base__);
 800b176:	4b99      	ldr	r3, [pc, #612]	; (800b3dc <test_execute_inner.isra.0+0x2ac>)
 800b178:	4999      	ldr	r1, [pc, #612]	; (800b3e0 <test_execute_inner.isra.0+0x2b0>)
 800b17a:	489a      	ldr	r0, [pc, #616]	; (800b3e4 <test_execute_inner.isra.0+0x2b4>)
 800b17c:	1ac9      	subs	r1, r1, r3
 800b17e:	f7fc fc4f 	bl	8007a20 <test_printf>
    test_printf("*** RO data size: %u bytes"TEST_CFG_EOL_STRING, &__rodata_end__ - &__rodata_base__);
 800b182:	4b99      	ldr	r3, [pc, #612]	; (800b3e8 <test_execute_inner.isra.0+0x2b8>)
 800b184:	4999      	ldr	r1, [pc, #612]	; (800b3ec <test_execute_inner.isra.0+0x2bc>)
 800b186:	489a      	ldr	r0, [pc, #616]	; (800b3f0 <test_execute_inner.isra.0+0x2c0>)
 800b188:	1ac9      	subs	r1, r1, r3
 800b18a:	f7fc fc49 	bl	8007a20 <test_printf>
    test_printf("*** Data size:    %u bytes"TEST_CFG_EOL_STRING, &__data_end__   - &__data_base__);
 800b18e:	4b99      	ldr	r3, [pc, #612]	; (800b3f4 <test_execute_inner.isra.0+0x2c4>)
 800b190:	4999      	ldr	r1, [pc, #612]	; (800b3f8 <test_execute_inner.isra.0+0x2c8>)
 800b192:	489a      	ldr	r0, [pc, #616]	; (800b3fc <test_execute_inner.isra.0+0x2cc>)
 800b194:	1ac9      	subs	r1, r1, r3
 800b196:	f7fc fc43 	bl	8007a20 <test_printf>
    test_printf("*** BSS size:     %u bytes"TEST_CFG_EOL_STRING, &__bss_end__    - &__bss_base__);
 800b19a:	4b99      	ldr	r3, [pc, #612]	; (800b400 <test_execute_inner.isra.0+0x2d0>)
 800b19c:	4999      	ldr	r1, [pc, #612]	; (800b404 <test_execute_inner.isra.0+0x2d4>)
 800b19e:	489a      	ldr	r0, [pc, #616]	; (800b408 <test_execute_inner.isra.0+0x2d8>)
 800b1a0:	1ac9      	subs	r1, r1, r3
 800b1a2:	f7fc fc3d 	bl	8007a20 <test_printf>
  test_printf(TEST_CFG_EOL_STRING);
 800b1a6:	4883      	ldr	r0, [pc, #524]	; (800b3b4 <test_execute_inner.isra.0+0x284>)
 800b1a8:	f7fc fc3a 	bl	8007a20 <test_printf>
  while (tsp->sequences[tseq] != NULL) {
 800b1ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1b0:	681a      	ldr	r2, [r3, #0]
  chtest.global_fail = false;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	f889 3004 	strb.w	r3, [r9, #4]
  while (tsp->sequences[tseq] != NULL) {
 800b1b8:	2a00      	cmp	r2, #0
 800b1ba:	f000 80c6 	beq.w	800b34a <test_execute_inner.isra.0+0x21a>
 800b1be:	f8df a24c 	ldr.w	sl, [pc, #588]	; 800b40c <test_execute_inner.isra.0+0x2dc>
  tseq = 0U;
 800b1c2:	9301      	str	r3, [sp, #4]
  while (tsp->sequences[tseq] != NULL) {
 800b1c4:	461f      	mov	r7, r3
  if (chtest.putchar != NULL) {
 800b1c6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b1ca:	244c      	movs	r4, #76	; 0x4c
 800b1cc:	b18b      	cbz	r3, 800b1f2 <test_execute_inner.isra.0+0xc2>
    chtest.putchar(c);
 800b1ce:	203d      	movs	r0, #61	; 0x3d
 800b1d0:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 800b1d2:	f8d9 3020 	ldr.w	r3, [r9, #32]
  for (i = 0; i < 76; i++) {
 800b1d6:	3c01      	subs	r4, #1
 800b1d8:	d1f8      	bne.n	800b1cc <test_execute_inner.isra.0+0x9c>
 800b1da:	4c8d      	ldr	r4, [pc, #564]	; (800b410 <test_execute_inner.isra.0+0x2e0>)
 800b1dc:	250a      	movs	r5, #10
  while ((c = *s) != '\0') {
 800b1de:	200d      	movs	r0, #13
 800b1e0:	b103      	cbz	r3, 800b1e4 <test_execute_inner.isra.0+0xb4>
    chtest.putchar(c);
 800b1e2:	4798      	blx	r3
 800b1e4:	b15d      	cbz	r5, 800b1fe <test_execute_inner.isra.0+0xce>
  if (chtest.putchar != NULL) {
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b1ec:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800b1f0:	e7f6      	b.n	800b1e0 <test_execute_inner.isra.0+0xb0>
  for (i = 0; i < 76; i++) {
 800b1f2:	3c01      	subs	r4, #1
 800b1f4:	d1ef      	bne.n	800b1d6 <test_execute_inner.isra.0+0xa6>
 800b1f6:	4c86      	ldr	r4, [pc, #536]	; (800b410 <test_execute_inner.isra.0+0x2e0>)
 800b1f8:	250a      	movs	r5, #10
  while ((c = *s) != '\0') {
 800b1fa:	200d      	movs	r0, #13
 800b1fc:	e7f0      	b.n	800b1e0 <test_execute_inner.isra.0+0xb0>
    test_printf("=== Test Sequence %u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tsp->sequences[tseq]->name);
 800b1fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b202:	9901      	ldr	r1, [sp, #4]
 800b204:	59db      	ldr	r3, [r3, r7]
 800b206:	4883      	ldr	r0, [pc, #524]	; (800b414 <test_execute_inner.isra.0+0x2e4>)
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	3101      	adds	r1, #1
 800b20c:	9101      	str	r1, [sp, #4]
 800b20e:	f7fc fc07 	bl	8007a20 <test_printf>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800b212:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b216:	59d3      	ldr	r3, [r2, r7]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 808f 	beq.w	800b340 <test_execute_inner.isra.0+0x210>
 800b222:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b226:	00ae      	lsls	r6, r5, #2
 800b228:	244c      	movs	r4, #76	; 0x4c
 800b22a:	b193      	cbz	r3, 800b252 <test_execute_inner.isra.0+0x122>
    chtest.putchar(c);
 800b22c:	202d      	movs	r0, #45	; 0x2d
 800b22e:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 800b230:	f8d9 3020 	ldr.w	r3, [r9, #32]
  for (i = 0; i < 76; i++) {
 800b234:	3c01      	subs	r4, #1
 800b236:	d1f8      	bne.n	800b22a <test_execute_inner.isra.0+0xfa>
 800b238:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 800b410 <test_execute_inner.isra.0+0x2e0>
 800b23c:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800b23e:	200d      	movs	r0, #13
 800b240:	b103      	cbz	r3, 800b244 <test_execute_inner.isra.0+0x114>
    chtest.putchar(c);
 800b242:	4798      	blx	r3
 800b244:	b164      	cbz	r4, 800b260 <test_execute_inner.isra.0+0x130>
  if (chtest.putchar != NULL) {
 800b246:	4620      	mov	r0, r4
 800b248:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b24c:	f81b 4f01 	ldrb.w	r4, [fp, #1]!
 800b250:	e7f6      	b.n	800b240 <test_execute_inner.isra.0+0x110>
  for (i = 0; i < 76; i++) {
 800b252:	3c01      	subs	r4, #1
 800b254:	d1ee      	bne.n	800b234 <test_execute_inner.isra.0+0x104>
 800b256:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 800b410 <test_execute_inner.isra.0+0x2e0>
 800b25a:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800b25c:	200d      	movs	r0, #13
 800b25e:	e7ef      	b.n	800b240 <test_execute_inner.isra.0+0x110>
      test_printf("--- Test Case %u.%u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tcase + 1U, tsp->sequences[tseq]->cases[tcase]->name);
 800b260:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b264:	9901      	ldr	r1, [sp, #4]
 800b266:	59db      	ldr	r3, [r3, r7]
 800b268:	486b      	ldr	r0, [pc, #428]	; (800b418 <test_execute_inner.isra.0+0x2e8>)
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	599b      	ldr	r3, [r3, r6]
 800b26e:	3501      	adds	r5, #1
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	462a      	mov	r2, r5
 800b274:	f7fc fbd4 	bl	8007a20 <test_printf>
 800b278:	2330      	movs	r3, #48	; 0x30
 800b27a:	f383 8811 	msr	BASEPRI, r3
  vtp->func    = vtfunc;
 800b27e:	4b67      	ldr	r3, [pc, #412]	; (800b41c <test_execute_inner.isra.0+0x2ec>)
 800b280:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 800b282:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  vtp->par     = par;
 800b286:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b28a:	9306      	str	r3, [sp, #24]
  vt_enqueue(vtlp, vtp, delay);
 800b28c:	a802      	add	r0, sp, #8
  vtp->reload  = (sysinterval_t)0;
 800b28e:	9407      	str	r4, [sp, #28]
  vt_enqueue(vtlp, vtp, delay);
 800b290:	f7ff fd9e 	bl	800add0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 800b294:	f8da 100c 	ldr.w	r1, [sl, #12]
  ch_priority_queue_t *p = pqp->next;
 800b298:	f8da 0000 	ldr.w	r0, [sl]
  otp->state = newstate;
 800b29c:	2308      	movs	r3, #8
 800b29e:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 800b2a0:	6803      	ldr	r3, [r0, #0]
 800b2a2:	f8ca 3000 	str.w	r3, [sl]
  pqp->next->prev = pqp;
 800b2a6:	f8c3 a004 	str.w	sl, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800b2ae:	f8ca 000c 	str.w	r0, [sl, #12]
  chSysSwitch(ntp, otp);
 800b2b2:	f7f5 f805 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800b2b6:	9b02      	ldr	r3, [sp, #8]
 800b2b8:	b113      	cbz	r3, 800b2c0 <test_execute_inner.isra.0+0x190>
      chVTDoResetI(&vt);
 800b2ba:	a802      	add	r0, sp, #8
 800b2bc:	f7f7 f8d8 	bl	8002470 <chVTDoResetI>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f383 8811 	msr	BASEPRI, r3
      test_execute_case(tsp->sequences[tseq]->cases[tcase]);
 800b2c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b2ca:	59d2      	ldr	r2, [r2, r7]
 800b2cc:	6852      	ldr	r2, [r2, #4]
 800b2ce:	5994      	ldr	r4, [r2, r6]
  chtest.local_fail = false;
 800b2d0:	f889 3005 	strb.w	r3, [r9, #5]
  chtest.tokp = chtest.tokens_buffer;
 800b2d4:	4b52      	ldr	r3, [pc, #328]	; (800b420 <test_execute_inner.isra.0+0x2f0>)
 800b2d6:	f8c9 300c 	str.w	r3, [r9, #12]
  if (tcp->setup != NULL) {
 800b2da:	6863      	ldr	r3, [r4, #4]
 800b2dc:	b103      	cbz	r3, 800b2e0 <test_execute_inner.isra.0+0x1b0>
    tcp->setup();
 800b2de:	4798      	blx	r3
  tcp->execute();
 800b2e0:	68e3      	ldr	r3, [r4, #12]
 800b2e2:	4798      	blx	r3
  if (tcp->teardown != NULL) {
 800b2e4:	68a3      	ldr	r3, [r4, #8]
 800b2e6:	b103      	cbz	r3, 800b2ea <test_execute_inner.isra.0+0x1ba>
    tcp->teardown();
 800b2e8:	4798      	blx	r3
      if (chtest.local_fail) {
 800b2ea:	f899 3005 	ldrb.w	r3, [r9, #5]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d041      	beq.n	800b376 <test_execute_inner.isra.0+0x246>
        test_printf("--- Result: FAILURE (#%u [", chtest.current_step, "", chtest.failure_message);
 800b2f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b2f6:	4a4b      	ldr	r2, [pc, #300]	; (800b424 <test_execute_inner.isra.0+0x2f4>)
 800b2f8:	f8d9 1000 	ldr.w	r1, [r9]
 800b2fc:	484a      	ldr	r0, [pc, #296]	; (800b428 <test_execute_inner.isra.0+0x2f8>)
 800b2fe:	f7fc fb8f 	bl	8007a20 <test_printf>
  while (cp < chtest.tokp) {
 800b302:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b306:	4a46      	ldr	r2, [pc, #280]	; (800b420 <test_execute_inner.isra.0+0x2f0>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d90b      	bls.n	800b324 <test_execute_inner.isra.0+0x1f4>
  char *cp = chtest.tokens_buffer;
 800b30c:	4c44      	ldr	r4, [pc, #272]	; (800b420 <test_execute_inner.isra.0+0x2f0>)
 800b30e:	f8d9 3020 	ldr.w	r3, [r9, #32]
    test_putchar(*cp++);
 800b312:	3401      	adds	r4, #1
 800b314:	b113      	cbz	r3, 800b31c <test_execute_inner.isra.0+0x1ec>
    chtest.putchar(c);
 800b316:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 800b31a:	4798      	blx	r3
  while (cp < chtest.tokp) {
 800b31c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b320:	429c      	cmp	r4, r3
 800b322:	d3f4      	bcc.n	800b30e <test_execute_inner.isra.0+0x1de>
        test_printf("] \"%s\")"TEST_CFG_EOL_STRING, chtest.failure_message);
 800b324:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800b328:	4840      	ldr	r0, [pc, #256]	; (800b42c <test_execute_inner.isra.0+0x2fc>)
 800b32a:	f7fc fb79 	bl	8007a20 <test_printf>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800b32e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b332:	59d3      	ldr	r3, [r2, r7]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	441e      	add	r6, r3
 800b338:	6873      	ldr	r3, [r6, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f47f af71 	bne.w	800b222 <test_execute_inner.isra.0+0xf2>
  while (tsp->sequences[tseq] != NULL) {
 800b340:	3704      	adds	r7, #4
 800b342:	59d3      	ldr	r3, [r2, r7]
 800b344:	2b00      	cmp	r3, #0
 800b346:	f47f af3e 	bne.w	800b1c6 <test_execute_inner.isra.0+0x96>
  if (chtest.putchar != NULL) {
 800b34a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b34e:	244c      	movs	r4, #76	; 0x4c
 800b350:	b1ab      	cbz	r3, 800b37e <test_execute_inner.isra.0+0x24e>
    chtest.putchar(c);
 800b352:	202d      	movs	r0, #45	; 0x2d
 800b354:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 800b356:	f8d9 3020 	ldr.w	r3, [r9, #32]
  for (i = 0; i < 76; i++) {
 800b35a:	3c01      	subs	r4, #1
 800b35c:	d1f8      	bne.n	800b350 <test_execute_inner.isra.0+0x220>
 800b35e:	4d2c      	ldr	r5, [pc, #176]	; (800b410 <test_execute_inner.isra.0+0x2e0>)
 800b360:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800b362:	200d      	movs	r0, #13
 800b364:	b103      	cbz	r3, 800b368 <test_execute_inner.isra.0+0x238>
    chtest.putchar(c);
 800b366:	4798      	blx	r3
 800b368:	b17c      	cbz	r4, 800b38a <test_execute_inner.isra.0+0x25a>
  if (chtest.putchar != NULL) {
 800b36a:	4620      	mov	r0, r4
 800b36c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b370:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800b374:	e7f6      	b.n	800b364 <test_execute_inner.isra.0+0x234>
        test_printf("--- Result: SUCCESS"TEST_CFG_EOL_STRING);
 800b376:	482e      	ldr	r0, [pc, #184]	; (800b430 <test_execute_inner.isra.0+0x300>)
 800b378:	f7fc fb52 	bl	8007a20 <test_printf>
 800b37c:	e7d7      	b.n	800b32e <test_execute_inner.isra.0+0x1fe>
  for (i = 0; i < 76; i++) {
 800b37e:	3c01      	subs	r4, #1
 800b380:	d1eb      	bne.n	800b35a <test_execute_inner.isra.0+0x22a>
 800b382:	4d23      	ldr	r5, [pc, #140]	; (800b410 <test_execute_inner.isra.0+0x2e0>)
 800b384:	240a      	movs	r4, #10
  while ((c = *s) != '\0') {
 800b386:	200d      	movs	r0, #13
 800b388:	e7ec      	b.n	800b364 <test_execute_inner.isra.0+0x234>
  test_printf(TEST_CFG_EOL_STRING);
 800b38a:	480a      	ldr	r0, [pc, #40]	; (800b3b4 <test_execute_inner.isra.0+0x284>)
 800b38c:	f7fc fb48 	bl	8007a20 <test_printf>
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
 800b390:	f899 1004 	ldrb.w	r1, [r9, #4]
 800b394:	4a27      	ldr	r2, [pc, #156]	; (800b434 <test_execute_inner.isra.0+0x304>)
 800b396:	4b28      	ldr	r3, [pc, #160]	; (800b438 <test_execute_inner.isra.0+0x308>)
 800b398:	4828      	ldr	r0, [pc, #160]	; (800b43c <test_execute_inner.isra.0+0x30c>)
 800b39a:	2900      	cmp	r1, #0
 800b39c:	bf14      	ite	ne
 800b39e:	4611      	movne	r1, r2
 800b3a0:	4619      	moveq	r1, r3
}
 800b3a2:	b009      	add	sp, #36	; 0x24
 800b3a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
 800b3a8:	f7fc bb3a 	b.w	8007a20 <test_printf>
    test_printf("*** Test Suite"TEST_CFG_EOL_STRING);
 800b3ac:	4824      	ldr	r0, [pc, #144]	; (800b440 <test_execute_inner.isra.0+0x310>)
 800b3ae:	f7fc fb37 	bl	8007a20 <test_printf>
 800b3b2:	e6cc      	b.n	800b14e <test_execute_inner.isra.0+0x1e>
 800b3b4:	0800cf88 	.word	0x0800cf88
 800b3b8:	0800cdf4 	.word	0x0800cdf4
 800b3bc:	0800ce14 	.word	0x0800ce14
 800b3c0:	20000ab4 	.word	0x20000ab4
 800b3c4:	0800ce1c 	.word	0x0800ce1c
 800b3c8:	0800ce34 	.word	0x0800ce34
 800b3cc:	0800ce4c 	.word	0x0800ce4c
 800b3d0:	0800ce78 	.word	0x0800ce78
 800b3d4:	0800ce90 	.word	0x0800ce90
 800b3d8:	0800cebc 	.word	0x0800cebc
 800b3dc:	080001e0 	.word	0x080001e0
 800b3e0:	0800b954 	.word	0x0800b954
 800b3e4:	0800ced4 	.word	0x0800ced4
 800b3e8:	0800b954 	.word	0x0800b954
 800b3ec:	0800e118 	.word	0x0800e118
 800b3f0:	0800cef4 	.word	0x0800cef4
 800b3f4:	20000800 	.word	0x20000800
 800b3f8:	200008dc 	.word	0x200008dc
 800b3fc:	0800cf14 	.word	0x0800cf14
 800b400:	200008e0 	.word	0x200008e0
 800b404:	20002100 	.word	0x20002100
 800b408:	0800cf34 	.word	0x0800cf34
 800b40c:	200009b8 	.word	0x200009b8
 800b410:	0800cf89 	.word	0x0800cf89
 800b414:	0800cf54 	.word	0x0800cf54
 800b418:	0800cf70 	.word	0x0800cf70
 800b41c:	08001551 	.word	0x08001551
 800b420:	20000ac4 	.word	0x20000ac4
 800b424:	0800ce10 	.word	0x0800ce10
 800b428:	0800cf8c 	.word	0x0800cf8c
 800b42c:	0800cfa8 	.word	0x0800cfa8
 800b430:	0800cfb4 	.word	0x0800cfb4
 800b434:	0800cde4 	.word	0x0800cde4
 800b438:	0800cdec 	.word	0x0800cdec
 800b43c:	0800cfcc 	.word	0x0800cfcc
 800b440:	0800ce00 	.word	0x0800ce00
	...

0800b450 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800b450:	4bb3      	ldr	r3, [pc, #716]	; (800b720 <main+0x2d0>)
  PWR->CR |= PWR_CR_DBP;
 800b452:	48b4      	ldr	r0, [pc, #720]	; (800b724 <main+0x2d4>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800b454:	691a      	ldr	r2, [r3, #16]
 800b456:	f062 02ff 	orn	r2, r2, #255	; 0xff
}

/*
 * Application entry point.
 */
int main(void) {
 800b45a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800b45e:	611a      	str	r2, [r3, #16]
 800b460:	691a      	ldr	r2, [r3, #16]
 800b462:	b2d2      	uxtb	r2, r2
 800b464:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800b466:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800b46a:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 800b46c:	695a      	ldr	r2, [r3, #20]
 800b46e:	615c      	str	r4, [r3, #20]
 800b470:	2100      	movs	r1, #0
 800b472:	695a      	ldr	r2, [r3, #20]
 800b474:	6159      	str	r1, [r3, #20]
 800b476:	695a      	ldr	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800b478:	6a1a      	ldr	r2, [r3, #32]
 800b47a:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 800b47e:	621a      	str	r2, [r3, #32]
 800b480:	6a1a      	ldr	r2, [r3, #32]
 800b482:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800b486:	621a      	str	r2, [r3, #32]
 800b488:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800b48a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b48c:	625c      	str	r4, [r3, #36]	; 0x24
 800b48e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b490:	6259      	str	r1, [r3, #36]	; 0x24
 800b492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 800b494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b496:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b49a:	641a      	str	r2, [r3, #64]	; 0x40
 800b49c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b49e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b4a2:	661a      	str	r2, [r3, #96]	; 0x60
 800b4a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800b4a6:	6802      	ldr	r2, [r0, #0]
 800b4a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4ac:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800b4ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4b0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800b4b4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800b4b8:	b08b      	sub	sp, #44	; 0x2c
 800b4ba:	d003      	beq.n	800b4c4 <main+0x74>
    RCC->BDCR = RCC_BDCR_BDRST;
 800b4bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b4c0:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800b4c2:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800b4c4:	4997      	ldr	r1, [pc, #604]	; (800b724 <main+0x2d4>)
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800b4c6:	4b98      	ldr	r3, [pc, #608]	; (800b728 <main+0x2d8>)
 800b4c8:	684a      	ldr	r2, [r1, #4]
  sdp->vmt = &vmt;
 800b4ca:	4d98      	ldr	r5, [pc, #608]	; (800b72c <main+0x2dc>)
  ch_system.state = ch_sys_initializing;
 800b4cc:	4f98      	ldr	r7, [pc, #608]	; (800b730 <main+0x2e0>)
 800b4ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b4d2:	2070      	movs	r0, #112	; 0x70
 800b4d4:	604a      	str	r2, [r1, #4]
 800b4d6:	f883 031c 	strb.w	r0, [r3, #796]	; 0x31c
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800b4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800b4de:	20c0      	movs	r0, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800b4e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 800b4e4:	2140      	movs	r1, #64	; 0x40
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800b4e6:	601a      	str	r2, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800b4e8:	f883 0326 	strb.w	r0, [r3, #806]	; 0x326
  qp->next = qp;
 800b4ec:	f105 000c 	add.w	r0, r5, #12
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800b4f0:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800b4f4:	6059      	str	r1, [r3, #4]
  qp->prev = qp;
 800b4f6:	e9c5 0003 	strd	r0, r0, [r5, #12]
  iqp->q_buffer  = bp;
 800b4fa:	f105 0054 	add.w	r0, r5, #84	; 0x54
 800b4fe:	462a      	mov	r2, r5
  iqp->q_wrptr   = bp;
 800b500:	e9c5 0008 	strd	r0, r0, [r5, #32]
  iqp->q_buffer  = bp;
 800b504:	61a8      	str	r0, [r5, #24]
  qp->next = qp;
 800b506:	f105 0030 	add.w	r0, r5, #48	; 0x30
  iqp->q_counter = 0;
 800b50a:	2300      	movs	r3, #0
  qp->prev = qp;
 800b50c:	e9c5 000c 	strd	r0, r0, [r5, #48]	; 0x30
 800b510:	4988      	ldr	r1, [pc, #544]	; (800b734 <main+0x2e4>)
 800b512:	f842 1b04 	str.w	r1, [r2], #4
  oqp->q_counter = size;
 800b516:	2010      	movs	r0, #16
  iqp->q_counter = 0;
 800b518:	616b      	str	r3, [r5, #20]
  oqp->q_counter = size;
 800b51a:	63a8      	str	r0, [r5, #56]	; 0x38
  oqp->q_top     = bp + size;
 800b51c:	f105 0074 	add.w	r0, r5, #116	; 0x74
 800b520:	6428      	str	r0, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 800b522:	4885      	ldr	r0, [pc, #532]	; (800b738 <main+0x2e8>)
  esp->next = (event_listener_t *)esp;
 800b524:	606a      	str	r2, [r5, #4]
 800b526:	64e8      	str	r0, [r5, #76]	; 0x4c
  iqp->q_top     = bp + size;
 800b528:	f105 0264 	add.w	r2, r5, #100	; 0x64
  SD2.usart = USART2;
 800b52c:	4883      	ldr	r0, [pc, #524]	; (800b73c <main+0x2ec>)
 800b52e:	61ea      	str	r2, [r5, #28]
  sdp->state = SD_STOP;
 800b530:	2101      	movs	r1, #1
  oqp->q_wrptr   = bp;
 800b532:	e9c5 2211 	strd	r2, r2, [r5, #68]	; 0x44
  oqp->q_buffer  = bp;
 800b536:	63ea      	str	r2, [r5, #60]	; 0x3c
 800b538:	6768      	str	r0, [r5, #116]	; 0x74
  ST_ENABLE_CLOCK();
 800b53a:	4a79      	ldr	r2, [pc, #484]	; (800b720 <main+0x2d0>)
  SD2.clock = STM32_PCLK1;
 800b53c:	4880      	ldr	r0, [pc, #512]	; (800b740 <main+0x2f0>)
 800b53e:	7229      	strb	r1, [r5, #8]
 800b540:	67a8      	str	r0, [r5, #120]	; 0x78
 800b542:	6c10      	ldr	r0, [r2, #64]	; 0x40
  oqp->q_link    = link;
 800b544:	652d      	str	r5, [r5, #80]	; 0x50
 800b546:	4308      	orrs	r0, r1
  iqp->q_link    = link;
 800b548:	e9c5 350a 	strd	r3, r5, [r5, #40]	; 0x28
 800b54c:	6410      	str	r0, [r2, #64]	; 0x40
 800b54e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800b550:	4308      	orrs	r0, r1
 800b552:	6610      	str	r0, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 800b554:	487b      	ldr	r0, [pc, #492]	; (800b744 <main+0x2f4>)
  ST_ENABLE_CLOCK();
 800b556:	6e12      	ldr	r2, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 800b558:	6882      	ldr	r2, [r0, #8]
 800b55a:	430a      	orrs	r2, r1
 800b55c:	6082      	str	r2, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800b55e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b562:	f242 3027 	movw	r0, #8999	; 0x2327
 800b566:	6290      	str	r0, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800b568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b56c:	62d0      	str	r0, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800b56e:	6193      	str	r3, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800b570:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800b572:	60d3      	str	r3, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 800b574:	6053      	str	r3, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800b576:	6151      	str	r1, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800b578:	6011      	str	r1, [r2, #0]
  tmp->best       = (rtcnt_t)-1;
 800b57a:	9004      	str	r0, [sp, #16]
 800b57c:	7039      	strb	r1, [r7, #0]
  tmp->cumulative = (rttime_t)0;
 800b57e:	2000      	movs	r0, #0
 800b580:	2100      	movs	r1, #0
 800b582:	e9cd 0108 	strd	r0, r1, [sp, #32]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 800b586:	e9c7 3301 	strd	r3, r3, [r7, #4]
  tmp->last       = (rtcnt_t)0;
 800b58a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  tmp->n          = (ucnt_t)0;
 800b58e:	9307      	str	r3, [sp, #28]
}
 800b590:	2604      	movs	r6, #4
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 800b592:	a804      	add	r0, sp, #16
 800b594:	f7fa fb9c 	bl	8005cd0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800b598:	a804      	add	r0, sp, #16
 800b59a:	f7fa fba1 	bl	8005ce0 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 800b59e:	3e01      	subs	r6, #1
 800b5a0:	d1f7      	bne.n	800b592 <main+0x142>
  ch_memcore.basemem = __heap_base__;
 800b5a2:	4869      	ldr	r0, [pc, #420]	; (800b748 <main+0x2f8>)
 800b5a4:	4c69      	ldr	r4, [pc, #420]	; (800b74c <main+0x2fc>)
  ch_memcore.topmem  = __heap_end__;
 800b5a6:	496a      	ldr	r1, [pc, #424]	; (800b750 <main+0x300>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800b5a8:	4a6a      	ldr	r2, [pc, #424]	; (800b754 <main+0x304>)
  tcp->offset = tm.best;
 800b5aa:	9b04      	ldr	r3, [sp, #16]
 800b5ac:	6061      	str	r1, [r4, #4]
 800b5ae:	60bb      	str	r3, [r7, #8]
 */
void chCoreGetStatusX(memory_area_t *map) {

  map->base = ch_memcore.basemem;
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 800b5b0:	1a09      	subs	r1, r1, r0
  qp->next = qp;
 800b5b2:	4b69      	ldr	r3, [pc, #420]	; (800b758 <main+0x308>)
 800b5b4:	6091      	str	r1, [r2, #8]
  mp->provider = provider;
 800b5b6:	4969      	ldr	r1, [pc, #420]	; (800b75c <main+0x30c>)
 800b5b8:	6219      	str	r1, [r3, #32]
 800b5ba:	6399      	str	r1, [r3, #56]	; 0x38
 800b5bc:	f102 0114 	add.w	r1, r2, #20
  qp->prev = qp;
 800b5c0:	e9c2 1105 	strd	r1, r1, [r2, #20]
  mp->align = align;
 800b5c4:	2104      	movs	r1, #4
  ch_memcore.basemem = __heap_base__;
 800b5c6:	6020      	str	r0, [r4, #0]
 800b5c8:	61d9      	str	r1, [r3, #28]
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 800b5ca:	4c65      	ldr	r4, [pc, #404]	; (800b760 <main+0x310>)
 800b5cc:	6359      	str	r1, [r3, #52]	; 0x34
 800b5ce:	4965      	ldr	r1, [pc, #404]	; (800b764 <main+0x314>)
  mp->owner = NULL;
 800b5d0:	61d6      	str	r6, [r2, #28]
  H_FREE_PAGES(&default_heap.header) = 0;
 800b5d2:	e9c2 6603 	strd	r6, r6, [r2, #12]
  map->base = ch_memcore.basemem;
 800b5d6:	6050      	str	r0, [r2, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800b5d8:	6011      	str	r1, [r2, #0]

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 800b5da:	4a63      	ldr	r2, [pc, #396]	; (800b768 <main+0x318>)
 800b5dc:	6422      	str	r2, [r4, #64]	; 0x40
  dlp->next = (dyn_element_t *)dlp;
 800b5de:	f103 0210 	add.w	r2, r3, #16
 800b5e2:	611a      	str	r2, [r3, #16]
  mp->object_size = size;
 800b5e4:	2214      	movs	r2, #20
 800b5e6:	619a      	str	r2, [r3, #24]
 800b5e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b5ec:	625a      	str	r2, [r3, #36]	; 0x24
 800b5ee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800b5f2:	629a      	str	r2, [r3, #40]	; 0x28
 800b5f4:	221c      	movs	r2, #28
 800b5f6:	631a      	str	r2, [r3, #48]	; 0x30
 800b5f8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b5fc:	63da      	str	r2, [r3, #60]	; 0x3c
 800b5fe:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b602:	641a      	str	r2, [r3, #64]	; 0x40
 800b604:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800b608:	e9c3 3300 	strd	r3, r3, [r3]
 800b60c:	609e      	str	r6, [r3, #8]
  mp->next = NULL;
 800b60e:	615e      	str	r6, [r3, #20]
 800b610:	62de      	str	r6, [r3, #44]	; 0x2c
  ch_system.instances[core_id] = oip;
 800b612:	607c      	str	r4, [r7, #4]
  oip->core_id = core_id;
 800b614:	63a6      	str	r6, [r4, #56]	; 0x38
 800b616:	645a      	str	r2, [r3, #68]	; 0x44
 800b618:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b61c:	f38c 8811 	msr	BASEPRI, ip
  __ASM volatile ("cpsie i" : : : "memory");
 800b620:	b662      	cpsie	i
  tp->epending          = (eventmask_t)0;
 800b622:	e9c4 6636 	strd	r6, r6, [r4, #216]	; 0xd8
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b626:	4b51      	ldr	r3, [pc, #324]	; (800b76c <main+0x31c>)
  pqp->prio = (tprio_t)0;
 800b628:	60a6      	str	r6, [r4, #8]
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 800b62a:	63e6      	str	r6, [r4, #60]	; 0x3c

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 800b62c:	61e6      	str	r6, [r4, #28]
 800b62e:	68d9      	ldr	r1, [r3, #12]
    tp->owner           = tdp->owner;
 800b630:	f8c4 40a4 	str.w	r4, [r4, #164]	; 0xa4
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b634:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 800b638:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 800b63a:	4a4d      	ldr	r2, [pc, #308]	; (800b770 <main+0x320>)
 800b63c:	430a      	orrs	r2, r1
  tp->object            = NULL;
 800b63e:	e9c4 6630 	strd	r6, r6, [r4, #192]	; 0xc0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800b642:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800b644:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800b648:	494a      	ldr	r1, [pc, #296]	; (800b774 <main+0x324>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800b64a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b64e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800b652:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b654:	2020      	movs	r0, #32
 800b656:	f042 0201 	orr.w	r2, r2, #1
 800b65a:	600a      	str	r2, [r1, #0]
 800b65c:	77d8      	strb	r0, [r3, #31]
 800b65e:	f883 c022 	strb.w	ip, [r3, #34]	; 0x22
 800b662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  dlhp->next  = dlhp;
 800b666:	f104 0110 	add.w	r1, r4, #16
 800b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66c:	9303      	str	r3, [sp, #12]
  dlhp->prev  = dlhp;
 800b66e:	e9c4 1104 	strd	r1, r1, [r4, #16]
  tp->hdr.pqueue.prio   = tdp->prio;
 800b672:	2180      	movs	r1, #128	; 0x80
 800b674:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
  tp->realprio          = tdp->prio;
 800b678:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
  qp->next = qp;
 800b67c:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
  qp->prev = qp;
 800b680:	e9c4 1134 	strd	r1, r1, [r4, #208]	; 0xd0
  tp->wabase = (void *)tdp->wbase;
 800b684:	493c      	ldr	r1, [pc, #240]	; (800b778 <main+0x328>)
 800b686:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
  tp->waend  = (void *)tdp->wend;
 800b68a:	493c      	ldr	r1, [pc, #240]	; (800b77c <main+0x32c>)
 800b68c:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
  tp->name              = tdp->name;
 800b690:	493b      	ldr	r1, [pc, #236]	; (800b780 <main+0x330>)
 800b692:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  dlhp->delta = (sysinterval_t)-1;
 800b696:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b69a:	61a1      	str	r1, [r4, #24]
  lp->next = lp;
 800b69c:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
  tp->wabase = (void *)tdp->wbase;
 800b6a0:	4b38      	ldr	r3, [pc, #224]	; (800b784 <main+0x334>)
 800b6a2:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 800b6a6:	9803      	ldr	r0, [sp, #12]
    const THD_DECL(main_thd_desc,
                   "main", oicp->cstack_base, oicp->cstack_end,
                   NORMALPRIO, NULL, NULL, oip
    );

    oip->rlist.current = chThdObjectInit(&oip->mainthread, &main_thd_desc);
 800b6a8:	f104 0194 	add.w	r1, r4, #148	; 0x94
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800b6ac:	f04f 0802 	mov.w	r8, #2
 800b6b0:	60e1      	str	r1, [r4, #12]
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 800b6b2:	4631      	mov	r1, r6
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800b6b4:	f8c4 8020 	str.w	r8, [r4, #32]
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 800b6b8:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
  tp->waend  = (void *)tdp->wend;
 800b6bc:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800b6c0:	65e1      	str	r1, [r4, #92]	; 0x5c
 800b6c2:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 800b6c6:	67e1      	str	r1, [r4, #124]	; 0x7c
  tp->name              = tdp->name;
 800b6c8:	492f      	ldr	r1, [pc, #188]	; (800b788 <main+0x338>)
 800b6ca:	6661      	str	r1, [r4, #100]	; 0x64
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 800b6cc:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 800b6d0:	6521      	str	r1, [r4, #80]	; 0x50
 800b6d2:	492e      	ldr	r1, [pc, #184]	; (800b78c <main+0x33c>)
 800b6d4:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
 800b6d8:	492d      	ldr	r1, [pc, #180]	; (800b790 <main+0x340>)
 800b6da:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(oip, oip->rlist.current);
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 800b6de:	2201      	movs	r2, #1
  p->prev       = qp->prev;
 800b6e0:	eb04 0e0c 	add.w	lr, r4, ip
  p->prev->next = p;
 800b6e4:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 800b6e8:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
  qp->next = qp;
 800b6ec:	f104 0b80 	add.w	fp, r4, #128	; 0x80
  p->prev->next = p;
 800b6f0:	f104 0944 	add.w	r9, r4, #68	; 0x44
  tp->object            = NULL;
 800b6f4:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  tp->epending          = (eventmask_t)0;
 800b6f8:	e9c4 6622 	strd	r6, r6, [r4, #136]	; 0x88
  qp->prev = qp;
 800b6fc:	e9c4 bb20 	strd	fp, fp, [r4, #128]	; 0x80
  p->prev       = pqp->prev;
 800b700:	e9c4 4411 	strd	r4, r4, [r4, #68]	; 0x44
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 800b704:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
  p->prev       = qp->prev;
 800b708:	f8c4 e0bc 	str.w	lr, [r4, #188]	; 0xbc
  ch_system.state = ch_sys_running;
 800b70c:	f887 8000 	strb.w	r8, [r7]
  p->next       = qp;
 800b710:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  p->prev->next = p;
 800b714:	6321      	str	r1, [r4, #48]	; 0x30
  p->prev       = qp->prev;
 800b716:	66e1      	str	r1, [r4, #108]	; 0x6c
 800b718:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
 800b71c:	e03a      	b.n	800b794 <main+0x344>
 800b71e:	bf00      	nop
 800b720:	40023800 	.word	0x40023800
 800b724:	40007000 	.word	0x40007000
 800b728:	e000e100 	.word	0xe000e100
 800b72c:	200008e0 	.word	0x200008e0
 800b730:	20000aa8 	.word	0x20000aa8
 800b734:	0800e0f0 	.word	0x0800e0f0
 800b738:	080008b1 	.word	0x080008b1
 800b73c:	40004400 	.word	0x40004400
 800b740:	02aea540 	.word	0x02aea540
 800b744:	e0042000 	.word	0xe0042000
 800b748:	20002100 	.word	0x20002100
 800b74c:	20000aa0 	.word	0x20000aa0
 800b750:	20020000 	.word	0x20020000
 800b754:	20000adc 	.word	0x20000adc
 800b758:	20001f00 	.word	0x20001f00
 800b75c:	080009d1 	.word	0x080009d1
 800b760:	200009b8 	.word	0x200009b8
 800b764:	080008f1 	.word	0x080008f1
 800b768:	0800d9fc 	.word	0x0800d9fc
 800b76c:	e000ed00 	.word	0xe000ed00
 800b770:	05fa0300 	.word	0x05fa0300
 800b774:	e0001000 	.word	0xe0001000
 800b778:	20000400 	.word	0x20000400
 800b77c:	20000800 	.word	0x20000800
 800b780:	0800cfe0 	.word	0x0800cfe0
 800b784:	20001e00 	.word	0x20001e00
 800b788:	0800cfe8 	.word	0x0800cfe8
 800b78c:	080008c1 	.word	0x080008c1
 800b790:	080002d1 	.word	0x080002d1
  tp->refs              = (trefs_t)1;
 800b794:	f884 20b2 	strb.w	r2, [r4, #178]	; 0xb2
  tp->wabase = (void *)tdp->wbase;
 800b798:	65a3      	str	r3, [r4, #88]	; 0x58
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 800b79a:	f8c3 60e0 	str.w	r6, [r3, #224]	; 0xe0
  tp->hdr.pqueue.prio   = tdp->prio;
 800b79e:	64e2      	str	r2, [r4, #76]	; 0x4c
    tp->owner           = tdp->owner;
 800b7a0:	6564      	str	r4, [r4, #84]	; 0x54
  tp->realprio          = tdp->prio;
 800b7a2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  tp->refs              = (trefs_t)1;
 800b7a6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
  p->prev->next = p;
 800b7aa:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
  qp->prev      = p;
 800b7ae:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  tp->state = CH_STATE_READY;
 800b7b2:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
  pqp->prev     = p;
 800b7b6:	e9c4 9900 	strd	r9, r9, [r4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800b7ba:	f386 8811 	msr	BASEPRI, r6
 800b7be:	f38c 8811 	msr	BASEPRI, ip
  if (sdp->state == SD_STOP) {
 800b7c2:	7a2b      	ldrb	r3, [r5, #8]
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d109      	bne.n	800b7dc <main+0x38c>
      rccEnableUSART2(true);
 800b7c8:	4b33      	ldr	r3, [pc, #204]	; (800b898 <main+0x448>)
 800b7ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b7d0:	641a      	str	r2, [r3, #64]	; 0x40
 800b7d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b7d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b7d8:	661a      	str	r2, [r3, #96]	; 0x60
 800b7da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800b7dc:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800b7de:	492f      	ldr	r1, [pc, #188]	; (800b89c <main+0x44c>)
 800b7e0:	f503 4296 	add.w	r2, r3, #19200	; 0x4b00
 800b7e4:	fba1 1202 	umull	r1, r2, r1, r2
  USART_TypeDef *u = sdp->usart;
 800b7e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800b7ea:	0b12      	lsrs	r2, r2, #12
  u->BRR = brr;
 800b7ec:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800b7ee:	2240      	movs	r2, #64	; 0x40
 800b7f0:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800b7f6:	f242 122c 	movw	r2, #8492	; 0x212c
 800b7fa:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800b800:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800b802:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 800b804:	23ff      	movs	r3, #255	; 0xff
 800b806:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
    sdp->state = SD_READY;
 800b80a:	2302      	movs	r3, #2
 800b80c:	722b      	strb	r3, [r5, #8]
 800b80e:	f382 8811 	msr	BASEPRI, r2
    sdStart(&SD2, NULL);

    /*
    * Creates the blinker thread.
    */
    chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800b812:	4b23      	ldr	r3, [pc, #140]	; (800b8a0 <main+0x450>)
 800b814:	9200      	str	r2, [sp, #0]
 800b816:	4823      	ldr	r0, [pc, #140]	; (800b8a4 <main+0x454>)
 800b818:	4e23      	ldr	r6, [pc, #140]	; (800b8a8 <main+0x458>)
 800b81a:	4f24      	ldr	r7, [pc, #144]	; (800b8ac <main+0x45c>)
 800b81c:	f8df a090 	ldr.w	sl, [pc, #144]	; 800b8b0 <main+0x460>
    /*
    * Normal main() thread activity, in this demo it does nothing except
    * sleeping in a loop and check the button state.
    */
    while (true) {
        if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 800b820:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b8b4 <main+0x464>
  /* Output initialization using streams.*/
  chtest.stream  = stream;
  chtest.putchar = test_stream_putchar;

  /* Test execution.*/
  return test_execute_inner(tsp);
 800b824:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800b8b8 <main+0x468>
 800b828:	f8df b090 	ldr.w	fp, [pc, #144]	; 800b8bc <main+0x46c>
    chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800b82c:	2280      	movs	r2, #128	; 0x80
 800b82e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800b832:	f7f8 fea5 	bl	8004580 <chThdCreateStatic>
        if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 800b836:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b83a:	049b      	lsls	r3, r3, #18
 800b83c:	4640      	mov	r0, r8
 800b83e:	d408      	bmi.n	800b852 <main+0x402>
  chtest.putchar = test_stream_putchar;
 800b840:	e9c6 7508 	strd	r7, r5, [r6, #32]
  return test_execute_inner(tsp);
 800b844:	f7ff fc74 	bl	800b130 <test_execute_inner.isra.0>
 800b848:	4658      	mov	r0, fp
  chtest.putchar = test_stream_putchar;
 800b84a:	e9c6 7508 	strd	r7, r5, [r6, #32]
  return test_execute_inner(tsp);
 800b84e:	f7ff fc6f 	bl	800b130 <test_execute_inner.isra.0>
 800b852:	2330      	movs	r3, #48	; 0x30
 800b854:	f383 8811 	msr	BASEPRI, r3
  vtp->par     = par;
 800b858:	68e2      	ldr	r2, [r4, #12]
  vtp->reload  = (sysinterval_t)0;
 800b85a:	2300      	movs	r3, #0
  vt_enqueue(vtlp, vtp, delay);
 800b85c:	a804      	add	r0, sp, #16
 800b85e:	f241 3188 	movw	r1, #5000	; 0x1388
  vtp->func    = vtfunc;
 800b862:	e9cd a207 	strd	sl, r2, [sp, #28]
  vtp->reload  = (sysinterval_t)0;
 800b866:	9309      	str	r3, [sp, #36]	; 0x24
  vt_enqueue(vtlp, vtp, delay);
 800b868:	f7ff fab2 	bl	800add0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 800b86c:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 800b86e:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800b870:	2308      	movs	r3, #8
 800b872:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 800b874:	6803      	ldr	r3, [r0, #0]
 800b876:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 800b878:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 800b87a:	605c      	str	r4, [r3, #4]
 800b87c:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800b87e:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800b880:	f7f4 fd1e 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800b884:	9b04      	ldr	r3, [sp, #16]
      chVTDoResetI(&vt);
 800b886:	a804      	add	r0, sp, #16
    if (chVTIsArmedI(&vt)) {
 800b888:	b10b      	cbz	r3, 800b88e <main+0x43e>
      chVTDoResetI(&vt);
 800b88a:	f7f6 fdf1 	bl	8002470 <chVTDoResetI>
 800b88e:	2300      	movs	r3, #0
 800b890:	f383 8811 	msr	BASEPRI, r3
}
 800b894:	e7cf      	b.n	800b836 <main+0x3e6>
 800b896:	bf00      	nop
 800b898:	40023800 	.word	0x40023800
 800b89c:	1b4e81b5 	.word	0x1b4e81b5
 800b8a0:	0800ae81 	.word	0x0800ae81
 800b8a4:	20001f60 	.word	0x20001f60
 800b8a8:	20000ab4 	.word	0x20000ab4
 800b8ac:	080009f1 	.word	0x080009f1
 800b8b0:	08001551 	.word	0x08001551
 800b8b4:	40020800 	.word	0x40020800
 800b8b8:	0800e0b4 	.word	0x0800e0b4
 800b8bc:	0800dc34 	.word	0x0800dc34

0800b8c0 <chSemSignalWait.constprop.0.isra.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	2330      	movs	r3, #48	; 0x30
 800b8c4:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && ch_queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && ch_queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && ch_queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 800b8c8:	4b20      	ldr	r3, [pc, #128]	; (800b94c <chSemSignalWait.constprop.0.isra.0+0x8c>)
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	1c51      	adds	r1, r2, #1
 800b8ce:	2900      	cmp	r1, #0
 800b8d0:	6099      	str	r1, [r3, #8]
 800b8d2:	dd26      	ble.n	800b922 <chSemSignalWait.constprop.0.isra.0+0x62>
    chSchReadyI(threadref(ch_queue_fifo_remove(&sps->queue)))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 800b8d4:	2a00      	cmp	r2, #0
 800b8d6:	609a      	str	r2, [r3, #8]
 800b8d8:	db0c      	blt.n	800b8f4 <chSemSignalWait.constprop.0.isra.0+0x34>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800b8da:	4b1d      	ldr	r3, [pc, #116]	; (800b950 <chSemSignalWait.constprop.0.isra.0+0x90>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	6892      	ldr	r2, [r2, #8]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d901      	bls.n	800b8ec <chSemSignalWait.constprop.0.isra.0+0x2c>
    __sch_reschedule_ahead();
 800b8e8:	f7f6 fe8a 	bl	8002600 <__sch_reschedule_ahead.lto_priv.0>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	4a16      	ldr	r2, [pc, #88]	; (800b950 <chSemSignalWait.constprop.0.isra.0+0x90>)
  p->prev       = qp->prev;
 800b8f6:	6858      	ldr	r0, [r3, #4]
 800b8f8:	68d1      	ldr	r1, [r2, #12]
  otp->state = newstate;
 800b8fa:	2405      	movs	r4, #5
 800b8fc:	e9c1 3000 	strd	r3, r0, [r1]
  p->prev->next = p;
 800b900:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 800b902:	6810      	ldr	r0, [r2, #0]
 800b904:	770c      	strb	r4, [r1, #28]
  pqp->next       = p->next;
 800b906:	6804      	ldr	r4, [r0, #0]
    currtp->u.wtsemp = spw;
 800b908:	634b      	str	r3, [r1, #52]	; 0x34
  qp->prev      = p;
 800b90a:	6059      	str	r1, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800b90c:	2301      	movs	r3, #1
  pqp->next->prev = pqp;
 800b90e:	6062      	str	r2, [r4, #4]
  pqp->next       = p->next;
 800b910:	6014      	str	r4, [r2, #0]
 800b912:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 800b914:	60d0      	str	r0, [r2, #12]
  chSysSwitch(ntp, otp);
 800b916:	f7f4 fcd3 	bl	80002c0 <__port_switch>
 800b91a:	2300      	movs	r3, #0
 800b91c:	f383 8811 	msr	BASEPRI, r3
}
 800b920:	bd38      	pop	{r3, r4, r5, pc}
  ch_queue_t *p = qp->next;
 800b922:	6819      	ldr	r1, [r3, #0]
  qp->next       = p->next;
 800b924:	6808      	ldr	r0, [r1, #0]
 800b926:	6018      	str	r0, [r3, #0]
  qp->next->prev = qp;
 800b928:	6043      	str	r3, [r0, #4]
  tp->state = CH_STATE_READY;
 800b92a:	2400      	movs	r4, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800b92c:	6908      	ldr	r0, [r1, #16]
  } while (unlikely(pqp->prio >= p->prio));
 800b92e:	688d      	ldr	r5, [r1, #8]
  tp->state = CH_STATE_READY;
 800b930:	770c      	strb	r4, [r1, #28]
    pqp = pqp->next;
 800b932:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800b934:	6884      	ldr	r4, [r0, #8]
 800b936:	42ac      	cmp	r4, r5
 800b938:	d2fb      	bcs.n	800b932 <chSemSignalWait.constprop.0.isra.0+0x72>
  p->prev       = pqp->prev;
 800b93a:	6844      	ldr	r4, [r0, #4]
 800b93c:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 800b940:	6021      	str	r1, [r4, #0]
    chSchReadyI(threadref(ch_queue_fifo_remove(&sps->queue)))->u.rdymsg = MSG_OK;
 800b942:	2400      	movs	r4, #0
  pqp->prev     = p;
 800b944:	6041      	str	r1, [r0, #4]
 800b946:	634c      	str	r4, [r1, #52]	; 0x34
 800b948:	e7c4      	b.n	800b8d4 <chSemSignalWait.constprop.0.isra.0+0x14>
 800b94a:	bf00      	nop
 800b94c:	20000d0c 	.word	0x20000d0c
 800b950:	200009b8 	.word	0x200009b8
