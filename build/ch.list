
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08001491 	.word	0x08001491
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08000fc1 	.word	0x08000fc1
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	08000da1 	.word	0x08000da1
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4826      	ldr	r0, [pc, #152]	; (800027c <_crt0_entry+0x9c>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4825      	ldr	r0, [pc, #148]	; (8000280 <_crt0_entry+0xa0>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4825      	ldr	r0, [pc, #148]	; (8000284 <_crt0_entry+0xa4>)
                ldr     r1, =SCB_VTOR
 80001f0:	4925      	ldr	r1, [pc, #148]	; (8000288 <_crt0_entry+0xa8>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]
                movt    r1, #SCB_FPDSCR >> 16
                str     r0, [r1]
#endif

                /* CONTROL register initialization as configured.*/
                movs    r0, #CRT0_CONTROL_INIT
 80001f4:	2002      	movs	r0, #2
                msr     CONTROL, r0
 80001f6:	f380 8814 	msr	CONTROL, r0
                isb
 80001fa:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 80001fe:	f000 fd7f 	bl	8000d00 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000202:	f000 ff95 	bl	8001130 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000206:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800020a:	4920      	ldr	r1, [pc, #128]	; (800028c <_crt0_entry+0xac>)
                ldr     r2, =__main_stack_end__
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <_crt0_entry+0x9c>)
.Lmsloop:
                cmp     r1, r2
 800020e:	4291      	cmp	r1, r2
                itt     lo
 8000210:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000212:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lmsloop
 8000216:	e7fa      	bcc.n	800020e <_crt0_entry+0x2e>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000218:	491d      	ldr	r1, [pc, #116]	; (8000290 <_crt0_entry+0xb0>)
                ldr     r2, =__process_stack_end__
 800021a:	4a19      	ldr	r2, [pc, #100]	; (8000280 <_crt0_entry+0xa0>)
.Lpsloop:
                cmp     r1, r2
 800021c:	4291      	cmp	r1, r2
                itt     lo
 800021e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000220:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lpsloop
 8000224:	e7fa      	bcc.n	800021c <_crt0_entry+0x3c>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 8000226:	491b      	ldr	r1, [pc, #108]	; (8000294 <_crt0_entry+0xb4>)
                ldr     r2, =__data_base__
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <_crt0_entry+0xb8>)
                ldr     r3, =__data_end__
 800022a:	4b1c      	ldr	r3, [pc, #112]	; (800029c <_crt0_entry+0xbc>)
.Ldloop:
                cmp     r2, r3
 800022c:	429a      	cmp	r2, r3
                ittt    lo
 800022e:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000230:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000234:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     .Ldloop
 8000238:	e7f8      	bcc.n	800022c <_crt0_entry+0x4c>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 800023a:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 800023c:	4918      	ldr	r1, [pc, #96]	; (80002a0 <_crt0_entry+0xc0>)
                ldr     r2, =__bss_end__
 800023e:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <_crt0_entry+0xc4>)
.Lbloop:
                cmp     r1, r2
 8000240:	4291      	cmp	r1, r2
                itt     lo
 8000242:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000244:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lbloop
 8000248:	e7fa      	bcc.n	8000240 <_crt0_entry+0x60>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 800024a:	f000 fd71 	bl	8000d30 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800024e:	f000 fd5f 	bl	8000d10 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000252:	4c15      	ldr	r4, [pc, #84]	; (80002a8 <_crt0_entry+0xc8>)
                ldr     r5, =__init_array_end__
 8000254:	4d15      	ldr	r5, [pc, #84]	; (80002ac <_crt0_entry+0xcc>)
.Linitloop:
                cmp     r4, r5
 8000256:	42ac      	cmp	r4, r5
                bge     .Lendinitloop
 8000258:	da03      	bge.n	8000262 <_crt0_entry+0x82>
                ldr     r1, [r4], #4
 800025a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800025e:	4788      	blx	r1
                b       .Linitloop
 8000260:	e7f9      	b.n	8000256 <_crt0_entry+0x76>
.Lendinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000262:	f001 f925 	bl	80014b0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 8000266:	4c12      	ldr	r4, [pc, #72]	; (80002b0 <_crt0_entry+0xd0>)
                ldr     r5, =__fini_array_end__
 8000268:	4d12      	ldr	r5, [pc, #72]	; (80002b4 <_crt0_entry+0xd4>)
.Lfiniloop:
                cmp     r4, r5
 800026a:	42ac      	cmp	r4, r5
                bge     .Lendfiniloop
 800026c:	da03      	bge.n	8000276 <_crt0_entry+0x96>
                ldr     r1, [r4], #4
 800026e:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000272:	4788      	blx	r1
                b       .Lfiniloop
 8000274:	e7f9      	b.n	800026a <_crt0_entry+0x8a>
.Lendfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000276:	f000 bd53 	b.w	8000d20 <__default_exit>
 800027a:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 800027c:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000280:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000284:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000288:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	08001a98 	.word	0x08001a98
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 80002a0:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 80002a4:	20000ca0 	.word	0x20000ca0
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f001 f898 	bl	8001410 <chThdExit>
1:              b       1b
 80002e0:	e7fe      	b.n	80002e0 <__port_thread_start+0x10>

080002e2 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 80002e2:	f001 f875 	bl	80013d0 <chSchDoPreemption>

080002e6 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
1:              b       1b
 80002e8:	e7fe      	b.n	80002e8 <__port_exit_from_isr+0x2>
	...

080002ec <memcpy>:
 80002ec:	4684      	mov	ip, r0
 80002ee:	ea41 0300 	orr.w	r3, r1, r0
 80002f2:	f013 0303 	ands.w	r3, r3, #3
 80002f6:	d16d      	bne.n	80003d4 <memcpy+0xe8>
 80002f8:	3a40      	subs	r2, #64	; 0x40
 80002fa:	d341      	bcc.n	8000380 <memcpy+0x94>
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	3a40      	subs	r2, #64	; 0x40
 800037e:	d2bd      	bcs.n	80002fc <memcpy+0x10>
 8000380:	3230      	adds	r2, #48	; 0x30
 8000382:	d311      	bcc.n	80003a8 <memcpy+0xbc>
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	3a10      	subs	r2, #16
 80003a6:	d2ed      	bcs.n	8000384 <memcpy+0x98>
 80003a8:	320c      	adds	r2, #12
 80003aa:	d305      	bcc.n	80003b8 <memcpy+0xcc>
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	3a04      	subs	r2, #4
 80003b6:	d2f9      	bcs.n	80003ac <memcpy+0xc0>
 80003b8:	3204      	adds	r2, #4
 80003ba:	d008      	beq.n	80003ce <memcpy+0xe2>
 80003bc:	07d2      	lsls	r2, r2, #31
 80003be:	bf1c      	itt	ne
 80003c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003c4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003c8:	d301      	bcc.n	80003ce <memcpy+0xe2>
 80003ca:	880b      	ldrh	r3, [r1, #0]
 80003cc:	8003      	strh	r3, [r0, #0]
 80003ce:	4660      	mov	r0, ip
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	2a08      	cmp	r2, #8
 80003d6:	d313      	bcc.n	8000400 <memcpy+0x114>
 80003d8:	078b      	lsls	r3, r1, #30
 80003da:	d08d      	beq.n	80002f8 <memcpy+0xc>
 80003dc:	f010 0303 	ands.w	r3, r0, #3
 80003e0:	d08a      	beq.n	80002f8 <memcpy+0xc>
 80003e2:	f1c3 0304 	rsb	r3, r3, #4
 80003e6:	1ad2      	subs	r2, r2, r3
 80003e8:	07db      	lsls	r3, r3, #31
 80003ea:	bf1c      	itt	ne
 80003ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003f0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003f4:	d380      	bcc.n	80002f8 <memcpy+0xc>
 80003f6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003fa:	f820 3b02 	strh.w	r3, [r0], #2
 80003fe:	e77b      	b.n	80002f8 <memcpy+0xc>
 8000400:	3a04      	subs	r2, #4
 8000402:	d3d9      	bcc.n	80003b8 <memcpy+0xcc>
 8000404:	3a01      	subs	r2, #1
 8000406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800040a:	f800 3b01 	strb.w	r3, [r0], #1
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0x118>
 8000410:	780b      	ldrb	r3, [r1, #0]
 8000412:	7003      	strb	r3, [r0, #0]
 8000414:	784b      	ldrb	r3, [r1, #1]
 8000416:	7043      	strb	r3, [r0, #1]
 8000418:	788b      	ldrb	r3, [r1, #2]
 800041a:	7083      	strb	r3, [r0, #2]
 800041c:	4660      	mov	r0, ip
 800041e:	4770      	bx	lr

08000420 <memset>:
 8000420:	0783      	lsls	r3, r0, #30
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	d048      	beq.n	80004b8 <memset+0x98>
 8000426:	1e54      	subs	r4, r2, #1
 8000428:	2a00      	cmp	r2, #0
 800042a:	d03f      	beq.n	80004ac <memset+0x8c>
 800042c:	b2ca      	uxtb	r2, r1
 800042e:	4603      	mov	r3, r0
 8000430:	e001      	b.n	8000436 <memset+0x16>
 8000432:	3c01      	subs	r4, #1
 8000434:	d33a      	bcc.n	80004ac <memset+0x8c>
 8000436:	f803 2b01 	strb.w	r2, [r3], #1
 800043a:	079d      	lsls	r5, r3, #30
 800043c:	d1f9      	bne.n	8000432 <memset+0x12>
 800043e:	2c03      	cmp	r4, #3
 8000440:	d92d      	bls.n	800049e <memset+0x7e>
 8000442:	b2cd      	uxtb	r5, r1
 8000444:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000448:	2c0f      	cmp	r4, #15
 800044a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800044e:	d936      	bls.n	80004be <memset+0x9e>
 8000450:	f1a4 0210 	sub.w	r2, r4, #16
 8000454:	f022 0c0f 	bic.w	ip, r2, #15
 8000458:	f103 0e20 	add.w	lr, r3, #32
 800045c:	44e6      	add	lr, ip
 800045e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8000462:	f103 0210 	add.w	r2, r3, #16
 8000466:	e942 5504 	strd	r5, r5, [r2, #-16]
 800046a:	e942 5502 	strd	r5, r5, [r2, #-8]
 800046e:	3210      	adds	r2, #16
 8000470:	4572      	cmp	r2, lr
 8000472:	d1f8      	bne.n	8000466 <memset+0x46>
 8000474:	f10c 0201 	add.w	r2, ip, #1
 8000478:	f014 0f0c 	tst.w	r4, #12
 800047c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000480:	f004 0c0f 	and.w	ip, r4, #15
 8000484:	d013      	beq.n	80004ae <memset+0x8e>
 8000486:	f1ac 0304 	sub.w	r3, ip, #4
 800048a:	f023 0303 	bic.w	r3, r3, #3
 800048e:	3304      	adds	r3, #4
 8000490:	4413      	add	r3, r2
 8000492:	f842 5b04 	str.w	r5, [r2], #4
 8000496:	4293      	cmp	r3, r2
 8000498:	d1fb      	bne.n	8000492 <memset+0x72>
 800049a:	f00c 0403 	and.w	r4, ip, #3
 800049e:	b12c      	cbz	r4, 80004ac <memset+0x8c>
 80004a0:	b2ca      	uxtb	r2, r1
 80004a2:	441c      	add	r4, r3
 80004a4:	f803 2b01 	strb.w	r2, [r3], #1
 80004a8:	429c      	cmp	r4, r3
 80004aa:	d1fb      	bne.n	80004a4 <memset+0x84>
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	4664      	mov	r4, ip
 80004b0:	4613      	mov	r3, r2
 80004b2:	2c00      	cmp	r4, #0
 80004b4:	d1f4      	bne.n	80004a0 <memset+0x80>
 80004b6:	e7f9      	b.n	80004ac <memset+0x8c>
 80004b8:	4603      	mov	r3, r0
 80004ba:	4614      	mov	r4, r2
 80004bc:	e7bf      	b.n	800043e <memset+0x1e>
 80004be:	461a      	mov	r2, r3
 80004c0:	46a4      	mov	ip, r4
 80004c2:	e7e0      	b.n	8000486 <memset+0x66>
	...

080004d0 <_ctl>:
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
#endif
  }
  return HAL_RET_SUCCESS;
 80004d0:	2901      	cmp	r1, #1
}
 80004d2:	bf14      	ite	ne
 80004d4:	f06f 0013 	mvnne.w	r0, #19
 80004d8:	2000      	moveq	r0, #0
 80004da:	4770      	bx	lr
 80004dc:	0000      	movs	r0, r0
	...

080004e0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80004e0:	4a02      	ldr	r2, [pc, #8]	; (80004ec <notify2+0xc>)
 80004e2:	68d3      	ldr	r3, [r2, #12]
 80004e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80004e8:	60d3      	str	r3, [r2, #12]
}
 80004ea:	4770      	bx	lr
 80004ec:	40004400 	.word	0x40004400

080004f0 <__idle_thread>:
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 80004f0:	e7fe      	b.n	80004f0 <__idle_thread>
 80004f2:	bf00      	nop
	...

08000500 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000500:	4b01      	ldr	r3, [pc, #4]	; (8000508 <chTMStartMeasurementX+0x8>)
 8000502:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000504:	6083      	str	r3, [r0, #8]
}
 8000506:	4770      	bx	lr
 8000508:	e0001000 	.word	0xe0001000
 800050c:	00000000 	.word	0x00000000

08000510 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000510:	4a0e      	ldr	r2, [pc, #56]	; (800054c <chTMStopMeasurementX+0x3c>)
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8000514:	6881      	ldr	r1, [r0, #8]
 8000516:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000518:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 800051a:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800051c:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800051e:	1b1b      	subs	r3, r3, r4
 8000520:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8000522:	18d2      	adds	r2, r2, r3
 8000524:	6941      	ldr	r1, [r0, #20]
 8000526:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8000528:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 800052a:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800052c:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8000530:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000532:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000534:	bf88      	it	hi
 8000536:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000538:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 800053a:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 800053c:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000540:	6141      	str	r1, [r0, #20]
}
 8000542:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 8000544:	bf38      	it	cc
 8000546:	6003      	strcc	r3, [r0, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000ad0 	.word	0x20000ad0
 8000550:	e0001000 	.word	0xe0001000
	...

08000560 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000560:	b410      	push	{r4}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000562:	2330      	movs	r3, #48	; 0x30
 8000564:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <chCoreAllocFromTop+0x38>)
 800056a:	685c      	ldr	r4, [r3, #4]
 800056c:	4249      	negs	r1, r1
 800056e:	1a20      	subs	r0, r4, r0
 8000570:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000572:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 8000574:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000576:	428a      	cmp	r2, r1
 8000578:	d307      	bcc.n	800058a <chCoreAllocFromTop+0x2a>
 800057a:	4294      	cmp	r4, r2
 800057c:	d305      	bcc.n	800058a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	2300      	movs	r3, #0
 8000582:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000586:	bc10      	pop	{r4}
 8000588:	4770      	bx	lr
    return NULL;
 800058a:	2000      	movs	r0, #0
 800058c:	2300      	movs	r3, #0
 800058e:	f383 8811 	msr	BASEPRI, r3
}
 8000592:	bc10      	pop	{r4}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000ac8 	.word	0x20000ac8
 800059c:	00000000 	.word	0x00000000

080005a0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <chCoreAllocAlignedI+0x1c>)
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	4249      	negs	r1, r1
 80005a6:	1a10      	subs	r0, r2, r0
 80005a8:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80005aa:	6819      	ldr	r1, [r3, #0]
 80005ac:	4288      	cmp	r0, r1
 80005ae:	d303      	bcc.n	80005b8 <chCoreAllocAlignedI+0x18>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d301      	bcc.n	80005b8 <chCoreAllocAlignedI+0x18>
  ch_memcore.topmem = prev;
 80005b4:	6058      	str	r0, [r3, #4]
  return p;
 80005b6:	4770      	bx	lr
    return NULL;
 80005b8:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80005ba:	4770      	bx	lr
 80005bc:	20000ac8 	.word	0x20000ac8

080005c0 <chVTDoResetI>:
 * @notapi
 */
static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
                                    ch_delta_list_t *dlp) {

  return (bool)(dlhp->next == dlp);
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <chVTDoResetI+0xa4>)
 80005c2:	691a      	ldr	r2, [r3, #16]
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 80005c4:	4290      	cmp	r0, r2
void chVTDoResetI(virtual_timer_t *vtp) {
 80005c6:	b430      	push	{r4, r5}
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 80005c8:	d00e      	beq.n	80005e8 <chVTDoResetI+0x28>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 80005ca:	6802      	ldr	r2, [r0, #0]

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 80005cc:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
 80005d0:	6891      	ldr	r1, [r2, #8]
 80005d2:	6022      	str	r2, [r4, #0]
 80005d4:	4429      	add	r1, r5
 80005d6:	e9c2 4101 	strd	r4, r1, [r2, #4]

    /* Marking timer as not armed.*/
    vtp->dlist.next = NULL;
 80005da:	2100      	movs	r1, #0

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    vtp->dlist.next = NULL;
 80005e0:	6001      	str	r1, [r0, #0]
    vtlp->dlist.delta = (sysinterval_t)-1;
 80005e2:	619a      	str	r2, [r3, #24]
  delta = vtlp->dlist.next->delta - nowdelta;

  /* Setting up the alarm.*/
  vt_set_alarm(vtlp, now, delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80005e4:	bc30      	pop	{r4, r5}
 80005e6:	4770      	bx	lr
  dlhp->next       = dlp->next;
 80005e8:	461a      	mov	r2, r3
 80005ea:	6801      	ldr	r1, [r0, #0]
 80005ec:	f842 1f10 	str.w	r1, [r2, #16]!
  vtp->dlist.next = NULL;
 80005f0:	2500      	movs	r5, #0
  dlhp->next->prev = dlhp;
 80005f2:	604a      	str	r2, [r1, #4]
 80005f4:	6005      	str	r5, [r0, #0]
  return (bool)(dlhp == dlhp->next);
 80005f6:	691c      	ldr	r4, [r3, #16]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80005f8:	4294      	cmp	r4, r2
 80005fa:	d02c      	beq.n	8000656 <chVTDoResetI+0x96>
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80005fc:	68a2      	ldr	r2, [r4, #8]
 80005fe:	6881      	ldr	r1, [r0, #8]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000600:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8000604:	4411      	add	r1, r2
 8000606:	60a1      	str	r1, [r4, #8]
 8000608:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 800060c:	69da      	ldr	r2, [r3, #28]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800060e:	1a84      	subs	r4, r0, r2
  if (nowdelta >= vtlp->dlist.next->delta) {
 8000610:	42a1      	cmp	r1, r4
 8000612:	d9e7      	bls.n	80005e4 <chVTDoResetI+0x24>
  currdelta = vtlp->lastdelta;
 8000614:	6a1c      	ldr	r4, [r3, #32]
  delta = vtlp->dlist.next->delta - nowdelta;
 8000616:	1a12      	subs	r2, r2, r0
 8000618:	440a      	add	r2, r1
 800061a:	42a2      	cmp	r2, r4
 800061c:	bf38      	it	cc
 800061e:	4622      	movcc	r2, r4
  return systime + (systime_t)interval;
 8000620:	1881      	adds	r1, r0, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000622:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000626:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800062a:	1a08      	subs	r0, r1, r0
    if (likely(nowdelta < delay)) {
 800062c:	4282      	cmp	r2, r0
 800062e:	bf98      	it	ls
 8000630:	4620      	movls	r0, r4
 8000632:	d8d7      	bhi.n	80005e4 <chVTDoResetI+0x24>
    currdelta += (sysinterval_t)1;
 8000634:	3001      	adds	r0, #1
  return systime + (systime_t)interval;
 8000636:	180a      	adds	r2, r1, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000638:	f8cc 2034 	str.w	r2, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800063c:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000640:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 8000642:	4281      	cmp	r1, r0
 8000644:	d20b      	bcs.n	800065e <chVTDoResetI+0x9e>
  if (currdelta > vtlp->lastdelta) {
 8000646:	4284      	cmp	r4, r0
 8000648:	d2cc      	bcs.n	80005e4 <chVTDoResetI+0x24>
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 800064a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    vtlp->lastdelta = currdelta;
 800064c:	6218      	str	r0, [r3, #32]
 800064e:	f042 0201 	orr.w	r2, r2, #1
 8000652:	63da      	str	r2, [r3, #60]	; 0x3c
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8000654:	e7c6      	b.n	80005e4 <chVTDoResetI+0x24>
  STM32_ST_TIM->DIER = 0U;
 8000656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800065a:	60dd      	str	r5, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 800065c:	e7c2      	b.n	80005e4 <chVTDoResetI+0x24>
  return (systime_t)STM32_ST_TIM->CNT;
 800065e:	4611      	mov	r1, r2
 8000660:	e7e8      	b.n	8000634 <chVTDoResetI+0x74>
 8000662:	bf00      	nop
 8000664:	20000888 	.word	0x20000888
	...

08000670 <__sch_wakeup>:
 8000670:	2330      	movs	r3, #48	; 0x30
 8000672:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8000676:	7f0b      	ldrb	r3, [r1, #28]
 8000678:	2b0c      	cmp	r3, #12
 800067a:	d810      	bhi.n	800069e <__sch_wakeup+0x2e>
 800067c:	e8df f003 	tbb	[pc, r3]
 8000680:	250f0f29 	.word	0x250f0f29
 8000684:	0b0f070b 	.word	0x0b0f070b
 8000688:	0f0f0f0f 	.word	0x0f0f0f0f
 800068c:	0b          	.byte	0x0b
 800068d:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800068e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000690:	6893      	ldr	r3, [r2, #8]
 8000692:	3301      	adds	r3, #1
 8000694:	6093      	str	r3, [r2, #8]
  p->prev->next = p->next;
 8000696:	e9d1 3200 	ldrd	r3, r2, [r1]
 800069a:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800069c:	605a      	str	r2, [r3, #4]
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 800069e:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80006a0:	2200      	movs	r2, #0
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 80006a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80006a6:	690b      	ldr	r3, [r1, #16]
  } while (unlikely(pqp->prio >= p->prio));
 80006a8:	6888      	ldr	r0, [r1, #8]
  tp->u.rdymsg = MSG_TIMEOUT;
 80006aa:	634c      	str	r4, [r1, #52]	; 0x34
  tp->state = CH_STATE_READY;
 80006ac:	770a      	strb	r2, [r1, #28]
    pqp = pqp->next;
 80006ae:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	4282      	cmp	r2, r0
 80006b4:	d2fb      	bcs.n	80006ae <__sch_wakeup+0x3e>
  p->prev       = pqp->prev;
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	2000      	movs	r0, #0
 80006ba:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80006be:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80006c0:	6059      	str	r1, [r3, #4]
 80006c2:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 80006c6:	bc10      	pop	{r4}
 80006c8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80006ca:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
    break;
 80006d0:	e7e5      	b.n	800069e <__sch_wakeup+0x2e>
 80006d2:	2300      	movs	r3, #0
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	0000      	movs	r0, r0
	...

080006e0 <chEvtBroadcastFlagsI.constprop.0>:
 * @param[in] esp       pointer to an @p event_source_t object
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80006e0:	b4f0      	push	{r4, r5, r6, r7}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80006e2:	4c1c      	ldr	r4, [pc, #112]	; (8000754 <chEvtBroadcastFlagsI.constprop.0+0x74>)
 80006e4:	f854 3f04 	ldr.w	r3, [r4, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80006e8:	42a3      	cmp	r3, r4
 80006ea:	d02b      	beq.n	8000744 <chEvtBroadcastFlagsI.constprop.0+0x64>
    tp->u.rdymsg = MSG_OK;
 80006ec:	2600      	movs	r6, #0
 80006ee:	e005      	b.n	80006fc <chEvtBroadcastFlagsI.constprop.0+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80006f0:	f1bc 0f0b 	cmp.w	ip, #11
 80006f4:	d028      	beq.n	8000748 <chEvtBroadcastFlagsI.constprop.0+0x68>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 80006f6:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 80006f8:	42a3      	cmp	r3, r4
 80006fa:	d023      	beq.n	8000744 <chEvtBroadcastFlagsI.constprop.0+0x64>
    elp->flags |= flags;
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	4302      	orrs	r2, r0
 8000700:	60da      	str	r2, [r3, #12]
    if ((flags == (eventflags_t)0) ||
 8000702:	b110      	cbz	r0, 800070a <chEvtBroadcastFlagsI.constprop.0+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000704:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000706:	4210      	tst	r0, r2
 8000708:	d0f5      	beq.n	80006f6 <chEvtBroadcastFlagsI.constprop.0+0x16>
  tp->epending |= events;
 800070a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 800070e:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000710:	f892 c01c 	ldrb.w	ip, [r2, #28]
  tp->epending |= events;
 8000714:	4329      	orrs	r1, r5
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000716:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 800071a:	6451      	str	r1, [r2, #68]	; 0x44
  if (((tp->state == CH_STATE_WTOREVT) &&
 800071c:	d1e8      	bne.n	80006f0 <chEvtBroadcastFlagsI.constprop.0+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800071e:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000720:	4229      	tst	r1, r5
 8000722:	d0e8      	beq.n	80006f6 <chEvtBroadcastFlagsI.constprop.0+0x16>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000724:	6911      	ldr	r1, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8000726:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8000728:	6356      	str	r6, [r2, #52]	; 0x34
  tp->state = CH_STATE_READY;
 800072a:	7716      	strb	r6, [r2, #28]
    pqp = pqp->next;
 800072c:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800072e:	688d      	ldr	r5, [r1, #8]
 8000730:	42bd      	cmp	r5, r7
 8000732:	d2fb      	bcs.n	800072c <chEvtBroadcastFlagsI.constprop.0+0x4c>
    elp = elp->next;
 8000734:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8000736:	684d      	ldr	r5, [r1, #4]
  while (elp != (event_listener_t *)esp) {
 8000738:	42a3      	cmp	r3, r4
 800073a:	e9c2 1500 	strd	r1, r5, [r2]
  p->prev->next = p;
 800073e:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8000740:	604a      	str	r2, [r1, #4]
 8000742:	d1db      	bne.n	80006fc <chEvtBroadcastFlagsI.constprop.0+0x1c>
  }
}
 8000744:	bcf0      	pop	{r4, r5, r6, r7}
 8000746:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000748:	6b55      	ldr	r5, [r2, #52]	; 0x34
      ((tp->state == CH_STATE_WTANDEVT) &&
 800074a:	ea35 0101 	bics.w	r1, r5, r1
 800074e:	d1d2      	bne.n	80006f6 <chEvtBroadcastFlagsI.constprop.0+0x16>
 8000750:	e7e8      	b.n	8000724 <chEvtBroadcastFlagsI.constprop.0+0x44>
 8000752:	bf00      	nop
 8000754:	20000800 	.word	0x20000800
	...

08000760 <vt_insert_first.constprop.0>:
  vtlp->lasttime = now;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <vt_insert_first.constprop.0+0x64>)
static void vt_insert_first(virtual_timers_list_t *vtlp,
 8000762:	b470      	push	{r4, r5, r6}
  dlp->prev       = dlhp;
 8000764:	f103 0410 	add.w	r4, r3, #16
  vtlp->lasttime = now;
 8000768:	61d9      	str	r1, [r3, #28]
 800076a:	e9c0 4201 	strd	r4, r2, [r0, #4]
  dlp->next       = dlp->prev->next;
 800076e:	691c      	ldr	r4, [r3, #16]
 8000770:	6004      	str	r4, [r0, #0]
  dlp->next->prev = dlp;
 8000772:	6060      	str	r0, [r4, #4]
  currdelta = vtlp->lastdelta;
 8000774:	6a1c      	ldr	r4, [r3, #32]
  dlhp->next      = dlp;
 8000776:	6118      	str	r0, [r3, #16]
 8000778:	42a2      	cmp	r2, r4
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800077a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800077e:	bf38      	it	cc
 8000780:	4622      	movcc	r2, r4
  return systime + (systime_t)interval;
 8000782:	188d      	adds	r5, r1, r2
 8000784:	6345      	str	r5, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000786:	2500      	movs	r5, #0
 8000788:	6105      	str	r5, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800078a:	2502      	movs	r5, #2
 800078c:	60c5      	str	r5, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 800078e:	6a45      	ldr	r5, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000790:	eba5 0c01 	sub.w	ip, r5, r1
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8000794:	4594      	cmp	ip, r2
  currdelta = vtlp->lastdelta;
 8000796:	bf28      	it	cs
 8000798:	4626      	movcs	r6, r4
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 800079a:	d203      	bcs.n	80007a4 <vt_insert_first.constprop.0+0x44>
}
 800079c:	bc70      	pop	{r4, r5, r6}
 800079e:	4770      	bx	lr
 80007a0:	4629      	mov	r1, r5
 80007a2:	4615      	mov	r5, r2
    currdelta += (sysinterval_t)1;
 80007a4:	3601      	adds	r6, #1
  return systime + (systime_t)interval;
 80007a6:	4431      	add	r1, r6
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80007a8:	6341      	str	r1, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80007aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80007ac:	1b51      	subs	r1, r2, r5
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 80007ae:	42b1      	cmp	r1, r6
 80007b0:	d2f6      	bcs.n	80007a0 <vt_insert_first.constprop.0+0x40>
  if (currdelta > vtlp->lastdelta) {
 80007b2:	42b4      	cmp	r4, r6
 80007b4:	d2f2      	bcs.n	800079c <vt_insert_first.constprop.0+0x3c>
  currcore->rfcu.mask |= mask;
 80007b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    vtlp->lastdelta = currdelta;
 80007b8:	621e      	str	r6, [r3, #32]
 80007ba:	f042 0201 	orr.w	r2, r2, #1
}
 80007be:	bc70      	pop	{r4, r5, r6}
 80007c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80007c2:	4770      	bx	lr
 80007c4:	20000888 	.word	0x20000888
	...

080007d0 <vt_enqueue.constprop.0>:
static void vt_enqueue(virtual_timers_list_t *vtlp,
 80007d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  return (bool)(dlhp == dlhp->next);
 80007d2:	4e28      	ldr	r6, [pc, #160]	; (8000874 <vt_enqueue.constprop.0+0xa4>)
 80007d4:	4633      	mov	r3, r6
 80007d6:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 80007da:	f853 2f10 	ldr.w	r2, [r3, #16]!
 80007de:	f8dc 7024 	ldr.w	r7, [ip, #36]	; 0x24
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d03e      	beq.n	8000864 <vt_enqueue.constprop.0+0x94>
 80007e6:	69f3      	ldr	r3, [r6, #28]
    if (delta < vtlp->dlist.next->delta) {
 80007e8:	6894      	ldr	r4, [r2, #8]
 80007ea:	1afb      	subs	r3, r7, r3
      delta = delay;
 80007ec:	18cb      	adds	r3, r1, r3
 80007ee:	bf28      	it	cs
 80007f0:	460b      	movcs	r3, r1
    if (delta < vtlp->dlist.next->delta) {
 80007f2:	429c      	cmp	r4, r3
 80007f4:	4605      	mov	r5, r0
 80007f6:	d903      	bls.n	8000800 <vt_enqueue.constprop.0+0x30>
 80007f8:	e011      	b.n	800081e <vt_enqueue.constprop.0+0x4e>
    dlp = dlp->next;
 80007fa:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 80007fc:	1b1b      	subs	r3, r3, r4
  while (likely(dlp->delta < delta)) {
 80007fe:	6894      	ldr	r4, [r2, #8]
 8000800:	429c      	cmp	r4, r3
 8000802:	d3fa      	bcc.n	80007fa <vt_enqueue.constprop.0+0x2a>
  dlp->prev       = dlp->next->prev;
 8000804:	6851      	ldr	r1, [r2, #4]
  dlp->delta      = delta;
 8000806:	60ab      	str	r3, [r5, #8]
  dlp->prev       = dlp->next->prev;
 8000808:	e9c5 2100 	strd	r2, r1, [r5]
  dlp->prev->next = dlp;
 800080c:	600d      	str	r5, [r1, #0]
  dlp->delta -= delta;
 800080e:	6891      	ldr	r1, [r2, #8]
  dlhp->prev      = dlp;
 8000810:	6055      	str	r5, [r2, #4]
  dlp->delta -= delta;
 8000812:	1acb      	subs	r3, r1, r3
  dlhp->delta = (sysinterval_t)-1;
 8000814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  dlp->delta -= delta;
 8000818:	6093      	str	r3, [r2, #8]
  dlhp->delta = (sysinterval_t)-1;
 800081a:	61b1      	str	r1, [r6, #24]
}
 800081c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  currdelta = vtlp->lastdelta;
 800081e:	6a30      	ldr	r0, [r6, #32]
 8000820:	4281      	cmp	r1, r0
 8000822:	bf38      	it	cc
 8000824:	4601      	movcc	r1, r0
  return systime + (systime_t)interval;
 8000826:	eb07 0e01 	add.w	lr, r7, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800082a:	f8cc e034 	str.w	lr, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800082e:	f8dc e024 	ldr.w	lr, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000832:	ebae 0707 	sub.w	r7, lr, r7
    if (likely(nowdelta < delay)) {
 8000836:	428f      	cmp	r7, r1
 8000838:	bf28      	it	cs
 800083a:	4601      	movcs	r1, r0
 800083c:	d3e0      	bcc.n	8000800 <vt_enqueue.constprop.0+0x30>
    currdelta += (sysinterval_t)1;
 800083e:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 8000840:	eb0e 0701 	add.w	r7, lr, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000844:	f8cc 7034 	str.w	r7, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000848:	f8dc 7024 	ldr.w	r7, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800084c:	eba7 0e0e 	sub.w	lr, r7, lr
    if (likely(nowdelta < delay)) {
 8000850:	458e      	cmp	lr, r1
 8000852:	d20d      	bcs.n	8000870 <vt_enqueue.constprop.0+0xa0>
  if (currdelta > vtlp->lastdelta) {
 8000854:	4288      	cmp	r0, r1
 8000856:	d2d3      	bcs.n	8000800 <vt_enqueue.constprop.0+0x30>
    vtlp->lastdelta = currdelta;
 8000858:	6231      	str	r1, [r6, #32]
 800085a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 800085c:	f041 0101 	orr.w	r1, r1, #1
 8000860:	63f1      	str	r1, [r6, #60]	; 0x3c
}
 8000862:	e7cd      	b.n	8000800 <vt_enqueue.constprop.0+0x30>
      vt_insert_first(vtlp, vtp, now, delay);
 8000864:	460a      	mov	r2, r1
 8000866:	4639      	mov	r1, r7
}
 8000868:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      vt_insert_first(vtlp, vtp, now, delay);
 800086c:	f7ff bf78 	b.w	8000760 <vt_insert_first.constprop.0>
 8000870:	46be      	mov	lr, r7
 8000872:	e7e4      	b.n	800083e <vt_enqueue.constprop.0+0x6e>
 8000874:	20000888 	.word	0x20000888
	...

08000880 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000880:	b570      	push	{r4, r5, r6, lr}
  thread_t *tp = __instance_get_currthread(currcore);
 8000882:	4c17      	ldr	r4, [pc, #92]	; (80008e0 <chSchGoSleepTimeoutS+0x60>)

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8000884:	1c4b      	adds	r3, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 8000886:	68e6      	ldr	r6, [r4, #12]
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000888:	b086      	sub	sp, #24
 800088a:	4605      	mov	r5, r0
  if (TIME_INFINITE != timeout) {
 800088c:	d01a      	beq.n	80008c4 <chSchGoSleepTimeoutS+0x44>
  vtp->func    = vtfunc;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <chSchGoSleepTimeoutS+0x64>)
  vt_enqueue(vtlp, vtp, delay);
 8000890:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 8000892:	e9cd 3603 	strd	r3, r6, [sp, #12]
  vtp->reload  = (sysinterval_t)0;
 8000896:	2300      	movs	r3, #0
 8000898:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 800089a:	f7ff ff99 	bl	80007d0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 800089e:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80008a0:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80008a2:	770d      	strb	r5, [r1, #28]
  pqp->next       = p->next;
 80008a4:	6803      	ldr	r3, [r0, #0]
 80008a6:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 80008a8:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80008aa:	2301      	movs	r3, #1
 80008ac:	7703      	strb	r3, [r0, #28]
  __instance_set_currthread(oip, ntp);
 80008ae:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80008b0:	f7ff fd06 	bl	80002c0 <__port_switch>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt)) {
 80008b4:	9b00      	ldr	r3, [sp, #0]
 80008b6:	b113      	cbz	r3, 80008be <chSchGoSleepTimeoutS+0x3e>
      chVTDoResetI(&vt);
 80008b8:	4668      	mov	r0, sp
 80008ba:	f7ff fe81 	bl	80005c0 <chVTDoResetI>
  else {
    chSchGoSleepS(newstate);
  }

  return tp->u.rdymsg;
}
 80008be:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80008c0:	b006      	add	sp, #24
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
  ch_priority_queue_t *p = pqp->next;
 80008c4:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80008c6:	7735      	strb	r5, [r6, #28]
  pqp->next       = p->next;
 80008c8:	6803      	ldr	r3, [r0, #0]
 80008ca:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 80008cc:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 80008ce:	605c      	str	r4, [r3, #4]
  chSysSwitch(ntp, otp);
 80008d0:	4631      	mov	r1, r6
  ntp->state = CH_STATE_CURRENT;
 80008d2:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 80008d4:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80008d6:	f7ff fcf3 	bl	80002c0 <__port_switch>
}
 80008da:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80008dc:	b006      	add	sp, #24
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	20000888 	.word	0x20000888
 80008e4:	08000671 	.word	0x08000671
	...

080008f0 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 80008f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f4:	b083      	sub	sp, #12
  qnotify_t nfy = iqp->q_notify;
 80008f6:	69c7      	ldr	r7, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	4699      	mov	r9, r3
 80008fc:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8000900:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000904:	2a00      	cmp	r2, #0
 8000906:	d033      	beq.n	8000970 <iqReadTimeout+0x80>
 8000908:	f8dd b004 	ldr.w	fp, [sp, #4]
 800090c:	4604      	mov	r4, r0
 800090e:	460e      	mov	r6, r1
  if (n > iqGetFullI(iqp)) {
 8000910:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000912:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8000914:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000916:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8000918:	bf8c      	ite	hi
 800091a:	68a5      	ldrhi	r5, [r4, #8]
 800091c:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800091e:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8000922:	45a8      	cmp	r8, r5
 8000924:	d84f      	bhi.n	80009c6 <iqReadTimeout+0xd6>
  else if (n > s1) {
 8000926:	d22a      	bcs.n	800097e <iqReadTimeout+0x8e>
    s2 = n - s1;
 8000928:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800092c:	4642      	mov	r2, r8
 800092e:	4630      	mov	r0, r6
    s2 = n - s1;
 8000930:	9300      	str	r3, [sp, #0]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000932:	f7ff fcdb 	bl	80002ec <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8000936:	eb06 0008 	add.w	r0, r6, r8
 800093a:	f8dd 8000 	ldr.w	r8, [sp]
 800093e:	68e1      	ldr	r1, [r4, #12]
 8000940:	4642      	mov	r2, r8
 8000942:	f7ff fcd3 	bl	80002ec <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000946:	68e2      	ldr	r2, [r4, #12]
 8000948:	4442      	add	r2, r8
 800094a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800094c:	68a2      	ldr	r2, [r4, #8]
 800094e:	1b52      	subs	r2, r2, r5
 8000950:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
 8000952:	b1fd      	cbz	r5, 8000994 <iqReadTimeout+0xa4>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8000954:	b10f      	cbz	r7, 800095a <iqReadTimeout+0x6a>
        nfy(iqp);
 8000956:	4620      	mov	r0, r4
 8000958:	47b8      	blx	r7
 800095a:	2300      	movs	r3, #0
 800095c:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000960:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8000964:	442e      	add	r6, r5
 8000966:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 800096a:	f1bb 0f00 	cmp.w	fp, #0
 800096e:	d1cf      	bne.n	8000910 <iqReadTimeout+0x20>
 8000970:	9801      	ldr	r0, [sp, #4]
 8000972:	2300      	movs	r3, #0
 8000974:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000978:	b003      	add	sp, #12
 800097a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800097e:	462a      	mov	r2, r5
 8000980:	4630      	mov	r0, r6
 8000982:	f7ff fcb3 	bl	80002ec <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8000986:	68e2      	ldr	r2, [r4, #12]
 8000988:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800098a:	68a2      	ldr	r2, [r4, #8]
 800098c:	1b52      	subs	r2, r2, r5
 800098e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8000990:	2d00      	cmp	r5, #0
 8000992:	d1df      	bne.n	8000954 <iqReadTimeout+0x64>
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <iqReadTimeout+0xe8>)
 8000996:	68da      	ldr	r2, [r3, #12]
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8000998:	f1b9 0f00 	cmp.w	r9, #0
 800099c:	d00a      	beq.n	80009b4 <iqReadTimeout+0xc4>
  p->prev       = qp->prev;
 800099e:	6861      	ldr	r1, [r4, #4]
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80009a0:	2004      	movs	r0, #4
 80009a2:	e9c2 4100 	strd	r4, r1, [r2]
  p->prev->next = p;
 80009a6:	600a      	str	r2, [r1, #0]
 80009a8:	4649      	mov	r1, r9
  qp->prev      = p;
 80009aa:	6062      	str	r2, [r4, #4]
 80009ac:	f7ff ff68 	bl	8000880 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d0ad      	beq.n	8000910 <iqReadTimeout+0x20>
  return max - n;
 80009b4:	9b01      	ldr	r3, [sp, #4]
 80009b6:	eba3 000b 	sub.w	r0, r3, fp
 80009ba:	2300      	movs	r3, #0
 80009bc:	f383 8811 	msr	BASEPRI, r3
}
 80009c0:	b003      	add	sp, #12
 80009c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80009c6:	462a      	mov	r2, r5
 80009c8:	4630      	mov	r0, r6
 80009ca:	f7ff fc8f 	bl	80002ec <memcpy>
    iqp->q_rdptr += n;
 80009ce:	69a2      	ldr	r2, [r4, #24]
 80009d0:	442a      	add	r2, r5
 80009d2:	61a2      	str	r2, [r4, #24]
 80009d4:	e7ba      	b.n	800094c <iqReadTimeout+0x5c>
 80009d6:	bf00      	nop
 80009d8:	20000888 	.word	0x20000888
 80009dc:	00000000 	.word	0x00000000

080009e0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009e4:	300c      	adds	r0, #12
 80009e6:	f7ff bf83 	b.w	80008f0 <iqReadTimeout>
 80009ea:	bf00      	nop
 80009ec:	0000      	movs	r0, r0
	...

080009f0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80009f0:	300c      	adds	r0, #12
 80009f2:	f7ff bf7d 	b.w	80008f0 <iqReadTimeout>
 80009f6:	bf00      	nop
	...

08000a00 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	2330      	movs	r3, #48	; 0x30
 8000a04:	4604      	mov	r4, r0
 8000a06:	460d      	mov	r5, r1
 8000a08:	f383 8811 	msr	BASEPRI, r3
 8000a0c:	4e16      	ldr	r6, [pc, #88]	; (8000a68 <iqGetTimeout+0x68>)
 * @special
 */
static inline void osalSysLock(void) {

  chSysLock();
}
 8000a0e:	e008      	b.n	8000a22 <iqGetTimeout+0x22>
  p->prev       = qp->prev;
 8000a10:	6862      	ldr	r2, [r4, #4]
 8000a12:	e9c3 4200 	strd	r4, r2, [r3]
  p->prev->next = p;
 8000a16:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8000a18:	6063      	str	r3, [r4, #4]
 8000a1a:	f7ff ff31 	bl	8000880 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	db08      	blt.n	8000a34 <iqGetTimeout+0x34>
  while (iqIsEmptyI(iqp)) {
 8000a22:	68a3      	ldr	r3, [r4, #8]
 8000a24:	4629      	mov	r1, r5
 8000a26:	2004      	movs	r0, #4
 8000a28:	b943      	cbnz	r3, 8000a3c <iqGetTimeout+0x3c>
 8000a2a:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8000a2c:	2d00      	cmp	r5, #0
 8000a2e:	d1ef      	bne.n	8000a10 <iqGetTimeout+0x10>
    return MSG_TIMEOUT;
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a34:	2300      	movs	r3, #0
 8000a36:	f383 8811 	msr	BASEPRI, r3
}
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
  iqp->q_counter--;
 8000a3c:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000a3e:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8000a40:	3b01      	subs	r3, #1
 8000a42:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000a44:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 8000a46:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000a48:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 8000a4a:	bf28      	it	cs
 8000a4c:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8000a4e:	61a2      	str	r2, [r4, #24]
 8000a50:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000a52:	bf28      	it	cs
 8000a54:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8000a56:	69e3      	ldr	r3, [r4, #28]
 8000a58:	b10b      	cbz	r3, 8000a5e <iqGetTimeout+0x5e>
    iqp->q_notify(iqp);
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	4798      	blx	r3
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8000a64:	4628      	mov	r0, r5
}
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	20000888 	.word	0x20000888
 8000a6c:	00000000 	.word	0x00000000

08000a70 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a74:	300c      	adds	r0, #12
 8000a76:	f7ff bfc3 	b.w	8000a00 <iqGetTimeout>
 8000a7a:	bf00      	nop
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000a80:	300c      	adds	r0, #12
 8000a82:	f7ff bfbd 	b.w	8000a00 <iqGetTimeout>
 8000a86:	bf00      	nop
	...

08000a90 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a94:	2330      	movs	r3, #48	; 0x30
 8000a96:	4604      	mov	r4, r0
 8000a98:	460f      	mov	r7, r1
 8000a9a:	4616      	mov	r6, r2
 8000a9c:	f383 8811 	msr	BASEPRI, r3
 8000aa0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8000b04 <oqPutTimeout+0x74>
 8000aa4:	e008      	b.n	8000ab8 <oqPutTimeout+0x28>
  p->prev       = qp->prev;
 8000aa6:	6865      	ldr	r5, [r4, #4]
 8000aa8:	e9c3 4500 	strd	r4, r5, [r3]
  p->prev->next = p;
 8000aac:	602b      	str	r3, [r5, #0]
  qp->prev      = p;
 8000aae:	6063      	str	r3, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000ab0:	f7ff fee6 	bl	8000880 <chSchGoSleepTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	db09      	blt.n	8000acc <oqPutTimeout+0x3c>
  while (oqIsFullI(oqp)) {
 8000ab8:	68a3      	ldr	r3, [r4, #8]
 8000aba:	4631      	mov	r1, r6
 8000abc:	2004      	movs	r0, #4
 8000abe:	b953      	cbnz	r3, 8000ad6 <oqPutTimeout+0x46>
 8000ac0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d1ee      	bne.n	8000aa6 <oqPutTimeout+0x16>
    return MSG_TIMEOUT;
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000acc:	2300      	movs	r3, #0
 8000ace:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return MSG_OK;
}
 8000ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *oqp->q_wrptr++ = b;
 8000ad6:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8000ad8:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000ada:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000adc:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000ade:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8000ae0:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000ae2:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000ae4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8000ae8:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000aea:	bf24      	itt	cs
 8000aec:	68e3      	ldrcs	r3, [r4, #12]
 8000aee:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8000af0:	69e3      	ldr	r3, [r4, #28]
 8000af2:	b10b      	cbz	r3, 8000af8 <oqPutTimeout+0x68>
    oqp->q_notify(oqp);
 8000af4:	4620      	mov	r0, r4
 8000af6:	4798      	blx	r3
 8000af8:	2000      	movs	r0, #0
 8000afa:	f380 8811 	msr	BASEPRI, r0
}
 8000afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b02:	bf00      	nop
 8000b04:	20000888 	.word	0x20000888
	...

08000b10 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b14:	3030      	adds	r0, #48	; 0x30
 8000b16:	f7ff bfbb 	b.w	8000a90 <oqPutTimeout>
 8000b1a:	bf00      	nop
 8000b1c:	0000      	movs	r0, r0
	...

08000b20 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000b20:	3030      	adds	r0, #48	; 0x30
 8000b22:	f7ff bfb5 	b.w	8000a90 <oqPutTimeout>
 8000b26:	bf00      	nop
	...

08000b30 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b34:	b083      	sub	sp, #12
  qnotify_t nfy = oqp->q_notify;
 8000b36:	f8d0 801c 	ldr.w	r8, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8000b3a:	9201      	str	r2, [sp, #4]
 8000b3c:	4699      	mov	r9, r3
 8000b3e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8000b42:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000b46:	b382      	cbz	r2, 8000baa <oqWriteTimeout+0x7a>
 8000b48:	f8dd b004 	ldr.w	fp, [sp, #4]
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	460f      	mov	r7, r1
  if (n > oqGetEmptyI(oqp)) {
 8000b50:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000b52:	e9d4 6004 	ldrd	r6, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8000b56:	459b      	cmp	fp, r3
    n = oqGetEmptyI(oqp);
 8000b58:	bf8c      	ite	hi
 8000b5a:	68a5      	ldrhi	r5, [r4, #8]
 8000b5c:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000b5e:	1a36      	subs	r6, r6, r0
  if (n < s1) {
 8000b60:	42ae      	cmp	r6, r5
 8000b62:	d84d      	bhi.n	8000c00 <oqWriteTimeout+0xd0>
  else if (n > s1) {
 8000b64:	d228      	bcs.n	8000bb8 <oqWriteTimeout+0x88>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000b66:	4632      	mov	r2, r6
 8000b68:	4639      	mov	r1, r7
 8000b6a:	f7ff fbbf 	bl	80002ec <memcpy>
    s2 = n - s1;
 8000b6e:	1baa      	subs	r2, r5, r6
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000b70:	68e0      	ldr	r0, [r4, #12]
 8000b72:	9200      	str	r2, [sp, #0]
 8000b74:	19b9      	adds	r1, r7, r6
 8000b76:	f7ff fbb9 	bl	80002ec <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000b7a:	68e3      	ldr	r3, [r4, #12]
 8000b7c:	9a00      	ldr	r2, [sp, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8000b82:	68a3      	ldr	r3, [r4, #8]
 8000b84:	1b5b      	subs	r3, r3, r5
 8000b86:	60a3      	str	r3, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8000b88:	b30d      	cbz	r5, 8000bce <oqWriteTimeout+0x9e>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000b8a:	f1b8 0f00 	cmp.w	r8, #0
 8000b8e:	d001      	beq.n	8000b94 <oqWriteTimeout+0x64>
        nfy(oqp);
 8000b90:	4620      	mov	r0, r4
 8000b92:	47c0      	blx	r8
 8000b94:	2300      	movs	r3, #0
 8000b96:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000b9a:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8000b9e:	442f      	add	r7, r5
 8000ba0:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8000ba4:	f1bb 0f00 	cmp.w	fp, #0
 8000ba8:	d1d2      	bne.n	8000b50 <oqWriteTimeout+0x20>
 8000baa:	9801      	ldr	r0, [sp, #4]
 8000bac:	2300      	movs	r3, #0
 8000bae:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000bb2:	b003      	add	sp, #12
 8000bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000bb8:	462a      	mov	r2, r5
 8000bba:	4639      	mov	r1, r7
 8000bbc:	f7ff fb96 	bl	80002ec <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000bc0:	68e3      	ldr	r3, [r4, #12]
 8000bc2:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8000bc4:	68a3      	ldr	r3, [r4, #8]
 8000bc6:	1b5b      	subs	r3, r3, r5
 8000bc8:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d1dd      	bne.n	8000b8a <oqWriteTimeout+0x5a>
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <oqWriteTimeout+0xe0>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8000bd2:	f1b9 0f00 	cmp.w	r9, #0
 8000bd6:	d00a      	beq.n	8000bee <oqWriteTimeout+0xbe>
  p->prev       = qp->prev;
 8000bd8:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000bda:	4649      	mov	r1, r9
 8000bdc:	e9c3 4200 	strd	r4, r2, [r3]
 8000be0:	2004      	movs	r0, #4
  p->prev->next = p;
 8000be2:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8000be4:	6063      	str	r3, [r4, #4]
 8000be6:	f7ff fe4b 	bl	8000880 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d0b0      	beq.n	8000b50 <oqWriteTimeout+0x20>
  return max - n;
 8000bee:	9b01      	ldr	r3, [sp, #4]
 8000bf0:	eba3 000b 	sub.w	r0, r3, fp
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f383 8811 	msr	BASEPRI, r3
}
 8000bfa:	b003      	add	sp, #12
 8000bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000c00:	462a      	mov	r2, r5
 8000c02:	4639      	mov	r1, r7
 8000c04:	f7ff fb72 	bl	80002ec <memcpy>
    oqp->q_wrptr += n;
 8000c08:	6963      	ldr	r3, [r4, #20]
 8000c0a:	442b      	add	r3, r5
 8000c0c:	6163      	str	r3, [r4, #20]
 8000c0e:	e7b8      	b.n	8000b82 <oqWriteTimeout+0x52>
 8000c10:	20000888 	.word	0x20000888
	...

08000c20 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c24:	3030      	adds	r0, #48	; 0x30
 8000c26:	f7ff bf83 	b.w	8000b30 <oqWriteTimeout>
 8000c2a:	bf00      	nop
 8000c2c:	0000      	movs	r0, r0
	...

08000c30 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000c30:	3030      	adds	r0, #48	; 0x30
 8000c32:	f7ff bf7d 	b.w	8000b30 <oqWriteTimeout>
 8000c36:	bf00      	nop
	...

08000c40 <Thread1>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8000c40:	b580      	push	{r7, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8000c42:	4c29      	ldr	r4, [pc, #164]	; (8000ce8 <Thread1+0xa8>)
 8000c44:	4a29      	ldr	r2, [pc, #164]	; (8000cec <Thread1+0xac>)
 8000c46:	68e3      	ldr	r3, [r4, #12]
 8000c48:	4d29      	ldr	r5, [pc, #164]	; (8000cf0 <Thread1+0xb0>)
 8000c4a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8000cf4 <Thread1+0xb4>
    (void)arg;
    chRegSetThreadName("blinker");
    while (1) {
        while(StopLED);

        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8000c4e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000cf8 <Thread1+0xb8>
 8000c52:	621a      	str	r2, [r3, #32]
static THD_FUNCTION(Thread1, arg) {
 8000c54:	b086      	sub	sp, #24
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8000c56:	2720      	movs	r7, #32
 8000c58:	2630      	movs	r6, #48	; 0x30
        while(StopLED);
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1fc      	bne.n	8000c5a <Thread1+0x1a>
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8000c60:	f8a8 701a 	strh.w	r7, [r8, #26]
 8000c64:	f386 8811 	msr	BASEPRI, r6
  vtp->par     = par;
 8000c68:	68e2      	ldr	r2, [r4, #12]
  vtp->reload  = (sysinterval_t)0;
 8000c6a:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8000c6c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c70:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 8000c72:	e9cd 9203 	strd	r9, r2, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 8000c76:	f7ff fdab 	bl	80007d0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 8000c7a:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8000c7c:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8000c82:	6803      	ldr	r3, [r0, #0]
 8000c84:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8000c86:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 8000c88:	605c      	str	r4, [r3, #4]
 8000c8a:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8000c8c:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8000c8e:	f7ff fb17 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8000c92:	9b00      	ldr	r3, [sp, #0]
      chVTDoResetI(&vt);
 8000c94:	4668      	mov	r0, sp
    if (chVTIsArmedI(&vt)) {
 8000c96:	b10b      	cbz	r3, 8000c9c <Thread1+0x5c>
      chVTDoResetI(&vt);
 8000c98:	f7ff fc92 	bl	80005c0 <chVTDoResetI>
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f382 8811 	msr	BASEPRI, r2
        chThdSleepMilliseconds(500);
        palSetPad(GPIOA, GPIOA_LED_GREEN);
 8000ca2:	f8a8 7018 	strh.w	r7, [r8, #24]
 8000ca6:	f386 8811 	msr	BASEPRI, r6
  vtp->par     = par;
 8000caa:	68e3      	ldr	r3, [r4, #12]
  vtp->reload  = (sysinterval_t)0;
 8000cac:	9205      	str	r2, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8000cae:	f241 3188 	movw	r1, #5000	; 0x1388
 8000cb2:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 8000cb4:	e9cd 9303 	strd	r9, r3, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 8000cb8:	f7ff fd8a 	bl	80007d0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 8000cbc:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8000cbe:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8000cc4:	6803      	ldr	r3, [r0, #0]
 8000cc6:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8000cc8:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 8000cca:	605c      	str	r4, [r3, #4]
 8000ccc:	7702      	strb	r2, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8000cce:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8000cd0:	f7ff faf6 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8000cd4:	9b00      	ldr	r3, [sp, #0]
      chVTDoResetI(&vt);
 8000cd6:	4668      	mov	r0, sp
    if (chVTIsArmedI(&vt)) {
 8000cd8:	b10b      	cbz	r3, 8000cde <Thread1+0x9e>
      chVTDoResetI(&vt);
 8000cda:	f7ff fc71 	bl	80005c0 <chVTDoResetI>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f383 8811 	msr	BASEPRI, r3
}
 8000ce4:	e7b9      	b.n	8000c5a <Thread1+0x1a>
 8000ce6:	bf00      	nop
 8000ce8:	20000888 	.word	0x20000888
 8000cec:	080019b8 	.word	0x080019b8
 8000cf0:	20000880 	.word	0x20000880
 8000cf4:	08000671 	.word	0x08000671
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	00000000 	.word	0x00000000

08000d00 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
	...

08000d10 <__late_init>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
	...

08000d20 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8000d20:	e7fe      	b.n	8000d20 <__default_exit>
 8000d22:	bf00      	nop
	...

08000d30 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	4d15      	ldr	r5, [pc, #84]	; (8000d88 <__init_ram_areas+0x58>)
 8000d34:	4f15      	ldr	r7, [pc, #84]	; (8000d8c <__init_ram_areas+0x5c>)
 8000d36:	4916      	ldr	r1, [pc, #88]	; (8000d90 <__init_ram_areas+0x60>)
 8000d38:	4816      	ldr	r0, [pc, #88]	; (8000d94 <__init_ram_areas+0x64>)
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <__init_ram_areas+0x68>)
 8000d3c:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000d40:	4281      	cmp	r1, r0
 8000d42:	d90d      	bls.n	8000d60 <__init_ram_areas+0x30>
 8000d44:	3a04      	subs	r2, #4
 8000d46:	4603      	mov	r3, r0
      *p = *tp;
 8000d48:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8000d4c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d8f9      	bhi.n	8000d48 <__init_ram_areas+0x18>
      p++;
 8000d54:	1e4b      	subs	r3, r1, #1
 8000d56:	1a1b      	subs	r3, r3, r0
 8000d58:	f023 0303 	bic.w	r3, r3, #3
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000d60:	4287      	cmp	r7, r0
 8000d62:	d907      	bls.n	8000d74 <__init_ram_areas+0x44>
      *p = 0;
 8000d64:	1e7a      	subs	r2, r7, #1
 8000d66:	1a12      	subs	r2, r2, r0
 8000d68:	f022 0203 	bic.w	r2, r2, #3
 8000d6c:	3204      	adds	r2, #4
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f7ff fb56 	bl	8000420 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	d005      	beq.n	8000d84 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 8000d78:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 8000d7c:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 8000d80:	3510      	adds	r5, #16
 8000d82:	e7dd      	b.n	8000d40 <__init_ram_areas+0x10>
     for self-modifying code.*/
  SCB_CleanDCache();
  SCB_InvalidateICache();
#endif
#endif
}
 8000d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d86:	bf00      	nop
 8000d88:	080019f0 	.word	0x080019f0
 8000d8c:	20000ca0 	.word	0x20000ca0
 8000d90:	20000ca0 	.word	0x20000ca0
 8000d94:	20000ca0 	.word	0x20000ca0
 8000d98:	08001a98 	.word	0x08001a98
 8000d9c:	00000000 	.word	0x00000000

08000da0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8000da4:	4d7d      	ldr	r5, [pc, #500]	; (8000f9c <VectorD8+0x1fc>)
 8000da6:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1;
  uint16_t sr = u->SR;
 8000da8:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8000daa:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8000dac:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8000dae:	f100 8092 	bmi.w	8000ed6 <VectorD8+0x136>
 8000db2:	2330      	movs	r3, #48	; 0x30
 8000db4:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000db8:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000dbc:	d057      	beq.n	8000e6e <VectorD8+0xce>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 8000dbe:	4f78      	ldr	r7, [pc, #480]	; (8000fa0 <VectorD8+0x200>)

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000dc0:	f04f 0800 	mov.w	r8, #0
 8000dc4:	e008      	b.n	8000dd8 <VectorD8+0x38>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8000dc6:	06a4      	lsls	r4, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000dc8:	f8d6 9004 	ldr.w	r9, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000dcc:	d41e      	bmi.n	8000e0c <VectorD8+0x6c>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8000dce:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000dd0:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8000dd4:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000dd6:	d04a      	beq.n	8000e6e <VectorD8+0xce>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000dd8:	0723      	lsls	r3, r4, #28
 8000dda:	d0f4      	beq.n	8000dc6 <VectorD8+0x26>
    sts |= SD_OVERRUN_ERROR;
 8000ddc:	f014 0f08 	tst.w	r4, #8
 8000de0:	bf0c      	ite	eq
 8000de2:	2000      	moveq	r0, #0
 8000de4:	f44f 7080 	movne.w	r0, #256	; 0x100
  if (sr & USART_SR_PE)
 8000de8:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 8000dea:	bf48      	it	mi
 8000dec:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8000df0:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000df2:	bf48      	it	mi
 8000df4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8000df8:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8000dfa:	bf48      	it	mi
 8000dfc:	f040 0080 	orrmi.w	r0, r0, #128	; 0x80
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000e00:	f7ff fc6e 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.0>
    if (sr & USART_SR_RXNE)
 8000e04:	06a4      	lsls	r4, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000e06:	f8d6 9004 	ldr.w	r9, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000e0a:	d5e0      	bpl.n	8000dce <VectorD8+0x2e>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000e0c:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8000e0e:	f895 407c 	ldrb.w	r4, [r5, #124]	; 0x7c
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d045      	beq.n	8000ea2 <VectorD8+0x102>
  if (!iqIsFullI(iqp)) {
 8000e16:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d048      	beq.n	8000eb0 <VectorD8+0x110>
    iqp->q_counter++;
 8000e1e:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8000e20:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8000e22:	3201      	adds	r2, #1
 8000e24:	ea04 0409 	and.w	r4, r4, r9
    *iqp->q_wrptr++ = b;
 8000e28:	6229      	str	r1, [r5, #32]
    iqp->q_counter++;
 8000e2a:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8000e2c:	701c      	strb	r4, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8000e2e:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d301      	bcc.n	8000e3a <VectorD8+0x9a>
      iqp->q_wrptr = iqp->q_buffer;
 8000e36:	69ab      	ldr	r3, [r5, #24]
 8000e38:	622b      	str	r3, [r5, #32]
  return (bool)(qp->next != qp);
 8000e3a:	68eb      	ldr	r3, [r5, #12]
 8000e3c:	42bb      	cmp	r3, r7
 8000e3e:	d0c6      	beq.n	8000dce <VectorD8+0x2e>
  qp->next       = p->next;
 8000e40:	6819      	ldr	r1, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000e42:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000e44:	691a      	ldr	r2, [r3, #16]
  qp->next       = p->next;
 8000e46:	60e9      	str	r1, [r5, #12]
  qp->next->prev = qp;
 8000e48:	604f      	str	r7, [r1, #4]
 8000e4a:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8000e4e:	f883 801c 	strb.w	r8, [r3, #28]
    pqp = pqp->next;
 8000e52:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000e54:	6891      	ldr	r1, [r2, #8]
 8000e56:	4281      	cmp	r1, r0
 8000e58:	d2fb      	bcs.n	8000e52 <VectorD8+0xb2>
  p->prev       = pqp->prev;
 8000e5a:	6851      	ldr	r1, [r2, #4]
 8000e5c:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8000e60:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8000e62:	6053      	str	r3, [r2, #4]
    sr = u->SR;
 8000e64:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000e66:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8000e6a:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000e6c:	d1b4      	bne.n	8000dd8 <VectorD8+0x38>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Caching CR1.*/
  cr1 = u->CR1;
 8000e74:	68f3      	ldr	r3, [r6, #12]

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000e76:	0618      	lsls	r0, r3, #24
  cr1 = u->CR1;
 8000e78:	b29f      	uxth	r7, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000e7a:	d501      	bpl.n	8000e80 <VectorD8+0xe0>
 8000e7c:	0621      	lsls	r1, r4, #24
 8000e7e:	d44c      	bmi.n	8000f1a <VectorD8+0x17a>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8000e80:	067a      	lsls	r2, r7, #25
 8000e82:	d501      	bpl.n	8000e88 <VectorD8+0xe8>
 8000e84:	0663      	lsls	r3, r4, #25
 8000e86:	d41b      	bmi.n	8000ec0 <VectorD8+0x120>
    }
    osalSysUnlockFromISR();
  }

  /* Writing CR1 once.*/
  u->CR1 = cr1;
 8000e88:	60f7      	str	r7, [r6, #12]
 8000e8a:	2330      	movs	r3, #48	; 0x30
 8000e8c:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000e90:	4b44      	ldr	r3, [pc, #272]	; (8000fa4 <VectorD8+0x204>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000e98:	d12b      	bne.n	8000ef2 <VectorD8+0x152>
 8000e9a:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8000e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ea2:	2004      	movs	r0, #4
 8000ea4:	f7ff fc1c 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.0>
  if (!iqIsFullI(iqp)) {
 8000ea8:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d1b6      	bne.n	8000e1e <VectorD8+0x7e>
 8000eb0:	696a      	ldr	r2, [r5, #20]
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d0b3      	beq.n	8000e1e <VectorD8+0x7e>
 8000eb6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000eba:	f7ff fc11 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.0>
}
 8000ebe:	e786      	b.n	8000dce <VectorD8+0x2e>
 8000ec0:	2330      	movs	r3, #48	; 0x30
 8000ec2:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000ec6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d052      	beq.n	8000f74 <VectorD8+0x1d4>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f383 8811 	msr	BASEPRI, r3
}
 8000ed4:	e7d8      	b.n	8000e88 <VectorD8+0xe8>
 8000ed6:	2330      	movs	r3, #48	; 0x30
 8000ed8:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8000edc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ee0:	f7ff fbfe 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.0>
    u->SR = ~USART_SR_LBD;
 8000ee4:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000ee8:	6033      	str	r3, [r6, #0]
 8000eea:	2300      	movs	r3, #0
 8000eec:	f383 8811 	msr	BASEPRI, r3
}
 8000ef0:	e75f      	b.n	8000db2 <VectorD8+0x12>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000ef2:	f3ef 8309 	mrs	r3, PSP


    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    psp = __get_PSP();
    psp -= sizeof (struct port_extctx);
 8000ef6:	3b20      	subs	r3, #32

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8000ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000efc:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000efe:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8000f02:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <VectorD8+0x208>)
 8000f04:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8000f06:	68d2      	ldr	r2, [r2, #12]
    /* Writing back the modified S-PSP value.*/
    __set_PSP(psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000f08:	6889      	ldr	r1, [r1, #8]
 8000f0a:	6892      	ldr	r2, [r2, #8]
 8000f0c:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8000f0e:	bf8c      	ite	hi
 8000f10:	4a26      	ldrhi	r2, [pc, #152]	; (8000fac <VectorD8+0x20c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8000f12:	4a27      	ldrls	r2, [pc, #156]	; (8000fb0 <VectorD8+0x210>)
 8000f14:	619a      	str	r2, [r3, #24]
 8000f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000f1a:	2330      	movs	r3, #48	; 0x30
 8000f1c:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8000f20:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d02f      	beq.n	8000f88 <VectorD8+0x1e8>
    oqp->q_counter++;
 8000f28:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000f2a:	3201      	adds	r2, #1
 8000f2c:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	64aa      	str	r2, [r5, #72]	; 0x48
 8000f32:	7819      	ldrb	r1, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000f34:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d301      	bcc.n	8000f3e <VectorD8+0x19e>
      oqp->q_rdptr = oqp->q_buffer;
 8000f3a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000f3c:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(qp->next != qp);
 8000f3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f40:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <VectorD8+0x214>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d011      	beq.n	8000f6a <VectorD8+0x1ca>
  qp->next       = p->next;
 8000f46:	6818      	ldr	r0, [r3, #0]
 8000f48:	6328      	str	r0, [r5, #48]	; 0x30
  qp->next->prev = qp;
 8000f4a:	6042      	str	r2, [r0, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	635a      	str	r2, [r3, #52]	; 0x34
  tp->state = CH_STATE_READY;
 8000f50:	771a      	strb	r2, [r3, #28]
  } while (unlikely(pqp->prio >= p->prio));
 8000f52:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000f54:	691a      	ldr	r2, [r3, #16]
    pqp = pqp->next;
 8000f56:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000f58:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8000f5c:	4584      	cmp	ip, r0
 8000f5e:	d2fa      	bcs.n	8000f56 <VectorD8+0x1b6>
  p->prev       = pqp->prev;
 8000f60:	6850      	ldr	r0, [r2, #4]
  p->next       = pqp;
 8000f62:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8000f64:	6058      	str	r0, [r3, #4]
  p->prev->next = p;
 8000f66:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8000f68:	6053      	str	r3, [r2, #4]
      u->DR = b;
 8000f6a:	6071      	str	r1, [r6, #4]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f383 8811 	msr	BASEPRI, r3
 8000f72:	e785      	b.n	8000e80 <VectorD8+0xe0>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8000f74:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0a9      	beq.n	8000ece <VectorD8+0x12e>
  chEvtBroadcastFlagsI(esp, flags);
 8000f7a:	2010      	movs	r0, #16
      cr1 &= ~USART_CR1_TCIE;
 8000f7c:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8000f80:	f7ff fbae 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.0>
 8000f84:	b2bf      	uxth	r7, r7
 8000f86:	e7a2      	b.n	8000ece <VectorD8+0x12e>
  if (!oqIsEmptyI(oqp)) {
 8000f88:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d0cc      	beq.n	8000f28 <VectorD8+0x188>
 8000f8e:	2008      	movs	r0, #8
      cr1 &= ~USART_CR1_TXEIE;
 8000f90:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8000f94:	f7ff fba4 	bl	80006e0 <chEvtBroadcastFlagsI.constprop.0>
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	e7e7      	b.n	8000f6c <VectorD8+0x1cc>
 8000f9c:	20000800 	.word	0x20000800
 8000fa0:	2000080c 	.word	0x2000080c
 8000fa4:	e000ed00 	.word	0xe000ed00
 8000fa8:	20000888 	.word	0x20000888
 8000fac:	080002e3 	.word	0x080002e3
 8000fb0:	080002e6 	.word	0x080002e6
 8000fb4:	20000830 	.word	0x20000830
	...

08000fc0 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8000fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8000fc4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000fc8:	6933      	ldr	r3, [r6, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000fca:	68f2      	ldr	r2, [r6, #12]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8000fd0:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8000fd2:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8000fd4:	6132      	str	r2, [r6, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8000fd6:	d40b      	bmi.n	8000ff0 <VectorB0+0x30>
 8000fd8:	2330      	movs	r3, #48	; 0x30
 8000fda:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000fde:	4b4f      	ldr	r3, [pc, #316]	; (800111c <VectorB0+0x15c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000fe6:	d15f      	bne.n	80010a8 <VectorB0+0xe8>
 8000fe8:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff0:	2330      	movs	r3, #48	; 0x30
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
 8000ff6:	4d4a      	ldr	r5, [pc, #296]	; (8001120 <VectorB0+0x160>)
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 8000ff8:	f04f 0900 	mov.w	r9, #0
 8000ffc:	f105 0710 	add.w	r7, r5, #16
 8001000:	f04f 0830 	mov.w	r8, #48	; 0x30
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8001004:	692c      	ldr	r4, [r5, #16]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8001006:	69eb      	ldr	r3, [r5, #28]
 8001008:	6a71      	ldr	r1, [r6, #36]	; 0x24
    if (nowdelta < vtp->dlist.delta) {
 800100a:	68a2      	ldr	r2, [r4, #8]
 800100c:	1ac8      	subs	r0, r1, r3
 800100e:	4290      	cmp	r0, r2
  return systime + (systime_t)interval;
 8001010:	eb03 0a02 	add.w	sl, r3, r2
 8001014:	d334      	bcc.n	8001080 <VectorB0+0xc0>
  dlp->prev->next = dlp->next;
 8001016:	e9d4 3200 	ldrd	r3, r2, [r4]
    vtlp->lasttime = lasttime;
 800101a:	f8c5 a01c 	str.w	sl, [r5, #28]
 800101e:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001020:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 8001022:	f8c4 9000 	str.w	r9, [r4]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8001026:	692b      	ldr	r3, [r5, #16]
 8001028:	42bb      	cmp	r3, r7
  STM32_ST_TIM->DIER = 0U;
 800102a:	bf08      	it	eq
 800102c:	f8c6 900c 	streq.w	r9, [r6, #12]
 8001030:	f389 8811 	msr	BASEPRI, r9
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 8001034:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8001038:	4620      	mov	r0, r4
 800103a:	4798      	blx	r3
 800103c:	f388 8811 	msr	BASEPRI, r8

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 8001040:	6963      	ldr	r3, [r4, #20]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0de      	beq.n	8001004 <VectorB0+0x44>
  return (systime_t)STM32_ST_TIM->CNT;
 8001046:	6a71      	ldr	r1, [r6, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001048:	eba1 000a 	sub.w	r0, r1, sl
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 800104c:	4283      	cmp	r3, r0
 800104e:	d33f      	bcc.n	80010d0 <VectorB0+0x110>
  return (bool)(dlhp == dlhp->next);
 8001050:	692a      	ldr	r2, [r5, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8001052:	42ba      	cmp	r2, r7
 8001054:	d057      	beq.n	8001106 <VectorB0+0x146>
  while (likely(dlp->delta < delta)) {
 8001056:	6891      	ldr	r1, [r2, #8]
 8001058:	428b      	cmp	r3, r1
 800105a:	d904      	bls.n	8001066 <VectorB0+0xa6>
    dlp = dlp->next;
 800105c:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 800105e:	1a5b      	subs	r3, r3, r1
  while (likely(dlp->delta < delta)) {
 8001060:	6891      	ldr	r1, [r2, #8]
 8001062:	4299      	cmp	r1, r3
 8001064:	d3fa      	bcc.n	800105c <VectorB0+0x9c>
  dlp->delta      = delta;
 8001066:	60a3      	str	r3, [r4, #8]
  dlp->delta -= delta;
 8001068:	6891      	ldr	r1, [r2, #8]
  dlp->next       = dlhp;
 800106a:	6022      	str	r2, [r4, #0]
  dlp->delta -= delta;
 800106c:	1acb      	subs	r3, r1, r3
  dlp->prev       = dlp->next->prev;
 800106e:	6851      	ldr	r1, [r2, #4]
 8001070:	6061      	str	r1, [r4, #4]
  dlp->prev->next = dlp;
 8001072:	600c      	str	r4, [r1, #0]
  dlp->delta -= delta;
 8001074:	e9c2 4301 	strd	r4, r3, [r2, #4]
  dlhp->delta = (sysinterval_t)-1;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107c:	61ab      	str	r3, [r5, #24]
}
 800107e:	e7bf      	b.n	8001000 <VectorB0+0x40>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8001080:	42bc      	cmp	r4, r7
 8001082:	d00d      	beq.n	80010a0 <VectorB0+0xe0>
  currdelta = vtlp->lastdelta;
 8001084:	6a28      	ldr	r0, [r5, #32]
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
 8001086:	61e9      	str	r1, [r5, #28]
  vtp->dlist.delta -= nowdelta;
 8001088:	4413      	add	r3, r2
 800108a:	1a5b      	subs	r3, r3, r1
 800108c:	4283      	cmp	r3, r0
 800108e:	60a3      	str	r3, [r4, #8]
static void vt_set_alarm(virtual_timers_list_t *vtlp,
 8001090:	bf38      	it	cc
 8001092:	4603      	movcc	r3, r0
  return systime + (systime_t)interval;
 8001094:	18ca      	adds	r2, r1, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001096:	6372      	str	r2, [r6, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001098:	6a72      	ldr	r2, [r6, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800109a:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 800109c:	428b      	cmp	r3, r1
 800109e:	d920      	bls.n	80010e2 <VectorB0+0x122>
 80010a0:	2300      	movs	r3, #0
 80010a2:	f383 8811 	msr	BASEPRI, r3
}
 80010a6:	e797      	b.n	8000fd8 <VectorB0+0x18>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80010a8:	f3ef 8309 	mrs	r3, PSP
    psp -= sizeof (struct port_extctx);
 80010ac:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80010ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010b2:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80010b4:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <VectorB0+0x160>)
 80010ba:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80010bc:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 80010be:	6889      	ldr	r1, [r1, #8]
 80010c0:	6892      	ldr	r2, [r2, #8]
 80010c2:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80010c4:	bf8c      	ite	hi
 80010c6:	4a17      	ldrhi	r2, [pc, #92]	; (8001124 <VectorB0+0x164>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80010c8:	4a17      	ldrls	r2, [pc, #92]	; (8001128 <VectorB0+0x168>)
 80010ca:	619a      	str	r2, [r3, #24]
 80010cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  currcore->rfcu.mask |= mask;
 80010d0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  return (bool)(dlhp == dlhp->next);
 80010d2:	692a      	ldr	r2, [r5, #16]
 80010d4:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80010d8:	42ba      	cmp	r2, r7
 80010da:	63eb      	str	r3, [r5, #60]	; 0x3c
 80010dc:	d019      	beq.n	8001112 <VectorB0+0x152>
 80010de:	4603      	mov	r3, r0
 80010e0:	e7b9      	b.n	8001056 <VectorB0+0x96>
    if (likely(nowdelta < delay)) {
 80010e2:	4601      	mov	r1, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80010e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    currdelta += (sysinterval_t)1;
 80010e8:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 80010ea:	1854      	adds	r4, r2, r1
 80010ec:	635c      	str	r4, [r3, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80010ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80010f0:	1aa2      	subs	r2, r4, r2
    if (likely(nowdelta < delay)) {
 80010f2:	428a      	cmp	r2, r1
 80010f4:	d20f      	bcs.n	8001116 <VectorB0+0x156>
  if (currdelta > vtlp->lastdelta) {
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d2d2      	bcs.n	80010a0 <VectorB0+0xe0>
 80010fa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    vtlp->lastdelta = currdelta;
 80010fc:	6229      	str	r1, [r5, #32]
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	63eb      	str	r3, [r5, #60]	; 0x3c
}
 8001104:	e7cc      	b.n	80010a0 <VectorB0+0xe0>
        delay = vtp->reload - nowdelta;
 8001106:	4453      	add	r3, sl
 8001108:	1a5a      	subs	r2, r3, r1
        vt_insert_first(vtlp, vtp, now, delay);
 800110a:	4620      	mov	r0, r4
 800110c:	f7ff fb28 	bl	8000760 <vt_insert_first.constprop.0>
        return;
 8001110:	e7c6      	b.n	80010a0 <VectorB0+0xe0>
        delay = (sysinterval_t)0;
 8001112:	2200      	movs	r2, #0
 8001114:	e7f9      	b.n	800110a <VectorB0+0x14a>
 8001116:	4622      	mov	r2, r4
 8001118:	e7e6      	b.n	80010e8 <VectorB0+0x128>
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	20000888 	.word	0x20000888
 8001124:	080002e3 	.word	0x080002e3
 8001128:	080002e6 	.word	0x080002e6
 800112c:	00000000 	.word	0x00000000

08001130 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001130:	4a8f      	ldr	r2, [pc, #572]	; (8001370 <__early_init+0x240>)
  gpiop->OTYPER  = config->otyper;
 8001132:	4990      	ldr	r1, [pc, #576]	; (8001374 <__early_init+0x244>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001134:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8001136:	f8df c240 	ldr.w	ip, [pc, #576]	; 8001378 <__early_init+0x248>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800113a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800113e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001142:	6113      	str	r3, [r2, #16]
 8001144:	6910      	ldr	r0, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8001146:	f8df 8234 	ldr.w	r8, [pc, #564]	; 800137c <__early_init+0x24c>
 800114a:	f8df e234 	ldr.w	lr, [pc, #564]	; 8001380 <__early_init+0x250>
 800114e:	4f8d      	ldr	r7, [pc, #564]	; (8001384 <__early_init+0x254>)
 8001150:	4e8d      	ldr	r6, [pc, #564]	; (8001388 <__early_init+0x258>)
 8001152:	4d8e      	ldr	r5, [pc, #568]	; (800138c <__early_init+0x25c>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001154:	f8df a238 	ldr.w	sl, [pc, #568]	; 8001390 <__early_init+0x260>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001158:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800115c:	6110      	str	r0, [r2, #16]
 800115e:	6910      	ldr	r0, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001160:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8001162:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
 8001166:	6310      	str	r0, [r2, #48]	; 0x30
 8001168:	6d10      	ldr	r0, [r2, #80]	; 0x50
 800116a:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
  gpiop->OTYPER  = config->otyper;
 800116e:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001170:	6510      	str	r0, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8001172:	f46f 608a 	mvn.w	r0, #1104	; 0x450
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001176:	6d14      	ldr	r4, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001178:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800117a:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800117c:	4885      	ldr	r0, [pc, #532]	; (8001394 <__early_init+0x264>)
 800117e:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 8001180:	f64f 70df 	movw	r0, #65503	; 0xffdf
 8001184:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8001186:	f44f 40ee 	mov.w	r0, #30464	; 0x7700
 800118a:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800118c:	f44f 202a 	mov.w	r0, #696320	; 0xaa000
 8001190:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001192:	4881      	ldr	r0, [pc, #516]	; (8001398 <__early_init+0x268>)
 8001194:	6008      	str	r0, [r1, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8001196:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  gpiop->ODR     = config->odr;
 800119a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  gpiop->OTYPER  = config->otyper;
 800119e:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
  gpiop->PUPDR   = config->pupdr;
 80011a2:	f04f 3955 	mov.w	r9, #1431655765	; 0x55555555
  gpiop->MODER   = config->moder;
 80011a6:	f04f 0b80 	mov.w	fp, #128	; 0x80
  gpiop->OTYPER  = config->otyper;
 80011aa:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80011ae:	f8c8 4008 	str.w	r4, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 80011b2:	f8c8 900c 	str.w	r9, [r8, #12]
  gpiop->ODR     = config->odr;
 80011b6:	f8c8 0014 	str.w	r0, [r8, #20]
  gpiop->AFRL    = config->afrl;
 80011ba:	f8c8 3020 	str.w	r3, [r8, #32]
  gpiop->AFRH    = config->afrh;
 80011be:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80011c2:	f8c8 b000 	str.w	fp, [r8]
  gpiop->PUPDR   = config->pupdr;
 80011c6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 800139c <__early_init+0x26c>
  gpiop->OTYPER  = config->otyper;
 80011ca:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80011ce:	f8ce 4008 	str.w	r4, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 80011d2:	f8ce 800c 	str.w	r8, [lr, #12]
  gpiop->ODR     = config->odr;
 80011d6:	f8ce 0014 	str.w	r0, [lr, #20]
  gpiop->AFRL    = config->afrl;
 80011da:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 80011de:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80011e2:	f8ce 3000 	str.w	r3, [lr]
  gpiop->OTYPER  = config->otyper;
 80011e6:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80011ea:	f8cc 4008 	str.w	r4, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 80011ee:	f8cc 900c 	str.w	r9, [ip, #12]
  gpiop->ODR     = config->odr;
 80011f2:	f8cc 0014 	str.w	r0, [ip, #20]
  gpiop->AFRL    = config->afrl;
 80011f6:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 80011fa:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80011fe:	f8cc 3000 	str.w	r3, [ip]
  gpiop->OTYPER  = config->otyper;
 8001202:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001204:	60bc      	str	r4, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8001206:	f8c7 900c 	str.w	r9, [r7, #12]
  gpiop->ODR     = config->odr;
 800120a:	6178      	str	r0, [r7, #20]
  gpiop->AFRL    = config->afrl;
 800120c:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001210:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 8001212:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001214:	60b4      	str	r4, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001216:	f8c6 900c 	str.w	r9, [r6, #12]
  gpiop->ODR     = config->odr;
 800121a:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
 800121c:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800121e:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001220:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8001222:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001224:	60ac      	str	r4, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8001226:	f8c5 900c 	str.w	r9, [r5, #12]
  gpiop->ODR     = config->odr;
 800122a:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800122c:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800122e:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001230:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8001232:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001234:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001236:	4c5a      	ldr	r4, [pc, #360]	; (80013a0 <__early_init+0x270>)
 8001238:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 800123a:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800123c:	620b      	str	r3, [r1, #32]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800123e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  gpiop->AFRH    = config->afrh;
 8001242:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001244:	600b      	str	r3, [r1, #0]
  PWR->CR = STM32_VOS;
 8001246:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800124a:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800124c:	f8ca 3000 	str.w	r3, [sl]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	079b      	lsls	r3, r3, #30
 800125c:	d5fc      	bpl.n	8001258 <__early_init+0x128>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800125e:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001260:	4943      	ldr	r1, [pc, #268]	; (8001370 <__early_init+0x240>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001262:	f023 0303 	bic.w	r3, r3, #3
 8001266:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001268:	688b      	ldr	r3, [r1, #8]
 800126a:	f013 030c 	ands.w	r3, r3, #12
 800126e:	d1fb      	bne.n	8001268 <__early_init+0x138>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001270:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001272:	483f      	ldr	r0, [pc, #252]	; (8001370 <__early_init+0x240>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001274:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 8001278:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800127a:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 800127c:	680b      	ldr	r3, [r1, #0]
 800127e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001282:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001284:	6803      	ldr	r3, [r0, #0]
 8001286:	039f      	lsls	r7, r3, #14
 8001288:	d5fc      	bpl.n	8001284 <__early_init+0x154>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800128a:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800128c:	4a38      	ldr	r2, [pc, #224]	; (8001370 <__early_init+0x240>)
  RCC->CSR |= RCC_CSR_LSION;
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001294:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001296:	079e      	lsls	r6, r3, #30
 8001298:	d5fc      	bpl.n	8001294 <__early_init+0x164>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800129a:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <__early_init+0x274>)
 800129c:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800129e:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80012a0:	493b      	ldr	r1, [pc, #236]	; (8001390 <__early_init+0x260>)
  RCC->CR |= RCC_CR_PLLON;
 80012a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012a6:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80012a8:	684b      	ldr	r3, [r1, #4]
 80012aa:	045d      	lsls	r5, r3, #17
 80012ac:	d5fc      	bpl.n	80012a8 <__early_init+0x178>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 80012ae:	680b      	ldr	r3, [r1, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 80012b0:	4a37      	ldr	r2, [pc, #220]	; (8001390 <__early_init+0x260>)
  PWR->CR |= PWR_CR_ODEN;
 80012b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b6:	600b      	str	r3, [r1, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 80012b8:	6853      	ldr	r3, [r2, #4]
 80012ba:	03dc      	lsls	r4, r3, #15
 80012bc:	d5fc      	bpl.n	80012b8 <__early_init+0x188>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 80012be:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 80012c0:	4933      	ldr	r1, [pc, #204]	; (8001390 <__early_init+0x260>)
  PWR->CR |= PWR_CR_ODSWEN;
 80012c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c6:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 80012c8:	684b      	ldr	r3, [r1, #4]
 80012ca:	0398      	lsls	r0, r3, #14
 80012cc:	d5fc      	bpl.n	80012c8 <__early_init+0x198>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80012ce:	4a28      	ldr	r2, [pc, #160]	; (8001370 <__early_init+0x240>)
 80012d0:	6813      	ldr	r3, [r2, #0]
 80012d2:	0199      	lsls	r1, r3, #6
 80012d4:	d5fc      	bpl.n	80012d0 <__early_init+0x1a0>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <__early_init+0x278>)
 80012d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                    STM32_PLLI2SSRC | STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;
 80012dc:	6813      	ldr	r3, [r2, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 80012de:	4924      	ldr	r1, [pc, #144]	; (8001370 <__early_init+0x240>)
  RCC->CR |= RCC_CR_PLLI2SON;
 80012e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012e4:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 80012e6:	680b      	ldr	r3, [r1, #0]
 80012e8:	011a      	lsls	r2, r3, #4
 80012ea:	d5fc      	bpl.n	80012e6 <__early_init+0x1b6>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <__early_init+0x27c>)
 80012ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;
 80012f2:	680b      	ldr	r3, [r1, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 80012f4:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <__early_init+0x240>)
  RCC->CR |= RCC_CR_PLLSAION;
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fa:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	d5fc      	bpl.n	80012fc <__early_init+0x1cc>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <__early_init+0x280>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001304:	4c2b      	ldr	r4, [pc, #172]	; (80013b4 <__early_init+0x284>)
    RCC->DCKCFGR = dckcfgr |
 8001306:	482c      	ldr	r0, [pc, #176]	; (80013b8 <__early_init+0x288>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001308:	6094      	str	r4, [r2, #8]
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 800130a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    RCC->DCKCFGR = dckcfgr |
 800130e:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8001312:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <__early_init+0x28c>)
 800131a:	429a      	cmp	r2, r3
 800131c:	d01e      	beq.n	800135c <__early_init+0x22c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <__early_init+0x290>)
 8001320:	f240 7205 	movw	r2, #1797	; 0x705
 8001324:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8001326:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <__early_init+0x290>)
 8001328:	6813      	ldr	r3, [r2, #0]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	2b05      	cmp	r3, #5
 8001330:	d1fa      	bne.n	8001328 <__early_init+0x1f8>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <__early_init+0x240>)
 8001334:	6893      	ldr	r3, [r2, #8]
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800133c:	6893      	ldr	r3, [r2, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b08      	cmp	r3, #8
 8001344:	d1fa      	bne.n	800133c <__early_init+0x20c>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001346:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6653      	str	r3, [r2, #100]	; 0x64
 8001356:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8001358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800135c:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <__early_init+0x294>)
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <__early_init+0x298>)
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d1db      	bne.n	800131e <__early_init+0x1ee>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <__early_init+0x290>)
 8001368:	f240 1205 	movw	r2, #261	; 0x105
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e7da      	b.n	8001326 <__early_init+0x1f6>
 8001370:	40023800 	.word	0x40023800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40007000 	.word	0x40007000
 8001394:	64155105 	.word	0x64155105
 8001398:	2a8004a0 	.word	0x2a8004a0
 800139c:	01555555 	.word	0x01555555
 80013a0:	55555550 	.word	0x55555550
 80013a4:	07405a08 	.word	0x07405a08
 80013a8:	44413004 	.word	0x44413004
 80013ac:	44033004 	.word	0x44033004
 80013b0:	e0042000 	.word	0xe0042000
 80013b4:	40089400 	.word	0x40089400
 80013b8:	00800003 	.word	0x00800003
 80013bc:	20006411 	.word	0x20006411
 80013c0:	40023c00 	.word	0x40023c00
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	410fc241 	.word	0x410fc241
 80013cc:	00000000 	.word	0x00000000

080013d0 <chSchDoPreemption>:
 *
 * @special
 */
void chSchDoPreemption(void) {
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 80013d0:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <chSchDoPreemption+0x34>)
  ch_priority_queue_t *p = pqp->next;
 80013d2:	6810      	ldr	r0, [r2, #0]
 80013d4:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 80013d6:	6803      	ldr	r3, [r0, #0]
void chSchDoPreemption(void) {
 80013d8:	b410      	push	{r4}
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 80013da:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	7704      	strb	r4, [r0, #28]
  tp->state = CH_STATE_READY;
 80013e0:	2400      	movs	r4, #0
  pqp->next       = p->next;
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	770c      	strb	r4, [r1, #28]
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 80013e6:	690b      	ldr	r3, [r1, #16]
  } while (unlikely(pqp->prio > p->prio));
 80013e8:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 80013ea:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 80013ec:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	42a2      	cmp	r2, r4
 80013f2:	d8fb      	bhi.n	80013ec <chSchDoPreemption+0x1c>
  p->prev       = pqp->prev;
 80013f4:	685a      	ldr	r2, [r3, #4]
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
}
 80013f6:	bc10      	pop	{r4}
 80013f8:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80013fc:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80013fe:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8001400:	f7fe bf5e 	b.w	80002c0 <__port_switch>
 8001404:	20000888 	.word	0x20000888
	...

08001410 <chThdExit>:
void chThdExit(msg_t msg) {
 8001410:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001412:	2330      	movs	r3, #48	; 0x30
 8001414:	f383 8811 	msr	BASEPRI, r3
  return __sch_get_currthread();
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <chThdExit+0x7c>)
 800141a:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 800141c:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  currtp->u.exitcode = msg;
 800141e:	6348      	str	r0, [r1, #52]	; 0x34
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8001420:	f101 0c38 	add.w	ip, r1, #56	; 0x38
 8001424:	4594      	cmp	ip, r2
  tp->state = CH_STATE_READY;
 8001426:	bf18      	it	ne
 8001428:	f04f 0e00 	movne.w	lr, #0
 800142c:	d111      	bne.n	8001452 <chThdExit+0x42>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 800142e:	7f8a      	ldrb	r2, [r1, #30]
 8001430:	b31a      	cbz	r2, 800147a <chThdExit+0x6a>
  ch_priority_queue_t *p = pqp->next;
 8001432:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8001434:	220f      	movs	r2, #15
 8001436:	770a      	strb	r2, [r1, #28]
  pqp->next       = p->next;
 8001438:	6802      	ldr	r2, [r0, #0]
 800143a:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 800143c:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8001440:	6053      	str	r3, [r2, #4]
 8001442:	f880 c01c 	strb.w	ip, [r0, #28]
}
 8001446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 800144a:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800144c:	f7fe bf38 	b.w	80002c0 <__port_switch>
 8001450:	4622      	mov	r2, r4
  lp->next = p->next;
 8001452:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001454:	6910      	ldr	r0, [r2, #16]
  } while (unlikely(pqp->prio >= p->prio));
 8001456:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 8001458:	638c      	str	r4, [r1, #56]	; 0x38
  tp->state = CH_STATE_READY;
 800145a:	f882 e01c 	strb.w	lr, [r2, #28]
    pqp = pqp->next;
 800145e:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001460:	6885      	ldr	r5, [r0, #8]
 8001462:	42b5      	cmp	r5, r6
 8001464:	d2fb      	bcs.n	800145e <chThdExit+0x4e>
  p->prev       = pqp->prev;
 8001466:	6845      	ldr	r5, [r0, #4]
  p->next       = pqp;
 8001468:	6010      	str	r0, [r2, #0]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800146a:	4564      	cmp	r4, ip
  p->prev       = pqp->prev;
 800146c:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 800146e:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8001470:	6042      	str	r2, [r0, #4]
 8001472:	d1ed      	bne.n	8001450 <chThdExit+0x40>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8001474:	7f8a      	ldrb	r2, [r1, #30]
 8001476:	2a00      	cmp	r2, #0
 8001478:	d1db      	bne.n	8001432 <chThdExit+0x22>
    if (currtp->dispose == NULL) {
 800147a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800147c:	2a00      	cmp	r2, #0
 800147e:	d1d8      	bne.n	8001432 <chThdExit+0x22>
  p->prev->next = p->next;
 8001480:	e9d1 2009 	ldrd	r2, r0, [r1, #36]	; 0x24
 8001484:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 8001486:	6050      	str	r0, [r2, #4]
  return p;
 8001488:	e7d3      	b.n	8001432 <chThdExit+0x22>
 800148a:	bf00      	nop
 800148c:	20000888 	.word	0x20000888

08001490 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001490:	f3ef 8309 	mrs	r3, PSP
  psp += sizeof (struct port_extctx);
 8001494:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001496:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800149a:	2300      	movs	r3, #0
 800149c:	f383 8811 	msr	BASEPRI, r3
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
	...

080014b0 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80014b0:	4bb3      	ldr	r3, [pc, #716]	; (8001780 <main+0x2d0>)
  PWR->CR |= PWR_CR_DBP;
 80014b2:	48b4      	ldr	r0, [pc, #720]	; (8001784 <main+0x2d4>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	f062 02ff 	orn	r2, r2, #255	; 0xff
}

/*
 * Application entry point.
 */
int main(void) {
 80014ba:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80014c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80014ca:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	615c      	str	r4, [r3, #20]
 80014d0:	2100      	movs	r1, #0
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	6159      	str	r1, [r3, #20]
 80014d6:	695a      	ldr	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	6a1a      	ldr	r2, [r3, #32]
 80014e2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80014e6:	621a      	str	r2, [r3, #32]
 80014e8:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 80014ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ec:	625c      	str	r4, [r3, #36]	; 0x24
 80014ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f0:	6259      	str	r1, [r3, #36]	; 0x24
 80014f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 80014f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
 80014fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001502:	661a      	str	r2, [r3, #96]	; 0x60
 8001504:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8001506:	6802      	ldr	r2, [r0, #0]
 8001508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800150c:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800150e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001510:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001514:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001518:	b089      	sub	sp, #36	; 0x24
 800151a:	d003      	beq.n	8001524 <main+0x74>
    RCC->BDCR = RCC_BDCR_BDRST;
 800151c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001520:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001522:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001524:	4997      	ldr	r1, [pc, #604]	; (8001784 <main+0x2d4>)
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001526:	4b98      	ldr	r3, [pc, #608]	; (8001788 <main+0x2d8>)
 8001528:	684a      	ldr	r2, [r1, #4]
  sdp->vmt = &vmt;
 800152a:	4e98      	ldr	r6, [pc, #608]	; (800178c <main+0x2dc>)
 */
void chSysInit(void) {
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 800152c:	4f98      	ldr	r7, [pc, #608]	; (8001790 <main+0x2e0>)
 800152e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001532:	2070      	movs	r0, #112	; 0x70
 8001534:	604a      	str	r2, [r1, #4]
 8001536:	f883 031c 	strb.w	r0, [r3, #796]	; 0x31c
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800153a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800153e:	20c0      	movs	r0, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001540:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001544:	2140      	movs	r1, #64	; 0x40
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001546:	601a      	str	r2, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001548:	f883 0326 	strb.w	r0, [r3, #806]	; 0x326
  qp->next = qp;
 800154c:	f106 000c 	add.w	r0, r6, #12
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001550:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001554:	6059      	str	r1, [r3, #4]
  qp->prev = qp;
 8001556:	e9c6 0003 	strd	r0, r0, [r6, #12]
  iqp->q_buffer  = bp;
 800155a:	f106 0054 	add.w	r0, r6, #84	; 0x54
 800155e:	4632      	mov	r2, r6
  iqp->q_wrptr   = bp;
 8001560:	e9c6 0008 	strd	r0, r0, [r6, #32]
  iqp->q_buffer  = bp;
 8001564:	61b0      	str	r0, [r6, #24]
  qp->next = qp;
 8001566:	f106 0030 	add.w	r0, r6, #48	; 0x30
  iqp->q_counter = 0;
 800156a:	2300      	movs	r3, #0
  qp->prev = qp;
 800156c:	e9c6 000c 	strd	r0, r0, [r6, #48]	; 0x30
 8001570:	4988      	ldr	r1, [pc, #544]	; (8001794 <main+0x2e4>)
 8001572:	f842 1b04 	str.w	r1, [r2], #4
  oqp->q_counter = size;
 8001576:	2010      	movs	r0, #16
  iqp->q_counter = 0;
 8001578:	6173      	str	r3, [r6, #20]
  oqp->q_counter = size;
 800157a:	63b0      	str	r0, [r6, #56]	; 0x38
  oqp->q_top     = bp + size;
 800157c:	f106 0074 	add.w	r0, r6, #116	; 0x74
 8001580:	6430      	str	r0, [r6, #64]	; 0x40
  oqp->q_notify  = onfy;
 8001582:	4885      	ldr	r0, [pc, #532]	; (8001798 <main+0x2e8>)
  esp->next = (event_listener_t *)esp;
 8001584:	6072      	str	r2, [r6, #4]
 8001586:	64f0      	str	r0, [r6, #76]	; 0x4c
  iqp->q_top     = bp + size;
 8001588:	f106 0264 	add.w	r2, r6, #100	; 0x64
  SD2.usart = USART2;
 800158c:	4883      	ldr	r0, [pc, #524]	; (800179c <main+0x2ec>)
 800158e:	61f2      	str	r2, [r6, #28]
  sdp->state = SD_STOP;
 8001590:	2101      	movs	r1, #1
  oqp->q_wrptr   = bp;
 8001592:	e9c6 2211 	strd	r2, r2, [r6, #68]	; 0x44
  oqp->q_buffer  = bp;
 8001596:	63f2      	str	r2, [r6, #60]	; 0x3c
 8001598:	6770      	str	r0, [r6, #116]	; 0x74
  ST_ENABLE_CLOCK();
 800159a:	4a79      	ldr	r2, [pc, #484]	; (8001780 <main+0x2d0>)
  SD2.clock = STM32_PCLK1;
 800159c:	4880      	ldr	r0, [pc, #512]	; (80017a0 <main+0x2f0>)
 800159e:	7231      	strb	r1, [r6, #8]
 80015a0:	67b0      	str	r0, [r6, #120]	; 0x78
 80015a2:	6c10      	ldr	r0, [r2, #64]	; 0x40
  oqp->q_link    = link;
 80015a4:	6536      	str	r6, [r6, #80]	; 0x50
 80015a6:	4308      	orrs	r0, r1
  iqp->q_link    = link;
 80015a8:	e9c6 360a 	strd	r3, r6, [r6, #40]	; 0x28
 80015ac:	6410      	str	r0, [r2, #64]	; 0x40
 80015ae:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80015b0:	4308      	orrs	r0, r1
 80015b2:	6610      	str	r0, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 80015b4:	487b      	ldr	r0, [pc, #492]	; (80017a4 <main+0x2f4>)
  ST_ENABLE_CLOCK();
 80015b6:	6e12      	ldr	r2, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 80015b8:	6882      	ldr	r2, [r0, #8]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	6082      	str	r2, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80015be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c2:	f242 3027 	movw	r0, #8999	; 0x2327
 80015c6:	6290      	str	r0, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015cc:	62d0      	str	r0, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80015ce:	6193      	str	r3, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80015d0:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80015d2:	60d3      	str	r3, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 80015d4:	6053      	str	r3, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80015d6:	6151      	str	r1, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80015d8:	6011      	str	r1, [r2, #0]
  tmp->best       = (rtcnt_t)-1;
 80015da:	9002      	str	r0, [sp, #8]
 80015dc:	7039      	strb	r1, [r7, #0]
  tmp->cumulative = (rttime_t)0;
 80015de:	2000      	movs	r0, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 80015e6:	e9c7 3301 	strd	r3, r3, [r7, #4]
  tmp->last       = (rtcnt_t)0;
 80015ea:	e9cd 3303 	strd	r3, r3, [sp, #12]
  tmp->n          = (ucnt_t)0;
 80015ee:	9305      	str	r3, [sp, #20]
}
 80015f0:	2504      	movs	r5, #4
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 80015f2:	a802      	add	r0, sp, #8
 80015f4:	f7fe ff84 	bl	8000500 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80015f8:	f7fe ff8a 	bl	8000510 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 80015fc:	3d01      	subs	r5, #1
 80015fe:	d1f8      	bne.n	80015f2 <main+0x142>
  ch_memcore.basemem = __heap_base__;
 8001600:	4869      	ldr	r0, [pc, #420]	; (80017a8 <main+0x2f8>)
 8001602:	4c6a      	ldr	r4, [pc, #424]	; (80017ac <main+0x2fc>)
  ch_memcore.topmem  = __heap_end__;
 8001604:	496a      	ldr	r1, [pc, #424]	; (80017b0 <main+0x300>)
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001606:	4a6b      	ldr	r2, [pc, #428]	; (80017b4 <main+0x304>)
  tcp->offset = tm.best;
 8001608:	9b02      	ldr	r3, [sp, #8]
 800160a:	6061      	str	r1, [r4, #4]
 800160c:	60bb      	str	r3, [r7, #8]
 */
void chCoreGetStatusX(memory_area_t *map) {

  map->base = ch_memcore.basemem;
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 800160e:	1a09      	subs	r1, r1, r0
  qp->next = qp;
 8001610:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <main+0x308>)
 8001612:	6091      	str	r1, [r2, #8]
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
  mp->provider = provider;
 8001614:	4969      	ldr	r1, [pc, #420]	; (80017bc <main+0x30c>)
 8001616:	6219      	str	r1, [r3, #32]
 8001618:	6399      	str	r1, [r3, #56]	; 0x38
 800161a:	f102 0114 	add.w	r1, r2, #20
  qp->prev = qp;
 800161e:	e9c2 1105 	strd	r1, r1, [r2, #20]
  mp->align = align;
 8001622:	2104      	movs	r1, #4
  ch_memcore.basemem = __heap_base__;
 8001624:	6020      	str	r0, [r4, #0]
 8001626:	61d9      	str	r1, [r3, #28]
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 8001628:	4c65      	ldr	r4, [pc, #404]	; (80017c0 <main+0x310>)
 800162a:	6359      	str	r1, [r3, #52]	; 0x34
 800162c:	4965      	ldr	r1, [pc, #404]	; (80017c4 <main+0x314>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 800162e:	61d5      	str	r5, [r2, #28]
  chCoreGetStatusX(&default_heap.area);
  H_FREE_NEXT(&default_heap.header) = NULL;
  H_FREE_PAGES(&default_heap.header) = 0;
 8001630:	e9c2 5503 	strd	r5, r5, [r2, #12]
  map->base = ch_memcore.basemem;
 8001634:	6050      	str	r0, [r2, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001636:	6011      	str	r1, [r2, #0]

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 8001638:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <main+0x318>)
 800163a:	6422      	str	r2, [r4, #64]	; 0x40
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 800163c:	f103 0210 	add.w	r2, r3, #16
 8001640:	611a      	str	r2, [r3, #16]
  mp->object_size = size;
 8001642:	2214      	movs	r2, #20
 8001644:	619a      	str	r2, [r3, #24]
 8001646:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800164a:	625a      	str	r2, [r3, #36]	; 0x24
 800164c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
 8001652:	221c      	movs	r2, #28
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
 8001656:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
 800165c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
 8001662:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001666:	e9c3 3300 	strd	r3, r3, [r3]
 800166a:	609d      	str	r5, [r3, #8]
  mp->next = NULL;
 800166c:	615d      	str	r5, [r3, #20]
 800166e:	62dd      	str	r5, [r3, #44]	; 0x2c
  ch_system.instances[core_id] = oip;
 8001670:	607c      	str	r4, [r7, #4]
  oip->core_id = core_id;
 8001672:	63a5      	str	r5, [r4, #56]	; 0x38
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
 8001676:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800167a:	f38c 8811 	msr	BASEPRI, ip
  __ASM volatile ("cpsie i" : : : "memory");
 800167e:	b662      	cpsie	i
  tp->epending          = (eventmask_t)0;
 8001680:	e9c4 5536 	strd	r5, r5, [r4, #216]	; 0xd8
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b51      	ldr	r3, [pc, #324]	; (80017cc <main+0x31c>)
  pqp->prio = (tprio_t)0;
 8001686:	60a5      	str	r5, [r4, #8]
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 8001688:	63e5      	str	r5, [r4, #60]	; 0x3c

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 800168a:	61e5      	str	r5, [r4, #28]
 800168c:	68d9      	ldr	r1, [r3, #12]
    tp->owner           = tdp->owner;
 800168e:	f8c4 40a4 	str.w	r4, [r4, #164]	; 0xa4
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8001696:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 8001698:	4a4d      	ldr	r2, [pc, #308]	; (80017d0 <main+0x320>)
 800169a:	430a      	orrs	r2, r1
  tp->object            = NULL;
 800169c:	e9c4 5530 	strd	r5, r5, [r4, #192]	; 0xc0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80016a0:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016a2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016a6:	494b      	ldr	r1, [pc, #300]	; (80017d4 <main+0x324>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016a8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80016ac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016b0:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	2020      	movs	r0, #32
 80016b4:	f042 0201 	orr.w	r2, r2, #1
 80016b8:	600a      	str	r2, [r1, #0]
 80016ba:	77d8      	strb	r0, [r3, #31]
 80016bc:	f883 c022 	strb.w	ip, [r3, #34]	; 0x22
 80016c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  dlhp->next  = dlhp;
 80016c4:	f104 0110 	add.w	r1, r4, #16
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	9301      	str	r3, [sp, #4]
  dlhp->prev  = dlhp;
 80016cc:	e9c4 1104 	strd	r1, r1, [r4, #16]
  tp->hdr.pqueue.prio   = tdp->prio;
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
  tp->realprio          = tdp->prio;
 80016d6:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
  qp->next = qp;
 80016da:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
  qp->prev = qp;
 80016de:	e9c4 1134 	strd	r1, r1, [r4, #208]	; 0xd0
  tp->wabase = (void *)tdp->wbase;
 80016e2:	493d      	ldr	r1, [pc, #244]	; (80017d8 <main+0x328>)
 80016e4:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
  tp->waend  = (void *)tdp->wend;
 80016e8:	493c      	ldr	r1, [pc, #240]	; (80017dc <main+0x32c>)
 80016ea:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
  tp->name              = tdp->name;
 80016ee:	493c      	ldr	r1, [pc, #240]	; (80017e0 <main+0x330>)
 80016f0:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  dlhp->delta = (sysinterval_t)-1;
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016f8:	61a1      	str	r1, [r4, #24]
  lp->next = lp;
 80016fa:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
  tp->wabase = (void *)tdp->wbase;
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <main+0x334>)
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8001700:	9801      	ldr	r0, [sp, #4]
 8001702:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    const THD_DECL(main_thd_desc,
                   "main", oicp->cstack_base, oicp->cstack_end,
                   NORMALPRIO, NULL, NULL, oip
    );

    oip->rlist.current = chThdObjectInit(&oip->mainthread, &main_thd_desc);
 8001706:	f104 0194 	add.w	r1, r4, #148	; 0x94
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800170a:	f04f 0802 	mov.w	r8, #2
 800170e:	60e1      	str	r1, [r4, #12]
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8001710:	4629      	mov	r1, r5
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001712:	f8c4 8020 	str.w	r8, [r4, #32]
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8001716:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
  tp->waend  = (void *)tdp->wend;
 800171a:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800171e:	65e0      	str	r0, [r4, #92]	; 0x5c
 8001720:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8001724:	67e0      	str	r0, [r4, #124]	; 0x7c
  tp->name              = tdp->name;
 8001726:	4830      	ldr	r0, [pc, #192]	; (80017e8 <main+0x338>)
 8001728:	6660      	str	r0, [r4, #100]	; 0x64
#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(oip, oip->rlist.current);
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 800172a:	2201      	movs	r2, #1
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 800172c:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
  p->prev->next = p;
 8001730:	f104 0eb8 	add.w	lr, r4, #184	; 0xb8
 8001734:	f104 0a68 	add.w	sl, r4, #104	; 0x68
  p->prev       = qp->prev;
 8001738:	eb04 010c 	add.w	r1, r4, ip
 800173c:	6520      	str	r0, [r4, #80]	; 0x50
 800173e:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
  tp->refs              = (trefs_t)1;
 8001742:	f884 20b2 	strb.w	r2, [r4, #178]	; 0xb2
  tp->hdr.pqueue.prio   = tdp->prio;
 8001746:	64e2      	str	r2, [r4, #76]	; 0x4c
  tp->realprio          = tdp->prio;
 8001748:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  tp->refs              = (trefs_t)1;
 800174c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 8001750:	4826      	ldr	r0, [pc, #152]	; (80017ec <main+0x33c>)
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <main+0x340>)
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 8001754:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
  qp->next = qp;
 8001758:	f104 0b80 	add.w	fp, r4, #128	; 0x80
  p->prev->next = p;
 800175c:	f104 0944 	add.w	r9, r4, #68	; 0x44
  tp->object            = NULL;
 8001760:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
  tp->epending          = (eventmask_t)0;
 8001764:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
  qp->prev = qp;
 8001768:	e9c4 bb20 	strd	fp, fp, [r4, #128]	; 0x80
  p->prev       = pqp->prev;
 800176c:	e9c4 4411 	strd	r4, r4, [r4, #68]	; 0x44
  p->prev       = qp->prev;
 8001770:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 8001774:	f887 8000 	strb.w	r8, [r7]
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 8001778:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  p->next       = qp;
 800177c:	66a1      	str	r1, [r4, #104]	; 0x68
 800177e:	e039      	b.n	80017f4 <main+0x344>
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000
 8001788:	e000e100 	.word	0xe000e100
 800178c:	20000800 	.word	0x20000800
 8001790:	20000ad0 	.word	0x20000ad0
 8001794:	08001a70 	.word	0x08001a70
 8001798:	080004e1 	.word	0x080004e1
 800179c:	40004400 	.word	0x40004400
 80017a0:	02aea540 	.word	0x02aea540
 80017a4:	e0042000 	.word	0xe0042000
 80017a8:	20000ca0 	.word	0x20000ca0
 80017ac:	20000ac8 	.word	0x20000ac8
 80017b0:	20020000 	.word	0x20020000
 80017b4:	20000adc 	.word	0x20000adc
 80017b8:	20000a80 	.word	0x20000a80
 80017bc:	080005a1 	.word	0x080005a1
 80017c0:	20000888 	.word	0x20000888
 80017c4:	08000561 	.word	0x08000561
 80017c8:	080019dc 	.word	0x080019dc
 80017cc:	e000ed00 	.word	0xe000ed00
 80017d0:	05fa0300 	.word	0x05fa0300
 80017d4:	e0001000 	.word	0xe0001000
 80017d8:	20000400 	.word	0x20000400
 80017dc:	20000800 	.word	0x20000800
 80017e0:	080019c0 	.word	0x080019c0
 80017e4:	20000980 	.word	0x20000980
 80017e8:	080019c8 	.word	0x080019c8
 80017ec:	080004f1 	.word	0x080004f1
 80017f0:	080002d1 	.word	0x080002d1
  p->prev->next = p;
 80017f4:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
  p->prev       = qp->prev;
 80017f8:	f8c4 e06c 	str.w	lr, [r4, #108]	; 0x6c
  tp->wabase = (void *)tdp->wbase;
 80017fc:	65a3      	str	r3, [r4, #88]	; 0x58
    tp->owner           = tdp->owner;
 80017fe:	6564      	str	r4, [r4, #84]	; 0x54
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
 8001800:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
 8001804:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  p->prev->next = p;
 8001808:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
  qp->prev      = p;
 800180c:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 8001810:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  pqp->prev     = p;
 8001814:	e9c4 9900 	strd	r9, r9, [r4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001818:	f385 8811 	msr	BASEPRI, r5
 800181c:	f38c 8811 	msr	BASEPRI, ip
  if (sdp->state == SD_STOP) {
 8001820:	7a33      	ldrb	r3, [r6, #8]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d109      	bne.n	800183a <main+0x38a>
      rccEnableUSART2(true);
 8001826:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <main+0x4e0>)
 8001828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
 8001830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001832:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001836:	661a      	str	r2, [r3, #96]	; 0x60
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800183a:	4956      	ldr	r1, [pc, #344]	; (8001994 <main+0x4e4>)
 800183c:	e9d6 321d 	ldrd	r3, r2, [r6, #116]	; 0x74
 8001840:	f502 4296 	add.w	r2, r2, #19200	; 0x4b00
 8001844:	fba1 1202 	umull	r1, r2, r1, r2
 8001848:	0b12      	lsrs	r2, r2, #12
  u->BRR = brr;
 800184a:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800184c:	2240      	movs	r2, #64	; 0x40
 800184e:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001850:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001852:	f242 122c 	movw	r2, #8492	; 0x212c
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001856:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001858:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800185e:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001860:	685b      	ldr	r3, [r3, #4]
    sdp->state = SD_READY;
 8001862:	2002      	movs	r0, #2
    sdp->rxmask = 0xFF;
 8001864:	23ff      	movs	r3, #255	; 0xff
 8001866:	f886 307c 	strb.w	r3, [r6, #124]	; 0x7c
 800186a:	7230      	strb	r0, [r6, #8]
 800186c:	f382 8811 	msr	BASEPRI, r2
  tp->wabase = (void *)tdp->wbase;
 8001870:	4b49      	ldr	r3, [pc, #292]	; (8001998 <main+0x4e8>)
  tp->refs              = (trefs_t)1;
 8001872:	f883 115e 	strb.w	r1, [r3, #350]	; 0x15e
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
 8001876:	4949      	ldr	r1, [pc, #292]	; (800199c <main+0x4ec>)
 8001878:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  tp->hdr.pqueue.prio   = tdp->prio;
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
  tp->realprio          = tdp->prio;
 8001882:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  qp->next = qp;
 8001886:	f503 71be 	add.w	r1, r3, #380	; 0x17c
  qp->prev = qp;
 800188a:	e9c3 115f 	strd	r1, r1, [r3, #380]	; 0x17c
  tp->name              = tdp->name;
 800188e:	4944      	ldr	r1, [pc, #272]	; (80019a0 <main+0x4f0>)
 8001890:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
 8001894:	4943      	ldr	r1, [pc, #268]	; (80019a4 <main+0x4f4>)
 8001896:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
  tp->waend  = (void *)tdp->wend;
 800189a:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800189e:	f8c3 1158 	str.w	r1, [r3, #344]	; 0x158
  lp->next = lp;
 80018a2:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 80018a6:	f8c3 1178 	str.w	r1, [r3, #376]	; 0x178
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
 80018aa:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  tp->state             = CH_STATE_WTSTART;
 80018ae:	f8a3 015c 	strh.w	r0, [r3, #348]	; 0x15c
    tp->owner           = tdp->owner;
 80018b2:	e9c3 4354 	strd	r4, r3, [r3, #336]	; 0x150
  tp->object            = NULL;
 80018b6:	e9c3 225b 	strd	r2, r2, [r3, #364]	; 0x16c
  tp->epending          = (eventmask_t)0;
 80018ba:	e9c3 2261 	strd	r2, r2, [r3, #388]	; 0x184
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
 80018be:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 80018c2:	2030      	movs	r0, #48	; 0x30
 80018c4:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
 80018c8:	f380 8811 	msr	BASEPRI, r0
  REG_INSERT(tp->owner, tp);
 80018cc:	f8d3 0150 	ldr.w	r0, [r3, #336]	; 0x150
  thread_t *otp = __instance_get_currthread(oip);
 80018d0:	68e1      	ldr	r1, [r4, #12]
  p->prev       = qp->prev;
 80018d2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80018d4:	f8c3 6168 	str.w	r6, [r3, #360]	; 0x168
  p->prev->next = p;
 80018d8:	f503 75b2 	add.w	r5, r3, #356	; 0x164
 80018dc:	f100 0730 	add.w	r7, r0, #48	; 0x30
  p->next       = qp;
 80018e0:	f8c3 7164 	str.w	r7, [r3, #356]	; 0x164
  p->prev->next = p;
 80018e4:	6035      	str	r5, [r6, #0]
  qp->prev      = p;
 80018e6:	6345      	str	r5, [r0, #52]	; 0x34
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 80018e8:	f8d3 6148 	ldr.w	r6, [r3, #328]	; 0x148
 80018ec:	688d      	ldr	r5, [r1, #8]
  ntp->u.rdymsg = msg;
 80018ee:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 80018f2:	42ae      	cmp	r6, r5
 80018f4:	d93f      	bls.n	8001976 <main+0x4c6>
  tp->state = CH_STATE_READY;
 80018f6:	770a      	strb	r2, [r1, #28]
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 80018f8:	690a      	ldr	r2, [r1, #16]
    pqp = pqp->next;
 80018fa:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio > p->prio));
 80018fc:	6890      	ldr	r0, [r2, #8]
 80018fe:	4285      	cmp	r5, r0
 8001900:	d3fb      	bcc.n	80018fa <main+0x44a>
  p->prev       = pqp->prev;
 8001902:	6850      	ldr	r0, [r2, #4]
  p->next       = pqp;
 8001904:	600a      	str	r2, [r1, #0]
  p->prev       = pqp->prev;
 8001906:	6048      	str	r0, [r1, #4]
  p->prev->next = p;
 8001908:	6001      	str	r1, [r0, #0]
  pqp->prev     = p;
 800190a:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 800190c:	2201      	movs	r2, #1
    __instance_set_currthread(oip, ntp);
 800190e:	4826      	ldr	r0, [pc, #152]	; (80019a8 <main+0x4f8>)
    ntp->state = CH_STATE_CURRENT;
 8001910:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    __instance_set_currthread(oip, ntp);
 8001914:	60e0      	str	r0, [r4, #12]
    chSysSwitch(ntp, otp);
 8001916:	f7fe fcd3 	bl	80002c0 <__port_switch>
 800191a:	2500      	movs	r5, #0
 800191c:	f385 8811 	msr	BASEPRI, r5
 8001920:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80019ac <main+0x4fc>
 8001924:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80019b0 <main+0x500>
    /*
    * Normal main() thread activity, in this demo it does nothing except
    * sleeping in a loop and check the button state.
    */
    while (true) {
        if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 8001928:	4f22      	ldr	r7, [pc, #136]	; (80019b4 <main+0x504>)
            StopLED = 1;
 800192a:	2601      	movs	r6, #1
        if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	0492      	lsls	r2, r2, #18
 8001930:	f04f 0330 	mov.w	r3, #48	; 0x30
            StopLED = 1;
 8001934:	bf58      	it	pl
 8001936:	f8c9 6000 	strpl.w	r6, [r9]
 800193a:	f383 8811 	msr	BASEPRI, r3
  vtp->par     = par;
 800193e:	68e3      	ldr	r3, [r4, #12]
  vtp->reload  = (sysinterval_t)0;
 8001940:	9507      	str	r5, [sp, #28]
  vt_enqueue(vtlp, vtp, delay);
 8001942:	f241 3188 	movw	r1, #5000	; 0x1388
 8001946:	a802      	add	r0, sp, #8
  vtp->func    = vtfunc;
 8001948:	e9cd 8305 	strd	r8, r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 800194c:	f7fe ff40 	bl	80007d0 <vt_enqueue.constprop.0>
  thread_t *otp = __instance_get_currthread(oip);
 8001950:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8001952:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8001954:	2308      	movs	r3, #8
 8001956:	770b      	strb	r3, [r1, #28]
  pqp->next       = p->next;
 8001958:	6803      	ldr	r3, [r0, #0]
 800195a:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 800195c:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800195e:	7706      	strb	r6, [r0, #28]
  __instance_set_currthread(oip, ntp);
 8001960:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8001962:	f7fe fcad 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8001966:	9b02      	ldr	r3, [sp, #8]
      chVTDoResetI(&vt);
 8001968:	a802      	add	r0, sp, #8
    if (chVTIsArmedI(&vt)) {
 800196a:	b10b      	cbz	r3, 8001970 <main+0x4c0>
      chVTDoResetI(&vt);
 800196c:	f7fe fe28 	bl	80005c0 <chVTDoResetI>
 8001970:	f385 8811 	msr	BASEPRI, r5
}
 8001974:	e7da      	b.n	800192c <main+0x47c>
  tp->state = CH_STATE_READY;
 8001976:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    pqp = pqp->next;
 800197a:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800197c:	6882      	ldr	r2, [r0, #8]
 800197e:	4296      	cmp	r6, r2
 8001980:	d9fb      	bls.n	800197a <main+0x4ca>
  p->prev       = pqp->prev;
 8001982:	6842      	ldr	r2, [r0, #4]
 8001984:	e9c3 0250 	strd	r0, r2, [r3, #320]	; 0x140
  p->prev->next = p;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <main+0x4f8>)
 800198a:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 800198c:	6043      	str	r3, [r0, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800198e:	e7c4      	b.n	800191a <main+0x46a>
 8001990:	40023800 	.word	0x40023800
 8001994:	1b4e81b5 	.word	0x1b4e81b5
 8001998:	20000b00 	.word	0x20000b00
 800199c:	080002d1 	.word	0x080002d1
 80019a0:	080019d0 	.word	0x080019d0
 80019a4:	08000c41 	.word	0x08000c41
 80019a8:	20000c40 	.word	0x20000c40
 80019ac:	20000880 	.word	0x20000880
 80019b0:	08000671 	.word	0x08000671
 80019b4:	40020800 	.word	0x40020800
